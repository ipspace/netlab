[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [h1]
ok: [h2]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [h2]
ok: [h1]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [pe1]
skipping: [pe2]
skipping: [dut]
skipping: [p2]
skipping: [h1]
skipping: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for pe1, pe2, dut, p2, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [h1]
ok: [h2]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [pe1]
ok: [pe2]
ok: [h1]
ok: [p2]
ok: [h2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [pe1] => 
  msg: |-
    initial configuration for pe1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    ip link set eth2 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname pe1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description pe1 -> h1 [stub]
     ip address 172.16.0.3/24
    !
    interface eth2
     no shutdown
     description pe1 -> dut
     ip address 172.16.1.3/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [pe2] => 
  msg: |-
    initial configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    ip link set eth2 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname pe2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description pe2 -> p2
     ip address 172.16.3.4/24
    !
    interface eth2
     no shutdown
     description pe2 -> h2 [stub]
     ip address 172.16.4.4/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p2] => 
  msg: |-
    initial configuration for p2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    ip link set eth2 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.6/32
    !
    interface eth1
     no shutdown
     description p2 -> dut
     ip address 172.16.2.6/24
    !
    interface eth2
     no shutdown
     description p2 -> pe2
     ip address 172.16.3.6/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.4.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.4.2/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    # lan prefix: 172.16.0.0/16 local subnet: 172.16.4.0/24
    set +e
    ip route del 172.16.0.0/16 2>/dev/null
    set -e
    ip route add 172.16.0.0/16 via 172.16.4.4
    # loopback prefix: 10.0.0.0/24 local subnet: 172.16.4.0/24
    set +e
    ip route del 10.0.0.0/24 2>/dev/null
    set -e
    ip route add 10.0.0.0/24 via 172.16.4.4
    # mgmt prefix: 192.168.17.0/24 local subnet: 172.16.4.0/24
    # p2p prefix: 10.1.0.0/16 local subnet: 172.16.4.0/24
    set +e
    ip route del 10.1.0.0/16 2>/dev/null
    set -e
    ip route add 10.1.0.0/16 via 172.16.4.4
    # router_id prefix: 10.0.0.0/24 local subnet: 172.16.4.0/24
    # vrf_loopback prefix: 10.2.0.0/24 local subnet: 172.16.4.0/24
    set +e
    ip route del 10.2.0.0/24 2>/dev/null
    set -e
    ip route add 10.2.0.0/24 via 172.16.4.4
    #
    # Print the final routing table
    ip route
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    # lan prefix: 172.16.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 172.16.0.0/16 2>/dev/null
    set -e
    ip route add 172.16.0.0/16 via 172.16.0.3
    # loopback prefix: 10.0.0.0/24 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.0.0.0/24 2>/dev/null
    set -e
    ip route add 10.0.0.0/24 via 172.16.0.3
    # mgmt prefix: 192.168.17.0/24 local subnet: 172.16.0.0/24
    # p2p prefix: 10.1.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.1.0.0/16 2>/dev/null
    set -e
    ip route add 10.1.0.0/16 via 172.16.0.3
    # router_id prefix: 10.0.0.0/24 local subnet: 172.16.0.0/24
    # vrf_loopback prefix: 10.2.0.0/24 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.2.0.0/24 2>/dev/null
    set -e
    ip route add 10.2.0.0/24 via 172.16.0.3
    #
    # Print the final routing table
    ip route
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host h1 172.16.0.1
    ip host h2 172.16.4.2
    ip host p2 10.0.0.6 172.16.2.6 172.16.3.6
    ip host pe1 10.0.0.3 172.16.0.3 172.16.1.3
    ip host pe2 10.0.0.4 172.16.3.4 172.16.4.4
    !
    ip routing
    !
    !
    interface Loopback0
     ip address 10.0.0.5 255.255.255.255
    !
    interface GigabitEthernet1
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet2
     no shutdown
     description dut -> pe1
     ip address 172.16.1.5 255.255.255.0
    !
    interface GigabitEthernet3
     no shutdown
     description dut -> p2
     ip address 172.16.2.5 255.255.255.0
    !
    !
    line vty 0 4
     exec-timeout 0 0
    !
    no banner exec
    no banner login
    no banner incoming

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [h2]
ok: [h1]
ok: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for pe1, pe2, p2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/linux/initial-clab.yml for h1, h2

TASK [Attempt to load VRF kernel module] ***************************************
changed: [p2 -> localhost]
changed: [pe1 -> localhost]
changed: [pe2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [pe1]
skipping: [pe2]
skipping: [p2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for pe1, pe2, p2

TASK [template] ****************************************************************
changed: [pe2]
changed: [pe1]
changed: [p2]

TASK [set_fact] ****************************************************************
ok: [pe1]
ok: [pe2]
ok: [p2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [pe2]
changed: [pe1]
changed: [p2]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [pe1]
skipping: [pe2]
skipping: [p2]

TASK [ios_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/ios.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [dut]

TASK [set_fact] ****************************************************************
ok: [h1]
ok: [h2]

TASK [Create initial container setup from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Initial container configuration via /tmp/config-tuzrqRHi-h1.sh] **********
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [file] ********************************************************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [p2]
ok: [pe2]
ok: [pe1]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p2, pe1, pe2 => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p2, pe1, pe2 => (item=isis)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p2, pe1, pe2 => (item=sr)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [p2]
ok: [pe2]
ok: [pe1]
ok: [dut]

TASK [Find configuration template for bgp] *************************************
skipping: [dut]
skipping: [p2]
ok: [pe1]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [p2]
ok: [pe1] => 
  msg: |-
    bgp configuration for pe1
    =========================================
    !
    router bgp 65001
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 10.0.0.4 remote-as 65001
      neighbor 10.0.0.4 description pe2
      neighbor 10.0.0.4 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 172.16.0.0/24
    !
    !
      neighbor 10.0.0.4 activate
      neighbor 10.0.0.4 next-hop-self
      no neighbor 10.0.0.4 send-community all
      neighbor 10.0.0.4 send-community standard
      neighbor 10.0.0.4 send-community large
      neighbor 10.0.0.4 send-community extended
    !
    !
    !
    do write
ok: [pe2] => 
  msg: |-
    bgp configuration for pe2
    =========================================
    !
    router bgp 65001
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.0.0.3 remote-as 65001
      neighbor 10.0.0.3 description pe1
      neighbor 10.0.0.3 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 172.16.4.0/24
    !
    !
      neighbor 10.0.0.3 activate
      neighbor 10.0.0.3 next-hop-self
      no neighbor 10.0.0.3 send-community all
      neighbor 10.0.0.3 send-community standard
      neighbor 10.0.0.3 send-community large
      neighbor 10.0.0.3 send-community extended
    !
    !
    !
    do write

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [dut]
skipping: [p2]
ok: [pe1]
ok: [pe2]

TASK [Deploy bgp configuration] ************************************************
skipping: [dut]
skipping: [p2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for pe1, pe2

TASK [template] ****************************************************************
changed: [pe1]
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe1]
ok: [pe2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [pe1]
skipping: [pe2]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [pe2]
changed: [pe1]

TASK [Figure out whether to deploy the module isis on current device] **********
ok: [p2]
ok: [pe1]
ok: [pe2]
ok: [dut]

TASK [Find configuration template for isis] ************************************
ok: [p2]
ok: [pe1]
ok: [pe2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p2] => 
  msg: |-
    isis configuration for p2
    =========================================
    !
    !
    !
    router isis Gandalf
     log-adjacency-changes
     hostname dynamic
     is-type level-2
     metric-style wide
     lsp-timers gen-interval 1 refresh-interval 900 max-lifetime 1800
     net 49.0001.0000.0000.0006.00
  
    !
    interface eth1
    ! p2 -> dut
     ip router isis Gandalf
     isis network point-to-point
    !
    interface eth2
    ! p2 -> pe2
     ip router isis Gandalf
     isis network point-to-point
    !
  
    !
    interface lo
     ip router isis Gandalf
    !
    do write
ok: [pe1] => 
  msg: |-
    isis configuration for pe1
    =========================================
    !
    !
    !
    router isis Gandalf
     log-adjacency-changes
     hostname dynamic
     is-type level-2
     metric-style wide
     lsp-timers gen-interval 1 refresh-interval 900 max-lifetime 1800
     net 49.0001.0000.0000.0003.00
  
    !
    interface eth2
    ! pe1 -> dut
     ip router isis Gandalf
     isis network point-to-point
    !
  
    !
    interface lo
     ip router isis Gandalf
    !
    do write
ok: [pe2] => 
  msg: |-
    isis configuration for pe2
    =========================================
    !
    !
    !
    router isis Gandalf
     log-adjacency-changes
     hostname dynamic
     is-type level-2
     metric-style wide
     lsp-timers gen-interval 1 refresh-interval 900 max-lifetime 1800
     net 49.0001.0000.0000.0004.00
  
    !
    interface eth1
    ! pe2 -> p2
     ip router isis Gandalf
     isis network point-to-point
    !
  
    !
    interface lo
     ip router isis Gandalf
    !
    do write
ok: [dut] => 
  msg: |-
    isis configuration for dut
    =========================================
    !
    !
    interface Loopback0
      ip router isis Gandalf
    !
    interface GigabitEthernet2
    ! dut -> pe1
      ip router isis Gandalf
      isis network point-to-point
    !
    interface GigabitEthernet3
    ! dut -> p2
      ip router isis Gandalf
      isis network point-to-point
    !
    !
    router isis Gandalf
      log-adjacency-changes
      hostname dynamic
      is-type level-2
      metric-style wide
      net 49.0001.0000.0000.0005.00

TASK [Find configuration deployment deploy_script for isis] ********************
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [Deploy isis configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for p2, pe1, pe2

TASK [ios_config: deploying isis from /home/pipi/net101/tools/netsim/ansible/templates/isis/ios.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [pe2]
changed: [pe1]
changed: [p2]

TASK [set_fact] ****************************************************************
ok: [p2]
ok: [pe1]
ok: [pe2]

TASK [run /tmp/config.sh to deploy isis config from /home/pipi/net101/tools/netsim/ansible/templates/isis/frr.j2] ***
skipping: [p2]
skipping: [pe1]
skipping: [pe2]

TASK [run vtysh to import isis config from /home/pipi/net101/tools/netsim/ansible/templates/isis/frr.j2] ***
changed: [pe2]
changed: [pe1]
changed: [p2]

TASK [Figure out whether to deploy the module sr on current device] ************
ok: [p2]
ok: [pe1]
ok: [pe2]
ok: [dut]

TASK [Find configuration template for sr] **************************************
ok: [p2]
ok: [pe2]
ok: [pe1]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p2] => 
  msg: |-
    sr configuration for p2
    =========================================
    #!/bin/bash
    #
    set -e
    sysctl -w net.mpls.platform_labels=1048575
    #
    # Enable MPLS data plane on transit interfaces
    #
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
    cat >/tmp/config <<CONFIG
    !
    router isis Gandalf
      segment-routing on
      mpls-te router-address 10.0.0.6
      segment-routing prefix 10.0.0.6/32 index 6
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [pe2] => 
  msg: |-
    sr configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e
    sysctl -w net.mpls.platform_labels=1048575
    #
    # Enable MPLS data plane on transit interfaces
    #
    sysctl -w net.mpls.conf.eth1.input=1
    cat >/tmp/config <<CONFIG
    !
    router isis Gandalf
      segment-routing on
      mpls-te router-address 10.0.0.4
      segment-routing prefix 10.0.0.4/32 index 4
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [pe1] => 
  msg: |-
    sr configuration for pe1
    =========================================
    #!/bin/bash
    #
    set -e
    sysctl -w net.mpls.platform_labels=1048575
    #
    # Enable MPLS data plane on transit interfaces
    #
    sysctl -w net.mpls.conf.eth2.input=1
    cat >/tmp/config <<CONFIG
    !
    router isis Gandalf
      segment-routing on
      mpls-te router-address 10.0.0.3
      segment-routing prefix 10.0.0.3/32 index 3
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    sr configuration for dut
    =========================================
    mpls ip
    !
    segment-routing mpls
     !
     set-attributes
      address-family ipv4
       explicit-null
     !
     connected-prefix-sid-map
      address-family ipv4
       10.0.0.5/32 index 5 range 1
    !
    router isis Gandalf
     segment-routing mpls

TASK [Find configuration deployment deploy_script for sr] **********************
ok: [p2]
ok: [pe2]
ok: [pe1]
ok: [dut]

TASK [Deploy sr configuration] *************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for p2, pe1, pe2

TASK [ios_config: deploying sr from /home/pipi/net101/tools/netsim/ansible/templates/sr/ios.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [p2]
changed: [pe2]
changed: [pe1]

TASK [set_fact] ****************************************************************
ok: [p2]
ok: [pe1]
ok: [pe2]

TASK [run /tmp/config.sh to deploy sr config from /home/pipi/net101/tools/netsim/ansible/templates/sr/frr.j2] ***
changed: [p2]
changed: [pe1]
changed: [pe2]

TASK [run vtysh to import sr config from /home/pipi/net101/tools/netsim/ansible/templates/sr/frr.j2] ***
skipping: [p2]
skipping: [pe1]
skipping: [pe2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=26   changed=3    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
h1                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h2                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
p2                         : ok=34   changed=7    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
pe1                        : ok=41   changed=9    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
pe2                        : ok=41   changed=9    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   



The tested device (DUT) is a P-router running IS-IS and SR-MPLS in an
IPv4-only network. The validation test checks end-to-end connectivity across a
BGP-free MPLS core.

