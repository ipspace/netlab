[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Find device readiness script] ********************************************
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Wait for device to become ready] *****************************************
skipping: [c1]
skipping: [c2]
skipping: [server]
skipping: [relay]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, c2, server, relay

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Find configuration template for normalize] *******************************
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [server]
skipping: [relay]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [c1]
skipping: [c2]
skipping: [server]
ok: [relay] => 
  msg: |-
    normalize configuration for relay
    =========================================
    !
    interface Ethernet1
     no switchport
     mac-address 52dc.cafe.0101
    !
    interface Ethernet2
     no switchport
     mac-address 52dc.cafe.0102

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [c1]
skipping: [c2]
skipping: [server]
ok: [relay]

TASK [Deploy normalize configuration] ******************************************
skipping: [c1]
skipping: [c2]
skipping: [server]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for relay

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [relay]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, c2, server, relay

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [Find configuration template for initial] *********************************
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [server]
skipping: [relay]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [c1] => 
  msg: |-
    initial configuration for c1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname c1
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.2 c1
    10.0.0.3 c2
    172.16.1.4 server GigabitEthernet2.server
    10.0.0.1 relay
    172.16.0.1 Ethernet1.c_vrf.relay
    172.16.1.1 Ethernet2.relay
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
  
    echo "INIT: Configuring system wide default MTU policy"
    cat > /etc/network/ifupdown2/policy.d/mtu.json <<CONFIG
    { "address": { "defaults": { "mtu": "1500" } } }
    CONFIG
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.2/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['dhcp']
    #
    #
    # Enable FRR daemons
    #
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    !
    interface swp1
    ! no shutdown
     description c1 -> [c2,relay]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [c2] => 
  msg: |-
    initial configuration for c2
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname c2
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.2 c1
    10.0.0.3 c2
    172.16.1.4 server GigabitEthernet2.server
    10.0.0.1 relay
    172.16.0.1 Ethernet1.c_vrf.relay
    172.16.1.1 Ethernet2.relay
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
  
    echo "INIT: Configuring system wide default MTU policy"
    cat > /etc/network/ifupdown2/policy.d/mtu.json <<CONFIG
    { "address": { "defaults": { "mtu": "1500" } } }
    CONFIG
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.3/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['dhcp']
    #
    #
    # Enable FRR daemons
    #
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    !
    interface swp1
    ! no shutdown
     description c2 -> [c1,relay]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [relay] => 
  msg: |-
    initial configuration for relay
    =========================================
    hostname relay
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    vrf instance c_vrf
     rd 65000:1
    !
    ip routing vrf c_vrf
    !
    !
    ip host c1 10.0.0.2
    ip host c2 10.0.0.3
    ip host relay-cvrf 172.16.0.1
    ip host server 172.16.1.4
    !
    interface Management1
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.1/32
    !
    interface Ethernet1
     no switchport
     vrf c_vrf
     description relay -> [c1,c2]
     ip address 172.16.0.1/24
    !
     mac-address 52dc.cafe.0101
     no shutdown
    !
    interface Ethernet2
     no switchport
     description relay -> server [stub]
     ip address 172.16.1.1/24
    !
     mac-address 52dc.cafe.0102
     no shutdown
    !
ok: [server] => 
  msg: |-
    initial configuration for server
    =========================================
    hostname server
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host c1 10.0.0.2
    ip host c2 10.0.0.3
    ip host relay 10.0.0.1 172.16.1.1
    ip host relay-c_vrf 172.16.0.1
    !
    ip routing
    !
    !
    !
    interface GigabitEthernet1
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet2
     description server -> relay [stub]
     ip address 172.16.1.4 255.255.255.0
     no shutdown
    !
    !
    line vty 0 4
     exec-timeout 0 0
    !
    no banner exec
    no banner login
    no banner incoming

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for c1, c2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for server
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for relay

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
ok: [c1]
ok: [c2]

TASK [Create local temporary file] *********************************************
changed: [c2 -> localhost]
changed: [c1 -> localhost]

TASK [Create initial config script in local temporary file] ********************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [c1]
changed: [c2]

TASK [Remove temporary file /tmp/ansible.c1.v7hzsrg3temp] **********************
changed: [c2 -> localhost]
changed: [c1 -> localhost]

TASK [ios_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/ios.j2] ***
changed: [server]

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [relay]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, c2, relay, server => (item=vrf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, c2, relay, server => (item=dhcp)

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Find configuration template for vrf] *************************************
skipping: [c1]
skipping: [c2]
skipping: [server]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [relay]
skipping: [server]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [c1]
skipping: [c2]
skipping: [server]
ok: [relay] => 
  msg: |-
    vrf configuration for relay
    =========================================

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [c1]
skipping: [c2]
skipping: [server]
ok: [relay]

TASK [Deploy vrf configuration] ************************************************
skipping: [c1]
skipping: [c2]
skipping: [server]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for relay

TASK [eos_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/eos.j2] ***
ok: [relay]

TASK [Figure out whether to deploy the module dhcp on current device] **********
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Find configuration template for dhcp] ************************************
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [relay]
skipping: [server]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [c1] => 
  msg: |-
    dhcp configuration for c1
    =========================================
    #!/bin/bash
    #
    # Disable IPv6 RA on DHCPv6 client interfaces
    #
    #
    # Configure DHCP clients on interfaces
    #
    set -e
    #
    echo "DHCP: set IP addresses on interfaces"
    cat >/etc/network/interfaces.d/12-dhcp.intf <<CONFIG
    auto swp1
    iface swp1 inet dhcp
    CONFIG
    #
    echo "DHCP: executing ifup"
    nohup bash -c 'ifreload -a || ifreload -a' &
ok: [c2] => 
  msg: |-
    dhcp configuration for c2
    =========================================
    #!/bin/bash
    #
    # Disable IPv6 RA on DHCPv6 client interfaces
    #
    #
    # Configure DHCP clients on interfaces
    #
    set -e
    #
    echo "DHCP: set IP addresses on interfaces"
    cat >/etc/network/interfaces.d/12-dhcp.intf <<CONFIG
    auto swp1
    iface swp1 inet dhcp
    CONFIG
    #
    echo "DHCP: executing ifup"
    nohup bash -c 'ifreload -a || ifreload -a' &
ok: [relay] => 
  msg: |-
    dhcp configuration for relay
    =========================================
    ip dhcp relay information option
    !
    interface Ethernet1
      ip helper-address 172.16.1.4 vrf default
ok: [server] => 
  msg: |-
    dhcp configuration for server
    =========================================
    ip dhcp excluded-address vrf c_vrf 172.16.0.1
    !
    ip dhcp pool links_1_
     vrf c_vrf
     network 172.16.0.0 255.255.255.0
     default-router 172.16.0.1
    !
    ip dhcp relay information option vpn
    !

TASK [Find configuration deployment deploy_script for dhcp] ********************
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [Deploy dhcp configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for c1, c2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for relay
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for server

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/dhcp/cumulus.j2] ***
ok: [c1]
ok: [c2]

TASK [Create local temporary file] *********************************************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [Create dhcp config script in local temporary file] ***********************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [c1]
changed: [c2]

TASK [Remove temporary file /tmp/ansible.c1.0hu2e280temp] **********************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [eos_config: deploying dhcp from /home/pipi/net101/tools/netsim/ansible/templates/dhcp/eos.j2] ***
changed: [relay]

TASK [ios_config: deploying dhcp from /home/pipi/net101/tools/netsim/ansible/templates/dhcp/ios.j2] ***
changed: [server]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-custom-config.yml for c1, c2 => (item=bounce)

TASK [Find configuration template] *********************************************
ok: [c1]
ok: [c2]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]

TASK [Check is the configuration template is a file] ***************************
ok: [c1 -> localhost]
ok: [c2 -> localhost]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]

TASK [Process template /home/pipi/net101/tools/tests/integration/dhcp/bounce.cumulus.j2 for c1] ***
skipping: [c1]
skipping: [c2]

TASK [Find custom configuration deployment script] *****************************
ok: [c1]
ok: [c2]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for c1, c2

TASK [Render device configuration from /home/pipi/net101/tools/tests/integration/dhcp/bounce.cumulus.j2] ***
ok: [c1]
ok: [c2]

TASK [Create local temporary file] *********************************************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [Create bounce config script in local temporary file] *********************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [c1]
changed: [c2]

TASK [Remove temporary file /tmp/ansible.c1.44e6r_o5temp] **********************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

PLAY RECAP *********************************************************************
c1                         : ok=40   changed=12   unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
c2                         : ok=40   changed=12   unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
relay                      : ok=31   changed=3    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
server                     : ok=22   changed=2    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   



Use this topology to test the inter-VRF DHCPv4 relay functionality of your
device. Use 'netlab validate' to check whether your device propagated DHCPv4
requests from DHCP clients in VRF c_vrf to DHCP servers in global routing
table.

