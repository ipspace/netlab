[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [server]
ok: [c1]
ok: [c2]

TASK [Find device readiness script] ********************************************
ok: [server]
ok: [c1]
ok: [c2]

TASK [Wait for device to become ready] *****************************************
skipping: [server]
skipping: [c1]
skipping: [c2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for server, c1, c2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [server]
ok: [c1]
ok: [c2]

TASK [Find configuration template for normalize] *******************************
ok: [server]
ok: [c1]
ok: [c2]

TASK [fail] ********************************************************************
skipping: [server]
skipping: [c1]
skipping: [c2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [server]
ok: [c1] => 
  msg: |-
    normalize configuration for c1
    =========================================
    !
    interface Ethernet1
     no switchport
     mac-address 52dc.cafe.0101
ok: [c2] => 
  msg: |-
    normalize configuration for c2
    =========================================
    !
    interface Ethernet1
     no switchport
     mac-address 52dc.cafe.0201

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [server]
ok: [c1]
ok: [c2]

TASK [Deploy normalize configuration] ******************************************
skipping: [server]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for c1, c2

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [c1]
changed: [c2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for server, c1, c2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [server]
ok: [c1]
ok: [c2]

TASK [Find configuration template for initial] *********************************
ok: [server]
ok: [c1]
ok: [c2]

TASK [fail] ********************************************************************
skipping: [server]
skipping: [c1]
skipping: [c2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [server] => 
  msg: |-
    initial configuration for server
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [c1] => 
  msg: |-
    initial configuration for c1
    =========================================
    hostname c1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    !
    ip host c2 10.0.0.2
    ip host server 172.16.0.3
    !
    interface Management1
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.1/32
    !
    interface Ethernet1
     no switchport
     description c1 -> [c2,server]
    !
     mac-address 52dc.cafe.0101
     no shutdown
    !
ok: [c2] => 
  msg: |-
    initial configuration for c2
    =========================================
    hostname c2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    !
    ip host c1 10.0.0.1
    ip host server 172.16.0.3
    !
    interface Management1
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.2/32
    !
    interface Ethernet1
     no switchport
     description c2 -> [c1,server]
    !
     mac-address 52dc.cafe.0201
     no shutdown
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [server]
ok: [c1]
ok: [c2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for server
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for c1, c2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [server]

TASK [Create a temporary file for the rendered script] *************************
changed: [server -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [server -> localhost]

TASK [Copy script into running container at /tmp/config-server_initial.sh] *****
skipping: [server]

TASK [Execute /tmp/config-server_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [server]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [server -> localhost]

TASK [Remove temporary file /tmp/server_initial-xwnhty0o.sh] *******************
changed: [server -> localhost]

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [c2]
changed: [c1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [server]
ok: [c1]
ok: [c2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, c2, server => (item=dhcp)

TASK [Figure out whether to deploy the module dhcp on current device] **********
ok: [server]
ok: [c1]
ok: [c2]

TASK [Find configuration template for dhcp] ************************************
skipping: [server]
ok: [c1]
ok: [c2]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [server]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [server]
ok: [c1] => 
  msg: |-
    dhcp configuration for c1
    =========================================
    interface Ethernet1
      dhcp client accept default-route
      ip address dhcp
ok: [c2] => 
  msg: |-
    dhcp configuration for c2
    =========================================
    interface Ethernet1
      ip address dhcp

TASK [Find configuration deployment deploy_script for dhcp] ********************
skipping: [server]
ok: [c1]
ok: [c2]

TASK [Deploy dhcp configuration] ***********************************************
skipping: [server]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for c1, c2

TASK [eos_config: deploying dhcp from /home/pipi/net101/tools/netsim/ansible/templates/dhcp/eos.j2] ***
changed: [c1]
changed: [c2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
c1                         : ok=24   changed=3    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
c2                         : ok=24   changed=3    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
server                     : ok=19   changed=4    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   



Use this topology to test the DHCPv4 client on your device. Use 'netlab
validate' to check whether your devices requested DHCP leases from the DHCP
server.

If your client suppors configurable 'router option' requests to generate
a default route, check that C1 has a default route but C2 does not.

