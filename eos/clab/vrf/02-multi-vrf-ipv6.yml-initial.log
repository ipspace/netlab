[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h3]
ok: [h2]
ok: [h4]
ok: [rtr]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [rtr]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for rtr

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [rtr]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for rtr, h1, h2, h3, h4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [rtr]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [rtr]

TASK [fail] ********************************************************************
skipping: [rtr]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [rtr] => 
  msg: |-
    normalize configuration for rtr
    =========================================
    !
    interface Ethernet1
     no switchport
     mac-address 52dc.cafe.0501
    !
    interface Ethernet2
     no switchport
     mac-address 52dc.cafe.0502
    !
    interface Ethernet3
     no switchport
     mac-address 52dc.cafe.0503
    !
    interface Ethernet4
     no switchport
     mac-address 52dc.cafe.0504

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [rtr]

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for rtr

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [rtr]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for rtr, h1, h2, h3, h4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [rtr]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [rtr]

TASK [fail] ********************************************************************
skipping: [rtr]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2::1/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2::1/64 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:1::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:1::3/64 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:3::4/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:3::4/64 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:2::2/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:2::2/64 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [rtr] => 
  msg: |-
    initial configuration for rtr
    =========================================
    hostname rtr
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ipv6 unicast-routing
    !
    vrf instance blue
     rd 65000:2
    !
    ipv6 unicast-routing vrf blue
    !
    vrf instance red
     rd 65000:1
    !
    ipv6 unicast-routing vrf red
    !
    !
    ipv6 host h1 2001:db8:2::1
    ipv6 host h2 2001:db8:2:2::2
    ipv6 host h3 2001:db8:2:1::3
    ipv6 host h4 2001:db8:2:3::4
    ipv6 host rtr-blue 2001:db8:2:2::5
    ipv6 host rtr-red 2001:db8:2::5
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:1:5::1/64
    !
    interface Ethernet1
     no switchport
     vrf red
     description rtr -> h1 [stub]
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:2::5/64
    !
     mac-address 52dc.cafe.0501
     no shutdown
    !
    interface Ethernet2
     no switchport
     vrf red
     description rtr -> h3 [stub]
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:2:1::5/64
    !
     mac-address 52dc.cafe.0502
     no shutdown
    !
    interface Ethernet3
     no switchport
     vrf blue
     description rtr -> h2 [stub]
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:2:2::5/64
    !
     mac-address 52dc.cafe.0503
     no shutdown
    !
    interface Ethernet4
     no switchport
     vrf blue
     description rtr -> h4 [stub]
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:2:3::5/64
    !
     mac-address 52dc.cafe.0504
     no shutdown
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [rtr]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for rtr
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [rtr]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h4 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-ftcilg4o.sh] ***********************
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [rtr]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for rtr => (item=vrf)

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [rtr]

TASK [Find configuration template for vrf] *************************************
ok: [rtr]

TASK [fail] ********************************************************************
skipping: [rtr]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [rtr] => 
  msg: |-
    vrf configuration for rtr
    =========================================

TASK [Find configuration deployment deploy_script for vrf] *********************
ok: [rtr]

TASK [Deploy vrf configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for rtr

TASK [eos_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/eos.j2] ***
ok: [rtr]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h2                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h3                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h4                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
rtr                        : ok=26   changed=2    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0   



The lab tests the basic VRF lite functionality in an IPv6-only environment.
The device under test has two VRFs with two interfaces in each VRF.

* h1 and h2 should be able to ping each other
* h3 and h4 should be able to ping each other
* h1 should not be able to reach h3

