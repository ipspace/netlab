[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [r1]
skipping: [r2]
skipping: [srv]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for dut

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for r1, r2, srv, dut

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [r1]
skipping: [r2]
skipping: [srv]
skipping: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r1]
skipping: [r2]
skipping: [srv]
ok: [dut] => 
  msg: |-
    normalize configuration for dut
    =========================================
    !
    interface Ethernet1
     no switchport
     mac-address 52dc.cafe.0101
    !
    interface Ethernet2
     no switchport
     mac-address 52dc.cafe.0102
    !
    interface Ethernet3
     no switchport
     mac-address 52dc.cafe.0103

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [r1]
skipping: [r2]
skipping: [srv]
ok: [dut]

TASK [Deploy normalize configuration] ******************************************
skipping: [r1]
skipping: [r2]
skipping: [srv]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for dut

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for r1, r2, srv, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [r1]
skipping: [r2]
skipping: [srv]
skipping: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set dev eth1 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description r1 -> dut
     ip address 10.1.0.2/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set dev eth1 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description r2 -> dut
     ip address 10.1.0.6/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [srv] => 
  msg: |-
    initial configuration for srv
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set dev eth1 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname srv
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description srv -> dut
     ip address 10.1.0.10/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    vrf instance blue
     rd 65000:2
    !
    ip routing vrf blue
    !
    vrf instance common
     rd 65000:3
    !
    ip routing vrf common
    !
    vrf instance red
     rd 65000:1
    !
    ip routing vrf red
    !
    !
    ip host dut-blue 10.1.0.5
    ip host dut-common 10.1.0.9
    ip host dut-red 10.1.0.1
    ip host r1 10.0.0.2 10.1.0.2
    ip host r2 10.0.0.3 10.1.0.6
    ip host srv 10.0.0.4 10.1.0.10
    !
    interface defaults
     mtu 1500
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.1/32
    !
    interface Ethernet1
     no switchport
     vrf red
     description dut -> r1
     ip address 10.1.0.1/30
    !
     mac-address 52dc.cafe.0101
     no shutdown
    !
    interface Ethernet2
     no switchport
     vrf blue
     description dut -> r2
     ip address 10.1.0.5/30
    !
     mac-address 52dc.cafe.0102
     no shutdown
    !
    interface Ethernet3
     no switchport
     vrf common
     description dut -> srv
     ip address 10.1.0.9/30
    !
     mac-address 52dc.cafe.0103
     no shutdown
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for r1, r2, srv
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for dut

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for r1, r2, srv

TASK [template] ****************************************************************
changed: [srv]
changed: [r1]
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]
ok: [srv]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [r2]
changed: [r1]
changed: [srv]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [dut]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, srv => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, srv => (item=vrf)

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for ospf] ************************************
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r1] => 
  msg: |-
    ospf configuration for r1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [srv] => 
  msg: |-
    ospf configuration for srv
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.4
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! srv -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
ok: [r2] => 
  msg: |-
    ospf configuration for r2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r2 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for r1, r2, srv

TASK [eos_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/eos.j2] ***
ok: [dut]

TASK [template] ****************************************************************
changed: [r2]
changed: [r1]
changed: [srv]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]
ok: [srv]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [r1]
changed: [srv]
changed: [r2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for vrf] *************************************
skipping: [r1]
skipping: [r2]
skipping: [srv]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r1]
skipping: [r2]
skipping: [srv]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
    !
    mpls ip
    !
    router bgp 65000
    !
     vrf blue
      router-id 10.0.0.1
      rd 65000:2
      route-target import vpn-ipv4 65000:2
      route-target import vpn-ipv4 65000:3
      route-target export vpn-ipv4 65000:2
    !
      address-family ipv4
        redistribute connected
        redistribute ospf
  
    !
     vrf common
      router-id 10.0.0.1
      rd 65000:3
      route-target import vpn-ipv4 65000:1
      route-target import vpn-ipv4 65000:2
      route-target import vpn-ipv4 65000:3
      route-target export vpn-ipv4 65000:3
    !
      address-family ipv4
        redistribute connected
        redistribute ospf
  
    !
     vrf red
      router-id 10.0.0.1
      rd 65000:1
      route-target import vpn-ipv4 65000:1
      route-target import vpn-ipv4 65000:3
      route-target export vpn-ipv4 65000:1
    !
      address-family ipv4
        redistribute connected
        redistribute ospf
  
    !
    ! OSPFv2 configuration
    !
    router ospf 101 vrf blue
     router-id 10.100.0.101
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
      redistribute bgp include leaked
      redistribute connected include leaked
  
    !
    interface Ethernet2
    ! dut -> r2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    ! OSPFv2 configuration
    !
    router ospf 102 vrf common
     router-id 10.100.0.102
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
      redistribute bgp include leaked
      redistribute connected include leaked
  
    !
    interface Ethernet3
    ! dut -> srv
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    ! OSPFv2 configuration
    !
    router ospf 100 vrf red
     router-id 10.100.0.100
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
      redistribute bgp include leaked
      redistribute connected include leaked
  
    !
    interface Ethernet1
    ! dut -> r1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [r1]
skipping: [r2]
skipping: [srv]
ok: [dut]

TASK [Deploy vrf configuration] ************************************************
skipping: [r1]
skipping: [r2]
skipping: [srv]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for dut

TASK [eos_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/eos.j2] ***
changed: [dut]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=33   changed=3    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
r1                         : ok=28   changed=5    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
r2                         : ok=27   changed=4    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
srv                        : ok=27   changed=4    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   



The device under test has two user VRFs and a common services VRF.
Routers are attached to those interfaces and run OSPF with device under test.

* r1 and r2 should be able to ping srv but not each other

