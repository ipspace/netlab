/home/pipi/.local/lib/python3.10/site-packages/paramiko/pkey.py:100: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "cipher": algorithms.TripleDES,
/home/pipi/.local/lib/python3.10/site-packages/paramiko/transport.py:259: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "class": algorithms.TripleDES,
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut_b]
ok: [x1]
ok: [dut_a]

TASK [Find device readiness script] ********************************************
ok: [dut_a]
ok: [x1]
ok: [dut_b]

TASK [Wait for device to become ready] *****************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for dut_a, dut_b, x1

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [dut_b]
ok: [x1]
ok: [dut_a]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut_a, dut_b, x1

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Find configuration template for normalize] *******************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut_a]
skipping: [dut_b]
skipping: [x1]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut_a] => 
  msg: |-
    normalize configuration for dut_a
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0101
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0102
ok: [dut_b] => 
  msg: |-
    normalize configuration for dut_b
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0201
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0202
ok: [x1] => 
  msg: |-
    normalize configuration for x1
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0301
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0302

TASK [Deploy normalize configuration] ******************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for dut_a, dut_b, x1

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [x1]
changed: [dut_a]
changed: [dut_b]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut_a, dut_b, x1

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Find configuration template for initial] *********************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut_a]
skipping: [dut_b]
skipping: [x1]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut_a] => 
  msg: |-
    initial configuration for dut_a
    =========================================
    hostname dut-a
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    no ipv6 unicast-routing
    !
    !
    ip host dutb 10.0.0.2
    ip host x1 10.0.0.3
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.1/32
    !
    interface Ethernet1
     no switchport
     description dut_a -> x1
    !
     mac-address 52dc.cafe.0101
     no shutdown
    !
    interface Ethernet2
     no switchport
     description dut_a -> dut_b
    !
     mac-address 52dc.cafe.0102
     no shutdown
    !
    interface Vlan76
     description VLAN blue (76) -> [x1,dut_b]
    !
    interface Vlan42
     description VLAN red (42) -> [x1,dut_b]
    !
ok: [dut_b] => 
  msg: |-
    initial configuration for dut_b
    =========================================
    hostname dut-b
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    no ipv6 unicast-routing
    !
    !
    ip host duta 10.0.0.1
    ip host x1 10.0.0.3
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.2/32
    !
    interface Ethernet1
     no switchport
     description dut_b -> x1
    !
     mac-address 52dc.cafe.0201
     no shutdown
    !
    interface Ethernet2
     no switchport
     description dut_b -> dut_a
    !
     mac-address 52dc.cafe.0202
     no shutdown
    !
    interface Vlan76
     description VLAN blue (76) -> [x1,dut_a]
    !
    interface Vlan42
     description VLAN red (42) -> [x1,dut_a]
    !
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    hostname x1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    no ipv6 unicast-routing
    !
    !
    ip host duta 10.0.0.1
    ip host dutb 10.0.0.2
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.3/32
    !
    interface Ethernet1
     no switchport
     description x1 -> dut_a
    !
     mac-address 52dc.cafe.0301
     no shutdown
    !
    interface Ethernet2
     no switchport
     description x1 -> dut_b
    !
     mac-address 52dc.cafe.0302
     no shutdown
    !
    interface Vlan76
     description VLAN blue (76) -> [dut_a,dut_b]
    !
    interface Vlan42
     description VLAN red (42) -> [dut_a,dut_b]
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for dut_a, dut_b, x1

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [x1]
changed: [dut_b]
changed: [dut_a]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut_a, dut_b, x1 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut_a, dut_b, x1 => (item=stp)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Find configuration template for vlan] ************************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut_a]
skipping: [dut_b]
skipping: [x1]

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut_a] => 
  msg: |-
    vlan configuration for dut_a
    =========================================
    vlan 42
     name red
    !
    vlan 76
     name blue
    !
  
    !
    interface Ethernet1
     switchport
     switchport mode trunk
     switchport trunk allowed vlan 42,76
     switchport trunk native vlan tag
    !
    interface Ethernet2
     switchport
     switchport mode trunk
     switchport trunk allowed vlan 42,76
     switchport trunk native vlan tag
    !
    interface Vlan76
    !
    interface Vlan42
ok: [dut_b] => 
  msg: |-
    vlan configuration for dut_b
    =========================================
    vlan 76
     name blue
    !
    vlan 42
     name red
    !
  
    !
    interface Ethernet1
     switchport
     switchport mode trunk
     switchport trunk allowed vlan 42,76
     switchport trunk native vlan tag
    !
    interface Ethernet2
     switchport
     switchport mode trunk
     switchport trunk allowed vlan 42,76
     switchport trunk native vlan tag
    !
    interface Vlan76
    !
    interface Vlan42
ok: [x1] => 
  msg: |-
    vlan configuration for x1
    =========================================
    vlan 76
     name blue
    !
    vlan 42
     name red
    !
  
    !
    interface Ethernet1
     switchport
     switchport mode trunk
     switchport trunk allowed vlan 42,76
     switchport trunk native vlan tag
    !
    interface Ethernet2
     switchport
     switchport mode trunk
     switchport trunk allowed vlan 42,76
     switchport trunk native vlan tag
    !
    interface Vlan76
    !
    interface Vlan42

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for dut_a, dut_b, x1

TASK [eos_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/eos.j2] ***
changed: [dut_b]
changed: [dut_a]
changed: [x1]

TASK [Figure out whether to deploy the module stp on current device] ***********
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Find configuration template for stp] *************************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut_a]
skipping: [dut_b]
skipping: [x1]

TASK [Find configuration deployment deploy_script for stp] *********************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut_a] => 
  msg: |-
    stp configuration for dut_a
    =========================================
    spanning-tree mode rapid-pvst
  
  
    spanning-tree vlan-id 42 priority 4096
    spanning-tree vlan-id 76 priority 32768
ok: [dut_b] => 
  msg: |-
    stp configuration for dut_b
    =========================================
    spanning-tree mode rapid-pvst
  
    spanning-tree priority 12288
  
    spanning-tree vlan-id 76 priority 12288
    spanning-tree vlan-id 42 priority 12288
ok: [x1] => 
  msg: |-
    stp configuration for x1
    =========================================
    spanning-tree mode rapid-pvst
  
    spanning-tree priority 16384
  
    spanning-tree vlan-id 76 priority 16384
    spanning-tree vlan-id 42 priority 16384

TASK [Deploy stp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for dut_a, dut_b, x1

TASK [eos_config: deploying stp from /home/pipi/net101/tools/netsim/ansible/templates/stp/eos.j2] ***
changed: [dut_a]
changed: [x1]
changed: [dut_b]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut_a                      : ok=33   changed=4    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
dut_b                      : ok=33   changed=4    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
x1                         : ok=33   changed=4    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   



The devices under test form a layer-2 triangle of VLAN trunks. The devices
are running PVRST and have different per-VLAN root priorities.

If DUT_A and DUT_B run PVRST and has correct per-VLAN root priorities, DUT_A becomes the
root bridge for red VLAN and DUT_B becomes the root bridge for the blue VLAN.

