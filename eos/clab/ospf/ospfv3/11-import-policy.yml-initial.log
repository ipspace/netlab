[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [x1]
ok: [r2]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [x1]
ok: [r2]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [x1]
skipping: [r2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for dut

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, r2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [x1]
ok: [r2]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [x1]
ok: [r2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
    if [ ! -e /sys/class/net/eth2 ]; then
      if [ ! -e /sys/devices/virtual/net/eth2 ]; then
        ip link add eth2 type dummy
        ip link set dev eth2 up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set eth2 down
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    ip link set eth2 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description x1 -> dut [external]
     ! no ip address
     ipv6 address 2001:db8:3::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description x1 -> stub [stub]
     ! no ip address
     ipv6 address 2001:db8:cafe:42::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description r2 -> dut
     ! no ip address
     ipv6 address 2001:db8:3:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ipv6 unicast-routing
    !
    !
    ipv6 host r2 2001:db8:1:2::1
    ipv6 host x1 2001:db8:1:3::1
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     no shutdown
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:1:1::1/64
    !
    interface Ethernet1
     no shutdown
     no switchport
     description dut -> x1 [external]
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:3::1/64
    !
     mac-address 52dc.cafe.0101
    !
    interface Ethernet2
     no shutdown
     no switchport
     description dut -> r2
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:3:1::1/64
    !
     mac-address 52dc.cafe.0102
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [x1]
ok: [r2]
ok: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for x1, r2

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r2 -> localhost]
changed: [x1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [x1]
skipping: [r2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for x1, r2

TASK [template] ****************************************************************
changed: [r2]
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [r2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [r2]
changed: [x1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [x1]
skipping: [r2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r2]
ok: [x1]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r2, x1 => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r2, x1 => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r2, x1 => (item=ospf)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [r2]
ok: [x1]
ok: [dut]

TASK [Find configuration template for routing] *********************************
skipping: [r2]
skipping: [x1]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r2]
skipping: [x1]
ok: [dut] => 
  msg: |-
    routing configuration for dut
    =========================================
    !
    !
    route-map i_beacon-ipv6 permit 10
      set metric 50
      match ipv6 address prefix-list p_beacon-ipv6
    !
    ! IPv6 prefix lists
    !
    !
    ipv6 prefix-list p_beacon-ipv6
      seq 10 permit 2001:db8:cafe:42::/64
    !
    ! AS-path access lists
    !

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [r2]
skipping: [x1]
ok: [dut]

TASK [Deploy routing configuration] ********************************************
skipping: [r2]
skipping: [x1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for dut

TASK [eos_config: deploying routing from /home/pipi/net101/tools/netsim/ansible/templates/routing/eos.j2] ***
changed: [dut]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [r2]
ok: [x1]
ok: [dut]

TASK [Find configuration template for bgp] *************************************
skipping: [r2]
ok: [x1]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r2]
ok: [x1] => 
  msg: |-
    bgp configuration for x1
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 2001:db8:3::1 remote-as 65000
      neighbor 2001:db8:3::1 description dut
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:3::/64
    !
      network 2001:db8:cafe:42::/64
    !
    !
      neighbor 2001:db8:3::1 activate
      no neighbor 2001:db8:3::1 send-community all
      neighbor 2001:db8:3::1 send-community standard
      neighbor 2001:db8:3::1 send-community large
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    !
    !
    router bgp 65000
      bgp advertise-inactive
      bgp log-neighbor-changes
      no bgp default ipv4-unicast
      no bgp default ipv6-unicast
      router-id 10.0.0.1
    !
      neighbor 2001:db8:3::2 remote-as 65100
      neighbor 2001:db8:3::2 description x1
      neighbor 2001:db8:3::2 send-community standard large
    !
    !
     address-family ipv6
  
      network 2001:db8:1:1::/64
    !
    !
    !
      neighbor 2001:db8:3::2 activate
    !

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [r2]
ok: [x1]
ok: [dut]

TASK [Deploy bgp configuration] ************************************************
skipping: [r2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for x1

TASK [eos_config: deploying bgp from /home/pipi/net101/tools/netsim/ansible/templates/bgp/eos.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [x1]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [x1]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [r2]
ok: [x1]
ok: [dut]

TASK [Find configuration template for ospf] ************************************
skipping: [x1]
ok: [r2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [x1]
ok: [r2] => 
  msg: |-
    ospf configuration for r2
    =========================================
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! r2 -> dut
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.2
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
    !
    ! OSPFv3 configuration
    !
    interface Loopback0
    !
     ipv6 ospf 1 area 0.0.0.0
    !
    interface Ethernet2
    ! dut -> r2
     ipv6 ospf 1 area 0.0.0.0
     ipv6 ospf network point-to-point
    !
    !
    ipv6 router ospf 1
     router-id 10.0.0.1
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
      redistribute bgp route-map i_beacon-ipv6

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [x1]
ok: [r2]
ok: [dut]

TASK [Deploy ospf configuration] ***********************************************
skipping: [x1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for r2

TASK [eos_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/eos.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [r2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [r2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=33   changed=4    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
r2                         : ok=27   changed=5    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
x1                         : ok=27   changed=5    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   



This lab tests the import of IPv6 BGP routes into OSPFv3 via a route-map.

