[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [br_a]
ok: [r2]
ok: [h1]
ok: [h2]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [br_a]
ok: [r2]
ok: [h1]
ok: [h2]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [br_a]
skipping: [r2]
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/eos-clab.yml for dut

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for br_a, dut, r2, h1, h2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [br_a]
ok: [r2]
ok: [h2]
ok: [h1]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [br_a]
ok: [r2]
ok: [h1]
ok: [h2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [br_a]
skipping: [dut]
skipping: [r2]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [br_a]
ok: [r2]
ok: [h1]
ok: [h2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [br_a]
skipping: [r2]
skipping: [h1]
skipping: [h2]
ok: [dut] => 
  msg: |-
    normalize configuration for dut
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0101
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0102

TASK [Deploy normalize configuration] ******************************************
skipping: [br_a]
skipping: [r2]
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for dut

TASK [eos_config: deploying normalize from /home/pipi/netlab_gh/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for br_a, dut, r2, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [br_a]
ok: [r2]
ok: [h2]
ok: [h1]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [br_a]
ok: [r2]
ok: [h1]
ok: [h2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [br_a]
skipping: [dut]
skipping: [r2]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [br_a]
ok: [r2]
ok: [h1]
ok: [h2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [br_a] => 
  msg: |-
    initial configuration for br_a
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
  
    ip link set dev eth2 up
    sysctl -w net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
  
    ip link set dev eth3 up
    sysctl -w net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.44.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.44.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:44::4/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:44::4/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.33.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.33.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:33::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:33::3/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description r2 -> [dut,h2]
     ip address 172.16.44.2/24
     ipv6 address 2001:db8:cafe:44::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description r2 -> [h1,br_a,dut]
     ip address 172.16.33.2/24
     ipv6 address 2001:db8:cafe:33::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    ipv6 unicast-routing
    !
    !
    ip host h1 172.16.33.3
    ip host h2 172.16.44.4
    ip host r2 10.0.0.2 172.16.44.2 172.16.33.2
    ipv6 host h1 2001:db8:cafe:33::3
    ipv6 host h2 2001:db8:cafe:44::4
    ipv6 host r2 2001:db8:cafe:44::2
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.1/32
    !
    interface Ethernet1
     no switchport
     description dut -> [r2,h2]
     ip address 172.16.44.1/24
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:cafe:44::1/64
    !
     mac-address 52dc.cafe.0101
     no shutdown
    !
    interface Ethernet2
     no switchport
     description dut -> [h1,br_a,r2]
     ip address 172.16.33.1/24
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:cafe:33::1/64
    !
     mac-address 52dc.cafe.0102
     no shutdown
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for br_a, h1, h2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for r2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [br_a]
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [br_a -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [br_a -> localhost]
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Copy script into running container at /tmp/config-br_a_initial.sh] *******
skipping: [br_a]
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-br_a_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [br_a]
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [br_a -> localhost]

TASK [Remove temporary file /tmp/br_a_initial-qcxiaoee.sh] *********************
changed: [br_a -> localhost]
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [eos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/eos.j2] ***
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [r2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for r2

TASK [template] ****************************************************************
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [r2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [r2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [br_a]
ok: [h1]
ok: [h2]
ok: [r2]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for br_a, dut, h1, h2, r2 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for br_a, dut, h1, h2, r2 => (item=gateway)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for br_a, dut, h1, h2, r2 => (item=routing)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [br_a]
ok: [h1]
ok: [h2]
ok: [r2]
ok: [dut]

TASK [Find configuration template for vlan] ************************************
skipping: [dut]
skipping: [h1]
ok: [br_a]
skipping: [h2]
skipping: [r2]

TASK [fail] ********************************************************************
skipping: [br_a]
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [r2]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [r2]
ok: [br_a]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [r2]
ok: [br_a] => 
  msg: |-
    vlan configuration for br_a
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan100 ]; then
      ip link add vlan100 type bridge
      ip link set dev vlan100 address 52:dc:ca:fd:05:00
  
      ip addr flush dev vlan100
    fi
  
    ip link set dev eth1 master vlan100
    ip link set dev eth2 master vlan100
    ip link set dev eth3 master vlan100
  
    ip link set dev vlan100 up
  
    sysctl -w net.ipv6.conf.vlan100.disable_ipv6=1

TASK [Deploy vlan configuration] ***********************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [r2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for br_a

TASK [Define script filename and determine whether to execute in netns] ********
ok: [br_a]

TASK [Create a temporary file for the rendered script] *************************
changed: [br_a -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/linux-clab.j2] ***
changed: [br_a -> localhost]

TASK [Copy script into running container at /tmp/config-br_a_vlan.sh] **********
skipping: [br_a]

TASK [Execute /tmp/config-br_a_vlan.sh to deploy vlan config based on /home/pipi/netlab_gh/netsim/ansible/templates/vlan/linux-clab.j2] ***
skipping: [br_a]

TASK [Container configuration for vlan based on /home/pipi/netlab_gh/netsim/ansible/templates/vlan/linux-clab.j2 executed in netns] ***
changed: [br_a -> localhost]

TASK [Remove temporary file /tmp/br_a_vlan-fcpmct5j.sh] ************************
changed: [br_a -> localhost]

TASK [Figure out whether to deploy the module gateway on current device] *******
ok: [br_a]
ok: [h1]
ok: [h2]
ok: [r2]
ok: [dut]

TASK [Find configuration template for gateway] *********************************
skipping: [br_a]
skipping: [h1]
skipping: [h2]
ok: [r2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [br_a]
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [r2]

TASK [Find configuration deployment deploy_script for gateway] *****************
skipping: [br_a]
skipping: [h1]
skipping: [h2]
ok: [r2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [br_a]
skipping: [h1]
skipping: [h2]
ok: [r2] => 
  msg: |-
    gateway configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    sysctl -w net.ipv6.conf.all.enhanced_dad=0
    sysctl -w net.ipv6.conf.default.enhanced_dad=0
    if [ ! -e /sys/class/net/vrrp-2-217 ]; then
      ip link add vrrp-2-217 link eth2 type macvlan mode bridge
      ip link set dev vrrp-2-217 address 00:00:5e:00:01:d9 addrgenmode none
      ip addr add 172.16.33.42/24 dev vrrp-2-217
      sysctl -w net.ipv4.conf.eth2.arp_announce=2
      sysctl -w net.ipv4.conf.eth2.arp_ignore=2
      sysctl -w net.ipv4.conf.eth2.arp_accept=1
      ip link set dev vrrp-2-217 up
    fi
    if [ ! -e /sys/class/net/vrrp6-2-217 ]; then
      ip link add vrrp6-2-217 link eth2 type macvlan mode bridge
      ip link set dev vrrp6-2-217 address 00:00:5e:00:02:d9 addrgenmode random
      ip addr add 2001:db8:cafe:33::2a/64 dev vrrp6-2-217
      ip link set dev vrrp6-2-217 up
    fi
    #!/bin/bash
    cat >/tmp/vrrp_config <<CONFIG
    interface eth2
      vrrp 217 shutdown
      no vrrp 217 checksum-with-ipv4-pseudoheader
      vrrp 217 priority 20
      vrrp 217 preempt
      vrrp 217 ipv6 fe80::200:5eff:fe00:2d9
      vrrp 217 ip 172.16.33.42
      vrrp 217 ipv6 2001:db8:cafe:33::2a
      no vrrp 217 shutdown
    do write
    CONFIG
    vtysh -f /tmp/vrrp_config
ok: [dut] => 
  msg: |-
    gateway configuration for dut
    =========================================
    no ip icmp redirect
    !
    interface Ethernet2
      vrrp 217 ipv4 version 3
      vrrp 217 ipv4 checksum pseudo-header exclude
      vrrp 217 ipv4 172.16.33.42
      vrrp 217 ipv6 2001:db8:cafe:33::2a
      vrrp 217 priority-level 30
      vrrp 217 preempt

TASK [Deploy gateway configuration] ********************************************
skipping: [br_a]
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for r2

TASK [eos_config: deploying gateway from /home/pipi/netlab_gh/netsim/ansible/templates/gateway/eos.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r2]

TASK [run /tmp/config.sh to deploy gateway config from /home/pipi/netlab_gh/netsim/ansible/templates/gateway/frr.j2] ***
changed: [r2]

TASK [run vtysh to import gateway config from /home/pipi/netlab_gh/netsim/ansible/templates/gateway/frr.j2] ***
skipping: [r2]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [br_a]
ok: [h1]
ok: [h2]
ok: [r2]
ok: [dut]

TASK [Find configuration template for routing] *********************************
skipping: [br_a]
skipping: [dut]
skipping: [r2]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [br_a]
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [r2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [br_a]
skipping: [dut]
skipping: [r2]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [br_a]
skipping: [dut]
skipping: [r2]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.44.0/24 2>/dev/null; do
      : ; done
    #
    set +e
    echo Removing existing IPv6 routes
    while ip route del 2001:db8:cafe:44::/64 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.44.0/24 via 172.16.33.42 dev eth1 protocol static
    ip route add 2001:db8:cafe:44::/64 via 2001:db8:cafe:33::2a dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.33.0/24 2>/dev/null; do
      : ; done
    #
    set +e
    echo Removing existing IPv6 routes
    while ip route del 2001:db8:cafe:33::/64 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.33.0/24 via 172.16.44.1 dev eth1 protocol static
    ip route add 2001:db8:cafe:33::/64 via 2001:db8:cafe:44::1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [br_a]
skipping: [dut]
skipping: [r2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-goxl07bz.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
br_a                       : ok=33   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
dut                        : ok=30   changed=3    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
h1                         : ok=33   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
h2                         : ok=33   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
r2                         : ok=31   changed=5    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   



This lab tests IPv4/6 VRRP configuration. It checks whether the
device-under-test (DUT) forwards traffic sent to the VRRP IP/MAC address,
whether it has correct VRRP priority, and whether the preemption mechanism
works.

