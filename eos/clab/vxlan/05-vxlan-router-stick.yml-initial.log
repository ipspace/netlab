[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h2]
ok: [h1]
ok: [ros]
ok: [s1]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for ros, s1

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [s1]
ok: [ros]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1, h1, h2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for normalize] *******************************
ok: [h2]
ok: [h1]
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [s1]
skipping: [h1]
skipping: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [ros] => 
  msg: |-
    normalize configuration for ros
    =========================================
    !
    interface Ethernet1
     no switchport
     mac-address 52dc.cafe.0201
ok: [s1] => 
  msg: |-
    normalize configuration for s1
    =========================================
    !
    interface Ethernet1
     no switchport
     mac-address 52dc.cafe.0101
    !
    interface Ethernet2
     no switchport
     mac-address 52dc.cafe.0102
    !
    interface Ethernet3
     no switchport
     mac-address 52dc.cafe.0103

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [h1]
skipping: [h2]
ok: [ros]
ok: [s1]

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for ros, s1

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [ros]
changed: [s1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [s1]
skipping: [h1]
skipping: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.2 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.2 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    !
    ip host h1 172.16.0.3
    ip host h2 172.16.1.4
    ip host ros 10.0.0.2 10.1.0.1
    ip host ros-tenant 172.16.0.2 172.16.1.2
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.1/32
    !
    interface Ethernet1
     no switchport
     mtu 1600
     description s1 -> ros
     ip address 10.1.0.2/30
    !
     mac-address 52dc.cafe.0101
     no shutdown
    !
    interface Ethernet2
     no switchport
     description [Access VLAN red] s1 -> h1
    !
     mac-address 52dc.cafe.0102
     no shutdown
    !
    interface Ethernet3
     no switchport
     description [Access VLAN blue] s1 -> h2
    !
     mac-address 52dc.cafe.0103
     no shutdown
    !
    interface Vlan1000
     description VLAN red (1000) -> [h1,ros]
    !
    interface Vlan1001
     description VLAN blue (1001) -> [h2,ros]
    !
ok: [ros] => 
  msg: |-
    initial configuration for ros
    =========================================
    hostname ros
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    vrf instance tenant
     rd 65000:1
    !
    ip routing vrf tenant
    !
    !
    ip host h1 172.16.0.3
    ip host h2 172.16.1.4
    ip host ros-tenant 172.16.0.2 172.16.1.2
    ip host s1 10.0.0.1 10.1.0.2
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.2/32
    !
    interface Ethernet1
     no switchport
     mtu 1600
     description ros -> s1
     ip address 10.1.0.1/30
    !
     mac-address 52dc.cafe.0201
     no shutdown
    !
    interface Vlan1000
     vrf tenant
     description VLAN red (1000) -> [h1,s1]
     ip address 172.16.0.2/24
    !
    interface Vlan1001
     vrf tenant
     description VLAN blue (1001) -> [h2,s1]
     ip address 172.16.1.2/24
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for ros, s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [s1]
changed: [ros]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-ttnsmk30.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [ros]
ok: [s1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=vrf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=vxlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [ros]
ok: [s1]

TASK [Find configuration template for vlan] ************************************
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ros] => 
  msg: |-
    vlan configuration for ros
    =========================================
    vlan 1001
     name blue
    !
    vlan 1000
     name red
    !
  
    !
    interface Vlan1000
    !
    interface Vlan1001
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    vlan 1001
     name blue
    !
    vlan 1000
     name red
    !
  
    !
    interface Ethernet2
     switchport
     switchport access vlan 1000
    !
    interface Ethernet3
     switchport
     switchport access vlan 1001
    !
    interface Vlan1000
    !
    interface Vlan1001

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [ros]
ok: [s1]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for ros, s1

TASK [eos_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/eos.j2] ***
changed: [ros]
changed: [s1]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [ros]
ok: [s1]

TASK [Find configuration template for ospf] ************************************
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ros] => 
  msg: |-
    ospf configuration for ros
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.2
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! ros -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.1
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! s1 -> ros
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [ros]
ok: [s1]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for ros, s1

TASK [eos_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/eos.j2] ***
changed: [ros]
changed: [s1]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [ros]
ok: [s1]

TASK [Find configuration template for vrf] *************************************
skipping: [s1]
ok: [ros]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
ok: [ros] => 
  msg: |-
    vrf configuration for ros
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 100 vrf tenant
     router-id 10.0.0.2
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
      redistribute connected include leaked
  
    !
    interface Vlan1000
    ! VLAN red (1000) -> [h1,s1]
     ip ospf area 0.0.0.0
    !
    interface Vlan1001
    ! VLAN blue (1001) -> [h2,s1]
     ip ospf area 0.0.0.0
    !

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [s1]
ok: [ros]

TASK [Deploy vrf configuration] ************************************************
skipping: [s1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for ros

TASK [eos_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/eos.j2] ***
changed: [ros]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [ros]
ok: [s1]

TASK [Find configuration template for vxlan] ***********************************
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ros] => 
  msg: |-
    vxlan configuration for ros
    =========================================
    interface vxlan 1
      vxlan source-interface Loopback0
      vxlan vlan 1000 vni 101000
      vxlan vlan 1000 flood vtep 10.0.0.1
      vxlan vlan 1001 vni 101001
      vxlan vlan 1001 flood vtep 10.0.0.1
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    interface vxlan 1
      vxlan source-interface Loopback0
      vxlan vlan 1000 vni 101000
      vxlan vlan 1000 flood vtep 10.0.0.2
      vxlan vlan 1001 vni 101001
      vxlan vlan 1001 flood vtep 10.0.0.2

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [ros]
ok: [s1]

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for ros, s1

TASK [eos_config: deploying vxlan from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/eos.j2] ***
changed: [s1]
changed: [ros]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h2                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
ros                        : ok=47   changed=6    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
s1                         : ok=42   changed=5    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   



The devices under test are VLAN-to-VXLAN bridge and VXLAN router-on-a-stick.
Assuming 'vxlan-bridging' test case succeeded, this one tests VXLAN-to-VXLAN
routing

* h1 and h2 should be able to ping each other

