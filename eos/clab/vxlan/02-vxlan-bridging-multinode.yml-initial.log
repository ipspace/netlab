[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s3]
ok: [h1]
ok: [s1]
ok: [h2]
ok: [h1a]
ok: [s2]
ok: [h2a]
ok: [h3]
ok: [h4]
ok: [h4a]
ok: [h5]
ok: [h5a]
ok: [h6]

TASK [Find device readiness script] ********************************************
ok: [s3]
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h2a]
ok: [h3]
ok: [s1]
ok: [h4]
ok: [h5]
ok: [h4a]
ok: [h5a]
ok: [h6]
ok: [s2]

TASK [Wait for device to become ready] *****************************************
skipping: [s3]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/eos-clab.yml for s1, s2

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [s1]
ok: [s2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3, h1, h1a, h2, h2a, h3, h4, h4a, h5, h5a, h6

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [s3]
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h2a]
ok: [h3]
ok: [h4]
ok: [h4a]
ok: [s1]
ok: [h5]
ok: [s2]
ok: [h5a]
ok: [h6]

TASK [Find configuration template for normalize] *******************************
ok: [s3]
ok: [h1]
ok: [h1a]
ok: [s1]
ok: [h2]
ok: [s2]
ok: [h2a]
ok: [h3]
ok: [h4]
ok: [h4a]
ok: [h5]
ok: [h5a]
ok: [h6]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1a]
ok: [s3]
ok: [h1]
ok: [s1]
ok: [h2]
ok: [s2]
ok: [h2a]
ok: [h4a]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h5a]
ok: [h6]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s3]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
ok: [s1] => 
  msg: |-
    normalize configuration for s1
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0b01
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0b02
    !
    interface Ethernet3
     shutdown
     mac-address 52dc.cafe.0b03
    !
    interface Ethernet4
     shutdown
     mac-address 52dc.cafe.0b04
    !
    interface Ethernet5
     shutdown
     mac-address 52dc.cafe.0b05
    !
    interface Ethernet6
     shutdown
     mac-address 52dc.cafe.0b06
skipping: [h4a]
ok: [s2] => 
  msg: |-
    normalize configuration for s2
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0c01
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0c02
    !
    interface Ethernet3
     shutdown
     mac-address 52dc.cafe.0c03
    !
    interface Ethernet4
     shutdown
     mac-address 52dc.cafe.0c04
    !
    interface Ethernet5
     shutdown
     mac-address 52dc.cafe.0c05
    !
    interface Ethernet6
     shutdown
     mac-address 52dc.cafe.0c06
skipping: [h5]
skipping: [h5a]
skipping: [h6]

TASK [Deploy normalize configuration] ******************************************
skipping: [s3]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s1, s2

TASK [eos_config: deploying normalize from /home/pipi/netlab_gh/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [s1]
changed: [s2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3, h1, h1a, h2, h2a, h3, h4, h4a, h5, h5a, h6

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [s3]
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [s1]
ok: [h2a]
ok: [s2]
ok: [h3]
ok: [h4]
ok: [h4a]
ok: [h5]
ok: [h5a]
ok: [h6]

TASK [Find configuration template for initial] *********************************
ok: [s3]
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [s1]
ok: [s2]
ok: [h2a]
ok: [h4]
ok: [h3]
ok: [h4a]
ok: [h5]
ok: [h5a]
ok: [h6]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s3]
ok: [h1]
ok: [s1]
ok: [h1a]
ok: [s2]
ok: [h2]
ok: [h4]
ok: [h2a]
ok: [h3]
ok: [h5]
ok: [h4a]
ok: [h5a]
ok: [h6]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h1a] => 
  msg: |-
    initial configuration for h1a
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.7/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.7/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [s3] => 
  msg: |-
    initial configuration for s3
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1600
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1600
    ip link set eth2 up
    ip link set eth3 down
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
    ip link set eth3 up
    ip link set eth4 down
    sysctl -qw net.ipv6.conf.eth4.disable_ipv6=1
    ip link set dev eth4 mtu 1500
    ip link set eth4 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s3
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.13/32
    !
    interface eth1
     no shutdown
     description s3 -> s2
     ip address 10.1.0.6/30
    !
    interface eth2
     no shutdown
     description s3 -> s1
     ip address 10.1.0.10/30
    !
    interface eth3
     no shutdown
     description [Access VLAN red] s3 -> h3
     ! no ip address
    !
    interface eth4
     no shutdown
     description [Access VLAN blue] s3 -> h6
     ! no ip address
    !
    interface vlan1000
     no shutdown
     description VLAN red (1000) -> [h1,s1,h1a,h2,s2...]
     ! no ip address
    !
    interface vlan1001
     no shutdown
     description VLAN blue (1001) -> [h4,s1,h4a,h5,s2...]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2a] => 
  msg: |-
    initial configuration for h2a
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.8/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.8/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    no ipv6 unicast-routing
    !
    !
    ip host h1 172.16.0.1
    ip host h1a 172.16.0.7
    ip host h2 172.16.0.2
    ip host h2a 172.16.0.8
    ip host h3 172.16.0.3
    ip host h4 172.16.1.4
    ip host h4a 172.16.1.9
    ip host h5 172.16.1.5
    ip host h5a 172.16.1.10
    ip host h6 172.16.1.6
    ip host s2 10.0.0.12 10.1.0.2 10.1.0.5
    ip host s3 10.0.0.13 10.1.0.6 10.1.0.10
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.11/32
    !
    interface Ethernet1
     no switchport
     mtu 1600
     description s1 -> s2
     ip address 10.1.0.1/30
    !
     mac-address 52dc.cafe.0b01
     no shutdown
    !
    interface Ethernet2
     no switchport
     mtu 1600
     description s1 -> s3
     ip address 10.1.0.9/30
    !
     mac-address 52dc.cafe.0b02
     no shutdown
    !
    interface Ethernet3
     no switchport
     description [Access VLAN red] s1 -> h1
    !
     mac-address 52dc.cafe.0b03
     no shutdown
    !
    interface Ethernet4
     no switchport
     description [Access VLAN red] s1 -> h1a
    !
     mac-address 52dc.cafe.0b04
     no shutdown
    !
    interface Ethernet5
     no switchport
     description [Access VLAN blue] s1 -> h4
    !
     mac-address 52dc.cafe.0b05
     no shutdown
    !
    interface Ethernet6
     no switchport
     description [Access VLAN blue] s1 -> h4a
    !
     mac-address 52dc.cafe.0b06
     no shutdown
    !
    interface Vlan1000
     description VLAN red (1000) -> [h1,h1a,h2,s2,h2a...]
    !
    interface Vlan1001
     description VLAN blue (1001) -> [h4,h4a,h5,s2,h5a...]
    !
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    hostname s2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    no ipv6 unicast-routing
    !
    !
    ip host h1 172.16.0.1
    ip host h1a 172.16.0.7
    ip host h2 172.16.0.2
    ip host h2a 172.16.0.8
    ip host h3 172.16.0.3
    ip host h4 172.16.1.4
    ip host h4a 172.16.1.9
    ip host h5 172.16.1.5
    ip host h5a 172.16.1.10
    ip host h6 172.16.1.6
    ip host s1 10.0.0.11 10.1.0.1 10.1.0.9
    ip host s3 10.0.0.13 10.1.0.6 10.1.0.10
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.12/32
    !
    interface Ethernet1
     no switchport
     mtu 1600
     description s2 -> s1
     ip address 10.1.0.2/30
    !
     mac-address 52dc.cafe.0c01
     no shutdown
    !
    interface Ethernet2
     no switchport
     mtu 1600
     description s2 -> s3
     ip address 10.1.0.5/30
    !
     mac-address 52dc.cafe.0c02
     no shutdown
    !
    interface Ethernet3
     no switchport
     description [Access VLAN red] s2 -> h2
    !
     mac-address 52dc.cafe.0c03
     no shutdown
    !
    interface Ethernet4
     no switchport
     description [Access VLAN red] s2 -> h2a
    !
     mac-address 52dc.cafe.0c04
     no shutdown
    !
    interface Ethernet5
     no switchport
     description [Access VLAN blue] s2 -> h5
    !
     mac-address 52dc.cafe.0c05
     no shutdown
    !
    interface Ethernet6
     no switchport
     description [Access VLAN blue] s2 -> h5a
    !
     mac-address 52dc.cafe.0c06
     no shutdown
    !
    interface Vlan1000
     description VLAN red (1000) -> [h1,s1,h1a,h2,h2a...]
    !
    interface Vlan1001
     description VLAN blue (1001) -> [h4,s1,h4a,h5,h5a...]
    !
ok: [h4a] => 
  msg: |-
    initial configuration for h4a
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.9/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.9/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h5] => 
  msg: |-
    initial configuration for h5
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.5/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h5a] => 
  msg: |-
    initial configuration for h5a
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.10/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.10/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h6] => 
  msg: |-
    initial configuration for h6
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.6/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s1, s2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for s3
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h1a, h2, h2a, h3, h4, h4a, h5, h5a, h6

TASK [eos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/eos.j2] ***
changed: [s1]
changed: [s2]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [s3 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [s3]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for s3

TASK [template] ****************************************************************
changed: [s3]

TASK [set_fact] ****************************************************************
ok: [s3]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [s3]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [s3]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h3]
ok: [h2a]
ok: [h4]
ok: [h4a]
ok: [h5]
ok: [h5a]
ok: [h6]

TASK [Create a temporary file for the rendered script] *************************
changed: [h4a -> localhost]
changed: [h2a -> localhost]
changed: [h1 -> localhost]
changed: [h5 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h1a -> localhost]
changed: [h6 -> localhost]
changed: [h5a -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1a -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]
changed: [h2a -> localhost]
changed: [h4a -> localhost]
changed: [h5 -> localhost]
changed: [h6 -> localhost]
changed: [h5a -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h1a -> localhost]
changed: [h2a -> localhost]
changed: [h3 -> localhost]
changed: [h4a -> localhost]
changed: [h2 -> localhost]
changed: [h5 -> localhost]
changed: [h4 -> localhost]
changed: [h5a -> localhost]
changed: [h6 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-tzlv6htr.sh] ***********************
changed: [h3 -> localhost]
changed: [h1a -> localhost]
changed: [h2a -> localhost]
changed: [h4 -> localhost]
changed: [h5a -> localhost]
changed: [h1 -> localhost]
changed: [h6 -> localhost]
changed: [h2 -> localhost]
changed: [h4a -> localhost]
changed: [h5 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h2a]
ok: [h3]
ok: [h4]
ok: [h4a]
ok: [h5]
ok: [h5a]
ok: [h6]
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h1a, h2, h2a, h3, h4, h4a, h5, h5a, h6, s1, s2, s3 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h1a, h2, h2a, h3, h4, h4a, h5, h5a, h6, s1, s2, s3 => (item=vxlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h1a, h2, h2a, h3, h4, h4a, h5, h5a, h6, s1, s2, s3 => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h1a, h2, h2a, h3, h4, h4a, h5, h5a, h6, s1, s2, s3 => (item=ospf)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h2a]
ok: [h3]
ok: [h4]
ok: [h4a]
ok: [h5]
ok: [h5a]
ok: [h6]
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
ok: [s3]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
ok: [s3] => 
  msg: |-
    vlan configuration for s3
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
      ip link add vlan1000 type bridge
      ip link set dev vlan1000 address 52:dc:ca:fd:0d:00
  
      ip addr flush dev vlan1000
    fi
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
      ip link add vlan1001 type bridge
      ip link set dev vlan1001 address 52:dc:ca:fd:0d:01
  
      ip addr flush dev vlan1001
    fi
  
    ip link set dev eth3 master vlan1000
    ip link set dev eth4 master vlan1001
  
    ip link set dev vlan1000 up
    ip link set dev vlan1001 up
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    vlan 1001
     name blue
    !
    vlan 1000
     name red
    !
  
    !
    interface Ethernet3
     switchport
     switchport access vlan 1000
    !
    interface Ethernet4
     switchport
     switchport access vlan 1000
    !
    interface Ethernet5
     switchport
     switchport access vlan 1001
    !
    interface Ethernet6
     switchport
     switchport access vlan 1001
    !
    interface Vlan1000
    !
    interface Vlan1001
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    vlan 1001
     name blue
    !
    vlan 1000
     name red
    !
  
    !
    interface Ethernet3
     switchport
     switchport access vlan 1000
    !
    interface Ethernet4
     switchport
     switchport access vlan 1000
    !
    interface Ethernet5
     switchport
     switchport access vlan 1001
    !
    interface Ethernet6
     switchport
     switchport access vlan 1001
    !
    interface Vlan1000
    !
    interface Vlan1001

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s1, s2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s3

TASK [eos_config: deploying vlan from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/eos.j2] ***
changed: [s1]
changed: [s2]

TASK [template] ****************************************************************
changed: [s3]

TASK [set_fact] ****************************************************************
ok: [s3]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
changed: [s3]

TASK [run vtysh to import vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [s3]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h2a]
ok: [h3]
ok: [h4]
ok: [h4a]
ok: [h5]
ok: [h5a]
ok: [h6]
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Find configuration template for vxlan] ***********************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
ok: [s3]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for vxlan] *******************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
ok: [s3] => 
  msg: |-
    vxlan configuration for s3
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
  
  
    # Create L3 VNIs with bridges and add to correct vrf table
  
    # Create VXLAN L2 interface per vni
    ip link add vxlan5000 type vxlan \
      id 5000 \
      dstport 4789 \
      local 10.0.0.13
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
    ip link add vlan1000 type bridge
    ip link set up dev vlan1000
    fi
    ip link set dev vxlan5000 master vlan1000
    ip link set vlan1000 type bridge stp_state 0
  
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan5000
    ip link set up dev vxlan5000
  
    bridge fdb append 00:00:00:00:00:00 dev vxlan5000 dst 10.0.0.11
    bridge fdb append 00:00:00:00:00:00 dev vxlan5000 dst 10.0.0.12
    # Create VXLAN L2 interface per vni
    ip link add vxlan5001 type vxlan \
      id 5001 \
      dstport 4789 \
      local 10.0.0.13
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
    ip link add vlan1001 type bridge
    ip link set up dev vlan1001
    fi
    ip link set dev vxlan5001 master vlan1001
    ip link set vlan1001 type bridge stp_state 0
  
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan5001
    ip link set up dev vxlan5001
  
    bridge fdb append 00:00:00:00:00:00 dev vxlan5001 dst 10.0.0.11
    bridge fdb append 00:00:00:00:00:00 dev vxlan5001 dst 10.0.0.12
  
    exit $?
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    interface vxlan 1
      vxlan source-interface Loopback0
      vxlan vlan 1000 vni 5000
      vxlan vlan 1000 flood vtep 10.0.0.12 10.0.0.13
      vxlan vlan 1001 vni 5001
      vxlan vlan 1001 flood vtep 10.0.0.12 10.0.0.13
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    interface vxlan 1
      vxlan source-interface Loopback0
      vxlan vlan 1000 vni 5000
      vxlan vlan 1000 flood vtep 10.0.0.11 10.0.0.13
      vxlan vlan 1001 vni 5001
      vxlan vlan 1001 flood vtep 10.0.0.11 10.0.0.13

TASK [Deploy vxlan configuration] **********************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s1, s2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s3

TASK [eos_config: deploying vxlan from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/eos.j2] ***
changed: [s1]
changed: [s2]

TASK [template] ****************************************************************
changed: [s3]

TASK [set_fact] ****************************************************************
ok: [s3]

TASK [run /tmp/config.sh to deploy vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/frr.j2] ***
changed: [s3]

TASK [run vtysh to import vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/frr.j2] ***
skipping: [s3]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h2a]
ok: [h3]
ok: [h4]
ok: [h4a]
ok: [h5]
ok: [h5a]
ok: [h6]
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Find configuration template for routing] *********************************
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h3]
ok: [h2a]
ok: [h4]
ok: [h4a]
ok: [h5]
skipping: [s1]
ok: [h5a]
skipping: [s2]
ok: [h6]
skipping: [s3]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for routing] *****************
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h2a]
ok: [h3]
ok: [h4a]
skipping: [s1]
ok: [h4]
ok: [h5]
skipping: [s2]
ok: [h5a]
skipping: [s3]
ok: [h6]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h1a] => 
  msg: |-
    routing configuration for h1a
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h2a] => 
  msg: |-
    routing configuration for h2a
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    routing configuration for h4
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
skipping: [s1]
ok: [h5] => 
  msg: |-
    routing configuration for h5
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h4a] => 
  msg: |-
    routing configuration for h4a
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h5a] => 
  msg: |-
    routing configuration for h5a
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
skipping: [s2]
skipping: [s3]
ok: [h6] => 
  msg: |-
    routing configuration for h6
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h1a, h2, h2a, h3, h4, h4a, h5, h5a, h6

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h2a]
ok: [h3]
ok: [h4]
ok: [h4a]
ok: [h5]
ok: [h5a]
ok: [h6]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h1a -> localhost]
changed: [h3 -> localhost]
changed: [h5 -> localhost]
changed: [h2 -> localhost]
changed: [h2a -> localhost]
changed: [h4 -> localhost]
changed: [h4a -> localhost]
changed: [h6 -> localhost]
changed: [h5a -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h1a -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h6 -> localhost]
changed: [h5 -> localhost]
changed: [h3 -> localhost]
changed: [h2a -> localhost]
changed: [h5a -> localhost]
changed: [h4a -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1a -> localhost]
changed: [h1 -> localhost]
changed: [h2a -> localhost]
changed: [h2 -> localhost]
changed: [h4a -> localhost]
changed: [h3 -> localhost]
changed: [h5 -> localhost]
changed: [h4 -> localhost]
changed: [h5a -> localhost]
changed: [h6 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-r06k4bw0.sh] ***********************
changed: [h1a -> localhost]
changed: [h2a -> localhost]
changed: [h4 -> localhost]
changed: [h1 -> localhost]
changed: [h5 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h5a -> localhost]
changed: [h4a -> localhost]
changed: [h6 -> localhost]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h2a]
ok: [h3]
ok: [h4]
ok: [h4a]
ok: [h5]
ok: [h5a]
ok: [h6]
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Find configuration template for ospf] ************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
ok: [s3]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
ok: [s3] => 
  msg: |-
    ospf configuration for s3
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.13
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! s3 -> s2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! s3 -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.11
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! s1 -> s2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface Ethernet2
    ! s1 -> s3
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.12
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! s2 -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface Ethernet2
    ! s2 -> s3
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Deploy ospf configuration] ***********************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h2a]
skipping: [h3]
skipping: [h4]
skipping: [h4a]
skipping: [h5]
skipping: [h5a]
skipping: [h6]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s1, s2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s3

TASK [eos_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/eos.j2] ***
changed: [s1]
changed: [s2]

TASK [template] ****************************************************************
changed: [s3]

TASK [set_fact] ****************************************************************
ok: [s3]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [s3]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [s3]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h1a                        : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h2                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h2a                        : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h3                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h4                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h4a                        : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h5                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h5a                        : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h6                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
s1                         : ok=42   changed=5    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   
s2                         : ok=42   changed=5    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   
s3                         : ok=47   changed=9    unreachable=0    failed=0    skipped=18   rescued=0    ignored=0   



This is the multi-node version of the vxlan-bridging lab.
Use it to check that you don't have spanning tree problems
in VXLAN overlay

* h1, h2 and h3 should be able to ping each other
* h4, h5 and h6 should be able to ping each other

Please note it might take a while for the lab to work due to
OSPF adjacency establishment and STP learning phase

