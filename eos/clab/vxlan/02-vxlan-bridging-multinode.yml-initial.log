[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h2]
ok: [h1]
ok: [s1]
ok: [h3]
ok: [h5]
ok: [h4]
ok: [h6]
ok: [s2]
ok: [s3]

TASK [Find device readiness script] ********************************************
ok: [h3]
ok: [h1]
ok: [h2]
ok: [h4]
ok: [s1]
ok: [h5]
ok: [h6]
ok: [s2]
ok: [s3]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for s1, s2, s3

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [s1]
ok: [s3]
ok: [s2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3, h1, h2, h3, h4, h5, h6

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h2]
ok: [h1]
ok: [h3]
ok: [s1]
ok: [h4]
ok: [s2]
ok: [h5]
ok: [h6]
ok: [s3]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [s1]
ok: [s2]
ok: [h4]
ok: [h6]
ok: [h5]
ok: [s3]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h6]
ok: [h4]
ok: [h5]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1] => 
  msg: |-
    normalize configuration for s1
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0701
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0702
    !
    interface Ethernet3
     shutdown
     mac-address 52dc.cafe.0703
    !
    interface Ethernet4
     shutdown
     mac-address 52dc.cafe.0704
ok: [s2] => 
  msg: |-
    normalize configuration for s2
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0801
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0802
    !
    interface Ethernet3
     shutdown
     mac-address 52dc.cafe.0803
    !
    interface Ethernet4
     shutdown
     mac-address 52dc.cafe.0804
ok: [s3] => 
  msg: |-
    normalize configuration for s3
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0901
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0902
    !
    interface Ethernet3
     shutdown
     mac-address 52dc.cafe.0903
    !
    interface Ethernet4
     shutdown
     mac-address 52dc.cafe.0904

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for s1, s2, s3

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [s1]
changed: [s2]
changed: [s3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3, h1, h2, h3, h4, h5, h6

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h2]
ok: [h1]
ok: [s1]
ok: [h3]
ok: [s2]
ok: [h4]
ok: [s3]
ok: [h6]
ok: [h5]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [s1]
ok: [h3]
ok: [s2]
ok: [h4]
ok: [s3]
ok: [h6]
ok: [h5]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [s1]
ok: [h2]
ok: [s2]
ok: [h3]
ok: [s3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h6] => 
  msg: |-
    initial configuration for h6
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.6/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h5] => 
  msg: |-
    initial configuration for h5
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.5/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    no ipv6 unicast-routing
    !
    !
    ip host h1 172.16.0.1
    ip host h2 172.16.0.2
    ip host h3 172.16.0.3
    ip host h4 172.16.1.4
    ip host h5 172.16.1.5
    ip host h6 172.16.1.6
    ip host s2 10.0.0.8 10.1.0.2 10.1.0.5
    ip host s3 10.0.0.9 10.1.0.6 10.1.0.10
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.7/32
    !
    interface Ethernet1
     no switchport
     mtu 1600
     description s1 -> s2
     ip address 10.1.0.1/30
    !
     mac-address 52dc.cafe.0701
     no shutdown
    !
    interface Ethernet2
     no switchport
     mtu 1600
     description s1 -> s3
     ip address 10.1.0.9/30
    !
     mac-address 52dc.cafe.0702
     no shutdown
    !
    interface Ethernet3
     no switchport
     description [Access VLAN red] s1 -> h1
    !
     mac-address 52dc.cafe.0703
     no shutdown
    !
    interface Ethernet4
     no switchport
     description [Access VLAN blue] s1 -> h4
    !
     mac-address 52dc.cafe.0704
     no shutdown
    !
    interface Vlan1000
     description VLAN red (1000) -> [h1,h2,s2,h3,s3]
    !
    interface Vlan1001
     description VLAN blue (1001) -> [h4,h5,s2,h6,s3]
    !
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    hostname s2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    no ipv6 unicast-routing
    !
    !
    ip host h1 172.16.0.1
    ip host h2 172.16.0.2
    ip host h3 172.16.0.3
    ip host h4 172.16.1.4
    ip host h5 172.16.1.5
    ip host h6 172.16.1.6
    ip host s1 10.0.0.7 10.1.0.1 10.1.0.9
    ip host s3 10.0.0.9 10.1.0.6 10.1.0.10
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.8/32
    !
    interface Ethernet1
     no switchport
     mtu 1600
     description s2 -> s1
     ip address 10.1.0.2/30
    !
     mac-address 52dc.cafe.0801
     no shutdown
    !
    interface Ethernet2
     no switchport
     mtu 1600
     description s2 -> s3
     ip address 10.1.0.5/30
    !
     mac-address 52dc.cafe.0802
     no shutdown
    !
    interface Ethernet3
     no switchport
     description [Access VLAN red] s2 -> h2
    !
     mac-address 52dc.cafe.0803
     no shutdown
    !
    interface Ethernet4
     no switchport
     description [Access VLAN blue] s2 -> h5
    !
     mac-address 52dc.cafe.0804
     no shutdown
    !
    interface Vlan1000
     description VLAN red (1000) -> [h1,s1,h2,h3,s3]
    !
    interface Vlan1001
     description VLAN blue (1001) -> [h4,s1,h5,h6,s3]
    !
ok: [s3] => 
  msg: |-
    initial configuration for s3
    =========================================
    hostname s3
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    no ipv6 unicast-routing
    !
    !
    ip host h1 172.16.0.1
    ip host h2 172.16.0.2
    ip host h3 172.16.0.3
    ip host h4 172.16.1.4
    ip host h5 172.16.1.5
    ip host h6 172.16.1.6
    ip host s1 10.0.0.7 10.1.0.1 10.1.0.9
    ip host s2 10.0.0.8 10.1.0.2 10.1.0.5
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.9/32
    !
    interface Ethernet1
     no switchport
     mtu 1600
     description s3 -> s2
     ip address 10.1.0.6/30
    !
     mac-address 52dc.cafe.0901
     no shutdown
    !
    interface Ethernet2
     no switchport
     mtu 1600
     description s3 -> s1
     ip address 10.1.0.10/30
    !
     mac-address 52dc.cafe.0902
     no shutdown
    !
    interface Ethernet3
     no switchport
     description [Access VLAN red] s3 -> h3
    !
     mac-address 52dc.cafe.0903
     no shutdown
    !
    interface Ethernet4
     no switchport
     description [Access VLAN blue] s3 -> h6
    !
     mac-address 52dc.cafe.0904
     no shutdown
    !
    interface Vlan1000
     description VLAN red (1000) -> [h1,s1,h2,s2,h3]
    !
    interface Vlan1001
     description VLAN blue (1001) -> [h4,s1,h5,s2,h6]
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for s1, s2, s3
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4, h5, h6

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [s2]
changed: [s3]
changed: [s1]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h2]
ok: [h1]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Create a temporary file for the rendered script] *************************
changed: [h6 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h5 -> localhost]
changed: [h4 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h3 -> localhost]
changed: [h6 -> localhost]
changed: [h5 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h6 -> localhost]
changed: [h4 -> localhost]
changed: [h5 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-z_epydog.sh] ***********************
changed: [h2 -> localhost]
changed: [h6 -> localhost]
changed: [h5 -> localhost]
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h5]
ok: [h4]
ok: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, h6, s1, s2, s3 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, h6, s1, s2, s3 => (item=vxlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, h6, s1, s2, s3 => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, h6, s1, s2, s3 => (item=ospf)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    vlan 1001
     name blue
    !
    vlan 1000
     name red
    !
  
    !
    interface Ethernet3
     switchport
     switchport access vlan 1000
    !
    interface Ethernet4
     switchport
     switchport access vlan 1001
    !
    interface Vlan1000
    !
    interface Vlan1001
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    vlan 1001
     name blue
    !
    vlan 1000
     name red
    !
  
    !
    interface Ethernet3
     switchport
     switchport access vlan 1000
    !
    interface Ethernet4
     switchport
     switchport access vlan 1001
    !
    interface Vlan1000
    !
    interface Vlan1001
ok: [s3] => 
  msg: |-
    vlan configuration for s3
    =========================================
    vlan 1001
     name blue
    !
    vlan 1000
     name red
    !
  
    !
    interface Ethernet3
     switchport
     switchport access vlan 1000
    !
    interface Ethernet4
     switchport
     switchport access vlan 1001
    !
    interface Vlan1000
    !
    interface Vlan1001

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for s1, s2, s3

TASK [eos_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/eos.j2] ***
changed: [s1]
changed: [s3]
changed: [s2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for vxlan] ***********************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for vxlan] *******************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    interface vxlan 1
      vxlan source-interface Loopback0
      vxlan vlan 1000 vni 101000
      vxlan vlan 1000 flood vtep 10.0.0.8 10.0.0.9
      vxlan vlan 1001 vni 101001
      vxlan vlan 1001 flood vtep 10.0.0.8 10.0.0.9
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    interface vxlan 1
      vxlan source-interface Loopback0
      vxlan vlan 1000 vni 101000
      vxlan vlan 1000 flood vtep 10.0.0.7 10.0.0.9
      vxlan vlan 1001 vni 101001
      vxlan vlan 1001 flood vtep 10.0.0.7 10.0.0.9
ok: [s3] => 
  msg: |-
    vxlan configuration for s3
    =========================================
    interface vxlan 1
      vxlan source-interface Loopback0
      vxlan vlan 1000 vni 101000
      vxlan vlan 1000 flood vtep 10.0.0.7 10.0.0.8
      vxlan vlan 1001 vni 101001
      vxlan vlan 1001 flood vtep 10.0.0.7 10.0.0.8

TASK [Deploy vxlan configuration] **********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for s1, s2, s3

TASK [eos_config: deploying vxlan from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/eos.j2] ***
changed: [s2]
changed: [s1]
changed: [s3]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [h5]
ok: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for routing] *********************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
skipping: [s1]
ok: [h5]
skipping: [s2]
skipping: [s3]
ok: [h6]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for routing] *****************
ok: [h1]
skipping: [s1]
ok: [h2]
skipping: [s2]
skipping: [s3]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
skipping: [s1]
skipping: [s2]
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
skipping: [s3]
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h6] => 
  msg: |-
    routing configuration for h6
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    routing configuration for h4
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h5] => 
  msg: |-
    routing configuration for h5
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4, h5, h6

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h6 -> localhost]
changed: [h5 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h4 -> localhost]
changed: [h3 -> localhost]
changed: [h5 -> localhost]
changed: [h6 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Container configuration for routing based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h3 -> localhost]
changed: [h4 -> localhost]
changed: [h5 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h6 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-79ygqq_j.sh] ***********************
changed: [h3 -> localhost]
changed: [h5 -> localhost]
changed: [h1 -> localhost]
changed: [h6 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h5]
ok: [h4]
ok: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for ospf] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.7
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! s1 -> s2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface Ethernet2
    ! s1 -> s3
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.8
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! s2 -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface Ethernet2
    ! s2 -> s3
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [s3] => 
  msg: |-
    ospf configuration for s3
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.9
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! s3 -> s2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface Ethernet2
    ! s3 -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Deploy ospf configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for s1, s2, s3

TASK [eos_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/eos.j2] ***
changed: [s2]
changed: [s1]
changed: [s3]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h2                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h3                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h4                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h5                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h6                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
s1                         : ok=42   changed=5    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   
s2                         : ok=42   changed=5    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   
s3                         : ok=42   changed=5    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   



This is the multi-node version of the vxlan-bridging lab.
Use it to check that you don't have spanning tree problems
in VXLAN overlay

* h1, h2 and h3 should be able to ping each other
* h4, h5 and h6 should be able to ping each other

Please note it might take a while for the lab to work due to
OSPF adjacency establishment and STP learning phase

