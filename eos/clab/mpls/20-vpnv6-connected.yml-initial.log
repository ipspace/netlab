[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [p1]
ok: [h1]
ok: [p2]
ok: [dut]
ok: [pe2]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Find device readiness script] ********************************************
ok: [p2]
ok: [p1]
ok: [h1]
ok: [dut]
ok: [h2]
ok: [pe2]
ok: [h4]
ok: [h3]

TASK [Wait for device to become ready] *****************************************
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/eos-clab.yml for dut, pe2

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [dut]
ok: [pe2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, pe2, p1, p2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]
ok: [pe2]
ok: [h4]

TASK [Find configuration template for normalize] *******************************
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h3]
ok: [dut]
ok: [h2]
ok: [pe2]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h2]
ok: [h4]
ok: [pe2]
ok: [h3]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [dut] => 
  msg: |-
    normalize configuration for dut
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0501
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0502
    !
    interface Ethernet3
     shutdown
     mac-address 52dc.cafe.0503
ok: [pe2] => 
  msg: |-
    normalize configuration for pe2
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0601
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0602
    !
    interface Ethernet3
     shutdown
     mac-address 52dc.cafe.0603

TASK [Deploy normalize configuration] ******************************************
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for dut, pe2

TASK [eos_config: deploying normalize from /home/pipi/netlab_gh/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [pe2]
changed: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, pe2, p1, p2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [dut]
ok: [pe2]

TASK [Find configuration template for initial] *********************************
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [p1]
ok: [p2]
ok: [h2]
ok: [h1]
ok: [dut]
ok: [pe2]
ok: [h3]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:42:3::4/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:42:3::4/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:42::1/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:42::1/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:42:1::2/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:42:1::2/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [p1] => 
  msg: |-
    initial configuration for p1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p1
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.7/32
    !
    interface eth1
     no shutdown
     description p1 -> dut
     ip address 10.1.0.2/30
    !
    interface eth2
     no shutdown
     description p1 -> p2
     ip address 10.1.0.5/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:42:2::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:42:2::3/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    ipv6 unicast-routing
    !
    vrf instance t1
     rd 65000:1
    !
    ipv6 unicast-routing vrf t1
    !
    vrf instance t2
     rd 65000:2
    !
    ipv6 unicast-routing vrf t2
    !
    !
    ip host p1 10.0.0.7 10.1.0.2 10.1.0.5
    ip host p2 10.0.0.8 10.1.0.6 10.1.0.9
    ip host pe2 10.0.0.6 10.1.0.10
    ipv6 host dut-t1 2001:db8:42::5
    ipv6 host dut-t2 2001:db8:42:2::5
    ipv6 host h1 2001:db8:42::1
    ipv6 host h2 2001:db8:42:1::2
    ipv6 host h3 2001:db8:42:2::3
    ipv6 host h4 2001:db8:42:3::4
    ipv6 host pe2-t1 2001:db8:42:1::6
    ipv6 host pe2-t2 2001:db8:42:3::6
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.5/32
    !
    interface Ethernet1
     no switchport
     description dut -> p1
     ip address 10.1.0.1/30
    !
     mac-address 52dc.cafe.0501
     no shutdown
    !
    interface Ethernet2
     no switchport
     vrf t1
     description dut -> h1 [stub]
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:42::5/64
    !
     mac-address 52dc.cafe.0502
     no shutdown
    !
    interface Ethernet3
     no switchport
     vrf t2
     description dut -> h3 [stub]
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:42:2::5/64
    !
     mac-address 52dc.cafe.0503
     no shutdown
    !
ok: [p2] => 
  msg: |-
    initial configuration for p2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.8/32
    !
    interface eth1
     no shutdown
     description p2 -> p1
     ip address 10.1.0.6/30
    !
    interface eth2
     no shutdown
     description p2 -> pe2
     ip address 10.1.0.9/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [pe2] => 
  msg: |-
    initial configuration for pe2
    =========================================
    hostname pe2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    ipv6 unicast-routing
    !
    vrf instance t1
     rd 65000:1
    !
    ipv6 unicast-routing vrf t1
    !
    vrf instance t2
     rd 65000:2
    !
    ipv6 unicast-routing vrf t2
    !
    !
    ip host dut 10.0.0.5 10.1.0.1
    ip host p1 10.0.0.7 10.1.0.2 10.1.0.5
    ip host p2 10.0.0.8 10.1.0.6 10.1.0.9
    ipv6 host dut-t1 2001:db8:42::5
    ipv6 host dut-t2 2001:db8:42:2::5
    ipv6 host h1 2001:db8:42::1
    ipv6 host h2 2001:db8:42:1::2
    ipv6 host h3 2001:db8:42:2::3
    ipv6 host h4 2001:db8:42:3::4
    ipv6 host pe2-t1 2001:db8:42:1::6
    ipv6 host pe2-t2 2001:db8:42:3::6
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.6/32
    !
    interface Ethernet1
     no switchport
     description pe2 -> p2
     ip address 10.1.0.10/30
    !
     mac-address 52dc.cafe.0601
     no shutdown
    !
    interface Ethernet2
     no switchport
     vrf t1
     description pe2 -> h2 [stub]
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:42:1::6/64
    !
     mac-address 52dc.cafe.0602
     no shutdown
    !
    interface Ethernet3
     no switchport
     vrf t2
     description pe2 -> h4 [stub]
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:42:3::6/64
    !
     mac-address 52dc.cafe.0603
     no shutdown
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for dut, pe2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for p1, p2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4

TASK [eos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/eos.j2] ***
changed: [pe2]
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [p1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [p1]
skipping: [p2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for p1, p2

TASK [template] ****************************************************************
changed: [p2]
changed: [p1]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [p2]
changed: [p1]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [p1]
skipping: [p2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-jcrqaiwx.sh] ***********************
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [p1]
ok: [p2]
ok: [dut]
ok: [pe2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, pe2 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, pe2 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, pe2 => (item=mpls)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, pe2 => (item=vrf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [p1]
ok: [p2]
ok: [dut]
ok: [pe2]

TASK [Find configuration template for bgp] *************************************
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p1]
skipping: [p2]
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    !
    route-map next-hop-self-ipv4 permit 10
       match route-type external
       set ip next-hop peer-address
    !
    route-map next-hop-self-ipv4 permit 20
    !
    !
    router bgp 65001
      bgp advertise-inactive
      bgp log-neighbor-changes
      no bgp default ipv4-unicast
      no bgp default ipv6-unicast
      router-id 10.0.0.5
    !
      neighbor 10.0.0.6 remote-as 65001
      neighbor 10.0.0.6 description pe2
      neighbor 10.0.0.6 update-source Loopback0
      neighbor 10.0.0.6 send-community standard extended large
    !
    !
     address-family ipv4
  
      network 10.0.0.5/32
    !
    !
    !
      neighbor 10.0.0.6 activate
      neighbor 10.0.0.6 route-map next-hop-self-ipv4 out
    !
ok: [pe2] => 
  msg: |-
    bgp configuration for pe2
    =========================================
    !
    route-map next-hop-self-ipv4 permit 10
       match route-type external
       set ip next-hop peer-address
    !
    route-map next-hop-self-ipv4 permit 20
    !
    !
    router bgp 65001
      bgp advertise-inactive
      bgp log-neighbor-changes
      no bgp default ipv4-unicast
      no bgp default ipv6-unicast
      router-id 10.0.0.6
    !
      neighbor 10.0.0.5 remote-as 65001
      neighbor 10.0.0.5 description dut
      neighbor 10.0.0.5 update-source Loopback0
      neighbor 10.0.0.5 send-community standard extended large
    !
    !
     address-family ipv4
  
      network 10.0.0.6/32
    !
    !
    !
      neighbor 10.0.0.5 activate
      neighbor 10.0.0.5 route-map next-hop-self-ipv4 out
    !

TASK [Deploy bgp configuration] ************************************************
skipping: [p1]
skipping: [p2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for dut, pe2

TASK [eos_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/eos.j2] ***
changed: [dut]
changed: [pe2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [p1]
ok: [p2]
ok: [dut]
ok: [pe2]

TASK [Find configuration template for ospf] ************************************
ok: [p2]
ok: [p1]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [p1]
ok: [p2]
ok: [pe2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p1] => 
  msg: |-
    ospf configuration for p1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.7
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! p1 -> p2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [p2] => 
  msg: |-
    ospf configuration for p2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.8
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p2 -> p1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! p2 -> pe2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.5
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! dut -> p1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [pe2] => 
  msg: |-
    ospf configuration for pe2
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.6
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! pe2 -> p2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for dut, pe2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for p1, p2

TASK [eos_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/eos.j2] ***
changed: [pe2]
changed: [dut]

TASK [template] ****************************************************************
changed: [p2]
changed: [p1]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [p1]
skipping: [p2]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [p2]
changed: [p1]

TASK [Figure out whether to deploy the module mpls on current device] **********
ok: [p1]
ok: [p2]
ok: [dut]
ok: [pe2]

TASK [Find configuration template for mpls] ************************************
ok: [p1]
ok: [p2]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for mpls] ********************
ok: [p1]
ok: [p2]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    mpls configuration for dut
    =========================================
    !
    mpls ip
    mpls icmp ttl-exceeded tunneling
    !
    mpls ldp
      router-id 10.0.0.5
      transport-address interface Loopback0
      interface disabled default
      no shutdown
    !
    interface Loopback0
      mpls ldp interface
    !
    interface Ethernet1
      mpls ip
      mpls ldp interface
    !
    !
    router bgp 65001
  
     neighbor 10.0.0.6 send-community add extended
    !
     address-family vpn-ipv6
    !
      neighbor 10.0.0.6 activate
      exit
ok: [p1] => 
  msg: |-
    mpls configuration for p1
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.7
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.7
        interface eth1
        exit
        interface eth2
        exit
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0
ok: [p2] => 
  msg: |-
    mpls configuration for p2
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.8
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.8
        interface eth1
        exit
        interface eth2
        exit
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0
ok: [pe2] => 
  msg: |-
    mpls configuration for pe2
    =========================================
    !
    mpls ip
    mpls icmp ttl-exceeded tunneling
    !
    mpls ldp
      router-id 10.0.0.6
      transport-address interface Loopback0
      interface disabled default
      no shutdown
    !
    interface Loopback0
      mpls ldp interface
    !
    interface Ethernet1
      mpls ip
      mpls ldp interface
    !
    !
    router bgp 65001
  
     neighbor 10.0.0.5 send-community add extended
    !
     address-family vpn-ipv6
    !
      neighbor 10.0.0.5 activate
      exit

TASK [Deploy mpls configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for dut, pe2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for p1, p2

TASK [eos_config: deploying mpls from /home/pipi/netlab_gh/netsim/ansible/templates/mpls/eos.j2] ***
changed: [pe2]
changed: [dut]

TASK [template] ****************************************************************
changed: [p1]
changed: [p2]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy mpls config from /home/pipi/netlab_gh/netsim/ansible/templates/mpls/frr.j2] ***
changed: [p1]
changed: [p2]

TASK [run vtysh to import mpls config from /home/pipi/netlab_gh/netsim/ansible/templates/mpls/frr.j2] ***
skipping: [p1]
skipping: [p2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [p1]
ok: [p2]
ok: [dut]
ok: [pe2]

TASK [Find configuration template for vrf] *************************************
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p1]
skipping: [p2]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
    !
    mpls ip
    !
    router bgp 65001
    !
     vrf t1
      router-id 10.0.0.5
      rd 65000:1
      route-target import vpn-ipv6 65000:1
      route-target export vpn-ipv6 65000:1
    !
      address-family ipv6
        redistribute connected
  
    !
     vrf t2
      router-id 10.0.0.5
      rd 65000:2
      route-target import vpn-ipv6 65000:2
      route-target export vpn-ipv6 65000:2
    !
      address-family ipv6
        redistribute connected
ok: [pe2] => 
  msg: |-
    vrf configuration for pe2
    =========================================
    !
    mpls ip
    !
    router bgp 65001
    !
     vrf t1
      router-id 10.0.0.6
      rd 65000:1
      route-target import vpn-ipv6 65000:1
      route-target export vpn-ipv6 65000:1
    !
      address-family ipv6
        redistribute connected
  
    !
     vrf t2
      router-id 10.0.0.6
      rd 65000:2
      route-target import vpn-ipv6 65000:2
      route-target export vpn-ipv6 65000:2
    !
      address-family ipv6
        redistribute connected

TASK [Deploy vrf configuration] ************************************************
skipping: [p1]
skipping: [p2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for dut, pe2

TASK [eos_config: deploying vrf from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/eos.j2] ***
changed: [pe2]
changed: [dut]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=47   changed=6    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h3                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h4                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
p1                         : ok=40   changed=7    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0   
p2                         : ok=39   changed=6    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0   
pe2                        : ok=47   changed=6    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   



The tested device (DUT) is a PE-router running MPLS/VPN with two IPv6-only
VRFs. The Linux hosts are attached directly to the PE-router.

The PE-router has to run OSPF and LDP with a P-router and exchange VPNv6
routes with another PE-router. The connected IPv6 subnets must be
redistributed into VPNv6 AF for the end-to-end connectivity test to work.

