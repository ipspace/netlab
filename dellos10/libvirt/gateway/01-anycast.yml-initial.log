[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [x1]
ok: [th]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]
ok: [x1]
ok: [th]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [x1]
skipping: [th]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, x1, th

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [h3]
ok: [x1]
ok: [dut]
ok: [th]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [x1]
ok: [th]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [x1]
skipping: [th]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [th]
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [x1]
skipping: [th]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [x1]
skipping: [th]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, x1, th

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]
ok: [x1]
ok: [th]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [x1]
ok: [h3]
ok: [th]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [x1]
skipping: [th]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [x1]
ok: [h3]
ok: [th]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [th] => 
  msg: |-
    initial configuration for th
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.44.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.44.6/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:44::6/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:44::6/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=1
    sysctl -qw net.ipv6.conf.eth1.accept_ra=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname h1
    !
    no ip forwarding
    no ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface eth1
     no shutdown
     description h1 -> [dut,h3,x1,h2]
     ip address 172.16.33.3/24
     ipv6 address 2001:db8:cafe:33::3/64
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=1
    sysctl -qw net.ipv6.conf.eth1.accept_ra=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname h2
    !
    no ip forwarding
    no ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface eth1
     no shutdown
     description h2 -> [h1,dut,h3,x1]
     ip address 172.16.33.4/24
     ipv6 address 2001:db8:cafe:33::4/64
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    lldp enable
    !
    !
    ip host x1 10.0.0.2
    !
    !
    default mtu 1532
    !
    interface mgmt1/1/1
     no lldp transmit
     no lldp receive
    !
    interface loopback0
     no shutdown
     ip address 10.0.0.1/32
     no ipv6 enable
    !
    interface ethernet1/1/1
     no shutdown
     no switchport
     description "dut -> [x1\\,th]"
     ip address 172.16.44.1/24
     ip unreachables
     ipv6 nd max-ra-interval 4
     ipv6 nd min-ra-interval 3
     ipv6 nd send-ra
     ipv6 address 2001:db8:cafe:44::1/64
     ipv6 unreachables
    !
    interface ethernet1/1/2
     no shutdown
     no switchport
     description "[Access VLAN edge] dut -> h1"
     no ipv6 enable
    !
    interface ethernet1/1/3
     no shutdown
     no switchport
     description "[Access VLAN edge] dut -> h3"
     no ipv6 enable
    !
    interface ethernet1/1/4
     no shutdown
     no switchport
     description "[Access VLAN edge] dut -> x1"
     no ipv6 enable
    !
    interface vlan1000
     no shutdown
     description "VLAN edge (1000) -> [h1\\,h3\\,x1\\,h2]"
     ip address 172.16.33.1/24
     ipv6 nd max-ra-interval 4
     ipv6 nd min-ra-interval 3
     ipv6 nd send-ra
     ipv6 address 2001:db8:cafe:33::1/64
    !
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=1
    sysctl -qw net.ipv6.conf.eth1.accept_ra=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname h3
    !
    no ip forwarding
    no ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface eth1
     no shutdown
     description h3 -> [h1,dut,x1,h2]
     ip address 172.16.33.5/24
     ipv6 address 2001:db8:cafe:33::5/64
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
    ip link set eth3 down
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
    ip link set eth3 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description x1 -> [dut,th]
     ip address 172.16.44.2/24
     ipv6 address 2001:db8:cafe:44::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description [Access VLAN edge] x1 -> dut
     ! no ip address
    !
    interface eth3
     no shutdown
     description [Access VLAN edge] x1 -> h2
     ! no ip address
    !
    interface vlan1000
     no shutdown
     description VLAN edge (1000) -> [h1,dut,h3,h2]
     ip address 172.16.33.2/24
     ipv6 address 2001:db8:cafe:33::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for h1, h2, h3, x1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for th

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [h1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [x1]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for h1, h2, h3, x1

TASK [template] ****************************************************************
changed: [h2]
changed: [x1]
changed: [h1]
changed: [h3]

TASK [set_fact] ****************************************************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [x1]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [h1]
changed: [h2]
changed: [h3]
changed: [x1]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [x1]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [th]

TASK [Create a temporary file for the rendered script] *************************
changed: [th -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [th -> localhost]

TASK [Copy script into running container at /tmp/config-th_initial.sh] *********
skipping: [th]

TASK [Execute /tmp/config-th_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [th]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [th -> localhost]

TASK [Remove temporary file /tmp/th_initial-a1y1rfij.sh] ***********************
changed: [th -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [th]
ok: [x1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, th, x1 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, th, x1 => (item=gateway)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, th, x1 => (item=routing)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [th]
ok: [x1]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [th]
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [th]
skipping: [x1]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [th]
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [th]
ok: [dut] => 
  msg: |-
    vlan configuration for dut
    =========================================
    interface vlan 1000
     description "VLAN edge"
     exit
    !
  
    !
    interface ethernet1/1/2
     switchport mode access
     switchport access vlan 1000
    !
    interface ethernet1/1/3
     switchport mode access
     switchport access vlan 1000
    !
    interface ethernet1/1/4
     switchport mode access
     switchport access vlan 1000
    !
    interface vlan1000
ok: [x1] => 
  msg: |-
    vlan configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
      ip link add vlan1000 type bridge
      ip link set dev vlan1000 address 52:dc:ca:fd:02:00
  
      ip link set dev vlan1000 mtu 1500
      ip addr flush dev vlan1000
      ip addr add 172.16.33.2/24 dev vlan1000
      sysctl -w net.ipv6.conf.vlan1000.addr_gen_mode=3
      ip addr add 2001:db8:cafe:33::2/64 dev vlan1000
    fi
  
    ip link set dev eth2 master vlan1000
    ip link set dev eth3 master vlan1000
  
    ip link set dev vlan1000 up

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [th]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for x1

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying vlan from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
changed: [x1]

TASK [run vtysh to import vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [x1]

TASK [Figure out whether to deploy the module gateway on current device] *******
ok: [h1]
ok: [h2]
ok: [dut]
ok: [th]
ok: [h3]
ok: [x1]

TASK [Find configuration template for gateway] *********************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [th]
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [th]
skipping: [x1]

TASK [Find configuration deployment deploy_script for gateway] *****************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [th]
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [th]
ok: [dut] => 
  msg: |-
    gateway configuration for dut
    =========================================
    ip virtual-router mac-address 02:00:ca:fe:c0:01
  
  
    !
    interface vlan1000
      ip virtual-router address 172.16.33.42
      ipv6 virtual-router address 2001:db8:cafe:33::2a
ok: [x1] => 
  msg: |-
    gateway configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    sysctl -w net.ipv6.conf.all.enhanced_dad=0
    sysctl -w net.ipv6.conf.default.enhanced_dad=0
    if [ ! -e /sys/class/net/varp-40000 ]; then
      ip link add varp-40000 link vlan1000 type macvlan mode private
      ip link set dev varp-40000 address 02:00:ca:fe:c0:01
      bridge fdb replace 02:00:ca:fe:c0:01 dev vlan1000 self
      ip addr add 172.16.33.42/24 dev varp-40000 metric 1024
      ip addr add 2001:db8:cafe:33::2a/64 dev varp-40000 metric 1024
      sysctl -w net.ipv4.conf.vlan1000.arp_announce=2
      sysctl -w net.ipv4.conf.vlan1000.arp_ignore=2
      sysctl -w net.ipv4.conf.vlan1000.arp_accept=1
      sysctl -w net.ipv6.conf.varp-40000.enhanced_dad=0
      sysctl -w net.ipv6.conf.varp-40000.accept_dad=0
      sysctl -w net.ipv6.conf.varp-40000.dad_transmits=0
      ip link set dev varp-40000 up
    fi
    #!/bin/bash
    cat >/tmp/vrrp_config <<CONFIG
    do write
    CONFIG
    vtysh -f /tmp/vrrp_config

TASK [Deploy gateway configuration] ********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [th]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for x1

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying gateway from /home/pipi/netlab_gh/netsim/ansible/templates/gateway/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]

TASK [run /tmp/config.sh to deploy gateway config from /home/pipi/netlab_gh/netsim/ansible/templates/gateway/frr.j2] ***
changed: [x1]

TASK [run vtysh to import gateway config from /home/pipi/netlab_gh/netsim/ansible/templates/gateway/frr.j2] ***
skipping: [x1]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [th]
ok: [x1]

TASK [Find configuration template for routing] *********************************
skipping: [dut]
ok: [h1]
skipping: [x1]
ok: [h2]
ok: [h3]
ok: [th]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [th]
skipping: [x1]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [dut]
skipping: [x1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [th]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [x1]
ok: [th] => 
  msg: |-
    routing configuration for th
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.44.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.44.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.44.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.44.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    !
    !
    !
    !
    ! Global static routes
    !
    ip route 172.16.44.0/24 172.16.33.42 eth1
    ipv6 route 2001:db8:cafe:44::/64 2001:db8:cafe:33::2a eth1
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    !
    !
    !
    !
    ! Global static routes
    !
    ip route 172.16.44.0/24 172.16.33.42 eth1
    ipv6 route 2001:db8:cafe:44::/64 2001:db8:cafe:33::2a eth1
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    !
    !
    !
    !
    ! Global static routes
    !
    ip route 172.16.44.0/24 172.16.33.42 eth1
    ipv6 route 2001:db8:cafe:44::/64 2001:db8:cafe:33::2a eth1

TASK [Deploy routing configuration] ********************************************
skipping: [dut]
skipping: [x1]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for h1, h2, h3
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for th

TASK [template] ****************************************************************
changed: [h3]
changed: [h1]
changed: [h2]

TASK [set_fact] ****************************************************************
ok: [h1]
ok: [h2]
ok: [h3]

TASK [run /tmp/config.sh to deploy routing config from /home/pipi/netlab_gh/netsim/ansible/templates/routing/frr.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [run vtysh to import routing config from /home/pipi/netlab_gh/netsim/ansible/templates/routing/frr.j2] ***
changed: [h1]
changed: [h2]
changed: [h3]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [th]

TASK [Create a temporary file for the rendered script] *************************
changed: [th -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [th -> localhost]

TASK [Copy script into running container at /tmp/config-th_routing.sh] *********
skipping: [th]

TASK [Execute /tmp/config-th_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [th]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [th -> localhost]

TASK [Remove temporary file /tmp/th_routing-mn3yyuuc.sh] ***********************
changed: [th -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=30   changed=3    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
h1                         : ok=31   changed=5    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
h2                         : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
h3                         : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
th                         : ok=33   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
x1                         : ok=37   changed=6    unreachable=0    failed=0    skipped=16   rescued=0    ignored=0   



This lab tests the anycast gateway functionality. It checks whether the
anycast IP is active, whether it has the correct MAC address, and whether the
first device in the forwarding path intercepts the packets with the shared MAC
address.

