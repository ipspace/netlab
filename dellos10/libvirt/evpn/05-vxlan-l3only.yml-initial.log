[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s2]
ok: [h1]
ok: [h2]
ok: [s1]

TASK [Find device readiness script] ********************************************
ok: [s2]
ok: [h1]
ok: [h2]
ok: [s1]

TASK [Wait for device to become ready] *****************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [s2]
ok: [h1]
ok: [h2]
ok: [s1]

TASK [Find configuration template for normalize] *******************************
ok: [s2]
ok: [h1]
ok: [h2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]

TASK [Deploy normalize configuration] ******************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [s2]
ok: [h1]
ok: [h2]
ok: [s1]

TASK [Find configuration template for initial] *********************************
ok: [s2]
ok: [h1]
ok: [h2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.3 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.2/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.4 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set dev eth1 mtu 1500
    ip link set dev eth2 mtu 1600
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description s2 -> h2 [stub]
     ip address 172.16.1.4/24
    !
    interface eth2
     no shutdown
     description s2 -> s1
     ip address 10.1.0.2/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    lldp enable
    !
    ip vrf customer
    !
    ! ip route-import|export xxx
     ip route-import 65000:1
     ip route-export 65000:1
    !
    exit
    !
    ip host s2 10.0.0.4
    !
    !
    default mtu 1532
    !
    interface loopback0
     ip address 10.0.0.3/32
     no ipv6 enable
    !
    interface mgmt1/1/1
     no lldp transmit
     no lldp receive
    !
    interface ethernet1/1/1
     no shutdown
     no switchport
     ip vrf forwarding customer
     mtu 1532
     description "s1 -> h1 [stub]"
     ip address 172.16.0.3/24
     no ipv6 enable
    !
    interface ethernet1/1/2
     no shutdown
     no switchport
     mtu 1632
     description "s1 -> s2"
     ip address 10.1.0.1/30
     no ipv6 enable
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s2]
ok: [h1]
ok: [h2]
ok: [s1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [dellos10_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/dellos10.j2] ***
changed: [s1]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [s2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [s2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for s2

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [s2]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [s2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-my0uto64.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s2]
ok: [s1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vrf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vxlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=evpn)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s2]
ok: [s1]

TASK [Find configuration template for vlan] ************************************
ok: [s2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
    exit 0
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    ! First of all, create association VLAN<->Virtual-Network
    !

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s2]
ok: [s1]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [dellos10_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/dellos10.j2] ***
changed: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
changed: [s2]

TASK [run vtysh to import vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [s2]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [s2]
ok: [s1]

TASK [Find configuration template for bgp] *************************************
ok: [s2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s2] => 
  msg: |-
    bgp configuration for s2
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.0.0.3 remote-as 65000
      neighbor 10.0.0.3 description s1
      neighbor 10.0.0.3 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.4/32
    !
    !
    !
      neighbor 10.0.0.3 activate
      neighbor 10.0.0.3 next-hop-self
      no neighbor 10.0.0.3 send-community all
      neighbor 10.0.0.3 send-community standard
      neighbor 10.0.0.3 send-community large
      neighbor 10.0.0.3 send-community extended
    !
    !
    !
    do write
ok: [s1] => 
  msg: |-
    bgp configuration for s1
    =========================================
    !
    router bgp 65000
      log-neighbor-changes
  
    ! define a generic unnumbered template to be used for eBGP unnumbered...
    ! additionally, need to define link-local-only-nexthop as per Dell suggested "Cumulus workaround"
    ! WTF Dell...
      template unnumbered_ebgp
        link-local-only-nexthop
        exit
  
      router-id 10.0.0.3
    !
      neighbor 10.0.0.4
        remote-as 65000
  
        description "s2"
        update-source loopback0
    !
     address-family ipv4 unicast
       next-hop-self
     exit
        send-community standard
        send-community extended
  
    !
     address-family ipv4 unicast
       soft-reconfiguration inbound
       activate
     exit
  
  
      no shutdown
      exit
    !
    !
     address-family ipv4 unicast
    !
      network 10.0.0.3/32
    !
    !
    !
    !

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [s2]
ok: [s1]

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [dellos10_config: deploying bgp from /home/pipi/net101/tools/netsim/ansible/templates/bgp/dellos10.j2] ***
changed: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [s2]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [s2]
ok: [s1]

TASK [Find configuration template for ospf] ************************************
ok: [s2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
  
    router ospf 1
     router-id 10.0.0.3
  
    !
    interface loopback0
     ip ospf 1 area 0.0.0.0
     ip ospf passive
    !
    interface ethernet1/1/2
    ! s1 -> s2
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.4
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth2
    ! s2 -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [s2]
ok: [s1]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [dellos10_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/dellos10.j2] ***
changed: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [s2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [s2]
ok: [s1]

TASK [Find configuration template for vrf] *************************************
ok: [s2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vrf configuration for s1
    =========================================
    !
    router bgp 65000
    !
     vrf customer
      router-id 10.0.0.3
    ! need to define unnumbered template also at vrf-level
      template unnumbered_ebgp
        link-local-only-nexthop
        exit
  
  
  
    !
     address-family ipv4 unicast
       redistribute connected
ok: [s2] => 
  msg: |-
    vrf configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
    # Create VRF tables
    if [ ! -e /sys/devices/virtual/net/customer ]; then
    ip link add customer type vrf table 100
    fi
    ip link set customer up
  
    # Move interfaces and loopbacks to vrfs
    sysctl -qw net.ipv6.conf.eth1.keep_addr_on_down=1
    ip link set eth1 master customer
  
    cat >/tmp/vrf_config <<CONFIG
    vrf customer
     exit-vrf
    !
    router bgp 65000
    !
    !
    router bgp 65000 vrf customer
     no bgp ebgp-requires-policy
     no bgp default ipv4-unicast
     bgp router-id 10.0.0.4
     address-family ipv4 unicast
      redistribute connected
  
      label vpn export auto
      export vpn
      import vpn
      rd vpn export 65000:1
      rt vpn import 65000:1
      rt vpn export 65000:1
     exit-address-family
    !
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?

TASK [Find configuration deployment deploy_script for vrf] *********************
ok: [s2]
ok: [s1]

TASK [Deploy vrf configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [dellos10_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/dellos10.j2] ***
changed: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy vrf config from /home/pipi/net101/tools/netsim/ansible/templates/vrf/frr.j2] ***
changed: [s2]

TASK [run vtysh to import vrf config from /home/pipi/net101/tools/netsim/ansible/templates/vrf/frr.j2] ***
skipping: [s2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [s2]
ok: [s1]

TASK [Find configuration template for vxlan] ***********************************
ok: [s2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
  
  
    # Determine max MTU used on interfaces, to configure VXLAN interface
  
    # Create L3 VNIs with bridges and add to correct vrf table
    ip link add vxlan5042 type vxlan \
      id 5042 \
      dstport 4789 \
      local 10.0.0.4 nolearning
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/tvni-100 ]; then
    brctl addbr tvni-100
    ip link set up dev tvni-100
    fi
    brctl addif tvni-100 vxlan5042
    brctl stp tvni-100 off
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1600 addrgenmode none dev vxlan5042
    # Disable dynamic MAC learning for evpn, see https://docs.frrouting.org/en/latest/evpn.html
    bridge link set dev vxlan5042 learning off
    ip link set up dev vxlan5042
    ip link set tvni-100 master customer
  
  
  
    exit $?
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    nve
      source-interface loopback0

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [s2]
ok: [s1]

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [dellos10_config: deploying vxlan from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/dellos10.j2] ***
changed: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/frr.j2] ***
changed: [s2]

TASK [run vtysh to import vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/frr.j2] ***
skipping: [s2]

TASK [Figure out whether to deploy the module evpn on current device] **********
ok: [s2]
ok: [s1]

TASK [Find configuration template for evpn] ************************************
ok: [s2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s2] => 
  msg: |-
    evpn configuration for s2
    =========================================
    router bgp 65000
     address-family l2vpn evpn
      advertise-all-vni
      advertise-svi-ip
      advertise ipv4 unicast
  
    ! Configure explicit Route Targets and RD per L2 VNI; auto-derived differs
  
      neighbor 10.0.0.3 activate
      neighbor 10.0.0.3 soft-reconfiguration inbound
  
     exit-address-family
    !
  
    exit
  
    ! L3 VRF EVPN handling
    vrf customer
     vni 5042
     exit-vrf
  
    router bgp 65000 vrf customer
     address-family l2vpn evpn
      ! This sets the L3 VNI RD/RT for this VRF
      rd 65000:1
      route-target export 65000:1
      route-target import 65000:1
      ! Enable RT5 advertisements
      advertise ipv4 unicast
     exit-address-family
    exit
    !
    !
    do write
ok: [s1] => 
  msg: |-
    evpn configuration for s1
    =========================================
    !
    router bgp 65000
    !
      neighbor 10.0.0.4
        address-family l2vpn evpn
          activate
  
  
        exit
  
  
  
    evpn
      no arp-nd-suppression disable
      vrf customer
        rd 10.0.0.3:100
        route-target 65000:1 import
        route-target 65000:1 export
        route-target 65000:1 both
  
        vni 5042
  
        advertise ipv4 connected
        advertise ipv4 static
        advertise ipv4 ospf
        advertise ipv4 bgp
  
    !
    router bgp 65000
      vrf customer
        address-family ipv4 unicast
          redistribute l2vpn evpn
    !

TASK [Find configuration deployment deploy_script for evpn] ********************
ok: [s2]
ok: [s1]

TASK [Deploy evpn configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [dellos10_config: deploying evpn from /home/pipi/net101/tools/netsim/ansible/templates/evpn/dellos10.j2] ***
changed: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy evpn config from /home/pipi/net101/tools/netsim/ansible/templates/evpn/frr.j2] ***
skipping: [s2]

TASK [run vtysh to import evpn config from /home/pipi/net101/tools/netsim/ansible/templates/evpn/frr.j2] ***
changed: [s2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h2                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
s1                         : ok=55   changed=7    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
s2                         : ok=71   changed=15   unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   



The device under test is a VLAN-to-VXLAN layer-3 switch between an access
interface and an EVPN transit VNI.

Hosts should be able to ping each other.

Please note it might take a while for the lab to work due to STP learning
phase.

