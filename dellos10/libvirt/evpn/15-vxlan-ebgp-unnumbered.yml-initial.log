[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [l2]
ok: [h1]
ok: [spine]
ok: [l1]
ok: [h2]

TASK [Find device readiness script] ********************************************
ok: [l2]
ok: [h1]
ok: [h2]
ok: [spine]
ok: [l1]

TASK [Wait for device to become ready] *****************************************
skipping: [spine]
skipping: [l1]
skipping: [l2]
skipping: [h1]
skipping: [h2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for spine, l1, l2, h1, h2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [l2]
ok: [h1]
ok: [spine]
ok: [h2]
ok: [l1]

TASK [Find configuration template for normalize] *******************************
ok: [l2]
ok: [h1]
ok: [spine]
ok: [h2]
ok: [l1]

TASK [fail] ********************************************************************
skipping: [spine]
skipping: [l1]
skipping: [l2]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [l2]
ok: [h1]
ok: [spine]
ok: [l1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [spine]
skipping: [l1]
skipping: [l2]
skipping: [h1]
skipping: [h2]

TASK [Deploy normalize configuration] ******************************************
skipping: [spine]
skipping: [l1]
skipping: [l2]
skipping: [h1]
skipping: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for spine, l1, l2, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [l2]
ok: [h1]
ok: [h2]
ok: [spine]
ok: [l1]

TASK [Find configuration template for initial] *********************************
ok: [l2]
ok: [h1]
ok: [spine]
ok: [h2]
ok: [l1]

TASK [fail] ********************************************************************
skipping: [spine]
skipping: [l1]
skipping: [l2]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [l2]
ok: [h1]
ok: [spine]
ok: [l1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
[WARNING]: The value 'True' is not a valid IP address or network, passing this
value to ipaddr filter might result in breaking change in future.
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.5/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.4/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [l2] => 
  msg: |-
    initial configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
    ip link set dev eth1 mtu 1600
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname l2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description l2 -> spine [external]
     ip address 10.0.0.3/32
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description [Access VLAN red] l2 -> h2
     ! no ip address
    !
    interface vlan1000
     no shutdown
     description VLAN red (1000) -> [h1,l1,h2]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [spine] => 
  msg: |-
    initial configuration for spine
    =========================================
    hostname spine
    !
    lldp enable
    !
    !
    ip host l1 10.0.0.2
    ip host l2 10.0.0.3
    !
    !
    default mtu 1532
    !
    interface loopback0
     ip address 10.0.0.1/32
     no ipv6 enable
    !
    interface mgmt1/1/1
     no lldp transmit
     no lldp receive
    !
    interface ethernet1/1/1
     no shutdown
     no switchport
     mtu 1632
     description "spine -> l1 [external]"
    ! Invalid IPv4 address True
     ipv6 nd max-ra-interval 4
     ipv6 nd min-ra-interval 3
     ipv6 nd send-ra
     ipv6 nd mtu 1600
     ipv6 enable
     ipv6 unreachables
    !
    interface ethernet1/1/2
     no shutdown
     no switchport
     mtu 1632
     description "spine -> l2 [external]"
    ! Invalid IPv4 address True
     ipv6 nd max-ra-interval 4
     ipv6 nd min-ra-interval 3
     ipv6 nd send-ra
     ipv6 nd mtu 1600
     ipv6 enable
     ipv6 unreachables
    !
ok: [l1] => 
  msg: |-
    initial configuration for l1
    =========================================
    hostname l1
    !
    lldp enable
    !
    !
    ip host spine 10.0.0.1
    ip host l2 10.0.0.3
    !
    !
    default mtu 1532
    !
    interface loopback0
     ip address 10.0.0.2/32
     no ipv6 enable
    !
    interface mgmt1/1/1
     no lldp transmit
     no lldp receive
    !
    interface ethernet1/1/1
     no shutdown
     no switchport
     mtu 1632
     description "l1 -> spine [external]"
    ! Invalid IPv4 address True
     ipv6 nd max-ra-interval 4
     ipv6 nd min-ra-interval 3
     ipv6 nd send-ra
     ipv6 nd mtu 1600
     ipv6 enable
     ipv6 unreachables
    !
    interface ethernet1/1/2
     no shutdown
     no switchport
     description "[Access VLAN red] l1 -> h1"
     no ipv6 enable
    !
    interface virtual-network1000
     no shutdown
     description "VLAN red (1000) -> [h1\\,h2\\,l2]"
     no ipv6 enable
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/dellos10.yml for spine, l1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for l2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [wait_for_connection] *****************************************************
skipping: [spine]
skipping: [l1]

TASK [dellos10_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/dellos10.j2, save to startup=yes] ***
changed: [l1]
changed: [spine]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [l2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [l2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for l2

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [l2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [l2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-3fnklb17.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [l2]
ok: [l1]
ok: [spine]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for l1, l2, spine => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for l1, l2, spine => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for l1, l2, spine => (item=vxlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for l1, l2, spine => (item=evpn)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [l2]
ok: [l1]
ok: [spine]

TASK [Find configuration template for vlan] ************************************
skipping: [spine]
ok: [l1]
ok: [l2]

TASK [fail] ********************************************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [spine]
ok: [l2]
ok: [l1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [spine]
ok: [l2] => 
  msg: |-
    vlan configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
      brctl addbr vlan1000
      ip link set dev vlan1000 address 52:dc:ca:fd:03:00
  
      ip addr flush dev vlan1000
    fi
  
    brctl addif vlan1000 eth2
  
    ip link set dev vlan1000 up
    exit 0
ok: [l1] => 
  msg: |-
    vlan configuration for l1
    =========================================
    ! First of all, create association VLAN<->Virtual-Network
    virtual-network 1000
     exit
    clear virtual-network 1000 counters
    !
    interface vlan 1000
     description "VLAN red"
     virtual-network 1000
     exit
    !
    !
    interface ethernet1/1/2
     switchport mode access
     switchport access vlan 1000
    !
    interface virtual-network1000

TASK [Deploy vlan configuration] ***********************************************
skipping: [spine]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/dellos10.yml for l1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [wait_for_connection] *****************************************************
skipping: [l1]

TASK [dellos10_config: deploying vlan from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/dellos10.j2, save to startup=yes] ***
changed: [l1]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
changed: [l2]

TASK [run vtysh to import vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [l2]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [l2]
ok: [l1]
ok: [spine]

TASK [Find configuration template for bgp] *************************************
ok: [l2]
ok: [l1]
ok: [spine]

TASK [fail] ********************************************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [l2]
ok: [l1]
ok: [spine]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [l2] => 
  msg: |-
    bgp configuration for l2
    =========================================
    !
    router bgp 65202
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor eth1 interface remote-as 65100
      neighbor eth1 description spine
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.3/32
    !
    !
    !
      neighbor eth1 activate
      no neighbor eth1 send-community all
      neighbor eth1 send-community standard
      neighbor eth1 send-community large
      neighbor eth1 send-community extended
    !
    !
    !
    do write
ok: [l1] => 
  msg: |-
    bgp configuration for l1
    =========================================
    !
    router bgp 65201
      log-neighbor-changes
  
    ! define a generic unnumbered template to be used for eBGP unnumbered...
    ! additionally, need to define link-local-only-nexthop as per Dell suggested "Cumulus workaround"
    ! WTF Dell...
      template unnumbered_ebgp
        link-local-only-nexthop
        exit
  
      router-id 10.0.0.2
    !
      neighbor interface ethernet1/1/1
    ! This is an unnumbered eBGP session
    ! WTF Remote-AS configuration not supported for unnumbered peer
        inherit template unnumbered_ebgp inherit-type ebgp
  
        description "spine"
        send-community standard
        send-community extended
  
    !
     address-family ipv4 unicast
       soft-reconfiguration inbound
       activate
     exit
  
  
      no shutdown
      exit
    !
    !
     address-family ipv4 unicast
    !
      network 10.0.0.2/32
    !
    !
    !
    !
ok: [spine] => 
  msg: |-
    bgp configuration for spine
    =========================================
    !
    router bgp 65100
      log-neighbor-changes
  
    ! define a generic unnumbered template to be used for eBGP unnumbered...
    ! additionally, need to define link-local-only-nexthop as per Dell suggested "Cumulus workaround"
    ! WTF Dell...
      template unnumbered_ebgp
        link-local-only-nexthop
        exit
  
      router-id 10.0.0.1
    !
      neighbor interface ethernet1/1/1
    ! This is an unnumbered eBGP session
    ! WTF Remote-AS configuration not supported for unnumbered peer
        inherit template unnumbered_ebgp inherit-type ebgp
  
        description "l1"
        send-community standard
        send-community extended
  
    !
     address-family ipv4 unicast
       soft-reconfiguration inbound
       activate
     exit
  
  
      no shutdown
      exit
    !
      neighbor interface ethernet1/1/2
    ! This is an unnumbered eBGP session
    ! WTF Remote-AS configuration not supported for unnumbered peer
        inherit template unnumbered_ebgp inherit-type ebgp
  
        description "l2"
        send-community standard
        send-community extended
  
    !
     address-family ipv4 unicast
       soft-reconfiguration inbound
       activate
     exit
  
  
      no shutdown
      exit
    !
    !
     address-family ipv4 unicast
    !
      network 10.0.0.1/32
    !
    !
    !
    !

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/dellos10.yml for l1, spine
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [wait_for_connection] *****************************************************
skipping: [l1]
skipping: [spine]

TASK [dellos10_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/dellos10.j2, save to startup=yes] ***
changed: [l1]
changed: [spine]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [l2]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [l2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [l2]
ok: [l1]
ok: [spine]

TASK [Find configuration template for vxlan] ***********************************
skipping: [spine]
ok: [l2]
ok: [l1]

TASK [fail] ********************************************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for vxlan] *******************
skipping: [spine]
ok: [l2]
ok: [l1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [spine]
ok: [l2] => 
  msg: |-
    vxlan configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
  
  
    # Create L3 VNIs with bridges and add to correct vrf table
  
    # Create VXLAN L2 interface per vni
    ip link add vxlan1000 type vxlan \
      id 1000 \
      dstport 4789 \
      local 10.0.0.3 nolearning
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
    brctl addbr vlan1000
    ip link set up dev vlan1000
    fi
    brctl addif vlan1000 vxlan1000
    brctl stp vlan1000 off
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan1000
    # Disable dynamic MAC learning for evpn, see https://docs.frrouting.org/en/latest/evpn.html
    bridge link set dev vxlan1000 learning off
    ip link set up dev vxlan1000
  
  
    exit $?
ok: [l1] => 
  msg: |-
    vxlan configuration for l1
    =========================================
    nve
      source-interface loopback0
  
    virtual-network 1000
      vxlan-vni 1000

TASK [Deploy vxlan configuration] **********************************************
skipping: [spine]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/dellos10.yml for l1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [wait_for_connection] *****************************************************
skipping: [l1]

TASK [dellos10_config: deploying vxlan from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/dellos10.j2, save to startup=yes] ***
changed: [l1]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/frr.j2] ***
changed: [l2]

TASK [run vtysh to import vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/frr.j2] ***
skipping: [l2]

TASK [Figure out whether to deploy the module evpn on current device] **********
ok: [l2]
ok: [l1]
ok: [spine]

TASK [Find configuration template for evpn] ************************************
ok: [l2]
ok: [l1]
ok: [spine]

TASK [fail] ********************************************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for evpn] ********************
ok: [l2]
ok: [l1]
ok: [spine]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [l2] => 
  msg: |-
    evpn configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e
    cat >/tmp/evpn_config <<CONFIG
    router bgp 65202
     address-family l2vpn evpn
      advertise-all-vni
      advertise-svi-ip
      advertise ipv4 unicast
  
    ! Configure explicit Route Targets and RD per L2 VNI; auto-derived differs
      vni 1000
       rd 10.0.0.3:1000
       route-target export 65000:1000
       route-target import 65000:1000
      exit-vni
  
      neighbor eth1 activate
      neighbor eth1 soft-reconfiguration inbound
  
     exit-address-family
    !
  
    exit
  
    ! L3 VRF EVPN handling
    !
    do write
    CONFIG
    vtysh -f /tmp/evpn_config
    vtysh -c 'clear bgp *'
ok: [l1] => 
  msg: |-
    evpn configuration for l1
    =========================================
    !
    router bgp 65201
    !
      neighbor interface ethernet1/1/1
        address-family l2vpn evpn
          activate
  
  
        exit
  
    evpn
    evi 1000
        vni 1000
        rd 10.0.0.2:1000
        route-target 65000:1000 import
        route-target 65000:1000 export
        route-target 65000:1000 both
ok: [spine] => 
  msg: |-
    evpn configuration for spine
    =========================================
    !
    router bgp 65100
    !
      neighbor interface ethernet1/1/1
        address-family l2vpn evpn
          activate
  
  
        exit
      neighbor interface ethernet1/1/2
        address-family l2vpn evpn
          activate
  
  
        exit

TASK [Deploy evpn configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/dellos10.yml for l1, spine
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [wait_for_connection] *****************************************************
skipping: [l1]
skipping: [spine]

TASK [dellos10_config: deploying evpn from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/dellos10.j2, save to startup=yes] ***
changed: [spine]
changed: [l1]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy evpn config from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/frr.j2] ***
changed: [l2]

TASK [run vtysh to import evpn config from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/frr.j2] ***
skipping: [l2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
l1                         : ok=42   changed=5    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
l2                         : ok=54   changed=11   unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
spine                      : ok=32   changed=3    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   



The devices under test are an EVPN leaf and an EVPN spine device using EVPN
over unnumbered EBGP session. The EVPN leaf device should originate the EVPN
routes, and the EVPN spine device should propagate EVPN AF routes between
PE-devices, resulting in VXLAN-based VLAN extension.

* h1 and h2 should be able to ping each other

Please note it might take a while for the lab to work due to
STP learning phase

