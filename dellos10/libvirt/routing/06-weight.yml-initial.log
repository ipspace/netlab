[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [probe]
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [probe]
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [probe]
skipping: [x1]
skipping: [x2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, probe, x1, x2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [probe]
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [probe]
ok: [x1]
ok: [x2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [probe]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [probe]
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [probe]
skipping: [x1]
skipping: [x2]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [probe]
skipping: [x1]
skipping: [x2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, probe, x1, x2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [probe]
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [probe]
ok: [x1]
ok: [x2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [probe]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [probe]
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [probe] => 
  msg: |-
    initial configuration for probe
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname probe
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description probe -> dut
     ip address 10.1.0.10/30
     ipv6 address 2001:db8:3:2::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description x1 -> x2 [external]
     ip address 172.42.42.3/24
     ipv6 address 2001:db8:cafe:42::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description x1 -> dut [external]
     ip address 10.1.0.2/30
     ipv6 address 2001:db8:3::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x2
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
     ipv6 address 2001:db8:1:4::1/64
    !
    interface eth1
     no shutdown
     description x2 -> x1 [external]
     ip address 172.42.42.4/24
     ipv6 address 2001:db8:cafe:42::4/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description x2 -> dut [external]
     ip address 10.1.0.6/30
     ipv6 address 2001:db8:3:1::4/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    lldp enable
    !
    !
    ip host probe 10.0.0.2
    ip host x1 10.0.0.3
    ip host x2 10.0.0.4
    !
    !
    default mtu 1532
    !
    interface mgmt1/1/1
     no lldp transmit
     no lldp receive
    !
    interface loopback0
     no shutdown
     ip address 10.0.0.1/32
     ipv6 address 2001:db8:1:1::1/64
    !
    interface ethernet1/1/1
     no shutdown
     no switchport
     description "dut -> x1 [external]"
     ip address 10.1.0.1/30
     ip unreachables
     ipv6 nd max-ra-interval 4
     ipv6 nd min-ra-interval 3
     ipv6 nd send-ra
     ipv6 address 2001:db8:3::1/64
     ipv6 unreachables
    !
    interface ethernet1/1/2
     no shutdown
     no switchport
     description "dut -> x2 [external]"
     ip address 10.1.0.5/30
     ip unreachables
     ipv6 nd max-ra-interval 4
     ipv6 nd min-ra-interval 3
     ipv6 nd send-ra
     ipv6 address 2001:db8:3:1::1/64
     ipv6 unreachables
    !
    interface ethernet1/1/3
     no shutdown
     no switchport
     description "dut -> probe"
     ip address 10.1.0.9/30
     ip unreachables
     ipv6 nd max-ra-interval 4
     ipv6 nd min-ra-interval 3
     ipv6 nd send-ra
     ipv6 address 2001:db8:3:2::1/64
     ipv6 unreachables
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for probe, x1, x2

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [probe -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [probe]
skipping: [x1]
skipping: [x2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for probe, x1, x2

TASK [template] ****************************************************************
changed: [x2]
changed: [probe]
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [probe]
ok: [x1]
ok: [x2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [probe]
changed: [x1]
changed: [x2]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [probe]
skipping: [x1]
skipping: [x2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [probe]
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, probe, x1, x2 => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, probe, x1, x2 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, probe, x1, x2 => (item=bgp)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [probe]
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Find configuration template for routing] *********************************
skipping: [x1]
ok: [probe]
ok: [x2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [probe]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [x1]
ok: [probe]
ok: [x2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [x1]
ok: [probe] => 
  msg: |-
    routing configuration for probe
    =========================================
    !
    !
ok: [x2] => 
  msg: |-
    routing configuration for x2
    =========================================
    !
    !
    route-map bp-dut-2-out-ipv4 permit 10
      set as-path prepend 65101 65101
  
    !
    route-map bp-dut-2-out-ipv6 permit 10
      set as-path prepend 65101 65101
  
    !
ok: [dut] => 
  msg: |-
    routing configuration for dut
    =========================================
    !
    !
    route-map w_100-ipv4 permit 10
      set weight 100
    !
    route-map w_100-ipv6 permit 10
      set weight 100
  
    !
    ! AS-path access lists
    !
    !
    ! Static routes (dual routes for each entry, in entry VRF and next hop VRF)
    !

TASK [Deploy routing configuration] ********************************************
skipping: [x1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for probe, x2

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying routing from /home/pipi/net101/tools/netsim/ansible/templates/routing/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [probe]
changed: [x2]

TASK [set_fact] ****************************************************************
ok: [probe]
ok: [x2]

TASK [run /tmp/config.sh to deploy routing config from /home/pipi/net101/tools/netsim/ansible/templates/routing/frr.j2] ***
skipping: [probe]
skipping: [x2]

TASK [run vtysh to import routing config from /home/pipi/net101/tools/netsim/ansible/templates/routing/frr.j2] ***
changed: [x2]
changed: [probe]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [probe]
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Find configuration template for ospf] ************************************
skipping: [x1]
skipping: [x2]
ok: [probe]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [probe]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [x1]
skipping: [x2]
ok: [probe]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [x1]
skipping: [x2]
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
  
    router ospf 1
     router-id 10.0.0.1
  
  
  
     timers lsa arrival 100
     timers spf 10 50 500
     timers throttle lsa all 100
    !
    interface loopback0
     ip ospf 1 area 0.0.0.0
     ip ospf passive
    !
    interface ethernet1/1/3
    ! dut -> probe
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
  
  
    router ospfv3 1
     router-id 10.0.0.1
  
  
  
    timers spf 10 50 500
    !
    interface loopback0
     ipv6 ospf 1 area 0.0.0.0
     ipv6 ospf passive
    !
    interface ethernet1/1/3
    ! dut -> probe
     ipv6 ospf 1 area 0.0.0.0
     ipv6 ospf network point-to-point
    !
ok: [probe] => 
  msg: |-
    ospf configuration for probe
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! probe -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! probe -> dut
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.2
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
skipping: [x1]
skipping: [x2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for probe

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [probe]

TASK [set_fact] ****************************************************************
ok: [probe]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [probe]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [probe]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [probe]
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Find configuration template for bgp] *************************************
ok: [probe]
ok: [x1]
ok: [x2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [probe]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [probe]
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [probe] => 
  msg: |-
    bgp configuration for probe
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor 10.0.0.1 remote-as 65000
      neighbor 10.0.0.1 description dut
      neighbor 10.0.0.1 update-source lo
    !
      neighbor 2001:db8:1:1::1 remote-as 65000
      neighbor 2001:db8:1:1::1 description dut
      neighbor 2001:db8:1:1::1 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.2/32
    !
    !
    !
      neighbor 10.0.0.1 activate
      neighbor 10.0.0.1 next-hop-self
      no neighbor 10.0.0.1 send-community all
      neighbor 10.0.0.1 send-community standard
      neighbor 10.0.0.1 send-community large
      neighbor 10.0.0.1 send-community extended
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:2::/64
    !
    !
    !
      neighbor 2001:db8:1:1::1 activate
      neighbor 2001:db8:1:1::1 next-hop-self
      no neighbor 2001:db8:1:1::1 send-community all
      neighbor 2001:db8:1:1::1 send-community standard
      neighbor 2001:db8:1:1::1 send-community large
      neighbor 2001:db8:1:1::1 send-community extended
    !
    !
    !
    do write
ok: [x1] => 
  msg: |-
    bgp configuration for x1
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 172.42.42.4 remote-as 65101
      neighbor 172.42.42.4 description x2
    !
      neighbor 10.1.0.1 remote-as 65000
      neighbor 10.1.0.1 description dut
    !
      neighbor 2001:db8:cafe:42::4 remote-as 65101
      neighbor 2001:db8:cafe:42::4 description x2
    !
      neighbor 2001:db8:3::1 remote-as 65000
      neighbor 2001:db8:3::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.3/32
    !
      network 172.42.42.0/24
    !
    !
      neighbor 172.42.42.4 activate
      no neighbor 172.42.42.4 send-community all
      neighbor 172.42.42.4 send-community standard
      neighbor 172.42.42.4 send-community large
    !
      neighbor 10.1.0.1 activate
      no neighbor 10.1.0.1 send-community all
      neighbor 10.1.0.1 send-community standard
      neighbor 10.1.0.1 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:3::/64
    !
      network 2001:db8:cafe:42::/64
    !
    !
      neighbor 2001:db8:cafe:42::4 activate
      no neighbor 2001:db8:cafe:42::4 send-community all
      neighbor 2001:db8:cafe:42::4 send-community standard
      neighbor 2001:db8:cafe:42::4 send-community large
    !
      neighbor 2001:db8:3::1 activate
      no neighbor 2001:db8:3::1 send-community all
      neighbor 2001:db8:3::1 send-community standard
      neighbor 2001:db8:3::1 send-community large
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    !
    router bgp 65000
      log-neighbor-changes
  
    ! define a generic unnumbered template to be used for eBGP unnumbered...
    ! additionally, need to define link-local-only-nexthop as per Dell suggested "Cumulus workaround"
    ! WTF Dell...
      template unnumbered_ebgp
        link-local-only-nexthop
        exit
  
      router-id 10.0.0.1
    !
      neighbor 10.0.0.2
        remote-as 65000
  
        description "probe"
        update-source loopback0
    !
        address-family ipv4 unicast
          next-hop-self
        exit
        send-community standard
        send-community extended
  
    !
        address-family ipv4 unicast
          soft-reconfiguration inbound
          activate
        exit
        address-family ipv6 unicast
          no activate
        exit
  
        timers 3 9
        advertisement-interval 1
        no shutdown
      exit
    !
      neighbor 2001:db8:1:2::1
        remote-as 65000
  
        description "probe"
        update-source loopback0
    !
        address-family ipv6 unicast
          next-hop-self
        exit
        send-community standard
        send-community extended
  
        address-family ipv4 unicast
          no activate
        exit
    !
        address-family ipv6 unicast
          soft-reconfiguration inbound
          activate
        exit
  
        timers 3 9
        advertisement-interval 1
        no shutdown
      exit
    !
      neighbor 10.1.0.2
        remote-as 65100
  
        description "x1"
        send-community standard
  
    !
        address-family ipv4 unicast
          soft-reconfiguration inbound
          activate
        exit
        address-family ipv6 unicast
          no activate
        exit
  
        timers 3 9
        advertisement-interval 1
        no shutdown
      exit
    !
      neighbor 2001:db8:3::3
        remote-as 65100
  
        description "x1"
        send-community standard
  
        address-family ipv4 unicast
          no activate
        exit
    !
        address-family ipv6 unicast
          soft-reconfiguration inbound
          activate
        exit
  
        timers 3 9
        advertisement-interval 1
        no shutdown
      exit
    !
      neighbor 10.1.0.6
        remote-as 65101
  
        description "x2"
        send-community standard
  
    !
        address-family ipv4 unicast
          soft-reconfiguration inbound
          activate
        exit
        address-family ipv6 unicast
          no activate
        exit
  
        timers 3 9
        advertisement-interval 1
        no shutdown
      exit
    !
      neighbor 2001:db8:3:1::4
        remote-as 65101
  
        description "x2"
        send-community standard
  
        address-family ipv4 unicast
          no activate
        exit
    !
        address-family ipv6 unicast
          soft-reconfiguration inbound
          activate
        exit
  
        timers 3 9
        advertisement-interval 1
        no shutdown
      exit
    !
    !
     address-family ipv4 unicast
    !
      network 10.0.0.1/32
    !
    !
    !
    !
     address-family ipv6 unicast
    !
      network 2001:db8:1:1::/64
    !
    !
    !
    !
ok: [x2] => 
  msg: |-
    bgp configuration for x2
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 172.42.42.3 remote-as 65100
      neighbor 172.42.42.3 description x1
    !
      neighbor 10.1.0.5 remote-as 65000
      neighbor 10.1.0.5 description dut
    !
      neighbor 2001:db8:cafe:42::3 remote-as 65100
      neighbor 2001:db8:cafe:42::3 description x1
    !
      neighbor 2001:db8:3:1::1 remote-as 65000
      neighbor 2001:db8:3:1::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.4/32
    !
      network 172.42.42.0/24
    !
    !
      neighbor 172.42.42.3 activate
      no neighbor 172.42.42.3 send-community all
      neighbor 172.42.42.3 send-community standard
      neighbor 172.42.42.3 send-community large
    !
      neighbor 10.1.0.5 activate
      no neighbor 10.1.0.5 send-community all
      neighbor 10.1.0.5 send-community standard
      neighbor 10.1.0.5 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:4::/64
    !
      network 2001:db8:cafe:42::/64
    !
    !
      neighbor 2001:db8:cafe:42::3 activate
      no neighbor 2001:db8:cafe:42::3 send-community all
      neighbor 2001:db8:cafe:42::3 send-community standard
      neighbor 2001:db8:cafe:42::3 send-community large
    !
      neighbor 2001:db8:3:1::1 activate
      no neighbor 2001:db8:3:1::1 send-community all
      neighbor 2001:db8:3:1::1 send-community standard
      neighbor 2001:db8:3:1::1 send-community large
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for probe, x1, x2

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying bgp from /home/pipi/net101/tools/netsim/ansible/templates/bgp/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [probe]
changed: [x2]
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [probe]
ok: [x1]
ok: [x2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [probe]
skipping: [x1]
skipping: [x2]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [x1]
changed: [probe]
changed: [x2]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-custom-config.yml for dut, x2 => (item=bgp.policy)

TASK [Find configuration template] *********************************************
ok: [x2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x2]

TASK [Check is the configuration template is a file] ***************************
ok: [dut -> localhost]
ok: [x2 -> localhost]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x2]

TASK [Process template /home/pipi/net101/tools/netsim/extra/bgp.policy/dellos10.j2 for dut] ***
skipping: [x2]
skipping: [dut]

TASK [Find custom configuration deployment script] *****************************
ok: [x2]
ok: [dut]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for x2

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying bgp.policy from /home/pipi/net101/tools/netsim/extra/bgp.policy/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [x2]

TASK [set_fact] ****************************************************************
ok: [x2]

TASK [run /tmp/config.sh to deploy bgp.policy config from /home/pipi/net101/tools/netsim/extra/bgp.policy/frr.j2] ***
skipping: [x2]

TASK [run vtysh to import bgp.policy config from /home/pipi/net101/tools/netsim/extra/bgp.policy/frr.j2] ***
changed: [x2]

PLAY RECAP *********************************************************************
dut                        : ok=41   changed=5    unreachable=0    failed=0    skipped=16   rescued=0    ignored=0   
probe                      : ok=45   changed=9    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
x1                         : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
x2                         : ok=45   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   



Use this topology to test BGP weights on IPv4 and IPv6 prefixes. DUT has to
prefer prefixes advertised by X2 (identified by longer AS path).

