[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h1a]
ok: [h3]
ok: [h2]
ok: [s2]
ok: [dut]
ok: [h4]
ok: [h3a]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h1a]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [s2]
ok: [h4]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [s2]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, s2, h1, h1a, h2, h3, h3a, h4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h1a]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [s2]
ok: [h4]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [dut]
ok: [h1a]
ok: [h2]
ok: [h3]
ok: [s2]
ok: [h3a]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [s2]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [h1a]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [s2]
ok: [h3a]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [s2] => 
  msg: |-
    normalize configuration for s2
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0801
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0802
    !
    interface Ethernet3
     shutdown
     mac-address 52dc.cafe.0803

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [s2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, s2, h1, h1a, h2, h3, h3a, h4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]
ok: [dut]
ok: [s2]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h1a]
ok: [h3]
ok: [h2]
ok: [h3a]
ok: [h4]
ok: [dut]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [s2]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [dut]
ok: [h1a]
ok: [s2]
ok: [h3a]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h1a] => 
  msg: |-
    initial configuration for h1a
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.6/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h3a] => 
  msg: |-
    initial configuration for h3a
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.5/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    lldp enable
    !
    !
    ip host s2 10.0.0.8
    !
    !
    default mtu 1532
    !
    interface mgmt1/1/1
     no lldp transmit
     no lldp receive
    !
    interface loopback0
     no shutdown
     ip address 10.0.0.7/32
     no ipv6 enable
    !
    interface ethernet1/1/1
     no shutdown
     no switchport
     mtu 1632
     description "dut -> s2"
     ip address 10.1.0.1/30
     ip unreachables
     no ipv6 enable
    !
    interface ethernet1/1/2
     no shutdown
     no switchport
     description "[Access VLAN red] dut -> h1"
     no ipv6 enable
    !
    interface ethernet1/1/3
     no shutdown
     no switchport
     description "[Access VLAN red] dut -> h1a"
     no ipv6 enable
    !
    interface ethernet1/1/4
     no shutdown
     no switchport
     description "[Access VLAN blue] dut -> h3"
     no ipv6 enable
    !
    interface ethernet1/1/5
     no shutdown
     no switchport
     description "[Access VLAN blue] dut -> h3a"
     no ipv6 enable
    !
    interface virtual-network1000
     no shutdown
     description "VLAN red (1000) -> [h1\\,h1a\\,h2\\,s2] [external]"
     ip address 172.16.0.7/24
     no ipv6 enable
    !
    interface virtual-network1001
     no shutdown
     description "VLAN blue (1001) -> [h3\\,h3a\\,h4\\,s2] [external]"
     ip address 172.16.1.7/24
     no ipv6 enable
    !
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    hostname s2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    no ipv6 unicast-routing
    !
    !
    ip host dut 10.0.0.7 10.1.0.1 172.16.0.7 172.16.1.7
    ip host h1 172.16.0.1
    ip host h1a 172.16.0.2
    ip host h2 172.16.0.3
    ip host h3 172.16.1.4
    ip host h3a 172.16.1.5
    ip host h4 172.16.1.6
    !
    interface Management1
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.8/32
    !
    interface Ethernet1
     no switchport
     mtu 1600
     description s2 -> dut
     ip address 10.1.0.2/30
    !
     mac-address 52dc.cafe.0801
     no shutdown
    !
    interface Ethernet2
     no switchport
     description [Access VLAN red] s2 -> h2
    !
     mac-address 52dc.cafe.0802
     no shutdown
    !
    interface Ethernet3
     no switchport
     description [Access VLAN blue] s2 -> h4
    !
     mac-address 52dc.cafe.0803
     no shutdown
    !
    interface Vlan1000
     description VLAN red (1000) -> [h1,dut,h1a,h2] [external]
     ip address 172.16.0.8/24
    !
    interface Vlan1001
     description VLAN blue (1001) -> [h3,dut,h3a,h4] [external]
     ip address 172.16.1.8/24
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h1a, h2, h3, h3a, h4

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [s2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h3a]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1a -> localhost]
changed: [h3a -> localhost]
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h3 -> localhost]
changed: [h3a -> localhost]
changed: [h1a -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h1 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h1a -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]
changed: [h1 -> localhost]
changed: [h3a -> localhost]

TASK [Remove temporary file /tmp/h1_initial-6mv958vn.sh] ***********************
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h1a -> localhost]
changed: [h3a -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1a]
ok: [h1]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h1a, h2, h3, h3a, h4, s2 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h1a, h2, h3, h3a, h4, s2 => (item=vxlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h1a, h2, h3, h3a, h4, s2 => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h1a, h2, h3, h3a, h4, s2 => (item=ospf)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h1a]
ok: [dut]
ok: [h2]
ok: [h3a]
ok: [h3]
ok: [h4]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
ok: [dut]
skipping: [h3a]
skipping: [h4]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut] => 
  msg: |-
    vlan configuration for dut
    =========================================
    ! First of all, create association VLAN<->Virtual-Network
    virtual-network 1001
     exit
    clear virtual-network 1001 counters
    !
    interface vlan 1001
     description "VLAN blue"
     virtual-network 1001
     exit
    virtual-network 1000
     exit
    clear virtual-network 1000 counters
    !
    interface vlan 1000
     description "VLAN red"
     virtual-network 1000
     exit
    !
    !
    interface ethernet1/1/2
     switchport mode access
     switchport access vlan 1000
    !
    interface ethernet1/1/3
     switchport mode access
     switchport access vlan 1000
    !
    interface ethernet1/1/4
     switchport mode access
     switchport access vlan 1001
    !
    interface ethernet1/1/5
     switchport mode access
     switchport access vlan 1001
    !
    interface virtual-network1000
    !
    interface virtual-network1001
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    vlan 1001
     name blue
    !
    vlan 1000
     name red
    !
  
    !
    interface Ethernet2
     switchport
     switchport access vlan 1000
    !
    interface Ethernet3
     switchport
     switchport access vlan 1001
    !
    interface Vlan1000
    !
    interface Vlan1001

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [eos_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [h1]
ok: [h1a]
ok: [dut]
ok: [h3]
ok: [h2]
ok: [h3a]
ok: [h4]
ok: [s2]

TASK [Find configuration template for vxlan] ***********************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vxlan] *******************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut] => 
  msg: |-
    vxlan configuration for dut
    =========================================
    nve
      source-interface loopback0
  
    virtual-network 1000
      vxlan-vni 5000
      remote-vtep 10.0.0.8
    virtual-network 1001
      vxlan-vni 5001
      remote-vtep 10.0.0.8
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    interface vxlan 1
      vxlan source-interface Loopback0
      vxlan vlan 1000 vni 5000
      vxlan vlan 1000 flood vtep 10.0.0.7
      vxlan vlan 1001 vni 5001
      vxlan vlan 1001 flood vtep 10.0.0.7

TASK [Deploy vxlan configuration] **********************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying vxlan from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [eos_config: deploying vxlan from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h1a]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]
ok: [s2]

TASK [Find configuration template for routing] *********************************
skipping: [dut]
ok: [h1]
ok: [h1a]
ok: [h2]
skipping: [s2]
ok: [h3]
ok: [h3a]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
skipping: [s2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [dut]
ok: [h1]
ok: [h1a]
skipping: [s2]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h1a] => 
  msg: |-
    routing configuration for h1a
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
skipping: [s2]
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h3a] => 
  msg: |-
    routing configuration for h3a
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    routing configuration for h4
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [dut]
skipping: [s2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h1a, h2, h3, h3a, h4

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3a -> localhost]
changed: [h4 -> localhost]
changed: [h1a -> localhost]
changed: [h3 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h1a -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h3a -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Container configuration for routing based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h1a -> localhost]
changed: [h3a -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-f92c0xkv.sh] ***********************
changed: [h1 -> localhost]
changed: [h3a -> localhost]
changed: [h1a -> localhost]
changed: [h4 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [h1]
ok: [h1a]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]
ok: [s2]

TASK [Find configuration template for ospf] ************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
ok: [dut]
skipping: [h4]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
skipping: [s2]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
  
    router ospf 1
     router-id 10.0.0.7
  
  
  
     timers lsa arrival 100
     timers spf 10 50 500
     timers throttle lsa all 100
    !
    interface loopback0
     ip ospf 1 area 0.0.0.0
     ip ospf passive
    !
    interface ethernet1/1/1
    ! dut -> s2
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.8
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! s2 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Deploy ospf configuration] ***********************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [eos_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/eos.j2] ***
changed: [s2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=37   changed=4    unreachable=0    failed=0    skipped=17   rescued=0    ignored=0   
h1                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h1a                        : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h2                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h3                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h3a                        : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h4                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
s2                         : ok=40   changed=5    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   



The devices under test are VLAN-to-VXLAN layer-3 switches between two access
VLANs and two VXLAN VNIs. Both switches perform inter-VLAN bridging, resulting
in asymmetrical IRB.

All hosts should be able to ping each other and all switch loopback IPs

Please note it might take a while for the lab to work due to
STP learning phase.

