/home/pipi/.local/lib/python3.10/site-packages/paramiko/pkey.py:100: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "cipher": algorithms.TripleDES,
/home/pipi/.local/lib/python3.10/site-packages/paramiko/transport.py:259: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "class": algorithms.TripleDES,
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [h1]
ok: [ros]
ok: [h2]

TASK [Find device readiness script] ********************************************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [ros]

TASK [Wait for device to become ready] *****************************************
skipping: [s1]
skipping: [ros]
skipping: [h1]
skipping: [h2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, ros, h1, h2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [s1]
ok: [h1]
ok: [h2]
ok: [ros]

TASK [Find configuration template for normalize] *******************************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [ros]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [ros]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [ros]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [ros]
skipping: [h1]
skipping: [h2]

TASK [Deploy normalize configuration] ******************************************
skipping: [s1]
skipping: [ros]
skipping: [h1]
skipping: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, ros, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [s1]
ok: [h1]
ok: [h2]
ok: [ros]

TASK [Find configuration template for initial] *********************************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [ros]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [ros]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [ros]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1600
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
    ip link set eth3 down
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
    ip link set eth3 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s1
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.1/32
    !
    interface eth1
     no shutdown
     description s1 -> ros
     ip address 10.1.0.1/30
    !
    interface eth2
     no shutdown
     description [Access VLAN red] s1 -> h1
     ! no ip address
    !
    interface eth3
     no shutdown
     description [Access VLAN blue] s1 -> h2
     ! no ip address
    !
    interface vlan1000
     no shutdown
     description VLAN red (1000) -> [h1,ros]
     ! no ip address
    !
    interface vlan1001
     no shutdown
     description VLAN blue (1001) -> [h2,ros]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [ros] => 
  msg: |-
    initial configuration for ros
    =========================================
    hostname ros
    !
    lldp enable
    !
    ip vrf tenant
    exit
    !
    ip host s1 10.0.0.1
    !
    !
    default mtu 1532
    !
    interface mgmt1/1/1
     no lldp transmit
     no lldp receive
    !
    interface loopback0
     no shutdown
     ip address 10.0.0.2/32
     no ipv6 enable
    !
    interface ethernet1/1/1
     no shutdown
     no switchport
     mtu 1632
     description "ros -> s1"
     ip address 10.1.0.2/30
     ip unreachables
     no ipv6 enable
    !
    interface virtual-network1000
     no shutdown
     ip vrf forwarding tenant
     description "VLAN red (1000) -> [h1\\,s1]"
     ip address 172.16.0.2/24
     no ipv6 enable
    !
    interface virtual-network1001
     no shutdown
     ip vrf forwarding tenant
     description "VLAN blue (1001) -> [h2\\,s1]"
     ip address 172.16.1.2/24
     no ipv6 enable
    !
    interface loopback1
     no shutdown
     ip vrf forwarding tenant
     description "VRF Loopback tenant"
     ip address 10.2.0.1/32
     no ipv6 enable
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for ros
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Attempt to load VRF kernel module] ***************************************
changed: [s1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [s1]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for s1

TASK [template] ****************************************************************
changed: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [s1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [s1]

TASK [wait_for_connection] *****************************************************
skipping: [ros]

TASK [dellos10_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/dellos10.j2, save to startup=yes] ***
changed: [ros]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-xo9idibl.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [ros]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, ros, h1, h2 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, ros, h1, h2 => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, ros, h1, h2 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, ros, h1, h2 => (item=vrf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, ros, h1, h2 => (item=vxlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s1]
ok: [h1]
ok: [h2]
ok: [ros]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
ok: [s1]
skipping: [h2]
ok: [ros]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [ros]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [ros]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
      ip link add vlan1000 type bridge
      ip link set dev vlan1000 address 52:dc:ca:fd:01:00
  
      ip addr flush dev vlan1000
    fi
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
      ip link add vlan1001 type bridge
      ip link set dev vlan1001 address 52:dc:ca:fd:01:01
  
      ip addr flush dev vlan1001
    fi
  
    ip link set dev eth2 master vlan1000
    ip link set dev eth3 master vlan1001
  
    ip link set dev vlan1000 up
    ip link set dev vlan1001 up
ok: [ros] => 
  msg: |-
    vlan configuration for ros
    =========================================
    interface vlan 1000
     description "VLAN red"
     exit
    !
    interface vlan 1001
     description "VLAN blue"
     exit
    !
  
    !
    interface virtual-network1000
    !
    interface virtual-network1001

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for ros

TASK [template] ****************************************************************
changed: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
changed: [s1]

TASK [run vtysh to import vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [s1]

TASK [wait_for_connection] *****************************************************
skipping: [ros]

TASK [dellos10_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/dellos10.j2, save to startup=yes] ***
changed: [ros]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [s1]
ok: [h1]
ok: [h2]
ok: [ros]

TASK [Find configuration template for routing] *********************************
skipping: [s1]
skipping: [ros]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [ros]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [s1]
skipping: [ros]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [ros]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.2 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.2 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [s1]
skipping: [ros]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for routing based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-wfx82ntb.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [s1]
ok: [h1]
ok: [h2]
ok: [ros]

TASK [Find configuration template for ospf] ************************************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [ros]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [ros]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [ros]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.1
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! s1 -> ros
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [ros] => 
  msg: |-
    ospf configuration for ros
    =========================================
  
    router ospf 1
     router-id 10.0.0.2
  
  
  
     timers lsa arrival 100
     timers spf 10 50 500
     timers throttle lsa all 100
    !
    interface loopback0
     ip ospf 1 area 0.0.0.0
     ip ospf passive
    !
    interface ethernet1/1/1
    ! ros -> s1
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Deploy ospf configuration] ***********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for ros

TASK [template] ****************************************************************
changed: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [s1]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [s1]

TASK [wait_for_connection] *****************************************************
skipping: [ros]

TASK [dellos10_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/dellos10.j2, save to startup=yes] ***
changed: [ros]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [s1]
ok: [h1]
ok: [h2]
ok: [ros]

TASK [Find configuration template for vrf] *************************************
skipping: [s1]
skipping: [h1]
skipping: [h2]
ok: [ros]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [ros]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [s1]
skipping: [h1]
skipping: [h2]
ok: [ros]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [h1]
skipping: [h2]
ok: [ros] => 
  msg: |-
    vrf configuration for ros
    =========================================

TASK [Deploy vrf configuration] ************************************************
skipping: [s1]
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for ros

TASK [wait_for_connection] *****************************************************
skipping: [ros]

TASK [dellos10_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/dellos10.j2, save to startup=yes] ***
changed: [ros]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [s1]
ok: [h1]
ok: [h2]
ok: [ros]

TASK [Find configuration template for vxlan] ***********************************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [ros]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [ros]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for vxlan] *******************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [ros]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
  
  
    # Create L3 VNIs with bridges and add to correct vrf table
  
    # Create VXLAN L2 interface per vni
    ip link add vxlan5000 type vxlan \
      id 5000 \
      dstport 4789 \
      local 10.0.0.1
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
    ip link add vlan1000 type bridge
    ip link set up dev vlan1000
    fi
    ip link set dev vxlan5000 master vlan1000
    ip link set vlan1000 type bridge stp_state 0
  
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan5000
    ip link set up dev vxlan5000
  
    bridge fdb append 00:00:00:00:00:00 dev vxlan5000 dst 10.0.0.2
    # Create VXLAN L2 interface per vni
    ip link add vxlan5001 type vxlan \
      id 5001 \
      dstport 4789 \
      local 10.0.0.1
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
    ip link add vlan1001 type bridge
    ip link set up dev vlan1001
    fi
    ip link set dev vxlan5001 master vlan1001
    ip link set vlan1001 type bridge stp_state 0
  
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan5001
    ip link set up dev vxlan5001
  
    bridge fdb append 00:00:00:00:00:00 dev vxlan5001 dst 10.0.0.2
  
    exit $?
ok: [ros] => 
  msg: |-
    vxlan configuration for ros
    =========================================
    ! First of all, create association VLAN<->Virtual-Network
    virtual-network 1000
     exit
    clear virtual-network 1000 counters
    !
    interface vlan 1000
     description "VLAN red"
     virtual-network 1000
     exit
    virtual-network 1001
     exit
    clear virtual-network 1001 counters
    !
    interface vlan 1001
     description "VLAN blue"
     virtual-network 1001
     exit
  
    nve
      source-interface loopback0
  
    virtual-network 1000
      vxlan-vni 5000
      remote-vtep 10.0.0.1
    virtual-network 1001
      vxlan-vni 5001
      remote-vtep 10.0.0.1

TASK [Deploy vxlan configuration] **********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for ros

TASK [template] ****************************************************************
changed: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [run /tmp/config.sh to deploy vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/frr.j2] ***
changed: [s1]

TASK [run vtysh to import vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/frr.j2] ***
skipping: [s1]

TASK [wait_for_connection] *****************************************************
skipping: [ros]

TASK [dellos10_config: deploying vxlan from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/dellos10.j2, save to startup=yes] ***
changed: [ros]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
h2                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
ros                        : ok=44   changed=5    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
s1                         : ok=49   changed=9    unreachable=0    failed=0    skipped=23   rescued=0    ignored=0   



The device under test is a VXLAN router-on-a-stick. This tests check
VXLAN-to-VXLAN routing.

* h1 and h2 should be able to ping each other

