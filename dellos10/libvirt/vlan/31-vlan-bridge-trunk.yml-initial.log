[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [s1]
ok: [h3]
ok: [s2]
ok: [h5]
ok: [h4]
ok: [h6]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [s1]
ok: [s2]
ok: [h3]
ok: [h4]
ok: [h6]
ok: [h5]

TASK [Wait for device to become ready] *****************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2, h3, h4, h5, h6

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [s1]
ok: [h3]
ok: [s2]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [s1]
ok: [s2]
ok: [h3]
ok: [h5]
ok: [h4]
ok: [h6]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Deploy normalize configuration] ******************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2, h3, h4, h5, h6

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [s1]
ok: [h3]
ok: [s2]
ok: [h5]
ok: [h4]
ok: [h6]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h5]
ok: [h4]
ok: [h6]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.1/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.4/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.3/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.2/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h5] => 
  msg: |-
    initial configuration for h5
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.5/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h6] => 
  msg: |-
    initial configuration for h6
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.6/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    lldp enable
    !
    !
    ip host s2 10.0.0.8
    !
    !
    default mtu 1532
    !
    interface loopback0
     ip address 10.0.0.7/32
     no ipv6 enable
    !
    interface mgmt1/1/1
     no lldp transmit
     no lldp receive
    !
    interface ethernet1/1/1
     no shutdown
     no switchport
     description "s1 -> s2"
    !
    interface ethernet1/1/2
     no shutdown
     no switchport
     description "[Access VLAN red] s1 -> h1"
    !
    interface ethernet1/1/3
     no shutdown
     no switchport
     description "[Access VLAN blue] s1 -> h3"
    !
    interface ethernet1/1/4
     no shutdown
     no switchport
     description "[Access VLAN untagged] s1 -> h5"
    !
    interface virtual-network700
     no shutdown
     description "VLAN red (700) -> [h1\\,s2\\,h2]"
    !
    interface virtual-network701
     no shutdown
     description "VLAN blue (701) -> [h3\\,s2\\,h4]"
    !
    interface virtual-network1
     no shutdown
     description "VLAN untagged (1) -> [h5\\,h6\\,s2]"
    !
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    hostname s2
    !
    lldp enable
    !
    !
    ip host s1 10.0.0.7
    !
    !
    default mtu 1532
    !
    interface loopback0
     ip address 10.0.0.8/32
     no ipv6 enable
    !
    interface mgmt1/1/1
     no lldp transmit
     no lldp receive
    !
    interface ethernet1/1/1
     no shutdown
     no switchport
     description "s2 -> s1"
    !
    interface ethernet1/1/2
     no shutdown
     no switchport
     description "[Access VLAN red] s2 -> h2"
    !
    interface ethernet1/1/3
     no shutdown
     no switchport
     description "[Access VLAN blue] s2 -> h4"
    !
    interface ethernet1/1/4
     no shutdown
     no switchport
     description "[Access VLAN untagged] s2 -> h6"
    !
    interface virtual-network700
     no shutdown
     description "VLAN red (700) -> [h1\\,s1\\,h2]"
    !
    interface virtual-network701
     no shutdown
     description "VLAN blue (701) -> [h3\\,s1\\,h4]"
    !
    interface virtual-network1
     no shutdown
     description "VLAN untagged (1) -> [h5\\,s1\\,h6]"
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [h6]
ok: [h5]
ok: [s1]
ok: [s2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for s1, s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4, h5, h6

TASK [wait_for_connection] *****************************************************
skipping: [s1]
skipping: [s2]

TASK [dellos10_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/dellos10.j2] ***
changed: [s1]
changed: [s2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Create a temporary file for the rendered script] *************************
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h6 -> localhost]
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h5 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h5 -> localhost]
changed: [h4 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h6 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h6 -> localhost]
changed: [h5 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-v368x30f.sh] ***********************
changed: [h5 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h6 -> localhost]
changed: [h4 -> localhost]
changed: [h1 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    ! First of all, create association VLAN<->Virtual-Network
    virtual-network 701
      exit
    interface vlan 701
      description "VLAN blue"
      virtual-network 701
      exit
    virtual-network 700
      exit
    interface vlan 700
      description "VLAN red"
      virtual-network 700
      exit
    virtual-network 1
      exit
    interface vlan 1
      description "VLAN untagged"
      virtual-network 1
      exit
    !
    !
    interface ethernet1/1/1
     switchport mode trunk
     no switchport access vlan
     switchport trunk allowed vlan 700,701
    !
    interface ethernet1/1/2
     switchport mode access
     switchport access vlan 700
    !
    interface ethernet1/1/3
     switchport mode access
     switchport access vlan 701
    !
    interface ethernet1/1/4
     switchport mode access
     switchport access vlan 1
    !
    interface virtual-network700
    !
    interface virtual-network701
    !
    interface virtual-network1
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    ! First of all, create association VLAN<->Virtual-Network
    virtual-network 701
      exit
    interface vlan 701
      description "VLAN blue"
      virtual-network 701
      exit
    virtual-network 700
      exit
    interface vlan 700
      description "VLAN red"
      virtual-network 700
      exit
    virtual-network 1
      exit
    interface vlan 1
      description "VLAN untagged"
      virtual-network 1
      exit
    !
    !
    interface ethernet1/1/1
     switchport mode trunk
     no switchport access vlan
     switchport trunk allowed vlan 700,701
    !
    interface ethernet1/1/2
     switchport mode access
     switchport access vlan 700
    !
    interface ethernet1/1/3
     switchport mode access
     switchport access vlan 701
    !
    interface ethernet1/1/4
     switchport mode access
     switchport access vlan 1
    !
    interface virtual-network700
    !
    interface virtual-network701
    !
    interface virtual-network1

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s1]
ok: [s2]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for s1, s2

TASK [wait_for_connection] *****************************************************
skipping: [s1]
skipping: [s2]

TASK [dellos10_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/dellos10.j2] ***
changed: [s1]
changed: [s2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h2                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h3                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h4                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h5                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h6                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
s1                         : ok=20   changed=2    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
s2                         : ok=20   changed=2    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   



The devices under test are simple bridges with a VLAN trunk between
them. Both VLANs are using the same IP prefix to identify potential
inter-VLAN leaking.

* h1 and h2 should be able to ping each other
* h3 and h4 should be able to ping each other
* h1 should not be able to reach h3
* h5 should not be able to reach h6 over its untagged native vlan

Please note it might take a while for the lab to work due to
STP learning phase

