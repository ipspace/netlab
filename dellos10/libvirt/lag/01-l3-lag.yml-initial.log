[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [xr]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [xr]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [xr]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, xr

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [xr]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [xr]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [xr]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [xr]

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [dut]
skipping: [xr]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [xr]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, xr

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [xr]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [xr]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [xr]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    lldp enable
    !
    !
    ip host xr 10.0.0.2
    !
    !
    default mtu 1532
    !
    interface loopback0
     ip address 10.0.0.1/32
     no ipv6 enable
    !
    interface mgmt1/1/1
     no lldp transmit
     no lldp receive
    !
    interface port-channel1
     no shutdown
     no switchport
     description "dut -> xr"
     ip address 10.1.0.1/30
    !
    interface ethernet1/1/1
     no shutdown
     no switchport
     description "dut -> xr"
    !
    interface ethernet1/1/2
     no shutdown
     no switchport
     description "dut -> xr"
    !
ok: [xr] => 
  msg: |-
    initial configuration for xr
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    cat <<SCRIPT >.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    export PATH=$PATH:/usr/sbin
    echo
    echo "Use sudo vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 dut
    10.1.0.1 port-channel1.dut
    10.0.0.2 xr
    10.1.0.2 bond1.xr
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Configure system defaults on Ubuntu
    #
    hostnamectl set-hostname xr
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    APT_INSTALL=
    #
    if which curl; then
      echo "Package curl already installed"
    else
      APT_INSTALL="$APT_INSTALL curl"
    fi
    #
    if which gpg; then
      echo "Package gnupg already installed"
    else
      APT_INSTALL="$APT_INSTALL gnupg"
    fi
    #
    if which bridge; then
      echo "Package iproute2 already installed"
    else
      APT_INSTALL="$APT_INSTALL iproute2"
    fi
    #
    # APT_INSTALL always starts with a blank, so we can't just check if it's empty
    # The following hack turns a string that contains only whitespaces into
    # an empty string and removes leading whitespaces
    #
    APT_INSTALL=`echo $APT_INSTALL`
    if [ -n "$APT_INSTALL" ]; then
      echo "Installing packages $APT_INSTALL"
      apt-get update -qq && apt-get install -qq $APT_INSTALL
    fi
    #
    # Install FRR on a Ubuntu VM if needed
    #
    if which /usr/lib/frr/frrinit.sh; then
      echo "FRR already installed, skipping installation"
    else
      curl -s https://deb.frrouting.org/frr/keys.asc >/etc/apt/trusted.gpg.d/frr.asc
      FRRVER="frr-stable"
      echo deb https://deb.frrouting.org/frr $(lsb_release -s -c) $FRRVER > /etc/apt/sources.list.d/frr.list
      apt-get update -qq && apt-get install -qq frr frr-pythontools bridge-utils ethtool
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
    #
    # Enable FRR daemons
    #
    echo "ospfd=yes" >>/etc/frr/daemons
    echo "ospf6d=yes" >>/etc/frr/daemons
  
    /usr/lib/frr/frrinit.sh restart
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
    if [ ! -e /sys/class/net/bond1 ]; then
      if [ ! -e /sys/devices/virtual/net/bond1 ]; then
    #
    # Make sure 'bonding' module is loaded
    #
    if [ ! -e /sys/module/bonding ]; then
    modprobe bonding miimon=100 mode=802.3ad lacp_rate=fast
    fi
    if [ ! -e /sys/class/net/bond1 ]; then
    ip link add dev bond1 type bond mode 802.3ad lacp_rate fast
    fi
  
        ip link set dev bond1 up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.bond1.disable_ipv6=1
    ip link set dev bond1 mtu 1500
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname xr
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface bond1
     no shutdown
     description xr -> dut
     ip address 10.1.0.2/30
    !
    interface eth1
     no shutdown
     description xr -> dut
     ! no ip address
    !
    interface eth2
     no shutdown
     description xr -> dut
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [xr]
ok: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for xr

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/dellos10.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [xr]

TASK [set_fact] ****************************************************************
ok: [xr]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [xr]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [xr]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [xr]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, xr => (item=lag)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, xr => (item=ospf)

TASK [Figure out whether to deploy the module lag on current device] ***********
ok: [xr]
ok: [dut]

TASK [Find configuration template for lag] *************************************
ok: [xr]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [xr]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [xr] => 
  msg: |-
    lag configuration for xr
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    # Bond devices are created by 'initial' module - add members
    #
    ethtool -s eth1 autoneg off speed 1000 duplex full
    ip link set dev eth1 down
    ip link set dev eth1 master bond1
    ip link set dev eth1 up
    ethtool -s eth2 autoneg off speed 1000 duplex full
    ip link set dev eth2 down
    ip link set dev eth2 master bond1
    ip link set dev eth2 up
    ip link set dev bond1 up
    exit 0
ok: [dut] => 
  msg: |-
    lag configuration for dut
    =========================================
    ! OS10 internally uses port-channel 1000 and VLAN 4094 for VLT
  
    interface port-channel1
     description "dut -> xr"
    !
    interface ethernet1/1/1
     description "dut -> xr in channel-group 1"
     channel-group 1 mode active
     lacp rate fast
    !
    interface ethernet1/1/2
     description "dut -> xr in channel-group 1"
     channel-group 1 mode active
     lacp rate fast
    !

TASK [Find configuration deployment deploy_script for lag] *********************
ok: [xr]
ok: [dut]

TASK [Deploy lag configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for xr

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying lag from /home/pipi/net101/tools/netsim/ansible/templates/lag/dellos10.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [xr]

TASK [set_fact] ****************************************************************
ok: [xr]

TASK [run /tmp/config.sh to deploy lag config from /home/pipi/net101/tools/netsim/ansible/templates/lag/frr.j2] ***
changed: [xr]

TASK [run vtysh to import lag config from /home/pipi/net101/tools/netsim/ansible/templates/lag/frr.j2] ***
skipping: [xr]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [xr]
ok: [dut]

TASK [Find configuration template for ospf] ************************************
ok: [xr]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [xr]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [xr] => 
  msg: |-
    ospf configuration for xr
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface bond1
    ! xr -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
  
    router ospf 1
     router-id 10.0.0.1
  
    !
    interface loopback0
     ip ospf 1 area 0.0.0.0
     ip ospf passive
    !
    interface port-channel1
    ! dut -> xr
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [xr]
ok: [dut]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for xr

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/dellos10.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [xr]

TASK [set_fact] ****************************************************************
ok: [xr]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [xr]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [xr]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=27   changed=3    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
xr                         : ok=33   changed=6    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   



The device under is a router with a L3 LAG link connected to a FRR device. The
devices should be able to establish an OSPF adjacency.

