[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h2]
ok: [h1]
ok: [dut]
ok: [h3]
ok: [h4]
ok: [x1]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h4]
ok: [h3]
ok: [x1]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [x1]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, h1, h2, h3, h4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [h4]
ok: [x1]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [h4]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [x1]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [x1] => 
  msg: |-
    normalize configuration for x1
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0101

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, h1, h2, h3, h4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]
ok: [h4]
ok: [x1]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h4]
ok: [h3]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h4]
ok: [h2]
ok: [h3]
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.2.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.2.5/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    lldp enable
    !
    !
    ip host x1 10.0.0.1
    !
    !
    default mtu 1532
    !
    interface loopback0
     ip address 10.0.0.6/32
     no ipv6 enable
    !
    interface mgmt1/1/1
     no lldp transmit
     no lldp receive
    !
    interface ethernet1/1/1
     no shutdown
     no switchport
     description "dut -> x1"
     no ipv6 enable
    !
    interface ethernet1/1/2
     no shutdown
     no switchport
     description "[Access VLAN red] dut -> h1"
     no ipv6 enable
    !
    interface ethernet1/1/3
     no shutdown
     no switchport
     description "[Access VLAN red] dut -> h2"
     no ipv6 enable
    !
    interface ethernet1/1/4
     no shutdown
     no switchport
     description "[Access VLAN red] dut -> h3"
     no ipv6 enable
    !
    interface ethernet1/1/5
     no shutdown
     no switchport
     description "[Access VLAN green] dut -> h4"
     no ipv6 enable
    !
    interface virtual-network1000
     no shutdown
     description "VLAN red (1000) -> [x1\\,h1\\,h2\\,h3]"
     no ipv6 enable
    !
    interface virtual-network1002
     no shutdown
     description "VLAN green (1002) -> [h4] [stub]"
     no ipv6 enable
    !
    interface virtual-network1001
     no shutdown
     description "VLAN blue (1001) -> [x1]"
     no ipv6 enable
    !
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    hostname x1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    no ipv6 unicast-routing
    !
    !
    ip host dut 10.0.0.6
    ip host h1 172.16.0.2
    ip host h2 172.16.0.3
    ip host h3 172.16.0.4
    ip host h4 172.16.2.5
    !
    interface Management1
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.1/32
    !
    interface Ethernet1
     no switchport
     description x1 -> dut
    !
     mac-address 52dc.cafe.0101
     no shutdown
    !
    interface Vlan1001
     description VLAN blue (1001) -> [dut]
    !
    interface Vlan1000
     description VLAN red (1000) -> [dut,h1,h2,h3]
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [x1]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h4 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-s62stl9e.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h4]
ok: [h3]
ok: [x1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, h4, x1 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, h4, x1 => (item=stp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, h4, x1 => (item=routing)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [dut]
ok: [x1]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [x1]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [dut] => 
  msg: |-
    vlan configuration for dut
    =========================================
    ! First of all, create association VLAN<->Virtual-Network
    virtual-network 1001
     exit
    clear virtual-network 1001 counters
    !
    interface vlan 1001
     description "VLAN blue"
     virtual-network 1001
     exit
    virtual-network 1002
     exit
    clear virtual-network 1002 counters
    !
    interface vlan 1002
     description "VLAN green"
     virtual-network 1002
     exit
    virtual-network 1000
     exit
    clear virtual-network 1000 counters
    !
    interface vlan 1000
     description "VLAN red"
     virtual-network 1000
     exit
    !
    !
    interface ethernet1/1/1
     switchport mode trunk
     no switchport access vlan
     switchport trunk allowed vlan 1000,1001
    !
    interface ethernet1/1/2
     switchport mode access
     switchport access vlan 1000
    !
    interface ethernet1/1/3
     switchport mode access
     switchport access vlan 1000
    !
    interface ethernet1/1/4
     switchport mode access
     switchport access vlan 1000
    !
    interface ethernet1/1/5
     switchport mode access
     switchport access vlan 1002
    !
    interface virtual-network1000
    !
    interface virtual-network1002
    !
    interface virtual-network1001
ok: [x1] => 
  msg: |-
    vlan configuration for x1
    =========================================
    vlan 1001
     name blue
    !
    vlan 1000
     name red
    !
  
    !
    interface Ethernet1
     switchport
     switchport mode trunk
     switchport trunk allowed vlan 1000,1001
     switchport trunk native vlan tag
    !
    interface Vlan1001
    !
    interface Vlan1000

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [eos_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/eos.j2] ***
changed: [x1]

TASK [Figure out whether to deploy the module stp on current device] ***********
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [h4]
ok: [x1]

TASK [Find configuration template for stp] *************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [x1]

TASK [Find configuration deployment deploy_script for stp] *********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [dut] => 
  msg: |-
    stp configuration for dut
    =========================================
    spanning-tree mode rstp
  
    spanning-tree rstp force-version stp
  
  
  
  
    interface ethernet1/1/1
     no spanning-tree port type edge
  
    interface ethernet1/1/2
     spanning-tree port type edge
  
    interface ethernet1/1/3
     spanning-tree port type edge
  
    interface ethernet1/1/4
     no spanning-tree port type edge
  
    interface ethernet1/1/5
     no spanning-tree port type edge
ok: [x1] => 
  msg: |-
    stp configuration for x1
    =========================================
    spanning-tree mode rstp
  
  
  
  
    interface Ethernet1
  
     spanning-tree portfast network

TASK [Deploy stp configuration] ************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/dellos10.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [dellos10_config: deploying stp from /home/pipi/net101/tools/netsim/ansible/templates/stp/dellos10.j2, save to startup=yes] ***
changed: [dut]

TASK [eos_config: deploying stp from /home/pipi/net101/tools/netsim/ansible/templates/stp/eos.j2] ***
changed: [x1]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [h4]
ok: [x1]

TASK [Find configuration template for routing] *********************************
skipping: [dut]
ok: [h1]
skipping: [x1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [x1]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [dut]
skipping: [x1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [x1]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    routing configuration for h4
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [dut]
skipping: [x1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for routing based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-8ow9lqqf.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=30   changed=3    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
h1                         : ok=33   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
h2                         : ok=33   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
h3                         : ok=33   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
h4                         : ok=33   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
x1                         : ok=33   changed=4    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   



This is a config-only test that uses all possible STP port types. It's a bit
hard to validate whether a particular port type is configured ;), the only
check we can do is for edge ports.

