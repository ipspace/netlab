[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [x1]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [x1]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [x1]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [x1] => 
  msg: |-
    normalize configuration for x1
    =========================================
    !
    interface Ethernet1
     no switchport
     mac-address 52dc.cafe.0201
    !
    interface Ethernet2
     no switchport
     mac-address 52dc.cafe.0202
    !
    interface Ethernet3
     no switchport
     mac-address 52dc.cafe.0203

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [dut]
ok: [x1]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [x1]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname dut
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 dut
    10.0.0.2 x1
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
  
    echo "INIT: Configuring system wide default MTU policy"
    cat > /etc/network/ifupdown2/policy.d/mtu.json <<CONFIG
    { "address": { "defaults": { "mtu": "1500" } } }
    CONFIG
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.1/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
    auto swp2
    auto swp3
    auto vlan42
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['vlan', 'stp']
    #
    #
    # Enable FRR daemons
    #
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    !
    interface swp1
    ! no shutdown
     description [Access VLAN red] dut -> x1
    !
    interface swp2
    ! no shutdown
     description [Access VLAN red] dut -> x1
    !
    interface swp3
    ! no shutdown
     description [Access VLAN red] dut -> x1
    !
    interface vlan42
    ! no shutdown
     description VLAN red (42) -> [x1]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    hostname x1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    !
    ip host dut 10.0.0.1
    !
    interface Management1
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.2/32
    !
    interface Ethernet1
     no switchport
     description [Access VLAN red] x1 -> dut
    !
     mac-address 52dc.cafe.0201
     no shutdown
    !
    interface Ethernet2
     no switchport
     description [Access VLAN red] x1 -> dut
    !
     mac-address 52dc.cafe.0202
     no shutdown
    !
    interface Ethernet3
     no switchport
     description [Access VLAN red] x1 -> dut
    !
     mac-address 52dc.cafe.0203
     no shutdown
    !
    interface Vlan42
     description VLAN red (42) -> [dut]
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create initial config script in local temporary file] ********************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.jd_qwdz6temp] *********************
changed: [dut -> localhost]

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [x1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1 => (item=stp)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [dut]
ok: [x1]

TASK [Find configuration template for vlan] ************************************
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    vlan configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    # Create multi-vlan bridge, specify VLANs, and attach interfaces to it
    #
    cat >/etc/network/interfaces.d/50-bridge.intf <<CONFIG
    auto bridge
    iface bridge
        bridge-vlan-aware yes
        bridge-vids 42
        bridge-ports swp1
        bridge-ports swp2
        bridge-ports swp3
    CONFIG
    #
    # Create VLAN interfaces
    #
    cat >/etc/network/interfaces.d/51-bridge-interfaces.intf <<CONFIG
    iface swp1
        bridge-access 42
    iface swp2
        bridge-access 42
    iface swp3
        bridge-access 42
    auto vlan42
    iface vlan42
        vlan-id 42
        vlan-raw-device bridge
    CONFIG
    ifreload -a
ok: [x1] => 
  msg: |-
    vlan configuration for x1
    =========================================
    vlan 42
     name red
    !
  
    !
    interface Ethernet1
     switchport
     switchport access vlan 42
    !
    interface Ethernet2
     switchport
     switchport access vlan 42
    !
    interface Ethernet3
     switchport
     switchport access vlan 42
    !
    interface Vlan42

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [dut]
ok: [x1]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/vlan/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create vlan config script in local temporary file] ***********************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.1sg_ghgstemp] *********************
changed: [dut -> localhost]

TASK [eos_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/eos.j2] ***
changed: [x1]

TASK [Figure out whether to deploy the module stp on current device] ***********
ok: [dut]
ok: [x1]

TASK [Find configuration template for stp] *************************************
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    stp configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
    #
    # Configure STP on the multi-vlan bridge
    #
    cat >/etc/network/interfaces.d/53-stp.intf <<CONFIG
  
    auto bridge
    iface bridge
     bridge-stp on
     mstpctl-forcevers stp
     #
     # Newer versions 5.x support 'mstpctl-pvrst-mode yes' to enable PVRST
     #
     mstpctl-treeprio 4096
  
    iface swp1
    #
    # Use 16x port_priority to get the correct 4-bit value on the wire
    #
     mstpctl-treeportprio 192
    #
    # Newer versions 5.x support mstpctl-port-vlan-priority <vlan id>=12
    #
    iface swp2
    #
    # Use 16x port_priority to get the correct 4-bit value on the wire
    #
     mstpctl-treeportprio 160
    #
    # Newer versions 5.x support mstpctl-port-vlan-priority <vlan id>=10
    #
    iface swp3
    #
    # Use 16x port_priority to get the correct 4-bit value on the wire
    #
     mstpctl-treeportprio 0
    #
    # Newer versions 5.x support mstpctl-port-vlan-priority <vlan id>=0
    #
    CONFIG
  
    ifreload -a
  
    #
    # If STP port priority was changed, the system sends duplicate BDPUs with both the old and new port priority
    # This causes peers to remain in 'listening' state forever
    # Restart mstpd to fix that
ok: [x1] => 
  msg: |-
    stp configuration for x1
    =========================================
    spanning-tree mode rstp

TASK [Find configuration deployment deploy_script for stp] *********************
ok: [dut]
ok: [x1]

TASK [Deploy stp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/stp/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create stp config script in local temporary file] ************************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.ryov1cc6temp] *********************
changed: [dut -> localhost]

TASK [eos_config: deploying stp from /home/pipi/net101/tools/netsim/ansible/templates/stp/eos.j2] ***
changed: [x1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=39   changed=12   unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
x1                         : ok=31   changed=4    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   



The devices under test form a loop in the red VLAN.

The link with the lowest port_priority should be forwarding, all other links
should be blocked.

