[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]
ok: [r2]
ok: [r3]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [x1]
ok: [r2]
ok: [r3]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [x1]
skipping: [r2]
skipping: [r3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, r2, r3

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [x1]
ok: [r2]
ok: [r3]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [x1]
ok: [r2]
ok: [r3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description x1 -> dut [external]
     ip address 172.16.1.2/24
     ipv6 address 2001:db8:2:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description r2 -> dut
     ip address 172.16.2.3/24
     ipv6 address 2001:db8:2:2::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r3] => 
  msg: |-
    initial configuration for r3
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set eth2 down
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    ip link set eth2 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r3
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
     ipv6 address 2001:db8:1:4::1/64
    !
    interface eth1
     no shutdown
     description r3 -> stub [stub]
     ip address 172.16.0.4/24
     ipv6 address 2001:db8:2::4/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description r3 -> dut
     ip address 172.16.3.4/24
     ipv6 address 2001:db8:2:3::4/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname dut
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 dut
    2001:db8:1:1::1 dut
    172.16.1.1 swp1.dut
    2001:db8:2:1::1 swp1.dut
    172.16.2.1 swp2.dut
    2001:db8:2:2::1 swp2.dut
    172.16.3.1 swp3.dut
    2001:db8:2:3::1 swp3.dut
    10.0.0.2 x1
    2001:db8:1:2::1 x1
    172.16.1.2 eth1.x1
    2001:db8:2:1::2 eth1.x1
    10.0.0.3 r2
    2001:db8:1:3::1 r2
    172.16.2.3 eth1.r2
    2001:db8:2:2::3 eth1.r2
    10.0.0.4 r3
    2001:db8:1:4::1 r3
    172.16.0.4 eth1.r3
    2001:db8:2::4 eth1.r3
    172.16.3.4 eth2.r3
    2001:db8:2:3::4 eth2.r3
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.1/32
    iface lo inet6 loopback
      address 2001:db8:1:1::1/64
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
  
    iface swp1 inet static
      mtu 1500
      address 172.16.1.1/24
  
    iface swp1 inet6 static
      mtu 1500
      address 2001:db8:2:1::1/64
    auto swp2
  
    iface swp2 inet static
      mtu 1500
      address 172.16.2.1/24
  
    iface swp2 inet6 static
      mtu 1500
      address 2001:db8:2:2::1/64
    auto swp3
  
    iface swp3 inet static
      mtu 1500
      address 172.16.3.1/24
  
    iface swp3 inet6 static
      mtu 1500
      address 2001:db8:2:3::1/64
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    sysctl -qw net.ipv6.conf.swp1.disable_ipv6=0
    sysctl -qw net.ipv6.conf.swp2.disable_ipv6=0
    sysctl -qw net.ipv6.conf.swp3.disable_ipv6=0
    #
    # Enable FRR modules for ['bgp', 'ripv2', 'ospf']
    #
    #
    # Enable FRR daemons
    #
    echo "bgpd=yes" >>/etc/frr/daemons
    echo "ripd=yes" >>/etc/frr/daemons
    echo "ripngd=yes" >>/etc/frr/daemons
    echo "ospfd=yes" >>/etc/frr/daemons
    echo "ospf6d=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description dut -> x1 [external]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface swp2
    ! no shutdown
     description dut -> r2
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface swp3
    ! no shutdown
     description dut -> r3
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [x1]
ok: [r2]
ok: [r3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for x1, r2, r3

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [dut]

TASK [set_fact deployed_config] ************************************************
ok: [dut]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
changed: [dut]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
skipping: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r2 -> localhost]
changed: [x1 -> localhost]
changed: [r3 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [x1]
skipping: [r2]
skipping: [r3]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for x1, r2, r3

TASK [template] ****************************************************************
changed: [r2]
changed: [x1]
changed: [r3]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [r2]
ok: [r3]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [r2]
changed: [x1]
changed: [r3]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [x1]
skipping: [r2]
skipping: [r3]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [r2]
ok: [r3]
ok: [x1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r2, r3, x1 => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r2, r3, x1 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r2, r3, x1 => (item=ripv2)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [r2]
ok: [r3]
ok: [x1]

TASK [Find configuration template for bgp] *************************************
skipping: [r2]
skipping: [r3]
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r2]
skipping: [r3]
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.1
    !
      neighbor 172.16.1.2 remote-as 65100
      neighbor 172.16.1.2 description x1
    !
      neighbor 2001:db8:2:1::2 remote-as 65100
      neighbor 2001:db8:2:1::2 description x1
    !
     address-family ipv4 unicast
    !
     redistribute rip
  
    !
      network 10.0.0.1/32
    !
    !
    !
      neighbor 172.16.1.2 activate
      no neighbor 172.16.1.2 send-community all
      neighbor 172.16.1.2 send-community standard
      neighbor 172.16.1.2 send-community large
    !
     address-family ipv6 unicast
    !
     redistribute rip
  
    !
      network 2001:db8:1:1::/64
    !
    !
    !
      neighbor 2001:db8:2:1::2 activate
      no neighbor 2001:db8:2:1::2 send-community all
      neighbor 2001:db8:2:1::2 send-community standard
      neighbor 2001:db8:2:1::2 send-community large
    !
    !
    !
    do write
ok: [x1] => 
  msg: |-
    bgp configuration for x1
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor 172.16.1.1 remote-as 65000
      neighbor 172.16.1.1 description dut
    !
      neighbor 2001:db8:2:1::1 remote-as 65000
      neighbor 2001:db8:2:1::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.2/32
    !
    !
    !
      neighbor 172.16.1.1 activate
      no neighbor 172.16.1.1 send-community all
      neighbor 172.16.1.1 send-community standard
      neighbor 172.16.1.1 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:2::/64
    !
    !
    !
      neighbor 2001:db8:2:1::1 activate
      no neighbor 2001:db8:2:1::1 send-community all
      neighbor 2001:db8:2:1::1 send-community standard
      neighbor 2001:db8:2:1::1 send-community large
    !
    !
    !
    do write

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [r2]
skipping: [r3]
ok: [dut]
ok: [x1]

TASK [Deploy bgp configuration] ************************************************
skipping: [r2]
skipping: [r3]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for x1

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [dut]

TASK [set_fact deployed_config] ************************************************
ok: [dut]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/cumulus.j2] ***
skipping: [dut]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/cumulus.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [x1]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [x1]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [dut]
ok: [r2]
ok: [r3]
ok: [x1]

TASK [Find configuration template for ospf] ************************************
skipping: [r3]
skipping: [x1]
ok: [dut]
ok: [r2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r3]
skipping: [x1]
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
    !
    router ospf
     ospf router-id 10.0.0.1
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
     redistribute rip
  
    !
    interface lo
     ip ospf area 0.0.0.0
    !
    interface swp2
    ! dut -> r2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface swp3
    ! dut -> r3
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.1
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
     redistribute rip
  
  
     interface lo area 0.0.0.0
     interface swp2 area 0.0.0.0
     interface swp3 area 0.0.0.0
    !
    interface swp2
    ! dut -> r2
     ipv6 ospf6 network point-to-point
    !
    interface swp3
    ! dut -> r3
     ipv6 ospf6 network point-to-point
    !
  
    do write
ok: [r2] => 
  msg: |-
    ospf configuration for r2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r2 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! r2 -> dut
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.3
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [r3]
skipping: [x1]
ok: [dut]
ok: [r2]

TASK [Deploy ospf configuration] ***********************************************
skipping: [r3]
skipping: [x1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for r2

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [dut]

TASK [set_fact deployed_config] ************************************************
ok: [dut]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/cumulus.j2] ***
skipping: [dut]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/cumulus.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [r2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [r2]

TASK [Figure out whether to deploy the module ripv2 on current device] *********
ok: [dut]
ok: [r2]
ok: [r3]
ok: [x1]

TASK [Find configuration template for ripv2] ***********************************
skipping: [r2]
skipping: [x1]
ok: [dut]
ok: [r3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r2]
skipping: [x1]
ok: [dut] => 
  msg: |-
    ripv2 configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Try to configure ripd, it will fail the first time
    #
    cat >/tmp/config <<CONFIG
    router rip
      version 2
    router ripng
    CONFIG
    vtysh -f /tmp/config
    #
    # Now for the real deal
    #
    cat >/tmp/config <<CONFIG
    !
    router rip
     version 2
     timers basic 5 180 120
     redistribute bgp
     redistribute ospf
  
     network lo
     network swp2
     network swp3
    !
    router ripng
     timers basic 5 180 120
     redistribute bgp
     redistribute ospf6
  
     network lo
     network swp2
     network swp3
  
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # And retry for a good measure
    #
    sleep 2
    cat >/tmp/config <<CONFIG
    !
    router rip
     version 2
     timers basic 5 180 120
     redistribute bgp
     redistribute ospf
  
     network lo
     network swp2
     network swp3
    !
    router ripng
     timers basic 5 180 120
     redistribute bgp
     redistribute ospf6
  
     network lo
     network swp2
     network swp3
  
    !
    do write
    CONFIG
    vtysh -f /tmp/config
ok: [r3] => 
  msg: |-
    ripv2 configuration for r3
    =========================================
    !
    router rip
     version 2
     timers basic 5 180 120
  
     network lo
     network eth1
     passive-interface eth1
     network eth2
    !
    router ripng
     timers basic 5 180 120
  
     network lo
     network eth1
     passive-interface eth1
     network eth2
  
    !
    do write

TASK [Find configuration deployment deploy_script for ripv2] *******************
skipping: [r2]
skipping: [x1]
ok: [dut]
ok: [r3]

TASK [Deploy ripv2 configuration] **********************************************
skipping: [r2]
skipping: [x1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for r3

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [dut]

TASK [set_fact deployed_config] ************************************************
ok: [dut]

TASK [run /tmp/config.sh to deploy ripv2 config from /home/pipi/net101/tools/netsim/ansible/templates/ripv2/cumulus.j2] ***
changed: [dut]

TASK [run vtysh to import ripv2 config from /home/pipi/net101/tools/netsim/ansible/templates/ripv2/cumulus.j2] ***
skipping: [dut]

TASK [template] ****************************************************************
changed: [r3]

TASK [set_fact] ****************************************************************
ok: [r3]

TASK [run /tmp/config.sh to deploy ripv2 config from /home/pipi/net101/tools/netsim/ansible/templates/ripv2/frr.j2] ***
skipping: [r3]

TASK [run vtysh to import ripv2 config from /home/pipi/net101/tools/netsim/ansible/templates/ripv2/frr.j2] ***
changed: [r3]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=39   changed=8    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
r2                         : ok=27   changed=5    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
r3                         : ok=27   changed=5    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
x1                         : ok=27   changed=5    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   



Use this topology to test the two-way redistribution between RIPv2 and OSPFv2/OSPFv3/BGP

