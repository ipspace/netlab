[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, h4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, h4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2::2/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2::2/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:1::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:1::3/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:3::5/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:3::5/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:2::4/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:2::4/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname dut
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 dut
    2001:db8:1:1::1 dut
    2001:db8:2::1 swp1.red.dut
    2001:db8:2:1::1 swp2.red.dut
    2001:db8:2:2::1 swp3.blue.dut
    2001:db8:2:3::1 swp4.blue.dut
    2001:db8:c001:cafe::1 red.dut
    2001:db8:c001:cafe::1 blue.dut
    2001:db8:2::2 h1 eth1.h1
    2001:db8:2:1::3 h2 eth1.h2
    2001:db8:2:2::4 h3 eth1.h3
    2001:db8:2:3::5 h4 eth1.h4
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
  
    echo "INIT: Configuring system wide default MTU policy"
    cat > /etc/network/ifupdown2/policy.d/mtu.json <<CONFIG
    { "address": { "defaults": { "mtu": "1500" } } }
    CONFIG
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.1/32
    iface lo inet6 loopback
      address 2001:db8:1:1::1/64
  
    auto lo1
    iface lo1
      pre-up ip link add lo1 type dummy
    iface lo1 inet6 loopback
      address 2001:db8:c001:cafe::1/64
  
    auto lo2
    iface lo2
      pre-up ip link add lo2 type dummy
    iface lo2 inet6 loopback
      address 2001:db8:c001:cafe::1/64
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
  
    iface swp1 inet6 static
      address 2001:db8:2::1/64
    auto swp2
  
    iface swp2 inet6 static
      address 2001:db8:2:1::1/64
    auto swp3
  
    iface swp3 inet6 static
      address 2001:db8:2:2::1/64
    auto swp4
  
    iface swp4 inet6 static
      address 2001:db8:2:3::1/64
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    sysctl -qw net.ipv6.conf.swp1.disable_ipv6=0
    sysctl -qw net.ipv6.conf.swp2.disable_ipv6=0
    sysctl -qw net.ipv6.conf.swp3.disable_ipv6=0
    sysctl -qw net.ipv6.conf.swp4.disable_ipv6=0
    sysctl -qw net.ipv6.conf.lo1.disable_ipv6=0
    sysctl -qw net.ipv6.conf.lo2.disable_ipv6=0
    #
    # Enable FRR modules for ['vrf']
    #
    #
    # Enable FRR daemons
    #
    echo "bgpd=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description dut -> h1 [stub]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface swp2
    ! no shutdown
     description dut -> h2 [stub]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface swp3
    ! no shutdown
     description dut -> h3 [stub]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface swp4
    ! no shutdown
     description dut -> h4 [stub]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface lo1
    ! no shutdown
     description VRF Loopback red
    !
    interface lo2
    ! no shutdown
     description VRF Loopback blue
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4

TASK [Render device configuration from /home/pipi/netlab_gh/netsim/ansible/templates/initial/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create initial config script in local temporary file] ********************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.c08pvogytemp] *********************
changed: [dut -> localhost]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-rt_pgik0.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut => (item=vrf)

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [dut]

TASK [Find configuration template for vrf] *************************************
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Find configuration deployment deploy_script for vrf] *********************
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    cat >/etc/network/interfaces.d/70-vrf.intf <<CONFIG
    auto blue
    iface blue
        vrf-table 1011
    #
    auto red
    iface red
        vrf-table 1010
    #
    auto swp1
    iface swp1
        vrf red
    #
    auto swp2
    iface swp2
        vrf red
    #
    auto swp3
    iface swp3
        vrf blue
    #
    auto swp4
    iface swp4
        vrf blue
    #
    auto lo1
    iface lo1
        vrf red
    #
    auto lo2
    iface lo2
        vrf blue
    #
    CONFIG
    ifreload -a
    #
    cat >/tmp/vrf_config <<CONFIG
    vrf blue
     exit-vrf
    vrf red
     exit-vrf
    !
    router bgp 65000
    !
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?

TASK [Deploy vrf configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus.yml for dut

TASK [Render device configuration from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create vrf config script in local temporary file] ************************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.17ee_gz3temp] *********************
changed: [dut -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=29   changed=8    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h3                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h4                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   



The device under test has two VRFs with two interfaces in each VRF.
Each VRF has a loopback interface.

* h1 and h2 should be able to ping each other and the VRF loopback interface
* h3 and h4 should be able to ping each other and the VRF loopback interface
* h1 should not be able to reach h3

