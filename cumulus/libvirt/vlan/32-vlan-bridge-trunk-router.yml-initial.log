[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r1]
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]

TASK [Find device readiness script] ********************************************
ok: [r1]
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]

TASK [Wait for device to become ready] *****************************************
skipping: [r1]
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for r1, s1, s2, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [r1]
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]

TASK [Find configuration template for initial] *********************************
ok: [r1]
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [r1]
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.5 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.2/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.5 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.5 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.5 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.5 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname r1
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.5 r1
    172.16.0.5 swp1.r1
    172.16.1.5 swp2.r1
    10.0.0.3 s1
    10.0.0.4 s2
    172.16.0.1 h1 eth1.h1
    172.16.1.2 h2 eth1.h2
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.5/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
  
    iface swp1 inet static
      mtu 1500
      address 172.16.0.5/24
    auto swp2
  
    iface swp2 inet static
      mtu 1500
      address 172.16.1.5/24
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for none
    #
    #
    # Enable FRR daemons
    #
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    !
    interface swp1
    ! no shutdown
     description r1 -> [h1,s1,s2]
    !
    interface swp2
    ! no shutdown
     description r1 -> [h2,s1,s2]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname s1
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.5 r1
    172.16.0.5 swp1.r1
    172.16.1.5 swp2.r1
    10.0.0.3 s1
    10.0.0.4 s2
    172.16.0.1 h1 eth1.h1
    172.16.1.2 h2 eth1.h2
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.3/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
    auto swp2
    auto swp3
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['vlan']
    #
    #
    # Enable FRR daemons
    #
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    !
    interface swp1
    ! no shutdown
     description s1 -> s2
    !
    interface swp2
    ! no shutdown
     description [Access VLAN red] s1 -> h1
    !
    interface swp3
    ! no shutdown
     description [Access VLAN blue] s1 -> h2
    !
    interface vlan700
    ! no shutdown
     description VLAN red (700) -> [h1,s2,r1]
    !
    interface vlan701
    ! no shutdown
     description VLAN blue (701) -> [h2,s2,r1]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname s2
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.5 r1
    172.16.0.5 swp1.r1
    172.16.1.5 swp2.r1
    10.0.0.3 s1
    10.0.0.4 s2
    172.16.0.1 h1 eth1.h1
    172.16.1.2 h2 eth1.h2
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.4/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
    auto swp2
    auto swp3
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['vlan']
    #
    #
    # Enable FRR daemons
    #
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    !
    interface swp1
    ! no shutdown
     description s2 -> s1
    !
    interface swp2
    ! no shutdown
     description [Access VLAN red] s2 -> r1
    !
    interface swp3
    ! no shutdown
     description [Access VLAN blue] s2 -> r1
    !
    interface vlan700
    ! no shutdown
     description VLAN red (700) -> [h1,s1,r1]
    !
    interface vlan701
    ! no shutdown
     description VLAN blue (701) -> [h2,s1,r1]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [r1]
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for r1, s1, s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
ok: [r1]
ok: [s1]
ok: [s2]

TASK [Create local temporary file] *********************************************
changed: [r1 -> localhost]
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [Create initial config script in local temporary file] ********************
changed: [s2 -> localhost]
changed: [s1 -> localhost]
changed: [r1 -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [s1]
changed: [r1]
changed: [s2]

TASK [Remove temporary file /tmp/ansible.r1.ubq6f9fmtemp] **********************
changed: [s2 -> localhost]
changed: [s1 -> localhost]
changed: [r1 -> localhost]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-87bnxyd3.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    #
    # Create multi-vlan bridge, specify VLANs, and attach interfaces to it
    #
    cat >/etc/network/interfaces.d/50-bridge.intf <<CONFIG
    auto bridge
    iface bridge
        bridge-vlan-aware yes
        bridge-vids 700,701
        bridge-ports swp1
        bridge-ports swp2
        bridge-ports swp3
    CONFIG
    #
    # Create VLAN interfaces
    #
    cat >/etc/network/interfaces.d/51-bridge-interfaces.intf <<CONFIG
    iface swp1
        bridge-vids 700,701
        bridge-allow-untagged no
    iface swp2
        bridge-access 700
    iface swp3
        bridge-access 701
    auto vlan700
    iface vlan700
  
        vlan-id 700
        vlan-raw-device bridge
    auto vlan701
    iface vlan701
  
        vlan-id 701
        vlan-raw-device bridge
    CONFIG
    ifreload -a
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    #
    # Create multi-vlan bridge, specify VLANs, and attach interfaces to it
    #
    cat >/etc/network/interfaces.d/50-bridge.intf <<CONFIG
    auto bridge
    iface bridge
        bridge-vlan-aware yes
        bridge-vids 700,701
        bridge-ports swp1
        bridge-ports swp2
        bridge-ports swp3
    CONFIG
    #
    # Create VLAN interfaces
    #
    cat >/etc/network/interfaces.d/51-bridge-interfaces.intf <<CONFIG
    iface swp1
        bridge-vids 700,701
        bridge-allow-untagged no
    iface swp2
        bridge-access 700
    iface swp3
        bridge-access 701
    auto vlan700
    iface vlan700
  
        vlan-id 700
        vlan-raw-device bridge
    auto vlan701
    iface vlan701
  
        vlan-id 701
        vlan-raw-device bridge
    CONFIG
    ifreload -a

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s1]
ok: [s2]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for s1, s2

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/vlan/cumulus.j2] ***
ok: [s1]
ok: [s2]

TASK [Create local temporary file] *********************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [Create vlan config script in local temporary file] ***********************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [s2]
changed: [s1]

TASK [Remove temporary file /tmp/ansible.s1.v4bepm8ptemp] **********************
changed: [s2 -> localhost]
changed: [s1 -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=13   changed=4    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
h2                         : ok=13   changed=4    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
r1                         : ok=13   changed=4    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0   
s1                         : ok=25   changed=8    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0   
s2                         : ok=25   changed=8    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0   



The devices under test are simple bridges with a VLAN trunk between them.
An external router with two interfaces (one per VLAN) is attached to one of them.

* h1 and h2 should be able to ping each other

Please note it might take a while for the lab to work due to
STP learning phase

