[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p_global] => 
  msg: |-
    initial configuration for p_global
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p_global
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description p_global -> dut [external]
     ip address 10.1.0.2/30
     ipv6 address 2001:db8:3::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p_vrf] => 
  msg: |-
    initial configuration for p_vrf
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p_vrf
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description p_vrf -> dut [external]
     ip address 10.1.0.6/30
     ipv6 address 2001:db8:3:1::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname dut
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 dut
    2001:db8:1:1::1 dut
    10.1.0.1 swp1.dut
    2001:db8:3::1 swp1.dut
    10.1.0.5 swp2.customer.dut
    2001:db8:3:1::1 swp2.customer.dut
    10.2.0.1 customer.dut
    2001:db8:4::1 customer.dut
    10.0.0.2 p_global
    2001:db8:1:2::1 p_global
    10.1.0.2 eth1.p_global
    2001:db8:3::2 eth1.p_global
    10.0.0.3 p_vrf
    2001:db8:1:3::1 p_vrf
    10.1.0.6 eth1.p_vrf
    2001:db8:3:1::3 eth1.p_vrf
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
  
    echo "INIT: Configuring system wide default MTU policy"
    cat > /etc/network/ifupdown2/policy.d/mtu.json <<CONFIG
    { "address": { "defaults": { "mtu": "1500" } } }
    CONFIG
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.1/32
    iface lo inet6 loopback
      address 2001:db8:1:1::1/64
  
    auto lo1
    iface lo1
      pre-up ip link add lo1 type dummy
    iface lo1 inet loopback
      address 10.2.0.1/32
    iface lo1 inet6 loopback
      address 2001:db8:4::1/64
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
  
    iface swp1 inet static
      address 10.1.0.1/30
  
    iface swp1 inet6 static
      address 2001:db8:3::1/64
    auto swp2
  
    iface swp2 inet static
      address 10.1.0.5/30
  
    iface swp2 inet6 static
      address 2001:db8:3:1::1/64
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    sysctl -qw net.ipv6.conf.swp1.disable_ipv6=0
    sysctl -qw net.ipv6.conf.swp2.disable_ipv6=0
    sysctl -qw net.ipv6.conf.lo1.disable_ipv6=0
    #
    # Enable FRR modules for ['routing', 'bgp', 'vrf']
    #
    #
    # Enable FRR daemons
    #
    echo "bgpd=yes" >>/etc/frr/daemons
    echo "bgpd=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description dut -> p_global [external]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface swp2
    ! no shutdown
     description dut -> p_vrf [external]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface lo1
    ! no shutdown
     description VRF Loopback customer
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for p_global, p_vrf

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create initial config script in local temporary file] ********************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.2ekbb72htemp] *********************
changed: [dut -> localhost]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [p_global -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [p_global]
skipping: [p_vrf]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for p_global, p_vrf

TASK [template] ****************************************************************
changed: [p_vrf]
changed: [p_global]

TASK [set_fact] ****************************************************************
ok: [p_global]
ok: [p_vrf]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [p_global]
changed: [p_vrf]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [p_global]
skipping: [p_vrf]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf => (item=vrf)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Find configuration template for routing] *********************************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut] => 
  msg: |-
    routing configuration for dut
    =========================================
    !
    !
    route-map med_17-ipv4 permit 10
      set metric 17
    !
    route-map med_17-ipv6 permit 10
      set metric 17
    !
    route-map med_17-vpnv4 permit 10
      set metric 17
    !
    route-map med_17-vpnv6 permit 10
      set metric 17
    !
    route-map med_42-ipv4 permit 10
      set metric 42
    !
    route-map med_42-ipv6 permit 10
      set metric 42
    !
    route-map med_42-vpnv4 permit 10
      set metric 42
    !
    route-map med_42-vpnv6 permit 10
      set metric 42
    !

TASK [Deploy routing configuration] ********************************************
skipping: [p_global]
skipping: [p_vrf]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/routing/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create routing config script in local temporary file] ********************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.k54r99hotemp] *********************
changed: [dut -> localhost]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Find configuration template for bgp] *************************************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.1
    !
      neighbor 10.1.0.2 remote-as 65100
      neighbor 10.1.0.2 description p_global
    !
      neighbor 2001:db8:3::2 remote-as 65100
      neighbor 2001:db8:3::2 description p_global
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.1/32
    !
    !
    !
      neighbor 10.1.0.2 activate
      no neighbor 10.1.0.2 send-community all
      neighbor 10.1.0.2 send-community standard
      neighbor 10.1.0.2 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:1::/64
    !
    !
    !
      neighbor 2001:db8:3::2 activate
      no neighbor 2001:db8:3::2 send-community all
      neighbor 2001:db8:3::2 send-community standard
      neighbor 2001:db8:3::2 send-community large
    !
    !
    !
    do write
ok: [p_global] => 
  msg: |-
    bgp configuration for p_global
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor 10.1.0.1 remote-as 65000
      neighbor 10.1.0.1 description dut
    !
      neighbor 2001:db8:3::1 remote-as 65000
      neighbor 2001:db8:3::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.2/32
    !
    !
    !
      neighbor 10.1.0.1 activate
      no neighbor 10.1.0.1 send-community all
      neighbor 10.1.0.1 send-community standard
      neighbor 10.1.0.1 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:2::/64
    !
    !
    !
      neighbor 2001:db8:3::1 activate
      no neighbor 2001:db8:3::1 send-community all
      neighbor 2001:db8:3::1 send-community standard
      neighbor 2001:db8:3::1 send-community large
    !
    !
    !
    do write
ok: [p_vrf] => 
  msg: |-
    bgp configuration for p_vrf
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 10.1.0.5 remote-as 65000
      neighbor 10.1.0.5 description dut
    !
      neighbor 2001:db8:3:1::1 remote-as 65000
      neighbor 2001:db8:3:1::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.3/32
    !
    !
    !
      neighbor 10.1.0.5 activate
      no neighbor 10.1.0.5 send-community all
      neighbor 10.1.0.5 send-community standard
      neighbor 10.1.0.5 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:3::/64
    !
    !
    !
      neighbor 2001:db8:3:1::1 activate
      no neighbor 2001:db8:3:1::1 send-community all
      neighbor 2001:db8:3:1::1 send-community standard
      neighbor 2001:db8:3:1::1 send-community large
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for p_global, p_vrf

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/bgp/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create bgp config script in local temporary file] ************************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.q594e44ttemp] *********************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [p_global]
changed: [p_vrf]

TASK [set_fact] ****************************************************************
ok: [p_global]
ok: [p_vrf]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [p_global]
skipping: [p_vrf]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [p_vrf]
changed: [p_global]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Find configuration template for vrf] *************************************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    cat >/etc/network/interfaces.d/70-vrf.intf <<CONFIG
    auto customer
    iface customer
        vrf-table 1010
    #
    auto swp2
    iface swp2
        vrf customer
    #
    auto lo1
    iface lo1
        vrf customer
    #
    CONFIG
    ifreload -a
    #
    cat >/tmp/vrf_config <<CONFIG
    vrf customer
     exit-vrf
    !
    router bgp 65000
    !
    !
    router bgp 65000 vrf customer
     no bgp ebgp-requires-policy
     no bgp default ipv4-unicast
     bgp router-id 10.0.0.1
     neighbor 10.1.0.6 remote-as 65101
     neighbor 10.1.0.6 description p_vrf
     neighbor 2001:db8:3:1::3 remote-as 65101
     neighbor 2001:db8:3:1::3 description p_vrf
     address-family ipv4 unicast
      redistribute connected
  
      label vpn export auto
      export vpn
      import vpn
      rd vpn export 65000:1
      rt vpn import 65000:1
      rt vpn export 65000:1
      network 10.2.0.1/32
      neighbor 10.1.0.6 activate
      neighbor 10.1.0.6 send-community standard
      neighbor 10.1.0.6 send-community large
     exit-address-family
     address-family ipv6 unicast
      redistribute connected
  
      label vpn export auto
      export vpn
      import vpn
      rd vpn export 65000:1
      rt vpn import 65000:1
      rt vpn export 65000:1
      network 2001:db8:4::/64
      neighbor 2001:db8:3:1::3 activate
      neighbor 2001:db8:3:1::3 send-community standard
      neighbor 2001:db8:3:1::3 send-community large
     exit-address-family
    !
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?

TASK [Deploy vrf configuration] ************************************************
skipping: [p_global]
skipping: [p_vrf]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/vrf/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create vrf config script in local temporary file] ************************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.gl8uvjq1temp] *********************
changed: [dut -> localhost]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-custom-config.yml for dut => (item=bgp.policy)

TASK [Find configuration template] *********************************************
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Check is the configuration template is a file] ***************************
ok: [dut -> localhost]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Process template /home/pipi/net101/tools/netsim/extra/bgp.policy/cumulus.j2 for dut] ***
skipping: [dut]

TASK [Find custom configuration deployment script] *****************************
ok: [dut]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut

TASK [Render device configuration from /home/pipi/net101/tools/netsim/extra/bgp.policy/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create bgp.policy config script in local temporary file] *****************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.2x3po70wtemp] *********************
changed: [dut -> localhost]

PLAY RECAP *********************************************************************
dut                        : ok=61   changed=20   unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
p_global                   : ok=31   changed=5    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
p_vrf                      : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   



Use this topology to test BGP MED on IPv4 and IPv6 prefixes. DUT
has to set MED on outgoing EBGP updates.

