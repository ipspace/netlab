[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]
ok: [s3]
ok: [h2]
ok: [h1]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Find device readiness script] ********************************************
ok: [s1]
ok: [s2]
ok: [s3]
ok: [h2]
ok: [h1]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Wait for device to become ready] *****************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3, h1, h2, h3, h4, h5, h6

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [s1]
ok: [s2]
ok: [s3]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Find configuration template for initial] *********************************
ok: [s1]
ok: [s2]
ok: [s3]
ok: [h1]
ok: [h3]
ok: [h2]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s3] => 
  msg: |-
    initial configuration for s3
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth4.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1600
    ip link set eth2 mtu 1600
    ip link set eth3 mtu 1500
    ip link set eth4 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s3
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.42/32
    !
    interface eth1
     no shutdown
     description s3 -> s2
     ip address 172.16.2.42/24
    !
    interface eth2
     no shutdown
     description s3 -> s1
     ip address 172.16.3.42/24
    !
    interface eth3
     no shutdown
     ! no ip address
    !
    interface eth4
     no shutdown
     ! no ip address
    !
    interface vlan1000
     no shutdown
     description VLAN red (1000) -> [h3,h1,s1,h2,s2]
     ! no ip address
    !
    interface vlan1001
     no shutdown
     description VLAN blue (1001) -> [h6,h4,s1,h5,s2]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname s1
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.7 s1
    10.1.0.1 swp1.s1
    172.16.3.7 swp2.s1
    10.0.0.8 s2
    10.1.0.2 swp1.s2
    172.16.2.8 swp2.s2
    10.0.0.42 s3
    172.16.2.42 eth1.s3
    172.16.3.42 eth2.s3
    172.16.0.1 h1 eth1.h1
    172.16.0.2 h2 eth1.h2
    172.16.0.3 h3 eth1.h3
    172.16.1.4 h4 eth1.h4
    172.16.1.5 h5 eth1.h5
    172.16.1.6 h6 eth1.h6
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.7/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
  
    iface swp1 inet static
      mtu 1600
      address 10.1.0.1/30
    auto swp2
  
    iface swp2 inet static
      mtu 1600
      address 172.16.3.7/24
    auto swp3
    auto swp4
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['vlan', 'vxlan', 'ospf']
    #
    #
    # Enable FRR daemons
    #
    echo "ospfd=yes" >>/etc/frr/daemons
    echo "ospf6d=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    !
    interface swp1
    ! no shutdown
     description s1 -> s2
    !
    interface swp2
    ! no shutdown
     description s1 -> s3
    !
    interface swp3
    ! no shutdown
    !
    interface swp4
    ! no shutdown
    !
    interface vlan1000
    ! no shutdown
     description VLAN red (1000) -> [h3,s3,h1,h2,s2]
    !
    interface vlan1001
    ! no shutdown
     description VLAN blue (1001) -> [h6,s3,h4,h5,s2]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname s2
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.7 s1
    10.1.0.1 swp1.s1
    172.16.3.7 swp2.s1
    10.0.0.8 s2
    10.1.0.2 swp1.s2
    172.16.2.8 swp2.s2
    10.0.0.42 s3
    172.16.2.42 eth1.s3
    172.16.3.42 eth2.s3
    172.16.0.1 h1 eth1.h1
    172.16.0.2 h2 eth1.h2
    172.16.0.3 h3 eth1.h3
    172.16.1.4 h4 eth1.h4
    172.16.1.5 h5 eth1.h5
    172.16.1.6 h6 eth1.h6
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.8/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
  
    iface swp1 inet static
      mtu 1600
      address 10.1.0.2/30
    auto swp2
  
    iface swp2 inet static
      mtu 1600
      address 172.16.2.8/24
    auto swp3
    auto swp4
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['vlan', 'vxlan', 'ospf']
    #
    #
    # Enable FRR daemons
    #
    echo "ospfd=yes" >>/etc/frr/daemons
    echo "ospf6d=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    !
    interface swp1
    ! no shutdown
     description s2 -> s1
    !
    interface swp2
    ! no shutdown
     description s2 -> s3
    !
    interface swp3
    ! no shutdown
    !
    interface swp4
    ! no shutdown
    !
    interface vlan1000
    ! no shutdown
     description VLAN red (1000) -> [h3,s3,h1,s1,h2]
    !
    interface vlan1001
    ! no shutdown
     description VLAN blue (1001) -> [h6,s3,h4,s1,h5]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [h5] => 
  msg: |-
    initial configuration for h5
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.5/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [h6] => 
  msg: |-
    initial configuration for h6
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.6/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s1]
ok: [s2]
ok: [s3]
ok: [h1]
ok: [h3]
ok: [h2]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for s1, s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for s3
included: /home/pipi/net101/tools/netsim/ansible/tasks/linux/initial-clab.yml for h1, h2, h3, h4, h5, h6

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [s1]
changed: [s2]

TASK [set_fact deployed_config] ************************************************
ok: [s1]
ok: [s2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
changed: [s2]
changed: [s1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
skipping: [s1]
skipping: [s2]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [s3 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [s3]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for s3

TASK [template] ****************************************************************
changed: [s3]

TASK [set_fact] ****************************************************************
ok: [s3]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [s3]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [s3]

TASK [set_fact] ****************************************************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Create initial container setup from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h6 -> localhost]
changed: [h5 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]

TASK [Initial container configuration via /tmp/config-ptkjETrp-h1.sh] **********
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]
changed: [h5 -> localhost]
changed: [h6 -> localhost]

TASK [file] ********************************************************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h6 -> localhost]
changed: [h5 -> localhost]
changed: [h4 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=vxlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for vlan] ************************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    #
    # Create multi-vlan bridge, specify VLANs, and attach interfaces to it
    #
    cat >/etc/network/interfaces.d/50-bridge.intf <<CONFIG
    auto bridge
    iface bridge
        bridge-vlan-aware yes
        bridge-vids 1001
        bridge-vids 1000
        bridge-ports swp3
        bridge-ports swp4
    CONFIG
    #
    # Create VLAN interfaces
    #
    cat >/etc/network/interfaces.d/51-bridge-interfaces.intf <<CONFIG
    iface swp3
        bridge-access 1000
    iface swp4
        bridge-access 1001
    auto vlan1000
    iface vlan1000
  
        vlan-id 1000
        vlan-raw-device bridge
    auto vlan1001
    iface vlan1001
  
        vlan-id 1001
        vlan-raw-device bridge
    CONFIG
    ifreload -a
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    #
    # Create multi-vlan bridge, specify VLANs, and attach interfaces to it
    #
    cat >/etc/network/interfaces.d/50-bridge.intf <<CONFIG
    auto bridge
    iface bridge
        bridge-vlan-aware yes
        bridge-vids 1001
        bridge-vids 1000
        bridge-ports swp3
        bridge-ports swp4
    CONFIG
    #
    # Create VLAN interfaces
    #
    cat >/etc/network/interfaces.d/51-bridge-interfaces.intf <<CONFIG
    iface swp3
        bridge-access 1000
    iface swp4
        bridge-access 1001
    auto vlan1000
    iface vlan1000
  
        vlan-id 1000
        vlan-raw-device bridge
    auto vlan1001
    iface vlan1001
  
        vlan-id 1001
        vlan-raw-device bridge
    CONFIG
    ifreload -a
ok: [s3] => 
  msg: |-
    vlan configuration for s3
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
      brctl addbr vlan1000
      ip link set dev vlan1000 up
      ip addr flush dev vlan1000
    fi
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
      brctl addbr vlan1001
      ip link set dev vlan1001 up
      ip addr flush dev vlan1001
    fi
  
    brctl addif vlan1000 eth3
    brctl addif vlan1001 eth4
    exit 0

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for s1, s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s3

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [s1]
changed: [s2]

TASK [set_fact deployed_config] ************************************************
ok: [s1]
ok: [s2]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/cumulus.j2] ***
changed: [s1]
changed: [s2]

TASK [run vtysh to import vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/cumulus.j2] ***
skipping: [s1]
skipping: [s2]

TASK [template] ****************************************************************
changed: [s3]

TASK [set_fact] ****************************************************************
ok: [s3]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
changed: [s3]

TASK [run vtysh to import vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [s3]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for ospf] ************************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    !
    router ospf
     ospf router-id 10.0.0.7
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    !
    interface lo
     ip ospf area 0.0.0.0
    !
    interface swp1
    ! s1 -> s2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface swp2
    ! s1 -> s3
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    do write
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    !
    router ospf
     ospf router-id 10.0.0.8
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    !
    interface lo
     ip ospf area 0.0.0.0
    !
    interface swp1
    ! s2 -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface swp2
    ! s2 -> s3
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    do write
ok: [s3] => 
  msg: |-
    ospf configuration for s3
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.42
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! s3 -> s2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! s3 -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for s1, s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s3

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [s2]
changed: [s1]

TASK [set_fact deployed_config] ************************************************
ok: [s1]
ok: [s2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/cumulus.j2] ***
skipping: [s1]
skipping: [s2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/cumulus.j2] ***
changed: [s1]
changed: [s2]

TASK [template] ****************************************************************
changed: [s3]

TASK [set_fact] ****************************************************************
ok: [s3]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [s3]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [s3]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for vxlan] ***********************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    #!/bin/bash
    #
    # Exit immediately when any command fails
    set -e
    ##
    # Create VXLAN interfaces with static flood lists
    #
    cat >/etc/network/interfaces.d/60-vxlan.intf <<CONFIG
    iface lo inet loopback
        vxlan-local-tunnelip 10.0.0.7
    #
    #
    auto vni-5000
    iface vni-5000
        bridge-access 1000
        vxlan-id 5000
        vxlan-learning yes
  
        vxlan-remoteip 10.0.0.42
        vxlan-remoteip 10.0.0.8
    #
    auto vni-5001
    iface vni-5001
        bridge-access 1001
        vxlan-id 5001
        vxlan-learning yes
  
        vxlan-remoteip 10.0.0.42
        vxlan-remoteip 10.0.0.8
    #
    iface bridge
        bridge-stp no
        bridge-ports vni-5000
        bridge-ports vni-5001
    CONFIG
    ifreload -a
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    #!/bin/bash
    #
    # Exit immediately when any command fails
    set -e
    ##
    # Create VXLAN interfaces with static flood lists
    #
    cat >/etc/network/interfaces.d/60-vxlan.intf <<CONFIG
    iface lo inet loopback
        vxlan-local-tunnelip 10.0.0.8
    #
    #
    auto vni-5000
    iface vni-5000
        bridge-access 1000
        vxlan-id 5000
        vxlan-learning yes
  
        vxlan-remoteip 10.0.0.42
        vxlan-remoteip 10.0.0.7
    #
    auto vni-5001
    iface vni-5001
        bridge-access 1001
        vxlan-id 5001
        vxlan-learning yes
  
        vxlan-remoteip 10.0.0.42
        vxlan-remoteip 10.0.0.7
    #
    iface bridge
        bridge-stp no
        bridge-ports vni-5000
        bridge-ports vni-5001
    CONFIG
    ifreload -a
ok: [s3] => 
  msg: |-
    vxlan configuration for s3
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
  
  
    # Determine max MTU used on interfaces, to configure VXLAN interface
  
    # Create L3 VNIs with bridges and add to correct vrf table
  
    # Create VXLAN L2 interface per vni
    ip link add vxlan5000 type vxlan \
      id 5000 \
      dstport 4789 \
      local 10.0.0.42
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
    brctl addbr vlan1000
    ip link set up dev vlan1000
    fi
    brctl addif vlan1000 vxlan5000
    brctl stp vlan1000 off
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1600 addrgenmode none dev vxlan5000
    ip link set up dev vxlan5000
  
    bridge fdb append 00:00:00:00:00:00 dev vxlan5000 dst 10.0.0.7
    bridge fdb append 00:00:00:00:00:00 dev vxlan5000 dst 10.0.0.8
    # Create VXLAN L2 interface per vni
    ip link add vxlan5001 type vxlan \
      id 5001 \
      dstport 4789 \
      local 10.0.0.42
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
    brctl addbr vlan1001
    ip link set up dev vlan1001
    fi
    brctl addif vlan1001 vxlan5001
    brctl stp vlan1001 off
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1600 addrgenmode none dev vxlan5001
    ip link set up dev vxlan5001
  
    bridge fdb append 00:00:00:00:00:00 dev vxlan5001 dst 10.0.0.7
    bridge fdb append 00:00:00:00:00:00 dev vxlan5001 dst 10.0.0.8
  
    exit $?

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for s1, s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s3

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [s1]
changed: [s2]

TASK [set_fact deployed_config] ************************************************
ok: [s1]
ok: [s2]

TASK [run /tmp/config.sh to deploy vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/cumulus.j2] ***
changed: [s1]
changed: [s2]

TASK [run vtysh to import vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/cumulus.j2] ***
skipping: [s1]
skipping: [s2]

TASK [template] ****************************************************************
changed: [s3]

TASK [set_fact] ****************************************************************
ok: [s3]

TASK [run /tmp/config.sh to deploy vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/frr.j2] ***
changed: [s3]

TASK [run vtysh to import vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/frr.j2] ***
skipping: [s3]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h2                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h3                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h4                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h5                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h6                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
s1                         : ok=39   changed=8    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
s2                         : ok=39   changed=8    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
s3                         : ok=41   changed=9    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   



This is the multi-vendor version of the vxlan-bridging lab.
Use it to test compatibility of your VXLAN implementation with FRR

* h1, h2 and h3 should be able to ping each other
* h4, h5 and h6 should be able to ping each other

Please note it might take a while for the lab to work due to
OSPF adjacency establishment and STP learning phase

