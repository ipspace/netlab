[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [c1]
ok: [c2]
ok: [server]

TASK [Find device readiness script] ********************************************
ok: [c1]
ok: [c2]
ok: [server]

TASK [Wait for device to become ready] *****************************************
skipping: [c1]
skipping: [c2]
skipping: [server]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for c1, c2, server

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [c1]
ok: [c2]
ok: [server]

TASK [Find configuration template for normalize] *******************************
ok: [c1]
ok: [c2]
ok: [server]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [server]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [c1]
ok: [c2]
ok: [server]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [c1]
skipping: [c2]
skipping: [server]

TASK [Deploy normalize configuration] ******************************************
skipping: [c1]
skipping: [c2]
skipping: [server]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for c1, c2, server

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [c1]
ok: [c2]
ok: [server]

TASK [Find configuration template for initial] *********************************
ok: [c1]
ok: [c2]
ok: [server]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [server]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [c1]
ok: [c2]
ok: [server]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [server] => 
  msg: |-
    initial configuration for server
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe::3/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [c1] => 
  msg: |-
    initial configuration for c1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname c1
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 c1
    10.0.0.2 c2
    2001:db8:cafe::3 server eth1.server
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
  
    echo "INIT: Configuring system wide default MTU policy"
    cat > /etc/network/ifupdown2/policy.d/mtu.json <<CONFIG
    { "address": { "defaults": { "mtu": "1500" } } }
    CONFIG
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.1/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['dhcp']
    #
    #
    # Enable FRR daemons
    #
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description c1 -> [c2,server]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [c2] => 
  msg: |-
    initial configuration for c2
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname c2
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 c1
    10.0.0.2 c2
    2001:db8:cafe::3 server eth1.server
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
  
    echo "INIT: Configuring system wide default MTU policy"
    cat > /etc/network/ifupdown2/policy.d/mtu.json <<CONFIG
    { "address": { "defaults": { "mtu": "1500" } } }
    CONFIG
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.2/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['dhcp']
    #
    #
    # Enable FRR daemons
    #
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description c2 -> [c1,server]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus.yml for c1, c2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for server

TASK [Render device configuration from /home/pipi/netlab_gh/netsim/ansible/templates/initial/cumulus.j2] ***
ok: [c1]
ok: [c2]

TASK [Create local temporary file] *********************************************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [Create initial config script in local temporary file] ********************
changed: [c2 -> localhost]
changed: [c1 -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [c2]
changed: [c1]

TASK [Remove temporary file /tmp/ansible.c1.7geij_gotemp] **********************
changed: [c2 -> localhost]
changed: [c1 -> localhost]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [server]

TASK [Create a temporary file for the rendered script] *************************
changed: [server -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [server -> localhost]

TASK [Copy script into running container at /tmp/config-server_initial.sh] *****
skipping: [server]

TASK [Execute /tmp/config-server_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [server]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [server -> localhost]

TASK [Remove temporary file /tmp/server_initial-16dj896s.sh] *******************
changed: [server -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [c1]
ok: [c2]
ok: [server]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for c1, c2, server => (item=dhcp)

TASK [Figure out whether to deploy the module dhcp on current device] **********
ok: [c1]
ok: [c2]
ok: [server]

TASK [Find configuration template for dhcp] ************************************
skipping: [server]
ok: [c1]
ok: [c2]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [server]

TASK [Find configuration deployment deploy_script for dhcp] ********************
skipping: [server]
ok: [c1]
ok: [c2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [server]
ok: [c1] => 
  msg: |-
    dhcp configuration for c1
    =========================================
    #!/bin/bash
    #
    # Disable IPv6 RA on DHCPv6 client interfaces
    #
    echo "Disable IPv6 RA"
    cat >/tmp/config <<CONFIG
    interface swp1
      ipv6 nd suppress-ra
      no ipv6 nd ra-interval
    !
    CONFIG
    vtysh -f /tmp/config
    #
    # Configure DHCP clients on interfaces
    #
    set -e
    #
    echo "DHCP: set IP addresses on interfaces"
    cat >/etc/network/interfaces.d/12-dhcp.intf <<CONFIG
    auto swp1
    iface swp1 inet6 dhcp
    CONFIG
    #
    echo "DHCP: executing ifup"
    nohup bash -c 'ifreload -a || ifreload -a' &
    sysctl net/ipv6/conf/swp1/forwarding=0
    sysctl net/ipv6/conf/swp1/accept_ra=2
    # sysctl net/ipv6/conf/swp1/accept_ra_from_local=1
ok: [c2] => 
  msg: |-
    dhcp configuration for c2
    =========================================
    #!/bin/bash
    #
    # Disable IPv6 RA on DHCPv6 client interfaces
    #
    echo "Disable IPv6 RA"
    cat >/tmp/config <<CONFIG
    interface swp1
      ipv6 nd suppress-ra
      no ipv6 nd ra-interval
    !
    CONFIG
    vtysh -f /tmp/config
    #
    # Configure DHCP clients on interfaces
    #
    set -e
    #
    echo "DHCP: set IP addresses on interfaces"
    cat >/etc/network/interfaces.d/12-dhcp.intf <<CONFIG
    auto swp1
    iface swp1 inet6 dhcp
    CONFIG
    #
    echo "DHCP: executing ifup"
    nohup bash -c 'ifreload -a || ifreload -a' &
    sysctl net/ipv6/conf/swp1/forwarding=0
    sysctl net/ipv6/conf/swp1/accept_ra=2
    # sysctl net/ipv6/conf/swp1/accept_ra_from_local=1

TASK [Deploy dhcp configuration] ***********************************************
skipping: [server]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus.yml for c1, c2

TASK [Render device configuration from /home/pipi/netlab_gh/netsim/ansible/templates/dhcp/cumulus.j2] ***
ok: [c1]
ok: [c2]

TASK [Create local temporary file] *********************************************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [Create dhcp config script in local temporary file] ***********************
changed: [c2 -> localhost]
changed: [c1 -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [c2]
changed: [c1]

TASK [Remove temporary file /tmp/ansible.c1.8_y6k_qutemp] **********************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
c1                         : ok=29   changed=8    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
c2                         : ok=29   changed=8    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
server                     : ok=20   changed=4    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   



Use this topology to test the DHCPv6 client on your device. Use 'netlab
validate' to check whether your devices requested DHCPv6 leases from the
DHCPv6 server.

