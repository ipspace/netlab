[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Find device readiness script] ********************************************
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Wait for device to become ready] *****************************************
skipping: [c1]
skipping: [c2]
skipping: [server]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for relay

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [relay]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, c2, server, relay

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Find configuration template for normalize] *******************************
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [server]
skipping: [relay]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [c1]
skipping: [c2]
skipping: [server]
ok: [relay] => 
  msg: |-
    normalize configuration for relay
    =========================================
    !
    interface Ethernet1
     no switchport
     mac-address 52dc.cafe.0101
    !
    interface Ethernet2
     no switchport
     mac-address 52dc.cafe.0102

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [c1]
skipping: [c2]
skipping: [server]
ok: [relay]

TASK [Deploy normalize configuration] ******************************************
skipping: [c1]
skipping: [c2]
skipping: [server]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for relay

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [relay]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, c2, server, relay

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Find configuration template for initial] *********************************
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [server]
skipping: [relay]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [server] => 
  msg: |-
    initial configuration for server
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [c1] => 
  msg: |-
    initial configuration for c1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname c1
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.2 c1
    10.0.0.3 c2
    172.16.1.4 server eth1.server
    10.0.0.1 relay
    172.16.0.1 Ethernet1.relay
    172.16.1.1 Ethernet2.relay
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.2/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['dhcp', 'ospf']
    #
    #
    # Enable FRR daemons
    #
    echo "ospfd=yes" >>/etc/frr/daemons
    echo "ospf6d=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    !
    interface swp1
    ! no shutdown
     description c1 -> [c2,relay]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [c2] => 
  msg: |-
    initial configuration for c2
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname c2
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.2 c1
    10.0.0.3 c2
    172.16.1.4 server eth1.server
    10.0.0.1 relay
    172.16.0.1 Ethernet1.relay
    172.16.1.1 Ethernet2.relay
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.3/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['dhcp', 'ospf']
    #
    #
    # Enable FRR daemons
    #
    echo "ospfd=yes" >>/etc/frr/daemons
    echo "ospf6d=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    !
    interface swp1
    ! no shutdown
     description c2 -> [c1,relay]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [relay] => 
  msg: |-
    initial configuration for relay
    =========================================
    hostname relay
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    !
    ip host c1 10.0.0.2
    ip host c2 10.0.0.3
    ip host server 172.16.1.4
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.1/32
    !
    interface Ethernet1
     no switchport
     description relay -> [c1,c2]
     ip address 172.16.0.1/24
    !
     mac-address 52dc.cafe.0101
     no shutdown
    !
    interface Ethernet2
     no switchport
     description relay -> server
     ip address 172.16.1.1/24
    !
     mac-address 52dc.cafe.0102
     no shutdown
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for c1, c2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for server
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for relay

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
ok: [c1]
ok: [c2]

TASK [Create local temporary file] *********************************************
changed: [c2 -> localhost]
changed: [c1 -> localhost]

TASK [Create initial config script in local temporary file] ********************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [c2]
changed: [c1]

TASK [Remove temporary file /tmp/ansible.c1.niqktrlwtemp] **********************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [server]

TASK [Create a temporary file for the rendered script] *************************
changed: [server -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [server -> localhost]

TASK [Copy script into running container at /tmp/config-server_initial.sh] *****
skipping: [server]

TASK [Execute /tmp/config-server_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [server]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [server -> localhost]

TASK [Remove temporary file /tmp/server_initial-i3qe_4w6.sh] *******************
changed: [server -> localhost]

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [relay]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, c2, relay, server => (item=dhcp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, c2, relay, server => (item=ospf)

TASK [Figure out whether to deploy the module dhcp on current device] **********
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Find configuration template for dhcp] ************************************
ok: [c1]
skipping: [server]
ok: [c2]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [relay]
skipping: [server]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [server]
ok: [c1] => 
  msg: |-
    dhcp configuration for c1
    =========================================
    #!/bin/bash
    #
    # Disable IPv6 RA on DHCPv6 client interfaces
    #
    #
    # Configure DHCP clients on interfaces
    #
    set -e
    #
    echo "DHCP: set IP addresses on interfaces"
    cat >/etc/network/interfaces.d/12-dhcp.intf <<CONFIG
    auto swp1
    iface swp1 inet dhcp
      mtu 1500
    CONFIG
    #
    echo "DHCP: executing ifup"
    nohup bash -c 'ifreload -a || ifreload -a' &
ok: [c2] => 
  msg: |-
    dhcp configuration for c2
    =========================================
    #!/bin/bash
    #
    # Disable IPv6 RA on DHCPv6 client interfaces
    #
    #
    # Configure DHCP clients on interfaces
    #
    set -e
    #
    echo "DHCP: set IP addresses on interfaces"
    cat >/etc/network/interfaces.d/12-dhcp.intf <<CONFIG
    auto swp1
    iface swp1 inet dhcp
      mtu 1500
    CONFIG
    #
    echo "DHCP: executing ifup"
    nohup bash -c 'ifreload -a || ifreload -a' &
ok: [relay] => 
  msg: |-
    dhcp configuration for relay
    =========================================
    interface Ethernet1
      ip helper-address 172.16.1.4

TASK [Find configuration deployment deploy_script for dhcp] ********************
skipping: [server]
ok: [c1]
ok: [c2]
ok: [relay]

TASK [Deploy dhcp configuration] ***********************************************
skipping: [server]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for c1, c2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for relay

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/dhcp/cumulus.j2] ***
ok: [c1]
ok: [c2]

TASK [Create local temporary file] *********************************************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [Create dhcp config script in local temporary file] ***********************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [c2]
changed: [c1]

TASK [Remove temporary file /tmp/ansible.c1.8d89m87xtemp] **********************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [eos_config: deploying dhcp from /home/pipi/net101/tools/netsim/ansible/templates/dhcp/eos.j2] ***
changed: [relay]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [c1]
ok: [c2]
ok: [server]
ok: [relay]

TASK [Find configuration template for ospf] ************************************
skipping: [server]
ok: [c1]
ok: [c2]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [relay]
skipping: [server]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [server]
ok: [c1] => 
  msg: |-
    ospf configuration for c1
    =========================================
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    !
    interface lo
     ip ospf area 0.0.0.0
    !
    interface swp1
    ! c1 -> [c2,relay]
     ip ospf area 0.0.0.0
    !
  
    do write
ok: [c2] => 
  msg: |-
    ospf configuration for c2
    =========================================
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    !
    interface lo
     ip ospf area 0.0.0.0
    !
    interface swp1
    ! c2 -> [c1,relay]
     ip ospf area 0.0.0.0
    !
  
    do write
ok: [relay] => 
  msg: |-
    ospf configuration for relay
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.1
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! relay -> [c1,c2]
     ip ospf area 0.0.0.0
    !
    interface Ethernet2
    ! relay -> server
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [server]
ok: [c1]
ok: [c2]
ok: [relay]

TASK [Deploy ospf configuration] ***********************************************
skipping: [server]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for c1, c2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for relay

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/ospf/cumulus.j2] ***
ok: [c1]
ok: [c2]

TASK [Create local temporary file] *********************************************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [Create ospf config script in local temporary file] ***********************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [c1]
changed: [c2]

TASK [Remove temporary file /tmp/ansible.c1.6udee93ytemp] **********************
changed: [c1 -> localhost]
changed: [c2 -> localhost]

TASK [eos_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/eos.j2] ***
changed: [relay]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
c1                         : ok=39   changed=12   unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
c2                         : ok=39   changed=12   unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
relay                      : ok=33   changed=4    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
server                     : ok=21   changed=4    unreachable=0    failed=0    skipped=18   rescued=0    ignored=0   



Use this topology to test the OSPF over interfaces using dynamic DHCP addresses. Use
'netlab validate' to check whether your devices acquired dynamic IPv4 addresses and whether they
established OSPF adjacency with the DHCP relay.

