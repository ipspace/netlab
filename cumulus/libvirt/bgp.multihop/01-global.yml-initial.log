/home/pipi/.local/lib/python3.10/site-packages/paramiko/pkey.py:100: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "cipher": algorithms.TripleDES,
/home/pipi/.local/lib/python3.10/site-packages/paramiko/transport.py:259: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "class": algorithms.TripleDES,
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [c1]
skipping: [pe2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, c1, pe2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [c1]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [c1]
skipping: [pe2]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [c1]
skipping: [pe2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, c1, pe2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [c1]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [c1] => 
  msg: |-
    initial configuration for c1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname c1
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description c1 -> dut
     ip address 10.1.0.2/30
     ipv6 address 2001:db8:3::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description c1 -> pe2
     ip address 10.1.0.5/30
     ipv6 address 2001:db8:3:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [pe2] => 
  msg: |-
    initial configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname pe2
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description pe2 -> c1
     ip address 10.1.0.6/30
     ipv6 address 2001:db8:3:1::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname dut
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 dut
    2001:db8:1:1::1 dut
    10.1.0.1 swp1.dut
    2001:db8:3::1 swp1.dut
    192.168.42.1 swp2.dut
    2001:db8:42::1 swp2.dut
    10.0.0.2 c1
    2001:db8:1:2::1 c1
    10.1.0.2 eth1.c1
    2001:db8:3::2 eth1.c1
    10.1.0.5 eth2.c1
    2001:db8:3:1::2 eth2.c1
    10.0.0.3 pe2
    2001:db8:1:3::1 pe2
    10.1.0.6 eth1.pe2
    2001:db8:3:1::3 eth1.pe2
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
  
    echo "INIT: Configuring system wide default MTU policy"
    cat > /etc/network/ifupdown2/policy.d/mtu.json <<CONFIG
    { "address": { "defaults": { "mtu": "1500" } } }
    CONFIG
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.1/32
    iface lo inet6 loopback
      address 2001:db8:1:1::1/64
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
  
    iface swp1 inet static
      address 10.1.0.1/30
  
    iface swp1 inet6 static
      address 2001:db8:3::1/64
    auto swp2
  
    iface swp2 inet static
      address 192.168.42.1/24
  
    iface swp2 inet6 static
      address 2001:db8:42::1/64
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    sysctl -qw net.ipv6.conf.swp1.disable_ipv6=0
    sysctl -qw net.ipv6.conf.swp2.disable_ipv6=0
    #
    # Enable FRR modules for ['ospf', 'bgp']
    #
    #
    # Enable FRR daemons
    #
    echo "ospfd=yes" >>/etc/frr/daemons
    echo "ospf6d=yes" >>/etc/frr/daemons
    echo "bgpd=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description dut -> c1
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface swp2
    ! no shutdown
     description dut -> stub [stub]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for c1, pe2

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create initial config script in local temporary file] ********************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.b98du53dtemp] *********************
changed: [dut -> localhost]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [c1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [c1]
skipping: [pe2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for c1, pe2

TASK [template] ****************************************************************
changed: [pe2]
changed: [c1]

TASK [set_fact] ****************************************************************
ok: [c1]
ok: [pe2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [pe2]
changed: [c1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [c1]
skipping: [pe2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, c1, pe2 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, c1, pe2 => (item=bgp)

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [Find configuration template for ospf] ************************************
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [c1]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
    !
    router ospf
     ospf router-id 10.0.0.1
     passive-interface swp2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    !
    interface lo
     ip ospf area 0.0.0.0
    !
    interface swp1
    ! dut -> c1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface swp2
    ! dut -> stub
     ip ospf area 0.0.0.0
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.1
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
     interface lo area 0.0.0.0
     interface swp1 area 0.0.0.0
     interface swp2 area 0.0.0.0
    !
    interface swp1
    ! dut -> c1
     ipv6 ospf6 network point-to-point
    !
    interface swp2
    ! dut -> stub
     ipv6 ospf6 passive
    !
  
    do write
ok: [c1] => 
  msg: |-
    ospf configuration for c1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! c1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! c1 -> pe2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! c1 -> dut
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    interface eth2
    ! c1 -> pe2
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.2
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [pe2] => 
  msg: |-
    ospf configuration for pe2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! pe2 -> c1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! pe2 -> c1
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.3
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for c1, pe2

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/ospf/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create ospf config script in local temporary file] ***********************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.d7ga91xotemp] *********************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [pe2]
changed: [c1]

TASK [set_fact] ****************************************************************
ok: [c1]
ok: [pe2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [c1]
skipping: [pe2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [pe2]
changed: [c1]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [Find configuration template for bgp] *************************************
skipping: [c1]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [c1]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [c1]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [c1]
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.1
    !
      neighbor 10.0.0.3 remote-as 65101
      neighbor 10.0.0.3 description pe2
      neighbor 10.0.0.3 update-source lo
    !
      neighbor 2001:db8:1:3::1 remote-as 65101
      neighbor 2001:db8:1:3::1 description pe2
      neighbor 2001:db8:1:3::1 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.1/32
    !
      network 192.168.42.0/24
    !
    !
      neighbor 10.0.0.3 activate
      no neighbor 10.0.0.3 send-community all
      neighbor 10.0.0.3 send-community standard
      neighbor 10.0.0.3 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:1::/64
    !
      network 2001:db8:42::/64
    !
    !
      neighbor 2001:db8:1:3::1 activate
      no neighbor 2001:db8:1:3::1 send-community all
      neighbor 2001:db8:1:3::1 send-community standard
      neighbor 2001:db8:1:3::1 send-community large
    !
    !
    !
    do write
ok: [pe2] => 
  msg: |-
    bgp configuration for pe2
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 10.0.0.1 remote-as 65000
      neighbor 10.0.0.1 description dut
      neighbor 10.0.0.1 update-source lo
    !
      neighbor 2001:db8:1:1::1 remote-as 65000
      neighbor 2001:db8:1:1::1 description dut
      neighbor 2001:db8:1:1::1 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.3/32
    !
    !
    !
      neighbor 10.0.0.1 activate
      no neighbor 10.0.0.1 send-community all
      neighbor 10.0.0.1 send-community standard
      neighbor 10.0.0.1 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:3::/64
    !
    !
    !
      neighbor 2001:db8:1:1::1 activate
      no neighbor 2001:db8:1:1::1 send-community all
      neighbor 2001:db8:1:1::1 send-community standard
      neighbor 2001:db8:1:1::1 send-community large
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
skipping: [c1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for pe2

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/bgp/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create bgp config script in local temporary file] ************************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.ubf8l_p5temp] *********************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [pe2]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [pe2]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
skipping: [dut] => (item=bgp.session) 
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-custom-config.yml for dut, pe2 => (item=ebgp.multihop)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-custom-config.yml for pe2 => (item=bgp.session)

TASK [Find configuration template] *********************************************
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]

TASK [Check is the configuration template is a file] ***************************
ok: [pe2 -> localhost]
ok: [dut -> localhost]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]

TASK [Process template /home/pipi/net101/tools/netsim/extra/ebgp.multihop/cumulus.j2 for dut] ***
skipping: [dut]
skipping: [pe2]

TASK [Find custom configuration deployment script] *****************************
ok: [dut]
ok: [pe2]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for pe2

TASK [Render device configuration from /home/pipi/net101/tools/netsim/extra/ebgp.multihop/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create ebgp.multihop config script in local temporary file] **************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.am13j02htemp] *********************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe2]

TASK [run /tmp/config.sh to deploy ebgp.multihop config from /home/pipi/net101/tools/netsim/extra/ebgp.multihop/frr.j2] ***
skipping: [pe2]

TASK [run vtysh to import ebgp.multihop config from /home/pipi/net101/tools/netsim/extra/ebgp.multihop/frr.j2] ***
changed: [pe2]

TASK [Find configuration template] *********************************************
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [pe2]

TASK [Check is the configuration template is a file] ***************************
ok: [pe2 -> localhost]

TASK [fail] ********************************************************************
skipping: [pe2]

TASK [Process template /home/pipi/net101/tools/netsim/extra/bgp.session/frr.j2 for pe2] ***
skipping: [pe2]

TASK [Find custom configuration deployment script] *****************************
ok: [pe2]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for pe2

TASK [template] ****************************************************************
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe2]

TASK [run /tmp/config.sh to deploy bgp.session config from /home/pipi/net101/tools/netsim/extra/bgp.session/frr.j2] ***
changed: [pe2]

TASK [run vtysh to import bgp.session config from /home/pipi/net101/tools/netsim/extra/bgp.session/frr.j2] ***
skipping: [pe2]

PLAY RECAP *********************************************************************
c1                         : ok=29   changed=5    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
dut                        : ok=50   changed=16   unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   
pe2                        : ok=51   changed=10   unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   



Use this topology to test the (global) EBGP multihop implementation

