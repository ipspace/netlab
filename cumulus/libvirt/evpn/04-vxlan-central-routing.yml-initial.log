[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Find device readiness script] ********************************************
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h2]
ok: [h1]
ok: [h3]
ok: [h4]

TASK [Wait for device to become ready] *****************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for l1, l2, spine, h1, h2, h3, h4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [l1]
ok: [spine]
ok: [l2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Find configuration template for normalize] *******************************
ok: [l1]
ok: [spine]
ok: [l2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Deploy normalize configuration] ******************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for l1, l2, spine, h1, h2, h3, h4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Find configuration template for initial] *********************************
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [l1]
ok: [spine]
ok: [l2]
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [l2] => 
  msg: |-
    initial configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1600
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
    ip link set eth3 down
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
    ip link set eth3 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname l2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.6/32
    !
    interface eth1
     no shutdown
     description l2 -> spine
     ip address 10.1.0.5/30
    !
    interface eth2
     no shutdown
     description [Access VLAN red] l2 -> h2
     ! no ip address
    !
    interface eth3
     no shutdown
     description [Access VLAN blue] l2 -> h4
     ! no ip address
    !
    interface vlan1000
     no shutdown
     description VLAN red (1000) -> [h1,l1,h2,spine] [external]
     ! no ip address
    !
    interface vlan1001
     no shutdown
     description VLAN blue (1001) -> [h3,l1,h4,spine] [external]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [l1] => 
  msg: |-
    initial configuration for l1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname l1
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.5 l1
    10.1.0.1 swp1.l1
    10.0.0.6 l2
    10.1.0.5 eth1.l2
    10.0.0.7 spine
    10.1.0.2 swp1.spine
    10.1.0.6 swp2.spine
    172.16.0.7 vlan1000.customer.spine
    172.16.1.7 vlan1001.customer.spine
    172.16.0.1 h1 eth1.h1
    172.16.0.2 h2 eth1.h2
    172.16.1.3 h3 eth1.h3
    172.16.1.4 h4 eth1.h4
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
  
    echo "INIT: Configuring system wide default MTU policy"
    cat > /etc/network/ifupdown2/policy.d/mtu.json <<CONFIG
    { "address": { "defaults": { "mtu": "1500" } } }
    CONFIG
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.5/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
  
    iface swp1 inet static
      mtu 1600
      address 10.1.0.1/30
    auto swp2
    auto swp3
    auto vlan1000
    auto vlan1001
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['vlan', 'bgp', 'ospf', 'vrf', 'vxlan', 'evpn']
    #
    #
    # Enable FRR daemons
    #
    echo "bgpd=yes" >>/etc/frr/daemons
    echo "ospfd=yes" >>/etc/frr/daemons
    echo "ospf6d=yes" >>/etc/frr/daemons
    echo "bgpd=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    !
    interface swp1
    ! no shutdown
     description l1 -> spine
    !
    interface swp2
    ! no shutdown
     description [Access VLAN red] l1 -> h1
    !
    interface swp3
    ! no shutdown
     description [Access VLAN blue] l1 -> h3
    !
    interface vlan1000
    ! no shutdown
     description VLAN red (1000) -> [h1,h2,l2,spine] [external]
    !
    interface vlan1001
    ! no shutdown
     description VLAN blue (1001) -> [h3,h4,l2,spine] [external]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [spine] => 
  msg: |-
    initial configuration for spine
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname spine
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.5 l1
    10.1.0.1 swp1.l1
    10.0.0.6 l2
    10.1.0.5 eth1.l2
    10.0.0.7 spine
    10.1.0.2 swp1.spine
    10.1.0.6 swp2.spine
    172.16.0.7 vlan1000.customer.spine
    172.16.1.7 vlan1001.customer.spine
    172.16.0.1 h1 eth1.h1
    172.16.0.2 h2 eth1.h2
    172.16.1.3 h3 eth1.h3
    172.16.1.4 h4 eth1.h4
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
  
    echo "INIT: Configuring system wide default MTU policy"
    cat > /etc/network/ifupdown2/policy.d/mtu.json <<CONFIG
    { "address": { "defaults": { "mtu": "1500" } } }
    CONFIG
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.7/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
  
    iface swp1 inet static
      mtu 1600
      address 10.1.0.2/30
    auto swp2
  
    iface swp2 inet static
      mtu 1600
      address 10.1.0.6/30
    auto vlan1000
  
    iface vlan1000 inet static
      address 172.16.0.7/24
    auto vlan1001
  
    iface vlan1001 inet static
      address 172.16.1.7/24
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['vlan', 'bgp', 'ospf', 'vrf', 'vxlan', 'evpn']
    #
    #
    # Enable FRR daemons
    #
    echo "bgpd=yes" >>/etc/frr/daemons
    echo "ospfd=yes" >>/etc/frr/daemons
    echo "ospf6d=yes" >>/etc/frr/daemons
    echo "bgpd=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    !
    interface swp1
    ! no shutdown
     description spine -> l1
    !
    interface swp2
    ! no shutdown
     description spine -> l2
    !
    interface vlan1000
    ! no shutdown
     description VLAN red (1000) -> [h1,l1,h2,l2] [external]
    !
    interface vlan1001
    ! no shutdown
     description VLAN blue (1001) -> [h3,l1,h4,l2] [external]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus.yml for l1, spine
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for l2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4

TASK [Render device configuration from /home/pipi/netlab_gh/netsim/ansible/templates/initial/cumulus.j2] ***
ok: [l1]
ok: [spine]

TASK [Create local temporary file] *********************************************
changed: [spine -> localhost]
changed: [l1 -> localhost]

TASK [Create initial config script in local temporary file] ********************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [spine]
changed: [l1]

TASK [Remove temporary file /tmp/ansible.l1.dq0d03kitemp] **********************
changed: [spine -> localhost]
changed: [l1 -> localhost]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [l2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [l2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for l2

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [l2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [l2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h4 -> localhost]
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-26sjzha2.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, l1, l2, spine => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, l1, l2, spine => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, l1, l2, spine => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, l1, l2, spine => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, l1, l2, spine => (item=vrf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, l1, l2, spine => (item=vxlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, l1, l2, spine => (item=evpn)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [l1]
ok: [h4]
ok: [l2]
ok: [spine]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1] => 
  msg: |-
    vlan configuration for l1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    # Create multi-vlan bridge, specify VLANs, and attach interfaces to it
    #
    cat >/etc/network/interfaces.d/50-bridge.intf <<CONFIG
    auto bridge
    iface bridge
        bridge-vlan-aware yes
        bridge-vids 1000,1001
        bridge-ports swp2
        bridge-ports swp3
    CONFIG
    #
    # Create VLAN interfaces
    #
    cat >/etc/network/interfaces.d/51-bridge-interfaces.intf <<CONFIG
  
    iface swp2
        bridge-access 1000
  
    iface swp3
        bridge-access 1001
  
    auto vlan1000
  
    iface vlan1000
        vlan-id 1000
        vlan-raw-device bridge
  
    auto vlan1001
  
    iface vlan1001
        vlan-id 1001
        vlan-raw-device bridge
    CONFIG
    ifreload -a
ok: [l2] => 
  msg: |-
    vlan configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
      ip link add vlan1000 type bridge
      ip link set dev vlan1000 address 52:dc:ca:fd:06:00
  
      ip addr flush dev vlan1000
    fi
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
      ip link add vlan1001 type bridge
      ip link set dev vlan1001 address 52:dc:ca:fd:06:01
  
      ip addr flush dev vlan1001
    fi
  
    ip link set dev eth2 master vlan1000
    ip link set dev eth3 master vlan1001
  
    ip link set dev vlan1000 up
    ip link set dev vlan1001 up
ok: [spine] => 
  msg: |-
    vlan configuration for spine
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    # Create multi-vlan bridge, specify VLANs, and attach interfaces to it
    #
    cat >/etc/network/interfaces.d/50-bridge.intf <<CONFIG
    auto bridge
    iface bridge
        bridge-vlan-aware yes
        bridge-vids 1000,1001
    CONFIG
    #
    # Create VLAN interfaces
    #
    cat >/etc/network/interfaces.d/51-bridge-interfaces.intf <<CONFIG
  
    auto vlan1000
  
    iface vlan1000
        vlan-id 1000
        vlan-raw-device bridge
  
    auto vlan1001
  
    iface vlan1001
        vlan-id 1001
        vlan-raw-device bridge
    CONFIG
    ifreload -a

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus.yml for l1, spine
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [Render device configuration from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/cumulus.j2] ***
ok: [l1]
ok: [spine]

TASK [Create local temporary file] *********************************************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [Create vlan config script in local temporary file] ***********************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [spine]
changed: [l1]

TASK [Remove temporary file /tmp/ansible.l1.lobh7j61temp] **********************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
changed: [l2]

TASK [run vtysh to import vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [l2]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [l1]
ok: [h4]
ok: [l2]
ok: [spine]

TASK [Find configuration template for routing] *********************************
ok: [h1]
ok: [h2]
skipping: [l1]
ok: [h3]
skipping: [l2]
skipping: [spine]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [l1]
ok: [h1]
skipping: [l2]
ok: [h2]
ok: [h3]
skipping: [spine]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [l1]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
skipping: [l2]
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
skipping: [spine]
ok: [h4] => 
  msg: |-
    routing configuration for h4
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-e2zaf5a4.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Find configuration template for bgp] *************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1] => 
  msg: |-
    bgp configuration for l1
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.5
    !
      neighbor 10.0.0.7 remote-as 65000
      neighbor 10.0.0.7 description spine
      neighbor 10.0.0.7 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.5/32
    !
    !
    !
      neighbor 10.0.0.7 activate
      neighbor 10.0.0.7 next-hop-self
      no neighbor 10.0.0.7 send-community all
      neighbor 10.0.0.7 send-community standard
      neighbor 10.0.0.7 send-community large
      neighbor 10.0.0.7 send-community extended
    !
    !
    !
    do write
ok: [l2] => 
  msg: |-
    bgp configuration for l2
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.6
    !
      neighbor 10.0.0.7 remote-as 65000
      neighbor 10.0.0.7 description spine
      neighbor 10.0.0.7 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.6/32
    !
    !
    !
      neighbor 10.0.0.7 activate
      neighbor 10.0.0.7 next-hop-self
      no neighbor 10.0.0.7 send-community all
      neighbor 10.0.0.7 send-community standard
      neighbor 10.0.0.7 send-community large
      neighbor 10.0.0.7 send-community extended
    !
    !
    !
    do write
ok: [spine] => 
  msg: |-
    bgp configuration for spine
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.7
      bgp cluster-id 10.0.0.7
    !
      neighbor 10.0.0.5 remote-as 65000
      neighbor 10.0.0.5 description l1
      neighbor 10.0.0.5 update-source lo
    !
      neighbor 10.0.0.6 remote-as 65000
      neighbor 10.0.0.6 description l2
      neighbor 10.0.0.6 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.7/32
    !
    !
    !
      neighbor 10.0.0.5 activate
      neighbor 10.0.0.5 next-hop-self
      neighbor 10.0.0.5 route-reflector-client
      no neighbor 10.0.0.5 send-community all
      neighbor 10.0.0.5 send-community standard
      neighbor 10.0.0.5 send-community large
      neighbor 10.0.0.5 send-community extended
    !
      neighbor 10.0.0.6 activate
      neighbor 10.0.0.6 next-hop-self
      neighbor 10.0.0.6 route-reflector-client
      no neighbor 10.0.0.6 send-community all
      neighbor 10.0.0.6 send-community standard
      neighbor 10.0.0.6 send-community large
      neighbor 10.0.0.6 send-community extended
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus.yml for l1, spine
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [Render device configuration from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/cumulus.j2] ***
ok: [l1]
ok: [spine]

TASK [Create local temporary file] *********************************************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [Create bgp config script in local temporary file] ************************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [l1]
changed: [spine]

TASK [Remove temporary file /tmp/ansible.l1.bsxpisqwtemp] **********************
changed: [spine -> localhost]
changed: [l1 -> localhost]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [l2]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [l2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [l1]
ok: [h4]
ok: [l2]
ok: [spine]

TASK [Find configuration template for ospf] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1] => 
  msg: |-
    ospf configuration for l1
    =========================================
    !
    router ospf
     ospf router-id 10.0.0.5
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    !
    interface lo
     ip ospf area 0.0.0.0
    !
    interface swp1
    ! l1 -> spine
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    do write
ok: [spine] => 
  msg: |-
    ospf configuration for spine
    =========================================
    !
    router ospf
     ospf router-id 10.0.0.7
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    !
    interface lo
     ip ospf area 0.0.0.0
    !
    interface swp1
    ! spine -> l1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface swp2
    ! spine -> l2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    do write
ok: [l2] => 
  msg: |-
    ospf configuration for l2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.6
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! l2 -> spine
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus.yml for l1, spine
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [Render device configuration from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/cumulus.j2] ***
ok: [l1]
ok: [spine]

TASK [Create local temporary file] *********************************************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [Create ospf config script in local temporary file] ***********************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [l1]
changed: [spine]

TASK [Remove temporary file /tmp/ansible.l1.vk_u_kumtemp] **********************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [l2]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [l2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [l1]
ok: [h4]
ok: [l2]
ok: [spine]

TASK [Find configuration template for vrf] *************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1] => 
  msg: |-
    vrf configuration for l1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    cat >/etc/network/interfaces.d/70-vrf.intf <<CONFIG
    auto customer
    iface customer
        vrf-table 1010
    #
    auto vlan1000
    iface vlan1000
        vrf customer
    #
    auto vlan1001
    iface vlan1001
        vrf customer
    #
    CONFIG
    ifreload -a
    #
    cat >/tmp/vrf_config <<CONFIG
    vrf customer
     exit-vrf
    !
    router bgp 65000
    !
    !
    router bgp 65000 vrf customer
     no bgp ebgp-requires-policy
     no bgp default ipv4-unicast
     bgp router-id 10.0.0.5
    !
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?
ok: [l2] => 
  msg: |-
    vrf configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
    # Create VRF tables
    if [ ! -e /sys/devices/virtual/net/customer ]; then
    ip link add customer type vrf table 100
    fi
    ip link set customer up
  
    # Move interfaces and loopbacks to vrfs
    sysctl -qw net.ipv6.conf.vlan1000.keep_addr_on_down=1
    ip link set vlan1000 master customer
    sysctl -qw net.ipv6.conf.vlan1001.keep_addr_on_down=1
    ip link set vlan1001 master customer
  
    cat >/tmp/vrf_config <<CONFIG
    vrf customer
     exit-vrf
    !
    router bgp 65000
    !
    !
    router bgp 65000 vrf customer
     no bgp ebgp-requires-policy
     no bgp default ipv4-unicast
     bgp router-id 10.0.0.6
    !
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?
ok: [spine] => 
  msg: |-
    vrf configuration for spine
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    cat >/etc/network/interfaces.d/70-vrf.intf <<CONFIG
    auto customer
    iface customer
        vrf-table 1010
    #
    auto vlan1000
    iface vlan1000
        vrf customer
    #
    auto vlan1001
    iface vlan1001
        vrf customer
    #
    CONFIG
    ifreload -a
    #
    cat >/tmp/vrf_config <<CONFIG
    vrf customer
     exit-vrf
    !
    router bgp 65000
    !
    !
    router bgp 65000 vrf customer
     no bgp ebgp-requires-policy
     no bgp default ipv4-unicast
     bgp router-id 10.0.0.7
     address-family ipv4 unicast
      redistribute connected
  
      label vpn export auto
      export vpn
      import vpn
      rd vpn export 65000:1
      rt vpn import 65000:1
      rt vpn export 65000:1
     exit-address-family
    !
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?

TASK [Deploy vrf configuration] ************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus.yml for l1, spine
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [Render device configuration from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/cumulus.j2] ***
ok: [l1]
ok: [spine]

TASK [Create local temporary file] *********************************************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [Create vrf config script in local temporary file] ************************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [spine]
changed: [l1]

TASK [Remove temporary file /tmp/ansible.l1.cv9asaw0temp] **********************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
changed: [l2]

TASK [run vtysh to import vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
skipping: [l2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [l1]
ok: [h4]
ok: [l2]
ok: [spine]

TASK [Find configuration template for vxlan] ***********************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for vxlan] *******************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1] => 
  msg: |-
    vxlan configuration for l1
    =========================================
    #!/bin/bash
    #
    # Exit immediately when any command fails
    set -e
    ##
    # Create VXLAN interfaces with static flood lists
    #
    cat >/etc/network/interfaces.d/60-vxlan.intf <<CONFIG
    iface lo inet loopback
        vxlan-local-tunnelip 10.0.0.5
    #
    #
    auto vni-1000
    iface vni-1000
        bridge-access 1000
        vxlan-id 1000
        vxlan-learning no
        mstpctl-bpduguard yes
        mstpctl-portbpdufilter yes
  
    #
    auto vni-1001
    iface vni-1001
        bridge-access 1001
        vxlan-id 1001
        vxlan-learning no
        mstpctl-bpduguard yes
        mstpctl-portbpdufilter yes
  
    #
    iface bridge
        bridge-ports vni-1000
        bridge-ports vni-1001
    CONFIG
    ifreload -a
ok: [spine] => 
  msg: |-
    vxlan configuration for spine
    =========================================
    #!/bin/bash
    #
    # Exit immediately when any command fails
    set -e
    ##
    # Create VXLAN interfaces with static flood lists
    #
    cat >/etc/network/interfaces.d/60-vxlan.intf <<CONFIG
    iface lo inet loopback
        vxlan-local-tunnelip 10.0.0.7
    #
    #
    auto vni-1000
    iface vni-1000
        bridge-access 1000
        vxlan-id 1000
        vxlan-learning no
        mstpctl-bpduguard yes
        mstpctl-portbpdufilter yes
  
    #
    auto vni-1001
    iface vni-1001
        bridge-access 1001
        vxlan-id 1001
        vxlan-learning no
        mstpctl-bpduguard yes
        mstpctl-portbpdufilter yes
  
    #
    iface bridge
        bridge-ports vni-1000
        bridge-ports vni-1001
    CONFIG
    ifreload -a
ok: [l2] => 
  msg: |-
    vxlan configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
  
  
    # Create L3 VNIs with bridges and add to correct vrf table
  
    # Create VXLAN L2 interface per vni
    ip link add vxlan1000 type vxlan \
      id 1000 \
      dstport 4789 \
      local 10.0.0.6 nolearning
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
    ip link add vlan1000 type bridge
    ip link set up dev vlan1000
    fi
    ip link set dev vxlan1000 master vlan1000
    ip link set vlan1000 type bridge stp_state 0
  
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan1000
    # Disable dynamic MAC learning for evpn, see https://docs.frrouting.org/en/latest/evpn.html
    bridge link set dev vxlan1000 learning off
    ip link set up dev vxlan1000
  
    # Create VXLAN L2 interface per vni
    ip link add vxlan1001 type vxlan \
      id 1001 \
      dstport 4789 \
      local 10.0.0.6 nolearning
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
    ip link add vlan1001 type bridge
    ip link set up dev vlan1001
    fi
    ip link set dev vxlan1001 master vlan1001
    ip link set vlan1001 type bridge stp_state 0
  
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan1001
    # Disable dynamic MAC learning for evpn, see https://docs.frrouting.org/en/latest/evpn.html
    bridge link set dev vxlan1001 learning off
    ip link set up dev vxlan1001
  
  
    exit $?

TASK [Deploy vxlan configuration] **********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus.yml for l1, spine
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [Render device configuration from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/cumulus.j2] ***
ok: [l1]
ok: [spine]

TASK [Create local temporary file] *********************************************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [Create vxlan config script in local temporary file] **********************
changed: [spine -> localhost]
changed: [l1 -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [l1]
changed: [spine]

TASK [Remove temporary file /tmp/ansible.l1.8pn2uv_0temp] **********************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/frr.j2] ***
changed: [l2]

TASK [run vtysh to import vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/frr.j2] ***
skipping: [l2]

TASK [Figure out whether to deploy the module evpn on current device] **********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [l1]
ok: [h4]
ok: [l2]
ok: [spine]

TASK [Find configuration template for evpn] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for evpn] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [l1] => 
  msg: |-
    evpn configuration for l1
    =========================================
    #!/bin/bash
    #
    # Exit immediately when any command fails
    set -e
    #
    cat >/etc/network/interfaces.d/65-evpn-vxlan.intf <<CONFIG
    #
    CONFIG
    ifreload -a
    #
    cat >/tmp/evpn_config <<CONFIG
    router bgp 65000
     address-family l2vpn evpn
      advertise-all-vni
      advertise-svi-ip
      advertise ipv4 unicast
  
    ! Configure explicit Route Targets and RD per L2 VNI; auto-derived differs
      vni 1001
       rd 10.0.0.5:1001
       route-target import 65000:1001
       route-target export 65000:1001
      exit-vni
      vni 1000
       rd 10.0.0.5:1000
       route-target import 65000:1000
       route-target export 65000:1000
      exit-vni
  
      neighbor 10.0.0.7 activate
    #  neighbor 10.0.0.7 soft-reconfiguration inbound
  
     exit-address-family
    !
  
    exit
  
    ! L3 VRF EVPN handling
    !
    do write
    CONFIG
    vtysh -f /tmp/evpn_config
    exit $?
ok: [l2] => 
  msg: |-
    evpn configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e
    cat >/tmp/evpn_config <<CONFIG
    router bgp 65000
     address-family l2vpn evpn
      advertise-all-vni
      advertise-svi-ip
      advertise ipv4 unicast
  
    ! Configure explicit Route Targets and RD per L2 VNI; auto-derived differs
      vni 1001
       rd 10.0.0.6:1001
       route-target import 65000:1001
       route-target export 65000:1001
      exit-vni
      vni 1000
       rd 10.0.0.6:1000
       route-target import 65000:1000
       route-target export 65000:1000
      exit-vni
  
      neighbor 10.0.0.7 activate
    #  neighbor 10.0.0.7 soft-reconfiguration inbound
  
     exit-address-family
    !
  
    exit
  
    ! L3 VRF EVPN handling
    !
    do write
    CONFIG
    vtysh -f /tmp/evpn_config
    vtysh -c 'clear bgp *'
ok: [spine] => 
  msg: |-
    evpn configuration for spine
    =========================================
    #!/bin/bash
    #
    # Exit immediately when any command fails
    set -e
    #
    cat >/etc/network/interfaces.d/65-evpn-vxlan.intf <<CONFIG
    #
    CONFIG
    ifreload -a
    #
    cat >/tmp/evpn_config <<CONFIG
    router bgp 65000
     address-family l2vpn evpn
      advertise-all-vni
      advertise-svi-ip
      advertise ipv4 unicast
  
    ! Configure explicit Route Targets and RD per L2 VNI; auto-derived differs
      vni 1001
       rd 10.0.0.7:1001
       route-target import 65000:1001
       route-target export 65000:1001
      exit-vni
      vni 1000
       rd 10.0.0.7:1000
       route-target import 65000:1000
       route-target export 65000:1000
      exit-vni
  
      neighbor 10.0.0.5 activate
    #  neighbor 10.0.0.5 soft-reconfiguration inbound
      neighbor 10.0.0.5 route-reflector-client
      neighbor 10.0.0.6 activate
    #  neighbor 10.0.0.6 soft-reconfiguration inbound
      neighbor 10.0.0.6 route-reflector-client
  
     exit-address-family
    !
  
    exit
  
    ! L3 VRF EVPN handling
    !
    do write
    CONFIG
    vtysh -f /tmp/evpn_config
    exit $?

TASK [Deploy evpn configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus.yml for l1, spine
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [Render device configuration from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/cumulus.j2] ***
ok: [l1]
ok: [spine]

TASK [Create local temporary file] *********************************************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [Create evpn config script in local temporary file] ***********************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [l1]
changed: [spine]

TASK [Remove temporary file /tmp/ansible.l1.i5mcxkrctemp] **********************
changed: [l1 -> localhost]
changed: [spine -> localhost]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy evpn config from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/frr.j2] ***
changed: [l2]

TASK [run vtysh to import evpn config from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/frr.j2] ***
skipping: [l2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=41   changed=8    unreachable=0    failed=0    skipped=40   rescued=0    ignored=0   
h2                         : ok=41   changed=8    unreachable=0    failed=0    skipped=40   rescued=0    ignored=0   
h3                         : ok=41   changed=8    unreachable=0    failed=0    skipped=40   rescued=0    ignored=0   
h4                         : ok=41   changed=8    unreachable=0    failed=0    skipped=40   rescued=0    ignored=0   
l1                         : ok=86   changed=28   unreachable=0    failed=0    skipped=16   rescued=0    ignored=0   
l2                         : ok=74   changed=15   unreachable=0    failed=0    skipped=24   rescued=0    ignored=0   
spine                      : ok=86   changed=28   unreachable=0    failed=0    skipped=16   rescued=0    ignored=0   



The devices under test are a layer-2 leaf and a spine performing centralized
routing.

All hosts should be able to ping each other and all switch loopback IPs

Please note it might take a while for the lab to work due to STP learning
phase.

