[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut_c]
ok: [xf]
ok: [dut_a]
ok: [probe]

TASK [Find device readiness script] ********************************************
ok: [dut_c]
ok: [xf]
ok: [dut_a]
ok: [probe]

TASK [Wait for device to become ready] *****************************************
skipping: [dut_c]
skipping: [xf]
skipping: [dut_a]
skipping: [probe]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut_c, xf, dut_a, probe

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut_c]
ok: [xf]
ok: [dut_a]
ok: [probe]

TASK [Find configuration template for initial] *********************************
ok: [dut_c]
ok: [xf]
ok: [dut_a]
ok: [probe]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [xf] => 
  msg: |-
    initial configuration for xf
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname xf
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:4::1/64
    !
    interface eth1
     no shutdown
     description xf -> dut_c [external]
     ! no ip address
     ipv6 address 2001:db8:2:2::4/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [probe] => 
  msg: |-
    initial configuration for probe
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set eth2 down
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    ip link set eth2 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname probe
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description probe -> dut_a
     ! no ip address
     ipv6 address 2001:db8:2::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description probe -> dut_c
     ! no ip address
     ipv6 address 2001:db8:2:1::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut_c] => 
  msg: |-
    initial configuration for dut_c
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname dut-c
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    2001:db8:1:2::1 dut_c
    2001:db8:2:1::2 swp1.dut_c
    2001:db8:2:2::2 swp2.dut_c
    2001:db8:1:4::1 xf
    2001:db8:2:2::4 eth1.xf
    2001:db8:1:1::1 dut_a
    2001:db8:2::1 swp1.dut_a
    2001:db8:1:3::1 probe
    2001:db8:2::3 eth1.probe
    2001:db8:2:1::3 eth2.probe
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet6 loopback
      address 2001:db8:1:2::1/64
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
  
    iface swp1 inet6 static
      mtu 1500
      address 2001:db8:2:1::2/64
    auto swp2
  
    iface swp2 inet6 static
      mtu 1500
      address 2001:db8:2:2::2/64
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    sysctl -qw net.ipv6.conf.swp1.disable_ipv6=0
    sysctl -qw net.ipv6.conf.swp2.disable_ipv6=0
    #
    # Enable FRR modules for ['ospf', 'bgp']
    #
    #
    # Enable FRR daemons
    #
    echo "ospfd=yes" >>/etc/frr/daemons
    echo "ospf6d=yes" >>/etc/frr/daemons
    echo "bgpd=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description dut_c -> probe
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface swp2
    ! no shutdown
     description dut_c -> xf [external]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [dut_a] => 
  msg: |-
    initial configuration for dut_a
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname dut-a
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    2001:db8:1:2::1 dut_c
    2001:db8:2:1::2 swp1.dut_c
    2001:db8:2:2::2 swp2.dut_c
    2001:db8:1:4::1 xf
    2001:db8:2:2::4 eth1.xf
    2001:db8:1:1::1 dut_a
    2001:db8:2::1 swp1.dut_a
    2001:db8:1:3::1 probe
    2001:db8:2::3 eth1.probe
    2001:db8:2:1::3 eth2.probe
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet6 loopback
      address 2001:db8:1:1::1/64
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
  
    iface swp1 inet6 static
      mtu 1500
      address 2001:db8:2::1/64
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    sysctl -qw net.ipv6.conf.swp1.disable_ipv6=0
    #
    # Enable FRR modules for ['ospf']
    #
    #
    # Enable FRR daemons
    #
    echo "ospfd=yes" >>/etc/frr/daemons
    echo "ospf6d=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description dut_a -> probe
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut_c]
ok: [xf]
ok: [dut_a]
ok: [probe]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut_c, dut_a
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for xf, probe

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [dut_c]
changed: [dut_a]

TASK [set_fact deployed_config] ************************************************
ok: [dut_c]
ok: [dut_a]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
changed: [dut_c]
changed: [dut_a]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
skipping: [dut_c]
skipping: [dut_a]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [probe -> localhost]
changed: [xf -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [xf]
skipping: [probe]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for xf, probe

TASK [template] ****************************************************************
changed: [probe]
changed: [xf]

TASK [set_fact] ****************************************************************
ok: [xf]
ok: [probe]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [probe]
changed: [xf]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [xf]
skipping: [probe]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut_a]
ok: [dut_c]
ok: [probe]
ok: [xf]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut_a, dut_c, probe, xf => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut_a, dut_c, probe, xf => (item=ospf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut_a]
ok: [dut_c]
ok: [probe]
ok: [xf]

TASK [Find configuration template for bgp] *************************************
skipping: [dut_a]
skipping: [probe]
ok: [dut_c]
ok: [xf]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut_a]
skipping: [probe]
ok: [dut_c] => 
  msg: |-
    bgp configuration for dut_c
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor 2001:db8:2:2::4 remote-as 65100
      neighbor 2001:db8:2:2::4 description xf
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:2::/64
    !
    !
    !
      neighbor 2001:db8:2:2::4 activate
      no neighbor 2001:db8:2:2::4 send-community all
      neighbor 2001:db8:2:2::4 send-community standard
      neighbor 2001:db8:2:2::4 send-community large
    !
    !
    !
    do write
ok: [xf] => 
  msg: |-
    bgp configuration for xf
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 2001:db8:2:2::2 remote-as 65000
      neighbor 2001:db8:2:2::2 description dut_c
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:4::/64
    !
    !
    !
      neighbor 2001:db8:2:2::2 activate
      no neighbor 2001:db8:2:2::2 send-community all
      neighbor 2001:db8:2:2::2 send-community standard
      neighbor 2001:db8:2:2::2 send-community large
    !
    !
    !
    do write

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [dut_a]
skipping: [probe]
ok: [dut_c]
ok: [xf]

TASK [Deploy bgp configuration] ************************************************
skipping: [dut_a]
skipping: [probe]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut_c
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for xf

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [dut_c]

TASK [set_fact deployed_config] ************************************************
ok: [dut_c]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/cumulus.j2] ***
skipping: [dut_c]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/cumulus.j2] ***
changed: [dut_c]

TASK [template] ****************************************************************
changed: [xf]

TASK [set_fact] ****************************************************************
ok: [xf]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [xf]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [xf]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [dut_a]
ok: [dut_c]
ok: [probe]
ok: [xf]

TASK [Find configuration template for ospf] ************************************
skipping: [xf]
ok: [dut_a]
ok: [dut_c]
ok: [probe]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [xf]
ok: [dut_a] => 
  msg: |-
    ospf configuration for dut_a
    =========================================
    !
    router ospf6
     ospf6 router-id 10.0.0.1
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
     default-information originate always metric-type 2 metric 40
  
     interface lo area 0.0.0.0
     interface swp1 area 0.0.0.0
    !
    interface swp1
    ! dut_a -> probe
     ipv6 ospf6 network point-to-point
    !
  
    do write
ok: [dut_c] => 
  msg: |-
    ospf configuration for dut_c
    =========================================
    !
    router ospf6
     ospf6 router-id 10.0.0.2
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
     default-information originate metric-type 1 metric 20
  
     interface lo area 0.0.0.0
     interface swp1 area 0.0.0.0
    !
    interface swp1
    ! dut_c -> probe
     ipv6 ospf6 network point-to-point
     ipv6 ospf6 cost 10
    !
  
    do write
ok: [probe] => 
  msg: |-
    ospf configuration for probe
    =========================================
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! probe -> dut_a
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    interface eth2
    ! probe -> dut_c
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
     ipv6 ospf6 cost 10
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.3
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [xf]
ok: [dut_a]
ok: [dut_c]
ok: [probe]

TASK [Deploy ospf configuration] ***********************************************
skipping: [xf]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut_a, dut_c
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for probe

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [dut_a]
changed: [dut_c]

TASK [set_fact deployed_config] ************************************************
ok: [dut_a]
ok: [dut_c]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/cumulus.j2] ***
skipping: [dut_a]
skipping: [dut_c]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/cumulus.j2] ***
changed: [dut_a]
changed: [dut_c]

TASK [template] ****************************************************************
changed: [probe]

TASK [set_fact] ****************************************************************
ok: [probe]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [probe]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [probe]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut_a                      : ok=23   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
dut_c                      : ok=30   changed=6    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
probe                      : ok=25   changed=5    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
xf                         : ok=25   changed=5    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   



This lab tests the OSPF default route origination. The devices under test
should originate the default route, one always, the other one based one
BGP default route.

