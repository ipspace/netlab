[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [h2]
ok: [h1]
ok: [r2]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [r2]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for r2

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [r2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r2, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [h1]
ok: [h2]
ok: [r2]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [r2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r2]
skipping: [h1]
skipping: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.33.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.33.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:33::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:33::3/64 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.44.0/24 2>/dev/null; do
      : ; done
    #
    set +e
    echo Removing existing IPv6 routes
    while ip route del 2001:db8:cafe:44::/64 2>/dev/null; do
      : ; done
    #
    echo Adding direct static routes
    ip route add 172.16.44.0/24 via 172.16.33.42 dev eth1 protocol static
    ip route add 2001:db8:cafe:44::/64 via 2001:db8:cafe:33::2a dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.44.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.44.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:44::4/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:44::4/64 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.33.0/24 2>/dev/null; do
      : ; done
    #
    set +e
    echo Removing existing IPv6 routes
    while ip route del 2001:db8:cafe:33::/64 2>/dev/null; do
      : ; done
    #
    echo Adding direct static routes
    ip route add 172.16.33.0/24 via 172.16.44.1 dev eth1 protocol static
    ip route add 2001:db8:cafe:33::/64 via 2001:db8:cafe:44::1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname dut
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 dut
    172.16.33.1 swp1.dut
    2001:db8:cafe:33::1 swp1.dut
    172.16.44.1 swp2.dut
    2001:db8:cafe:44::1 swp2.dut
    10.0.0.2 r2
    172.16.33.2 Ethernet1.r2
    2001:db8:cafe:33::2 Ethernet1.r2
    172.16.44.2 Ethernet2.r2
    2001:db8:cafe:44::2 Ethernet2.r2
    172.16.33.3 h1 eth1.h1
    2001:db8:cafe:33::3 h1 eth1.h1
    172.16.44.4 h2 eth1.h2
    2001:db8:cafe:44::4 h2 eth1.h2
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.1/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
  
    iface swp1 inet static
      mtu 1500
      address 172.16.33.1/24
  
    iface swp1 inet6 static
      mtu 1500
      address 2001:db8:cafe:33::1/64
    auto swp2
  
    iface swp2 inet static
      mtu 1500
      address 172.16.44.1/24
  
    iface swp2 inet6 static
      mtu 1500
      address 2001:db8:cafe:44::1/64
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    sysctl -qw net.ipv6.conf.swp1.disable_ipv6=0
    sysctl -qw net.ipv6.conf.swp2.disable_ipv6=0
    #
    # Enable FRR modules for ['gateway']
    #
    #
    # Enable FRR daemons
    #
    echo "vrrpd=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description dut -> [h1,r2]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface swp2
    ! no shutdown
     description dut -> [r2,h2]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    hostname r2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    ipv6 unicast-routing
    !
    !
    ip host dut 10.0.0.1 172.16.33.1 172.16.44.1
    ip host h1 172.16.33.3
    ip host h2 172.16.44.4
    ipv6 host dut 2001:db8:cafe:33::1
    ipv6 host h1 2001:db8:cafe:33::3
    ipv6 host h2 2001:db8:cafe:44::4
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     no shutdown
     ip address 10.0.0.2/32
    !
    interface Ethernet1
     no shutdown
     no switchport
     description r2 -> [h1,dut]
     ip address 172.16.33.2/24
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:cafe:33::2/64
    !
     mac-address 52dc.cafe.0201
    !
    interface Ethernet2
     no shutdown
     no switchport
     description r2 -> [dut,h2]
     ip address 172.16.44.2/24
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:cafe:44::2/64
    !
     mac-address 52dc.cafe.0202
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [r2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for r2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create initial config script in local temporary file] ********************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.3jk50uhttemp] *********************
changed: [dut -> localhost]

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [r2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-d5eyg67a.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [r2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, r2 => (item=gateway)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, r2 => (item=routing)

TASK [Figure out whether to deploy the module gateway on current device] *******
ok: [dut]
ok: [h1]
ok: [h2]
ok: [r2]

TASK [Find configuration template for gateway] *********************************
skipping: [h1]
skipping: [h2]
ok: [dut]
ok: [r2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [r2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [dut] => 
  msg: |-
    gateway configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    cat >/etc/network/interfaces.d/80-gateway.intf <<CONFIG
    auto swp1
    iface swp1
  
        vrrp 217 fe80::200:5eff:fe00:2d9/64 172.16.33.42/24 2001:db8:cafe:33::2a/64
    CONFIG
    ifreload -a
    cat >/tmp/vrrp_config <<CONFIG
    interface swp1
      vrrp 217 ipv6 fe80::200:5eff:fe00:2d9
      vrrp 217 ip 172.16.33.42
      vrrp 217 ipv6 2001:db8:cafe:33::2a
      vrrp 217 priority 30
      vrrp 217 preempt
    do write
    CONFIG
    if [ -s /tmp/vrrp_config ]; then
      vtysh -f /tmp/vrrp_config
    fi
ok: [r2] => 
  msg: |-
    gateway configuration for r2
    =========================================
    no ip icmp redirect
    !
    interface Ethernet1
      vrrp 217 ipv4 version 3
      vrrp 217 ipv4 checksum pseudo-header exclude
      vrrp 217 ipv4 172.16.33.42
      vrrp 217 ipv6 2001:db8:cafe:33::2a
      vrrp 217 priority-level 20
      vrrp 217 preempt

TASK [Find configuration deployment deploy_script for gateway] *****************
skipping: [h1]
skipping: [h2]
ok: [dut]
ok: [r2]

TASK [Deploy gateway configuration] ********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for r2

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/gateway/cumulus.j2] ***
ok: [dut]

TASK [Create local temporary file] *********************************************
changed: [dut -> localhost]

TASK [Create gateway config script in local temporary file] ********************
changed: [dut -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [dut]

TASK [Remove temporary file /tmp/ansible.dut.6dlp9xertemp] *********************
changed: [dut -> localhost]

TASK [eos_config: deploying gateway from /home/pipi/net101/tools/netsim/ansible/templates/gateway/eos.j2] ***
changed: [r2]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [dut]
ok: [h1]
ok: [h2]
ok: [r2]

TASK [Find configuration template for routing] *********************************
skipping: [dut]
skipping: [r2]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [r2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [r2]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    echo "Static routes are configured as part of the initial configuration template"
    echo
    #
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    echo "Static routes are configured as part of the initial configuration template"
    echo
    #
    ip route

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [dut]
skipping: [r2]
ok: [h1]
ok: [h2]

TASK [Deploy routing configuration] ********************************************
skipping: [dut]
skipping: [r2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/routing/linux.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux.j2] ***
changed: [h1]
changed: [h2]

TASK [Container configuration for routing based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux.j2 executed in netns] ***
skipping: [h1]
skipping: [h2]

TASK [Remove temporary file /tmp/h1_routing-3a43gokb.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=27   changed=8    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h1                         : ok=28   changed=9    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
h2                         : ok=28   changed=9    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
r2                         : ok=21   changed=2    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   



This lab tests IPv4 VRRP configuration. It checks whether the
device-under-test (DUT) forwards traffic sent to the VRRP IP/MAC address,
whether it has correct VRRP priority, and whether the preemption mechanism
works.

