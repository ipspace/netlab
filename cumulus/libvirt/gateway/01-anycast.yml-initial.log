[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [d2]
ok: [d1]
ok: [r1]
ok: [r2]
ok: [h2]
ok: [h1]
ok: [h3]

TASK [Find device readiness script] ********************************************
ok: [d1]
ok: [d2]
ok: [r1]
ok: [r2]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Wait for device to become ready] *****************************************
skipping: [d1]
skipping: [d2]
skipping: [r1]
skipping: [r2]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for d1, d2, r1, r2, h1, h2, h3

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [d1]
ok: [d2]
ok: [r1]
ok: [r2]
ok: [h1]
ok: [h3]
ok: [h2]

TASK [Find configuration template for initial] *********************************
ok: [d1]
ok: [d2]
ok: [r1]
ok: [r2]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    ip link set eth2 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r1
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description r1 -> d1
     ip address 172.16.33.3/24
     ipv6 address 2001:db8:cafe:33::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description r1 -> [r2,h3]
     ip address 172.16.1.3/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [d1] => 
  msg: |-
    initial configuration for d1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname d1
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 d1
    172.16.33.1 swp1.d1
    2001:db8:cafe:33::1 swp1.d1
    172.16.0.1 vlan1000.d1
    10.0.0.2 d2
    172.16.44.2 swp1.d2
    2001:db8:cafe:44::2 swp1.d2
    172.16.0.2 vlan1000.d2
    10.0.0.3 r1
    172.16.33.3 eth1.r1
    2001:db8:cafe:33::3 eth1.r1
    172.16.1.3 eth2.r1
    10.0.0.4 r2
    172.16.44.4 eth1.r2
    2001:db8:cafe:44::4 eth1.r2
    172.16.1.4 eth2.r2
    172.16.0.5 h1 eth1.h1
    172.16.0.6 h2 eth1.h2
    172.16.1.7 h3 eth1.h3
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.1/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
  
    iface swp1 inet static
      mtu 1500
      address 172.16.33.1/24
  
    iface swp1 inet6 static
      mtu 1500
      address 2001:db8:cafe:33::1/64
    auto swp2
    auto swp3
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    sysctl -qw net.ipv6.conf.swp1.disable_ipv6=0
    #
    # Enable FRR modules for ['vlan', 'ospf', 'gateway']
    #
    #
    # Enable FRR daemons
    #
    echo "ospfd=yes" >>/etc/frr/daemons
    echo "ospf6d=yes" >>/etc/frr/daemons
    echo "vrrpd=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description d1 -> r1
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface swp2
    ! no shutdown
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface swp3
    ! no shutdown
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface vlan1000
    ! no shutdown
     description VLAN edge (1000) -> [h1,d2,h2]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [d2] => 
  msg: |-
    initial configuration for d2
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname d2
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 d1
    172.16.33.1 swp1.d1
    2001:db8:cafe:33::1 swp1.d1
    172.16.0.1 vlan1000.d1
    10.0.0.2 d2
    172.16.44.2 swp1.d2
    2001:db8:cafe:44::2 swp1.d2
    172.16.0.2 vlan1000.d2
    10.0.0.3 r1
    172.16.33.3 eth1.r1
    2001:db8:cafe:33::3 eth1.r1
    172.16.1.3 eth2.r1
    10.0.0.4 r2
    172.16.44.4 eth1.r2
    2001:db8:cafe:44::4 eth1.r2
    172.16.1.4 eth2.r2
    172.16.0.5 h1 eth1.h1
    172.16.0.6 h2 eth1.h2
    172.16.1.7 h3 eth1.h3
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.2/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
  
    iface swp1 inet static
      mtu 1500
      address 172.16.44.2/24
  
    iface swp1 inet6 static
      mtu 1500
      address 2001:db8:cafe:44::2/64
    auto swp2
    auto swp3
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    sysctl -qw net.ipv6.conf.swp1.disable_ipv6=0
    #
    # Enable FRR modules for ['vlan', 'ospf', 'gateway']
    #
    #
    # Enable FRR daemons
    #
    echo "ospfd=yes" >>/etc/frr/daemons
    echo "ospf6d=yes" >>/etc/frr/daemons
    echo "vrrpd=yes" >>/etc/frr/daemons
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description d2 -> r2
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface swp2
    ! no shutdown
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface swp3
    ! no shutdown
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface vlan1000
    ! no shutdown
     description VLAN edge (1000) -> [h1,d1,h2]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.7/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.7/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    # lan prefix: 172.16.0.0/16 local subnet: 172.16.1.0/24
    set +e
    ip route del 172.16.0.0/16 2>/dev/null
    set -e
    ip route add 172.16.0.0/16 via 172.16.1.3
    # loopback prefix: 10.0.0.0/24 local subnet: 172.16.1.0/24
    set +e
    ip route del 10.0.0.0/24 2>/dev/null
    set -e
    ip route add 10.0.0.0/24 via 172.16.1.3
    # mgmt prefix: 192.168.17.0/24 local subnet: 172.16.1.0/24
    # p2p prefix: 10.1.0.0/16 local subnet: 172.16.1.0/24
    set +e
    ip route del 10.1.0.0/16 2>/dev/null
    set -e
    ip route add 10.1.0.0/16 via 172.16.1.3
    # router_id prefix: 10.0.0.0/24 local subnet: 172.16.1.0/24
    # vrf_loopback prefix: 10.2.0.0/24 local subnet: 172.16.1.0/24
    set +e
    ip route del 10.2.0.0/24 2>/dev/null
    set -e
    ip route add 10.2.0.0/24 via 172.16.1.3
    #
    # Print the final routing table
    ip route
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    ip link set eth2 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description r2 -> d2
     ip address 172.16.44.4/24
     ipv6 address 2001:db8:cafe:44::4/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description r2 -> [r1,h3]
     ip address 172.16.1.4/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.5/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    # lan prefix: 172.16.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 172.16.0.0/16 2>/dev/null
    set -e
    ip route add 172.16.0.0/16 via 172.16.0.42
    # loopback prefix: 10.0.0.0/24 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.0.0.0/24 2>/dev/null
    set -e
    ip route add 10.0.0.0/24 via 172.16.0.42
    # mgmt prefix: 192.168.17.0/24 local subnet: 172.16.0.0/24
    # p2p prefix: 10.1.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.1.0.0/16 2>/dev/null
    set -e
    ip route add 10.1.0.0/16 via 172.16.0.42
    # router_id prefix: 10.0.0.0/24 local subnet: 172.16.0.0/24
    # vrf_loopback prefix: 10.2.0.0/24 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.2.0.0/24 2>/dev/null
    set -e
    ip route add 10.2.0.0/24 via 172.16.0.42
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.6/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    # lan prefix: 172.16.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 172.16.0.0/16 2>/dev/null
    set -e
    ip route add 172.16.0.0/16 via 172.16.0.42
    # loopback prefix: 10.0.0.0/24 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.0.0.0/24 2>/dev/null
    set -e
    ip route add 10.0.0.0/24 via 172.16.0.42
    # mgmt prefix: 192.168.17.0/24 local subnet: 172.16.0.0/24
    # p2p prefix: 10.1.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.1.0.0/16 2>/dev/null
    set -e
    ip route add 10.1.0.0/16 via 172.16.0.42
    # router_id prefix: 10.0.0.0/24 local subnet: 172.16.0.0/24
    # vrf_loopback prefix: 10.2.0.0/24 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.2.0.0/24 2>/dev/null
    set -e
    ip route add 10.2.0.0/24 via 172.16.0.42
    #
    # Print the final routing table
    ip route

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [d1]
ok: [d2]
ok: [r1]
ok: [r2]
ok: [h1]
ok: [h3]
ok: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for d1, d2
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for r1, r2
included: /home/pipi/net101/tools/netsim/ansible/tasks/linux/initial-clab.yml for h1, h2, h3

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [d1]
changed: [d2]

TASK [set_fact deployed_config] ************************************************
ok: [d1]
ok: [d2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
changed: [d1]
changed: [d2]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
skipping: [d1]
skipping: [d2]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r1 -> localhost]
changed: [r2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [r1]
skipping: [r2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for r1, r2

TASK [template] ****************************************************************
changed: [r1]
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [r2]
changed: [r1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [r1]
skipping: [r2]

TASK [set_fact] ****************************************************************
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Create initial container setup from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]

TASK [Initial container configuration via /tmp/config-KJJmKpyt-h1.sh] **********
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [file] ********************************************************************
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [d1]
ok: [d2]
ok: [r1]
ok: [r2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for d1, d2, r1, r2 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for d1, d2, r1, r2 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for d1, d2, r1, r2 => (item=gateway)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [d1]
ok: [d2]
ok: [r1]
ok: [r2]

TASK [Find configuration template for vlan] ************************************
skipping: [r1]
skipping: [r2]
ok: [d1]
ok: [d2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r1]
skipping: [r2]
ok: [d1] => 
  msg: |-
    vlan configuration for d1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    #
    # Create multi-vlan bridge, specify VLANs, and attach interfaces to it
    #
    cat >/etc/network/interfaces.d/50-bridge.intf <<CONFIG
    auto bridge
    iface bridge
        bridge-vlan-aware yes
        bridge-vids 1000
        bridge-ports swp2
        bridge-ports swp3
    CONFIG
    #
    # Create VLAN interfaces
    #
    cat >/etc/network/interfaces.d/51-bridge-interfaces.intf <<CONFIG
    iface swp2
        bridge-access 1000
    iface swp3
        bridge-access 1000
    auto vlan1000
    iface vlan1000
        address 172.16.0.1/24
  
        vlan-id 1000
        vlan-raw-device bridge
    CONFIG
    ifreload -a
ok: [d2] => 
  msg: |-
    vlan configuration for d2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    #
    # Create multi-vlan bridge, specify VLANs, and attach interfaces to it
    #
    cat >/etc/network/interfaces.d/50-bridge.intf <<CONFIG
    auto bridge
    iface bridge
        bridge-vlan-aware yes
        bridge-vids 1000
        bridge-ports swp2
        bridge-ports swp3
    CONFIG
    #
    # Create VLAN interfaces
    #
    cat >/etc/network/interfaces.d/51-bridge-interfaces.intf <<CONFIG
    iface swp2
        bridge-access 1000
    iface swp3
        bridge-access 1000
    auto vlan1000
    iface vlan1000
        address 172.16.0.2/24
  
        vlan-id 1000
        vlan-raw-device bridge
    CONFIG
    ifreload -a

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [r1]
skipping: [r2]
ok: [d1]
ok: [d2]

TASK [Deploy vlan configuration] ***********************************************
skipping: [r1]
skipping: [r2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for d1, d2

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [d1]
changed: [d2]

TASK [set_fact deployed_config] ************************************************
ok: [d1]
ok: [d2]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/cumulus.j2] ***
changed: [d2]
changed: [d1]

TASK [run vtysh to import vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/cumulus.j2] ***
skipping: [d1]
skipping: [d2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [d1]
ok: [d2]
ok: [r1]
ok: [r2]

TASK [Find configuration template for ospf] ************************************
ok: [d1]
ok: [d2]
ok: [r1]
ok: [r2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [d1] => 
  msg: |-
    ospf configuration for d1
    =========================================
    !
    router ospf
     ospf router-id 10.0.0.1
     passive-interface vlan1000
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    !
    interface lo
     ip ospf area 0.0.0.0
    !
    interface swp1
    ! d1 -> r1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface vlan1000
    ! VLAN edge (1000) -> [h1,d2,h2]
     ip ospf area 0.0.0.0
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.1
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
     interface swp1 area 0.0.0.0
    !
    interface swp1
    ! d1 -> r1
     ipv6 ospf6 network point-to-point
    !
  
    do write
ok: [d2] => 
  msg: |-
    ospf configuration for d2
    =========================================
    !
    router ospf
     ospf router-id 10.0.0.2
     passive-interface vlan1000
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    !
    interface lo
     ip ospf area 0.0.0.0
    !
    interface swp1
    ! d2 -> r2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface vlan1000
    ! VLAN edge (1000) -> [h1,d1,h2]
     ip ospf area 0.0.0.0
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.2
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
     interface swp1 area 0.0.0.0
    !
    interface swp1
    ! d2 -> r2
     ipv6 ospf6 network point-to-point
    !
  
    do write
ok: [r1] => 
  msg: |-
    ospf configuration for r1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r1 -> d1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! r1 -> [r2,h3]
     ip ospf area 0.0.0.0
    !
  
    !
    ! OSPFv3 FRR configuration
    !
    interface eth1
    ! r1 -> d1
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.3
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [r2] => 
  msg: |-
    ospf configuration for r2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.4
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r2 -> d2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! r2 -> [r1,h3]
     ip ospf area 0.0.0.0
    !
  
    !
    ! OSPFv3 FRR configuration
    !
    interface eth1
    ! r2 -> d2
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.4
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [d1]
ok: [d2]
ok: [r1]
ok: [r2]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for d1, d2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for r1, r2

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [d1]
changed: [d2]

TASK [set_fact deployed_config] ************************************************
ok: [d1]
ok: [d2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/cumulus.j2] ***
skipping: [d1]
skipping: [d2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/cumulus.j2] ***
changed: [d1]
changed: [d2]

TASK [template] ****************************************************************
changed: [r1]
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [r1]
skipping: [r2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [r1]
changed: [r2]

TASK [Figure out whether to deploy the module gateway on current device] *******
ok: [d1]
ok: [d2]
ok: [r1]
ok: [r2]

TASK [Find configuration template for gateway] *********************************
skipping: [r1]
ok: [d1]
skipping: [r2]
ok: [d2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r1]
skipping: [r2]
ok: [d1] => 
  msg: |-
    gateway configuration for d1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    cat >/etc/network/interfaces.d/80-gateway.intf <<CONFIG
    auto vlan1000
    iface vlan1000
        address-virtual 02:00:ca:fe:c0:01 172.16.0.42/24
    CONFIG
    ifreload -a
    cat >/tmp/vrrp_config <<CONFIG
    do write
    CONFIG
    if [ -s /tmp/vrrp_config ]; then
      vtysh -f /tmp/vrrp_config
    fi
ok: [d2] => 
  msg: |-
    gateway configuration for d2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    cat >/etc/network/interfaces.d/80-gateway.intf <<CONFIG
    auto vlan1000
    iface vlan1000
        address-virtual 02:00:ca:fe:c0:01 172.16.0.42/24
    CONFIG
    ifreload -a
    cat >/tmp/vrrp_config <<CONFIG
    do write
    CONFIG
    if [ -s /tmp/vrrp_config ]; then
      vtysh -f /tmp/vrrp_config
    fi

TASK [Find configuration deployment deploy_script for gateway] *****************
skipping: [r1]
skipping: [r2]
ok: [d1]
ok: [d2]

TASK [Deploy gateway configuration] ********************************************
skipping: [r1]
skipping: [r2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for d1, d2

TASK [copy cumulus config to /tmp/config.sh] ***********************************
changed: [d2]
changed: [d1]

TASK [set_fact deployed_config] ************************************************
ok: [d1]
ok: [d2]

TASK [run /tmp/config.sh to deploy gateway config from /home/pipi/net101/tools/netsim/ansible/templates/gateway/cumulus.j2] ***
changed: [d1]
changed: [d2]

TASK [run vtysh to import gateway config from /home/pipi/net101/tools/netsim/ansible/templates/gateway/cumulus.j2] ***
skipping: [d1]
skipping: [d2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
d1                         : ok=39   changed=8    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
d2                         : ok=39   changed=8    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
h1                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h2                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h3                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
r1                         : ok=27   changed=5    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
r2                         : ok=27   changed=5    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   



This lab tests the anycast gateway functionality. It checks whether the
anycast IP is active, whether it has the correct MAC address, and whether the
first device in the forwarding path intercepts the packets with the shared MAC
address.

