[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [srv]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vptx.yml for dut

TASK [Wait for et-0/0/0 to appear] *********************************************
ok: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, srv, dut

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [srv]
skipping: [dut]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [srv]
skipping: [dut]

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
skipping: [srv]
skipping: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, srv, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [srv]
skipping: [dut]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [srv] => 
  msg: |-
    initial configuration for srv
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.2.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.2.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    system {
      host-name dut;
      static-host-mapping {
        h1 inet 172.16.0.1;
        h2 inet 172.16.1.2;
        srv inet 172.16.2.3;
      }
    }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    policy-options {
      community tg_65000_2 members target:65000:2;
      community tg_65000_3 members target:65000:3;
      community tg_65000_1 members target:65000:1;
    }
  
  
  
    policy-options {
      policy-statement vrf-blue-rt-export {
        term 1 {
          then {
            community add tg_65000_2;
            accept;
          }
        }
      }
  
  
  
  
      policy-statement vrf-blue-rt-import {
        term 1 {
          from community [ tg_65000_2 tg_65000_3 ];
          then accept;
        }
        term default {
          then reject;
        }
      }
      policy-statement vrf-common-rt-export {
        term 1 {
          then {
            community add tg_65000_3;
            accept;
          }
        }
      }
  
  
  
  
  
      policy-statement vrf-common-rt-import {
        term 1 {
          from community [ tg_65000_1 tg_65000_2 tg_65000_3 ];
          then accept;
        }
        term default {
          then reject;
        }
      }
      policy-statement vrf-red-rt-export {
        term 1 {
          then {
            community add tg_65000_1;
            accept;
          }
        }
      }
  
  
  
  
      policy-statement vrf-red-rt-import {
        term 1 {
          from community [ tg_65000_1 tg_65000_3 ];
          then accept;
        }
        term default {
          then reject;
        }
      }
    }
  
    routing-instances {
  
      blue {
        instance-type vrf;
        route-distinguisher 65000:2;
  
        vrf-import vrf-blue-rt-import;
        vrf-export vrf-blue-rt-export;
  
        routing-options {
          auto-export;
        }
  
        interface et-0/0/1.0;
  
      }
  
  
      common {
        instance-type vrf;
        route-distinguisher 65000:3;
  
        vrf-import vrf-common-rt-import;
        vrf-export vrf-common-rt-export;
  
        routing-options {
          auto-export;
        }
  
        interface et-0/0/2.0;
  
      }
  
  
      red {
        instance-type vrf;
        route-distinguisher 65000:1;
  
        vrf-import vrf-red-rt-import;
        vrf-export vrf-red-rt-export;
  
        routing-options {
          auto-export;
        }
  
        interface et-0/0/0.0;
  
      }
  
    }
    interfaces {
  
      lo0.0 {
  
          family inet {
            address 10.0.0.4/32;
          }
  
      }
      et-0/0/0.0 {
        description "dut -> h1 [stub]";
  
          family inet {
            address 172.16.0.4/24;
          }
  
      }
      et-0/0/1.0 {
        description "dut -> h2 [stub]";
  
          family inet {
            address 172.16.1.4/24;
          }
  
      }
      et-0/0/2.0 {
        description "dut -> srv [stub]";
  
          family inet {
            address 172.16.2.4/24;
          }
  
      }
    }
    protocols {
      lldp {
        interface re0:mgmt-0 {
          disable;
        }
        interface all;
      }
    }

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, srv
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for dut

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [srv]

TASK [Create a temporary file for the rendered script] *************************
changed: [srv -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [srv -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [srv -> localhost]

TASK [Remove temporary file /tmp/h1_initial-6hntu4gi.sh] ***********************
changed: [h1 -> localhost]
changed: [srv -> localhost]
changed: [h2 -> localhost]

TASK [junos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/junos.j2] ***
changed: [dut]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, srv => (item=vrf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, srv => (item=routing)

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for vrf] *************************************
skipping: [h1]
skipping: [h2]
skipping: [srv]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [h1]
skipping: [h2]
skipping: [srv]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [srv]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
  
    policy-options {
      community x-route-permit-mark members large:65535:0:65536;
  
      policy-statement vrf-blue-bgp-export {
        term redis_bgp {
          from {
            protocol bgp;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
        term redis_direct {
          from {
            protocol direct;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
        term redis_ospf {
          from {
            protocol ospf;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
        term redis_ospf3 {
          from {
            protocol ospf3;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
      }
  
  
      policy-statement vrf-common-bgp-export {
        term redis_bgp {
          from {
            protocol bgp;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
        term redis_direct {
          from {
            protocol direct;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
        term redis_ospf {
          from {
            protocol ospf;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
        term redis_ospf3 {
          from {
            protocol ospf3;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
      }
  
  
      policy-statement vrf-red-bgp-export {
        term redis_bgp {
          from {
            protocol bgp;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
        term redis_direct {
          from {
            protocol direct;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
        term redis_ospf {
          from {
            protocol ospf;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
        term redis_ospf3 {
          from {
            protocol ospf3;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
      }
  
    }
  
  
    routing-instances {
  
      blue {
        routing-options {
          autonomous-system 65000;
          router-id 10.0.0.4
        }
  
        protocols {
          bgp {
  
            group ebgp-peers {
              export [  ];
              advertise-inactive;
            }
          }
        }
      }
  
  
      common {
        routing-options {
          autonomous-system 65000;
          router-id 10.0.0.4
        }
  
        protocols {
          bgp {
  
            group ebgp-peers {
              export [  ];
              advertise-inactive;
            }
          }
        }
      }
  
  
      red {
        routing-options {
          autonomous-system 65000;
          router-id 10.0.0.4
        }
  
        protocols {
          bgp {
  
            group ebgp-peers {
              export [  ];
              advertise-inactive;
            }
          }
        }
      }
  
    }

TASK [Deploy vrf configuration] ************************************************
skipping: [h1]
skipping: [h2]
skipping: [srv]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for dut

TASK [junos_config: deploying vrf from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/junos.j2] ***
changed: [dut]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for routing] *********************************
skipping: [dut]
ok: [h1]
ok: [h2]
ok: [srv]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [dut]
ok: [h1]
ok: [h2]
ok: [srv]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.4 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.4 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.4 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.4 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.4 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [srv] => 
  msg: |-
    routing configuration for srv
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.2.4 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.2.4 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.2.4 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.2.4 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [dut]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, srv

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [srv]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [srv -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [srv -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [srv -> localhost]

TASK [Remove temporary file /tmp/h1_routing-h1xqrx6o.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [srv -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=25   changed=2    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   
h1                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
h2                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
srv                        : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   



The device under test has two user VRFs and a common services VRF. The
lab tests inter-VRF route leaking between common VRF and other VRFs

* h1 and h2 should be able to ping srv but not each other

