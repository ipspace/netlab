[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [x1]
skipping: [x2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vptx.yml for dut

TASK [Wait for et-0/0/0 to appear] *********************************************
ok: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for x1, x2, dut

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [x1]
ok: [x2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [x1]
skipping: [x2]
skipping: [dut]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [x1]
skipping: [x2]
skipping: [dut]

TASK [Deploy normalize configuration] ******************************************
skipping: [x1]
skipping: [x2]
skipping: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for x1, x2, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [x1]
ok: [x2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [x1]
skipping: [x2]
skipping: [dut]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description x1 -> dut
     ! no ip address
     ipv6 address 2001:db8:3::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x2
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description x2 -> dut
     ! no ip address
     ipv6 address 2001:db8:3:1::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    system {
      host-name dut;
      static-host-mapping {
      }
    }
  
  
    interfaces {
      et-0/0/0 {
        mtu 1514;
      }
      et-0/0/1 {
        mtu 1514;
      }
  
      lo0.0 {
  
          family inet6 {
            address 2001:db8:1:1::1/64;
          }
  
      }
      et-0/0/0.0 {
        description "dut -> x1";
  
          family inet6 {
            address 2001:db8:3::1/64;
          }
  
      }
      et-0/0/1.0 {
        description "dut -> x2";
  
          family inet6 {
            address 2001:db8:3:1::1/64;
          }
  
      }
    }
    protocols {
      lldp {
        interface re0:mgmt-0 {
          disable;
        }
        interface all;
      }
      router-advertisement {
        interface et-0/0/0.0;
        interface et-0/0/1.0;
      }
    }

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for x1, x2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for dut

TASK [Attempt to load VRF kernel module] ***************************************
changed: [x1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [x1]
skipping: [x2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for x1, x2

TASK [template] ****************************************************************
changed: [x1]
changed: [x2]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [x2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [x1]
changed: [x2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [x1]
skipping: [x2]

TASK [junos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/junos.j2] ***
[WARNING]: mgd: statement must contain additional statements
changed: [dut]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2 => (item=isis)

TASK [Figure out whether to deploy the module isis on current device] **********
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Find configuration template for isis] ************************************
ok: [x1]
ok: [x2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for isis] ********************
ok: [x1]
ok: [x2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    isis configuration for x1
    =========================================
    !
    !
    ipv6 forwarding
    !
    router isis Gandalf
     log-adjacency-changes
     hostname dynamic
     is-type level-2
     metric-style wide
     lsp-timers gen-interval 1 refresh-interval 900 max-lifetime 1800
     net 49.0042.0000.0000.0002.00
     topology ipv6-unicast
  
    !
    interface lo
    !
     ipv6 router isis Gandalf
    !
    interface eth1
    ! x1 -> dut
     ipv6 router isis Gandalf
     isis network point-to-point
    !
  
    !
    do write
ok: [x2] => 
  msg: |-
    isis configuration for x2
    =========================================
    !
    !
    ipv6 forwarding
    !
    router isis Gandalf
     log-adjacency-changes
     hostname dynamic
     is-type level-1-2
     metric-style wide
     lsp-timers gen-interval 1 refresh-interval 900 max-lifetime 1800
     net 49.0042.0000.0000.0003.00
     topology ipv6-unicast
  
  
    !
    interface lo
    !
     ipv6 router isis Gandalf
    !
    interface eth1
    ! x2 -> dut
     ipv6 router isis Gandalf
     isis network point-to-point
    !
  
    !
    do write
ok: [dut] => 
  msg: |-
    isis configuration for dut
    =========================================
    protocols {
      delete: isis;
    }
    protocols {
      isis {
        topologies {
          ipv6-unicast;
        }
        level 1 disable;
        level 1 wide-metrics-only;
        level 2 wide-metrics-only;
        interface lo0.0;
        interface et-0/0/0.0 {
          point-to-point;
        }
        interface et-0/0/1.0 {
          point-to-point;
        }
      }
    }
  
  
    interfaces {
      lo0 {
        unit 0 {
          family iso {
            address 49.0001.0bad.cafe.0001.00
          }
        }
      }
      et-0/0/0.0 {
  
          family iso;
  
      }
      et-0/0/1.0 {
  
          family iso;
  
      }
    }

TASK [Deploy isis configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for x1, x2

TASK [junos_config: deploying isis from /home/pipi/netlab_gh/netsim/ansible/templates/isis/junos.j2] ***
[WARNING]:  statement not found
changed: [dut]

TASK [template] ****************************************************************
changed: [x2]
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [x2]

TASK [run /tmp/config.sh to deploy isis config from /home/pipi/netlab_gh/netsim/ansible/templates/isis/frr.j2] ***
skipping: [x1]
skipping: [x2]

TASK [run vtysh to import isis config from /home/pipi/netlab_gh/netsim/ansible/templates/isis/frr.j2] ***
changed: [x1]
changed: [x2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=23   changed=2    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
x1                         : ok=27   changed=5    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
x2                         : ok=26   changed=4    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   



This lab tests level-2 IS-IS with IPv6. The device under test is a level-2-only
router with two LAN interfaces connected to adjacent IS-IS routers.

