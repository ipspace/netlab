[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [t_1300]
ok: [t_1400]
ok: [p1]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [t_1300]
ok: [t_1400]
ok: [p1]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [t_1300]
skipping: [t_1400]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for p1
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/vptx.yml for dut

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [p1]

TASK [Wait for et-0/0/0 to appear] *********************************************
ok: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for p1, t_1300, t_1400, dut

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [t_1300]
ok: [t_1400]
ok: [dut]
ok: [p1]

TASK [Find configuration template for normalize] *******************************
ok: [t_1300]
ok: [t_1400]
ok: [p1]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [p1]
skipping: [t_1300]
skipping: [t_1400]
skipping: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [t_1300]
skipping: [t_1400]
skipping: [dut]
ok: [p1] => 
  msg: |-
    normalize configuration for p1
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0201

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [t_1300]
skipping: [t_1400]
skipping: [dut]
ok: [p1]

TASK [Deploy normalize configuration] ******************************************
skipping: [t_1300]
skipping: [t_1400]
skipping: [dut]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for p1

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [p1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for p1, t_1300, t_1400, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [t_1300]
ok: [t_1400]
ok: [p1]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [t_1300]
ok: [t_1400]
ok: [p1]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [p1]
skipping: [t_1300]
skipping: [t_1400]
skipping: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [t_1300] => 
  msg: |-
    initial configuration for t_1300
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    hostname t-1300
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.2 p1
    2001:db8:0:2::1 p1
    172.16.0.2 Ethernet1.p1
    2001:db8:1::2 Ethernet1.p1
    172.16.2.3 t_1300 eth1.t_1300
    2001:db8:1:2::3 t_1300 eth1.t_1300
    172.16.1.4 t_1400 eth1.t_1400
    2001:db8:1:1::4 t_1400 eth1.t_1400
    10.0.0.1 dut
    2001:db8:0:1::1 dut
    172.16.0.1 et-0-0-0.0.dut
    2001:db8:1::1 et-0-0-0.0.dut
    172.16.1.1 et-0-0-1.0.dut
    2001:db8:1:1::1 et-0-0-1.0.dut
    172.16.2.1 et-0-0-2.0.dut
    2001:db8:1:2::1 et-0-0-2.0.dut
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname t_1300
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
    net.ipv6.conf.eth1.disable_ipv6=0
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing and bonds, including any static routes
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.16.2.3/24
            - 2001:db8:1:2::3/64
          routes:
          - to: 172.16.0.0/16
            via: 172.16.2.1
          - to: 10.0.0.0/24
            via: 172.16.2.1
          - to: 10.1.0.0/16
            via: 172.16.2.1
          - to: 10.2.0.0/24
            via: 172.16.2.1
    SCRIPT
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [t_1400] => 
  msg: |-
    initial configuration for t_1400
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    hostname t-1400
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.2 p1
    2001:db8:0:2::1 p1
    172.16.0.2 Ethernet1.p1
    2001:db8:1::2 Ethernet1.p1
    172.16.2.3 t_1300 eth1.t_1300
    2001:db8:1:2::3 t_1300 eth1.t_1300
    172.16.1.4 t_1400 eth1.t_1400
    2001:db8:1:1::4 t_1400 eth1.t_1400
    10.0.0.1 dut
    2001:db8:0:1::1 dut
    172.16.0.1 et-0-0-0.0.dut
    2001:db8:1::1 et-0-0-0.0.dut
    172.16.1.1 et-0-0-1.0.dut
    2001:db8:1:1::1 et-0-0-1.0.dut
    172.16.2.1 et-0-0-2.0.dut
    2001:db8:1:2::1 et-0-0-2.0.dut
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname t_1400
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
    net.ipv6.conf.eth1.disable_ipv6=0
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing and bonds, including any static routes
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.16.1.4/24
            - 2001:db8:1:1::4/64
          routes:
          - to: 172.16.0.0/16
            via: 172.16.1.1
          - to: 10.0.0.0/24
            via: 172.16.1.1
          - to: 10.1.0.0/16
            via: 172.16.1.1
          - to: 10.2.0.0/24
            via: 172.16.1.1
    SCRIPT
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    system {
      host-name dut;
      static-host-mapping {
        p1 inet 10.0.0.2;
        t1300 inet 172.16.2.3;
        t1400 inet 172.16.1.4;
      }
    }
  
  
    interfaces {
      et-0/0/0 {
        mtu 1514;
      }
      et-0/0/1 {
        mtu 1414;
      }
      et-0/0/2 {
        mtu 1314;
      }
  
      lo0.0 {
  
          family inet {
            address 10.0.0.1/32;
          }
          family inet6 {
            address 2001:db8:0:1::1/64;
          }
  
      }
      et-0/0/0.0 {
        description "dut -> p1";
  
          bandwidth 1000000;
          family inet {
            address 172.16.0.1/24;
          }
          family inet6 {
            address 2001:db8:1::1/64;
          }
  
      }
      et-0/0/1.0 {
        description "dut -> t_1400 [stub]";
  
          family inet {
            address 172.16.1.1/24;
          }
          family inet6 {
            address 2001:db8:1:1::1/64;
          }
  
      }
      et-0/0/2.0 {
        description "dut -> t_1300 [stub]";
  
          family inet {
            address 172.16.2.1/24;
          }
          family inet6 {
            address 2001:db8:1:2::1/64;
          }
  
      }
    }
    protocols {
      lldp {
        interface re0:mgmt-0 {
          disable;
        }
        interface all;
      }
      router-advertisement {
        interface et-0/0/0.0;
        interface et-0/0/1.0;
        interface et-0/0/2.0;
      }
    }
ok: [p1] => 
  msg: |-
    initial configuration for p1
    =========================================
    hostname p1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    ipv6 unicast-routing
    !
    !
    ip host dut 10.0.0.1 172.16.0.1 172.16.1.1 172.16.2.1
    ip host t1300 172.16.2.3
    ip host t1400 172.16.1.4
    ipv6 host dut 2001:db8:0:1::1
    ipv6 host t1300 2001:db8:1:2::3
    ipv6 host t1400 2001:db8:1:1::4
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.2/32
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:0:2::1/64
    !
    interface Ethernet1
     no switchport
     mtu 1500
     description p1 -> dut
     ip address 172.16.0.2/24
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:1::2/64
    !
     mac-address 52dc.cafe.0201
     no shutdown
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [t_1300]
ok: [t_1400]
ok: [p1]
ok: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for p1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux.yml for t_1300, t_1400
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for dut

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [p1]

TASK [template] ****************************************************************
changed: [t_1400]
changed: [t_1300]

TASK [Execute /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux.j2] ***
changed: [t_1400]
changed: [t_1300]

TASK [junos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/junos.j2] ***
changed: [dut]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [p1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for p1 => (item=routing)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [p1]

TASK [Find configuration template for routing] *********************************
ok: [p1]

TASK [fail] ********************************************************************
skipping: [p1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p1] => 
  msg: |-
    routing configuration for p1
    =========================================
    !
    !
    ! AS-path access lists
    !
    !
    ! Static routes
    !
    ip route 0.0.0.0/0 Ethernet1 172.16.0.1
    ipv6 route ::/0 Ethernet1 2001:db8:1::1

TASK [Find configuration deployment deploy_script for routing] *****************
ok: [p1]

TASK [Deploy routing configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for p1

TASK [eos_config: deploying routing from /home/pipi/net101/tools/netsim/ansible/templates/routing/eos.j2] ***
changed: [p1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=14   changed=1    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
p1                         : ok=26   changed=3    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0   
t_1300                     : ok=13   changed=2    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
t_1400                     : ok=13   changed=2    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   



This scenario tests MTU configuration and path MTU discovery (generation of ICMP unreachables)
