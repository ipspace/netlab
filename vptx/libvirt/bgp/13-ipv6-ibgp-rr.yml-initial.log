[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r1]
ok: [r2]
ok: [dut]
ok: [rr2]
ok: [x1]

TASK [Find device readiness script] ********************************************
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [dut]
ok: [x1]

TASK [Wait for device to become ready] *****************************************
skipping: [r1]
skipping: [r2]
skipping: [rr2]
skipping: [x1]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vptx.yml for dut

TASK [Wait for et-0/0/0 to appear] *********************************************
ok: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, rr2, x1

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [dut]
ok: [x1]

TASK [Find configuration template for normalize] *******************************
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [x1]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [rr2]
skipping: [x1]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [r1]
ok: [r2]
ok: [x1]
ok: [dut]
ok: [rr2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [rr2]
skipping: [x1]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [rr2]
skipping: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, rr2, x1

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [x1]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [rr2]
skipping: [x1]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [r1]
ok: [r2]
ok: [dut]
ok: [x1]
ok: [rr2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
    ip link set dev eth1 mtu 1500
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set eth2 down
    ip link set eth2 up
    ip link set dev eth2 mtu 1500
    sysctl -qw net.ipv6.conf.eth3.autoconf=0
    sysctl -qw net.ipv6.conf.eth3.accept_ra=0
    ip link set eth3 down
    ip link set eth3 up
    ip link set dev eth3 mtu 1500
    sysctl -qw net.ipv6.conf.eth4.autoconf=0
    sysctl -qw net.ipv6.conf.eth4.accept_ra=0
    ip link set eth4 down
    ip link set eth4 up
    ip link set dev eth4 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r1
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:a::1/64
    !
    interface eth1
     no shutdown
     description r1 -> dut
     ! no ip address
     ipv6 address 2001:db8:3::a/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description r1 -> rr2
     ! no ip address
     ipv6 address 2001:db8:3:1::a/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth3
     no shutdown
     description r1 -> r2
     ! no ip address
     ipv6 address 2001:db8:3:2::a/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth4
     no shutdown
     description r1 -> stub [stub]
     ! no ip address
     ipv6 address 2001:db8:cafe:1::a/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description r2 -> r1
     ! no ip address
     ipv6 address 2001:db8:3:2::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:cafe:e::1/64
    !
    interface eth1
     no shutdown
     description x1 -> dut [external]
     ! no ip address
     ipv6 address 2001:db8:3:3::4/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    system {
      host-name dut;
      static-host-mapping {
      }
    }
  
  
    interfaces {
      et-0/0/0 {
        mtu 1514;
      }
      et-0/0/1 {
        mtu 1514;
      }
  
      lo0.0 {
  
          family inet6 {
            address 2001:db8:1:1::1/64;
          }
  
      }
      et-0/0/0.0 {
        description "dut -> r1";
  
          family inet6 {
            address 2001:db8:3::1/64;
          }
  
      }
      et-0/0/1.0 {
        description "dut -> x1 [external]";
  
          family inet6 {
            address 2001:db8:3:3::1/64;
          }
  
      }
    }
    protocols {
      lldp {
        interface re0:mgmt-0 {
          disable;
        }
        interface all;
      }
      router-advertisement {
        interface et-0/0/0.0;
        interface et-0/0/1.0;
      }
    }
ok: [rr2] => 
  msg: |-
    initial configuration for rr2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname rr2
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description rr2 -> r1
     ! no ip address
     ipv6 address 2001:db8:3:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for r1, r2, rr2, x1

TASK [junos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/junos.j2] ***
[WARNING]: mgd: statement must contain additional statements
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [r1]
skipping: [r2]
skipping: [rr2]
skipping: [x1]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for r1, r2, rr2, x1

TASK [template] ****************************************************************
changed: [rr2]
changed: [x1]
changed: [r1]
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [x1]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [r2]
changed: [x1]
changed: [rr2]
changed: [r1]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [r1]
skipping: [r2]
skipping: [rr2]
skipping: [x1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r1]
ok: [r2]
ok: [x1]
ok: [rr2]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, rr2, x1 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, rr2, x1 => (item=ospf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [dut]
ok: [x1]

TASK [Find configuration template for bgp] *************************************
ok: [r1]
ok: [dut]
ok: [r2]
ok: [x1]
ok: [rr2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [rr2]
skipping: [x1]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r1] => 
  msg: |-
    bgp configuration for r1
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.10
    !
      neighbor 2001:db8:1:1::1 remote-as 65000
      neighbor 2001:db8:1:1::1 description dut
      neighbor 2001:db8:1:1::1 update-source lo
    !
      neighbor 2001:db8:1:2::1 remote-as 65000
      neighbor 2001:db8:1:2::1 description rr2
      neighbor 2001:db8:1:2::1 update-source lo
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:a::/64
    !
      network 2001:db8:cafe:1::/64
    !
    !
      neighbor 2001:db8:1:1::1 activate
      neighbor 2001:db8:1:1::1 next-hop-self
      no neighbor 2001:db8:1:1::1 send-community all
      neighbor 2001:db8:1:1::1 send-community standard
      neighbor 2001:db8:1:1::1 send-community large
      neighbor 2001:db8:1:1::1 send-community extended
    !
      neighbor 2001:db8:1:2::1 activate
      neighbor 2001:db8:1:2::1 next-hop-self
      no neighbor 2001:db8:1:2::1 send-community all
      neighbor 2001:db8:1:2::1 send-community standard
      neighbor 2001:db8:1:2::1 send-community large
      neighbor 2001:db8:1:2::1 send-community extended
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    routing-options {
      autonomous-system 65000;
      router-id 10.0.0.1
    }
    policy-options {
      delete: policy-statement ibgp-export;
      delete: policy-statement ebgp-export;
    }
    policy-options {
      policy-statement ibgp-export {
        term advertise {
          from {
            protocol direct;
            interface [
               lo0.0  ];
          }
          then accept;
        }
        term next-hop-self {
          from {
            route-type external;
          }
          then {
            next-hop self;
          }
        }
      }
      policy-statement ebgp-export {
        term advertise {
          from {
            protocol direct;
            interface [ lo0.0 ];
          }
          then accept;
        }
      }
    }
    protocols {
      delete: bgp;
    }
    protocols {
      bgp {
        group ibgp-peers-ipv6 {
          type internal;
          export ibgp-export;
          advertise-inactive;
          local-address 2001:db8:1:1::1;
          cluster 10.0.0.42;
          neighbor 2001:db8:1:2::1 {
            description rr2;
            family inet6 {
              unicast;
            }
          }
          neighbor 2001:db8:1:a::1 {
            description r1;
            family inet6 {
              unicast;
            }
          }
          neighbor 2001:db8:1:3::1 {
            description r2;
            family inet6 {
              unicast;
            }
          }
        }
        group ebgp-peers {
          export ebgp-export;
          advertise-inactive;
          neighbor 2001:db8:3:3::4 {
            peer-as 65101;
            description x1;
            family inet6 {
              unicast;
            }
          }
        }
      }
    }
ok: [r2] => 
  msg: |-
    bgp configuration for r2
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 2001:db8:1:1::1 remote-as 65000
      neighbor 2001:db8:1:1::1 description dut
      neighbor 2001:db8:1:1::1 update-source lo
    !
      neighbor 2001:db8:1:2::1 remote-as 65000
      neighbor 2001:db8:1:2::1 description rr2
      neighbor 2001:db8:1:2::1 update-source lo
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:3::/64
    !
    !
    !
      neighbor 2001:db8:1:1::1 activate
      neighbor 2001:db8:1:1::1 next-hop-self
      no neighbor 2001:db8:1:1::1 send-community all
      neighbor 2001:db8:1:1::1 send-community standard
      neighbor 2001:db8:1:1::1 send-community large
      neighbor 2001:db8:1:1::1 send-community extended
    !
      neighbor 2001:db8:1:2::1 activate
      neighbor 2001:db8:1:2::1 next-hop-self
      no neighbor 2001:db8:1:2::1 send-community all
      neighbor 2001:db8:1:2::1 send-community standard
      neighbor 2001:db8:1:2::1 send-community large
      neighbor 2001:db8:1:2::1 send-community extended
    !
    !
    !
    do write
ok: [rr2] => 
  msg: |-
    bgp configuration for rr2
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
      bgp cluster-id 10.0.0.43
    !
      neighbor 2001:db8:1:1::1 remote-as 65000
      neighbor 2001:db8:1:1::1 description dut
      neighbor 2001:db8:1:1::1 update-source lo
    !
      neighbor 2001:db8:1:a::1 remote-as 65000
      neighbor 2001:db8:1:a::1 description r1
      neighbor 2001:db8:1:a::1 update-source lo
    !
      neighbor 2001:db8:1:3::1 remote-as 65000
      neighbor 2001:db8:1:3::1 description r2
      neighbor 2001:db8:1:3::1 update-source lo
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:2::/64
    !
    !
    !
      neighbor 2001:db8:1:1::1 activate
      neighbor 2001:db8:1:1::1 next-hop-self
      no neighbor 2001:db8:1:1::1 send-community all
      neighbor 2001:db8:1:1::1 send-community standard
      neighbor 2001:db8:1:1::1 send-community large
      neighbor 2001:db8:1:1::1 send-community extended
    !
      neighbor 2001:db8:1:a::1 activate
      neighbor 2001:db8:1:a::1 next-hop-self
      neighbor 2001:db8:1:a::1 route-reflector-client
      no neighbor 2001:db8:1:a::1 send-community all
      neighbor 2001:db8:1:a::1 send-community standard
      neighbor 2001:db8:1:a::1 send-community large
      neighbor 2001:db8:1:a::1 send-community extended
    !
      neighbor 2001:db8:1:3::1 activate
      neighbor 2001:db8:1:3::1 next-hop-self
      neighbor 2001:db8:1:3::1 route-reflector-client
      no neighbor 2001:db8:1:3::1 send-community all
      neighbor 2001:db8:1:3::1 send-community standard
      neighbor 2001:db8:1:3::1 send-community large
      neighbor 2001:db8:1:3::1 send-community extended
    !
    !
    !
    do write
ok: [x1] => 
  msg: |-
    bgp configuration for x1
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 2001:db8:3:3::1 remote-as 65000
      neighbor 2001:db8:3:3::1 description dut
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:cafe:e::/64
    !
    !
    !
      neighbor 2001:db8:3:3::1 activate
      no neighbor 2001:db8:3:3::1 send-community all
      neighbor 2001:db8:3:3::1 send-community standard
      neighbor 2001:db8:3:3::1 send-community large
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for r1, r2, rr2, x1

TASK [junos_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/junos.j2] ***
[WARNING]:  statement not found
changed: [dut]

TASK [template] ****************************************************************
changed: [r1]
changed: [x1]
changed: [rr2]
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]
ok: [x1]
ok: [rr2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [r1]
skipping: [r2]
skipping: [rr2]
skipping: [x1]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [r1]
changed: [r2]
changed: [x1]
changed: [rr2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [dut]
ok: [x1]

TASK [Find configuration template for ospf] ************************************
ok: [r1]
skipping: [x1]
ok: [r2]
ok: [rr2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [rr2]
skipping: [x1]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [x1]
ok: [r1]
ok: [r2]
ok: [dut]
ok: [rr2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [x1]
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
    routing-options {
      router-id 10.0.0.1
    }
    protocols {
      delete: ospf3;
    }
  
    protocols {
      ospf3 {
        area 0.0.0.0 {
          interface lo0.0 {
          }
        }
        area 0.0.0.0 {
          interface et-0/0/0.0 {
            interface-type p2p;
          }
        }
      }
    }
ok: [r1] => 
  msg: |-
    ospf configuration for r1
    =========================================
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! r1 -> dut
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    interface eth2
    ! r1 -> rr2
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    interface eth3
    ! r1 -> r2
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.10
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [r2] => 
  msg: |-
    ospf configuration for r2
    =========================================
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! r2 -> r1
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.3
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [rr2] => 
  msg: |-
    ospf configuration for rr2
    =========================================
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! rr2 -> r1
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.2
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
skipping: [x1]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for r1, r2, rr2

TASK [junos_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/junos.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [rr2]
changed: [r2]
changed: [r1]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]
ok: [rr2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [r1]
skipping: [r2]
skipping: [rr2]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [r1]
changed: [rr2]
changed: [r2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=30   changed=3    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
r1                         : ok=36   changed=7    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
r2                         : ok=35   changed=6    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
rr2                        : ok=35   changed=6    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
x1                         : ok=28   changed=4    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   



Use this topology to test the IBGP RR implementation (rr-clients and
cluster-id) and next-hop handling (change next hop on EBGP but not on
reflected route) on IPv6 IBGP sessions.

