/home/pipi/.local/lib/python3.10/site-packages/paramiko/pkey.py:100: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "cipher": algorithms.TripleDES,
/home/pipi/.local/lib/python3.10/site-packages/paramiko/transport.py:259: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "class": algorithms.TripleDES,
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [srv]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [srv]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, srv

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [r1]
ok: [r2]
ok: [srv]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [srv]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [srv]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, srv

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [r1]
ok: [r2]
ok: [srv]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [srv]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [srv]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
    ip link set eth3 down
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
    ip link set eth3 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname dut
    !
    log file /tmp/logging
  
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.1/32
    !
    interface eth1
     no shutdown
     description dut -> r1
     ip address 10.1.0.1/30
    !
    interface eth2
     no shutdown
     description dut -> r2
     ip address 10.1.0.5/30
    !
    interface eth3
     no shutdown
     description dut -> srv [external]
     ip address 10.1.0.9/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    !
    exit 0
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r1
    !
    log file /tmp/logging
  
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description r1 -> dut
     ip address 10.1.0.2/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    !
    exit 0
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    log file /tmp/logging
  
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description r2 -> dut
     ip address 10.1.0.6/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    !
    exit 0
ok: [srv] => 
  msg: |-
    initial configuration for srv
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname srv
    !
    log file /tmp/logging
  
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description srv -> dut [external]
     ip address 10.1.0.10/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    !
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for dut, r1, r2, srv

TASK [Attempt to load VRF kernel module] ***************************************
changed: [dut -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for dut, r1, r2, srv

TASK [template] ****************************************************************
changed: [srv]
changed: [r1]
changed: [r2]
changed: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [srv]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [r1]
changed: [dut]
changed: [r2]
changed: [srv]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [srv]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, srv => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, srv => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, srv => (item=vrf)

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [dut]
ok: [r1]
ok: [r2]
ok: [srv]

TASK [Find configuration template for ospf] ************************************
skipping: [srv]
ok: [dut]
ok: [r1]
ok: [r2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [srv]
ok: [dut]
ok: [r1]
ok: [r2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [srv]
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
    !
    do write
ok: [r1] => 
  msg: |-
    ospf configuration for r1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [r2] => 
  msg: |-
    ospf configuration for r2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r2 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
skipping: [srv]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for dut, r1, r2

TASK [template] ****************************************************************
changed: [dut]
changed: [r1]
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [dut]
ok: [r1]
ok: [r2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [dut]
skipping: [r1]
skipping: [r2]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [dut]
changed: [r2]
changed: [r1]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [r1]
ok: [r2]
ok: [srv]

TASK [Find configuration template for bgp] *************************************
skipping: [r1]
skipping: [r2]
ok: [dut]
ok: [srv]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [r1]
skipping: [r2]
ok: [dut]
ok: [srv]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r1]
skipping: [r2]
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.1
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.1/32
    !
    !
    !
    !
    !
    do write
ok: [srv] => 
  msg: |-
    bgp configuration for srv
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.1.0.9 remote-as 65000
      neighbor 10.1.0.9 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.4/32
    !
    !
    !
      neighbor 10.1.0.9 activate
      no neighbor 10.1.0.9 send-community all
      neighbor 10.1.0.9 send-community standard
      neighbor 10.1.0.9 send-community large
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
skipping: [r1]
skipping: [r2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for dut, srv

TASK [template] ****************************************************************
changed: [srv]
changed: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]
ok: [srv]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [dut]
skipping: [srv]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [srv]
changed: [dut]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [dut]
ok: [r1]
ok: [r2]
ok: [srv]

TASK [Find configuration template for vrf] *************************************
skipping: [r1]
skipping: [r2]
ok: [dut]
skipping: [srv]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [r1]
skipping: [r2]
skipping: [srv]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r1]
skipping: [r2]
skipping: [srv]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
    # Create VRF tables
    if [ ! -e /sys/devices/virtual/net/red ]; then
    ip link add red type vrf table 100
    fi
    ip link set red up
    if [ ! -e /sys/devices/virtual/net/blue ]; then
    ip link add blue type vrf table 101
    fi
    ip link set blue up
    if [ ! -e /sys/devices/virtual/net/common ]; then
    ip link add common type vrf table 102
    fi
    ip link set common up
  
    # Move interfaces and loopbacks to vrfs
    sysctl -qw net.ipv6.conf.eth1.keep_addr_on_down=1
    ip link set eth1 master red
    sysctl -qw net.ipv6.conf.eth2.keep_addr_on_down=1
    ip link set eth2 master blue
    sysctl -qw net.ipv6.conf.eth3.keep_addr_on_down=1
    ip link set eth3 master common
  
    cat >/tmp/vrf_config <<CONFIG
    vrf red
     exit-vrf
    vrf blue
     exit-vrf
    vrf common
     exit-vrf
    !
    router bgp 65000
    !
    !
    router bgp 65000 vrf red
     no bgp ebgp-requires-policy
     no bgp default ipv4-unicast
     bgp router-id 10.0.0.1
     address-family ipv4 unicast
      redistribute connected
      redistribute ospf
  
      label vpn export auto
      export vpn
      import vpn
      rd vpn export 65000:1
      rt vpn import 65000:1 65000:3
      rt vpn export 65000:1
     exit-address-family
    !
    !
    router bgp 65000 vrf blue
     no bgp ebgp-requires-policy
     no bgp default ipv4-unicast
     bgp router-id 10.0.0.1
     address-family ipv4 unicast
      redistribute connected
      redistribute ospf
  
      label vpn export auto
      export vpn
      import vpn
      rd vpn export 65000:2
      rt vpn import 65000:2 65000:3
      rt vpn export 65000:2
     exit-address-family
    !
    !
    router bgp 65000 vrf common
     no bgp ebgp-requires-policy
     no bgp default ipv4-unicast
     bgp router-id 10.0.0.1
     neighbor 10.1.0.10 remote-as 65100
     neighbor 10.1.0.10 description srv
     address-family ipv4 unicast
      redistribute connected
  
      label vpn export auto
      export vpn
      import vpn
      rd vpn export 65000:3
      rt vpn import 65000:1 65000:2 65000:3
      rt vpn export 65000:3
      neighbor 10.1.0.10 activate
      neighbor 10.1.0.10 send-community standard
      neighbor 10.1.0.10 send-community large
     exit-address-family
    !
    !
    !
    ! OSPFv2 FRR configuration
    !
    router ospf vrf red
     ospf router-id 10.100.0.100
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
     redistribute bgp
     redistribute connected
  
    exit
    !
    interface eth1
    ! dut -> r1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    !
    ! OSPFv2 FRR configuration
    !
    router ospf vrf blue
     ospf router-id 10.100.0.101
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
     redistribute bgp
     redistribute connected
  
    exit
    !
    interface eth2
    ! dut -> r2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?

TASK [Deploy vrf configuration] ************************************************
skipping: [r1]
skipping: [r2]
skipping: [srv]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for dut

TASK [template] ****************************************************************
changed: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [run /tmp/config.sh to deploy vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
changed: [dut]

TASK [run vtysh to import vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
skipping: [dut]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=45   changed=9    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
r1                         : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
r2                         : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
srv                        : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   



The device under test has two user VRFs and a common services VRF.
Routers are attached to those interfaces and run OSPF or BGP with device under test.

* r1 and r2 should be able to ping srv but not each other

