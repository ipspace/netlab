[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [x1]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for x1

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for x1, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [x1]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [x1]
skipping: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname dut
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.1/32
    !
    interface eth1
     no shutdown
     description [Access VLAN red] dut -> x1
     ! no ip address
    !
    interface vlan42
     no shutdown
     description VLAN red (42) -> [x1]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    hostname x1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    !
    ip host dut 10.0.0.1
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     no shutdown
     ip address 10.0.0.2/32
    !
    interface Ethernet1
     no shutdown
     no switchport
     description [Access VLAN red] x1 -> dut
    !
     mac-address 52dc.cafe.0201
    !
    interface Vlan42
     no shutdown
     description VLAN red (42) -> [dut]
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for dut

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [x1]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [dut -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [dut]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for dut

TASK [template] ****************************************************************
changed: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [dut]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [dut]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1 => (item=stp)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [dut]
ok: [x1]

TASK [Find configuration template for vlan] ************************************
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    vlan configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan42 ]; then
      brctl addbr vlan42
  
      brctl stp vlan42 on
  
      ip link set dev vlan42 up
      ip addr flush dev vlan42
    fi
  
    brctl addif vlan42 eth1
    exit 0
ok: [x1] => 
  msg: |-
    vlan configuration for x1
    =========================================
    vlan 42
     name red
    !
  
    !
    interface Ethernet1
     switchport
     switchport access vlan 42
    !
    interface Vlan42

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [dut]
ok: [x1]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [template] ****************************************************************
changed: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
changed: [dut]

TASK [run vtysh to import vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [dut]

TASK [eos_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/eos.j2] ***
changed: [x1]

TASK [Figure out whether to deploy the module stp on current device] ***********
ok: [dut]
ok: [x1]

TASK [Find configuration template for stp] *************************************
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    stp configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
  
  
  
    brctl setbridgeprio vlan42 4096
  
    exit 0
ok: [x1] => 
  msg: |-
    stp configuration for x1
    =========================================
    spanning-tree mode rstp

TASK [Find configuration deployment deploy_script for stp] *********************
ok: [dut]
ok: [x1]

TASK [Deploy stp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [template] ****************************************************************
changed: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [run /tmp/config.sh to deploy stp config from /home/pipi/net101/tools/netsim/ansible/templates/stp/frr.j2] ***
changed: [dut]

TASK [run vtysh to import stp config from /home/pipi/net101/tools/netsim/ansible/templates/stp/frr.j2] ***
skipping: [dut]

TASK [eos_config: deploying stp from /home/pipi/net101/tools/netsim/ansible/templates/stp/eos.j2] ***
changed: [x1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=32   changed=7    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
x1                         : ok=26   changed=3    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0   



The device under test is connected to the probe with default STP root priority.
Once the STP settles (the interconnecting link in red VLAN is forwarding), we can
check that the priority of the root bridge is what we expect.

