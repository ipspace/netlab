[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut_a]
ok: [x1]
ok: [dut_b]
ok: [x2]

TASK [Find device readiness script] ********************************************
ok: [dut_b]
ok: [dut_a]
ok: [x1]
ok: [x2]

TASK [Wait for device to become ready] *****************************************
skipping: [dut_a]
skipping: [dut_b]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for x1, x2

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [x2]
ok: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for x1, x2, dut_a, dut_b

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut_a]
ok: [dut_b]
ok: [x1]
ok: [x2]

TASK [Find configuration template for initial] *********************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [x1]
skipping: [x2]
skipping: [dut_a]
skipping: [dut_b]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut_a] => 
  msg: |-
    initial configuration for dut_a
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    ip link set eth2 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname dut_a
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.1/32
    !
    interface eth1
     no shutdown
     description dut_a -> x1
     ! no ip address
    !
    interface eth2
     no shutdown
     description dut_a -> dut_b
     ! no ip address
    !
    interface eth1.76
     no shutdown
     description [SubIf VLAN blue] dut_a -> x1
     ! no ip address
    !
    interface eth1.42
     no shutdown
     description [SubIf VLAN red] dut_a -> x1
     ! no ip address
    !
    interface eth2.76
     no shutdown
     description [SubIf VLAN blue] dut_a -> dut_b
     ! no ip address
    !
    interface eth2.42
     no shutdown
     description [SubIf VLAN red] dut_a -> dut_b
     ! no ip address
    !
    interface vlan76
     no shutdown
     description VLAN blue (76) -> [x1,dut_b,x2]
     ! no ip address
    !
    interface vlan42
     no shutdown
     description VLAN red (42) -> [x1,dut_b,x2]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut_b] => 
  msg: |-
    initial configuration for dut_b
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    ip link set eth2 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname dut_b
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description dut_b -> x2
     ! no ip address
    !
    interface eth2
     no shutdown
     description dut_b -> dut_a
     ! no ip address
    !
    interface eth1.76
     no shutdown
     description [SubIf VLAN blue] dut_b -> x2
     ! no ip address
    !
    interface eth1.42
     no shutdown
     description [SubIf VLAN red] dut_b -> x2
     ! no ip address
    !
    interface eth2.76
     no shutdown
     description [SubIf VLAN blue] dut_b -> dut_a
     ! no ip address
    !
    interface eth2.42
     no shutdown
     description [SubIf VLAN red] dut_b -> dut_a
     ! no ip address
    !
    interface vlan76
     no shutdown
     description VLAN blue (76) -> [x1,dut_a,x2]
     ! no ip address
    !
    interface vlan42
     no shutdown
     description VLAN red (42) -> [x1,dut_a,x2]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    hostname x1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    !
    ip host duta 10.0.0.1
    ip host dutb 10.0.0.2
    ip host x2 10.0.0.4
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     no shutdown
     ip address 10.0.0.3/32
    !
    interface Ethernet1
     no shutdown
     no switchport
     description x1 -> dut_a
    !
     mac-address 52dc.cafe.0301
    !
    interface Ethernet2
     no shutdown
     no switchport
     description x1 -> x2
    !
     mac-address 52dc.cafe.0302
    !
    interface Vlan76
     no shutdown
     description VLAN blue (76) -> [dut_a,dut_b,x2]
    !
    interface Vlan42
     no shutdown
     description VLAN red (42) -> [dut_a,dut_b,x2]
    !
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    hostname x2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    !
    ip host duta 10.0.0.1
    ip host dutb 10.0.0.2
    ip host x1 10.0.0.3
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     no shutdown
     ip address 10.0.0.4/32
    !
    interface Ethernet1
     no shutdown
     no switchport
     description x2 -> dut_b
    !
     mac-address 52dc.cafe.0401
    !
    interface Ethernet2
     no shutdown
     no switchport
     description x2 -> x1
    !
     mac-address 52dc.cafe.0402
    !
    interface Vlan76
     no shutdown
     description VLAN blue (76) -> [x1,dut_a,dut_b]
    !
    interface Vlan42
     no shutdown
     description VLAN red (42) -> [x1,dut_a,dut_b]
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut_a]
ok: [dut_b]
ok: [x1]
ok: [x2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for dut_a, dut_b

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [x2]
changed: [x1]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [dut_a -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [dut_a]
skipping: [dut_b]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for dut_a, dut_b

TASK [template] ****************************************************************
changed: [dut_a]
changed: [dut_b]

TASK [set_fact] ****************************************************************
ok: [dut_a]
ok: [dut_b]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [dut_a]
changed: [dut_b]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [dut_a]
skipping: [dut_b]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]
ok: [x2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut_a, dut_b, x1, x2 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut_a, dut_b, x1, x2 => (item=stp)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [dut_a]
ok: [dut_b]
ok: [x1]
ok: [x2]

TASK [Find configuration template for vlan] ************************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [dut_a]
skipping: [dut_b]
skipping: [x1]
skipping: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut_a] => 
  msg: |-
    vlan configuration for dut_a
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/eth1.76 ]; then
      ip link add link eth1 name eth1.76 type vlan id 76
      ip link set dev eth1.76 up
    fi
    if [ ! -e /sys/devices/virtual/net/eth1.42 ]; then
      ip link add link eth1 name eth1.42 type vlan id 42
      ip link set dev eth1.42 up
    fi
    if [ ! -e /sys/devices/virtual/net/eth2.76 ]; then
      ip link add link eth2 name eth2.76 type vlan id 76
      ip link set dev eth2.76 up
    fi
    if [ ! -e /sys/devices/virtual/net/eth2.42 ]; then
      ip link add link eth2 name eth2.42 type vlan id 42
      ip link set dev eth2.42 up
    fi
    if [ ! -e /sys/devices/virtual/net/vlan76 ]; then
      brctl addbr vlan76
  
      brctl stp vlan76 on
  
      ip link set dev vlan76 up
      ip addr flush dev vlan76
    fi
    if [ ! -e /sys/devices/virtual/net/vlan42 ]; then
      brctl addbr vlan42
  
      brctl stp vlan42 on
  
      ip link set dev vlan42 up
      ip addr flush dev vlan42
    fi
  
    brctl addif vlan76 eth1.76
    brctl addif vlan42 eth1.42
    brctl addif vlan76 eth2.76
    brctl addif vlan42 eth2.42
    exit 0
ok: [dut_b] => 
  msg: |-
    vlan configuration for dut_b
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/eth1.76 ]; then
      ip link add link eth1 name eth1.76 type vlan id 76
      ip link set dev eth1.76 up
    fi
    if [ ! -e /sys/devices/virtual/net/eth1.42 ]; then
      ip link add link eth1 name eth1.42 type vlan id 42
      ip link set dev eth1.42 up
    fi
    if [ ! -e /sys/devices/virtual/net/eth2.76 ]; then
      ip link add link eth2 name eth2.76 type vlan id 76
      ip link set dev eth2.76 up
    fi
    if [ ! -e /sys/devices/virtual/net/eth2.42 ]; then
      ip link add link eth2 name eth2.42 type vlan id 42
      ip link set dev eth2.42 up
    fi
    if [ ! -e /sys/devices/virtual/net/vlan76 ]; then
      brctl addbr vlan76
  
      brctl stp vlan76 on
  
      ip link set dev vlan76 up
      ip addr flush dev vlan76
    fi
    if [ ! -e /sys/devices/virtual/net/vlan42 ]; then
      brctl addbr vlan42
  
      brctl stp vlan42 on
  
      ip link set dev vlan42 up
      ip addr flush dev vlan42
    fi
  
    brctl addif vlan76 eth1.76
    brctl addif vlan42 eth1.42
    brctl addif vlan76 eth2.76
    brctl addif vlan42 eth2.42
    exit 0
ok: [x1] => 
  msg: |-
    vlan configuration for x1
    =========================================
    vlan 76
     name blue
    !
    vlan 42
     name red
    !
  
    !
    interface Ethernet1
     switchport
     switchport mode trunk
     switchport trunk allowed vlan 42,76
    !
    interface Ethernet2
     switchport
     switchport mode trunk
     switchport trunk allowed vlan 42,76
    !
    interface Vlan76
    !
    interface Vlan42
ok: [x2] => 
  msg: |-
    vlan configuration for x2
    =========================================
    vlan 76
     name blue
    !
    vlan 42
     name red
    !
  
    !
    interface Ethernet1
     switchport
     switchport mode trunk
     switchport trunk allowed vlan 42,76
    !
    interface Ethernet2
     switchport
     switchport mode trunk
     switchport trunk allowed vlan 42,76
    !
    interface Vlan76
    !
    interface Vlan42

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [dut_a]
ok: [dut_b]
ok: [x1]
ok: [x2]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for dut_a, dut_b
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2

TASK [template] ****************************************************************
changed: [dut_a]
changed: [dut_b]

TASK [set_fact] ****************************************************************
ok: [dut_a]
ok: [dut_b]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
changed: [dut_a]
changed: [dut_b]

TASK [run vtysh to import vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [dut_a]
skipping: [dut_b]

TASK [eos_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/eos.j2] ***
changed: [x2]
changed: [x1]

TASK [Figure out whether to deploy the module stp on current device] ***********
ok: [dut_a]
ok: [dut_b]
ok: [x1]
ok: [x2]

TASK [Find configuration template for stp] *************************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [dut_a]
skipping: [dut_b]
skipping: [x1]
skipping: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut_a] => 
  msg: |-
    stp configuration for dut_a
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
  
  
  
  
  
  
  
  
  
  
    exit 0
ok: [dut_b] => 
  msg: |-
    stp configuration for dut_b
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
  
  
  
  
  
  
  
  
    brctl setbridgeprio vlan76 12288
  
    brctl setbridgeprio vlan42 12288
  
    exit 0
ok: [x1] => 
  msg: |-
    stp configuration for x1
    =========================================
    spanning-tree mode rapid-pvst
  
    spanning-tree priority 16384
  
    spanning-tree vlan-id 76 priority 16384
    spanning-tree vlan-id 42 priority 16384
ok: [x2] => 
  msg: |-
    stp configuration for x2
    =========================================
    spanning-tree mode rapid-pvst
  
    spanning-tree priority 16384
  
    spanning-tree vlan-id 76 priority 16384
    spanning-tree vlan-id 42 priority 16384

TASK [Find configuration deployment deploy_script for stp] *********************
ok: [dut_a]
ok: [dut_b]
ok: [x1]
ok: [x2]

TASK [Deploy stp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for dut_a, dut_b
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2

TASK [template] ****************************************************************
changed: [dut_a]
changed: [dut_b]

TASK [set_fact] ****************************************************************
ok: [dut_a]
ok: [dut_b]

TASK [run /tmp/config.sh to deploy stp config from /home/pipi/net101/tools/netsim/ansible/templates/stp/frr.j2] ***
changed: [dut_b]
changed: [dut_a]

TASK [run vtysh to import stp config from /home/pipi/net101/tools/netsim/ansible/templates/stp/frr.j2] ***
skipping: [dut_a]
skipping: [dut_b]

TASK [eos_config: deploying stp from /home/pipi/net101/tools/netsim/ansible/templates/stp/eos.j2] ***
changed: [x1]
changed: [x2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut_a                      : ok=32   changed=7    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
dut_b                      : ok=31   changed=6    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
x1                         : ok=26   changed=3    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0   
x2                         : ok=26   changed=3    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0   



The devices under test form a layer-2 triangle of VLAN trunks. The devices
are running PVRST and have different per-VLAN root priorities.

If DUT_A and DUT_B run PVSRT and has correct per-VLAN root priorities, DUT_A becomes the
root bridge for red VLAN and DUT_B becomes the root bridge for the blue VLAN.

