[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/eos-clab.yml for x1, x2

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [x1]
ok: [x2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for x1, x2, dut

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [x1]
skipping: [x2]
skipping: [dut]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [x1] => 
  msg: |-
    normalize configuration for x1
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0201
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0202
ok: [x2] => 
  msg: |-
    normalize configuration for x2
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0301
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0302

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2

TASK [eos_config: deploying normalize from /home/pipi/netlab_gh/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [x2]
changed: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for x1, x2, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [x1]
skipping: [x2]
skipping: [dut]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
    if [ ! -e /sys/class/net/bond1 ]; then
      if [ ! -e /sys/devices/virtual/net/bond1 ]; then
    if [ ! -e /sys/class/net/bond1 ]; then
    ip link add dev bond1 type bond mode 802.3ad lacp_rate fast lacp_active on
    fi
  
        ip link set dev bond1 up
      fi
    fi
    if [ ! -e /sys/class/net/bond2 ]; then
      if [ ! -e /sys/devices/virtual/net/bond2 ]; then
    if [ ! -e /sys/class/net/bond2 ]; then
    ip link add dev bond2 type bond mode 802.3ad lacp_rate fast lacp_active on
    fi
  
        ip link set dev bond2 up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.bond1.disable_ipv6=1
    ip link set dev bond1 mtu 1500
    sysctl -qw net.ipv6.conf.bond2.disable_ipv6=1
    ip link set dev bond2 mtu 1400
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1400
    sysctl -qw net.ipv6.conf.eth4.disable_ipv6=1
    ip link set dev eth4 mtu 1400
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname dut
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.1/32
    !
    interface bond1
     no shutdown
     description dut -> x1 [stub]
     ip address 172.16.0.1/24
    !
    interface bond2
     no shutdown
     description dut -> x2 [stub]
     ip address 172.16.1.1/24
    !
    interface eth1
     no shutdown
     description dut -> x1 [stub]
     ! no ip address
    !
    interface eth2
     no shutdown
     description dut -> x1 [stub]
     ! no ip address
    !
    interface eth3
     no shutdown
     description dut -> x2 [stub]
     ! no ip address
    !
    interface eth4
     no shutdown
     description dut -> x2 [stub]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    hostname x1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    !
    ip host dut 10.0.0.1 172.16.0.1 172.16.1.1
    ip host x2 172.16.1.3
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface port-channel1
     no switchport
     mtu 1500
     description x1 -> dut [stub]
     ip address 172.16.0.2/24
    !
    interface Ethernet1
     no switchport
     mtu 1500
     description x1 -> dut [stub]
    !
     mac-address 52dc.cafe.0201
     no shutdown
    !
    interface Ethernet2
     no switchport
     mtu 1500
     description x1 -> dut [stub]
    !
     mac-address 52dc.cafe.0202
     no shutdown
    !
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    hostname x2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    !
    ip host dut 10.0.0.1 172.16.0.1 172.16.1.1
    ip host x1 172.16.0.2
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface port-channel1
     no switchport
     mtu 1400
     description x2 -> dut [stub]
     ip address 172.16.1.3/24
    !
    interface Ethernet1
     no switchport
     mtu 1400
     description x2 -> dut [stub]
    !
     mac-address 52dc.cafe.0301
     no shutdown
    !
    interface Ethernet2
     no switchport
     mtu 1400
     description x2 -> dut [stub]
    !
     mac-address 52dc.cafe.0302
     no shutdown
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for dut

TASK [eos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/eos.j2] ***
changed: [x2]
changed: [x1]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [dut -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [dut]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for dut

TASK [template] ****************************************************************
changed: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [dut]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [dut]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2 => (item=lag)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2 => (item=routing)

TASK [Figure out whether to deploy the module lag on current device] ***********
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for lag] *************************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for lag] *********************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    lag configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    # Bond devices are created by 'initial' module - add members
    #
    ip link set dev eth1 down
    ip link set dev eth1 master bond1
    ip link set dev eth1 up
    ip link set dev eth2 down
    ip link set dev eth2 master bond1
    ip link set dev eth2 up
    ip link set dev eth3 down
    ip link set dev eth3 master bond2
    ip link set dev eth3 up
    ip link set dev eth4 down
    ip link set dev eth4 master bond2
    ip link set dev eth4 up
    ip link set dev bond1 up
    ip link set dev bond2 up
    exit 0
ok: [x1] => 
  msg: |-
    lag configuration for x1
    =========================================
  
    interface port-channel1
     description x1 -> dut
    !
    !
    interface Ethernet1
     description x1 -> dut in channel-group 1
     channel-group 1 mode active
     lacp timer fast
    !
    interface Ethernet2
     description x1 -> dut in channel-group 1
     channel-group 1 mode active
     lacp timer fast
ok: [x2] => 
  msg: |-
    lag configuration for x2
    =========================================
  
    interface port-channel1
     description x2 -> dut
    !
    !
    interface Ethernet1
     description x2 -> dut in channel-group 1
     channel-group 1 mode active
     lacp timer fast
    !
    interface Ethernet2
     description x2 -> dut in channel-group 1
     channel-group 1 mode active
     lacp timer fast

TASK [Deploy lag configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2

TASK [template] ****************************************************************
changed: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [run /tmp/config.sh to deploy lag config from /home/pipi/netlab_gh/netsim/ansible/templates/lag/frr.j2] ***
changed: [dut]

TASK [run vtysh to import lag config from /home/pipi/netlab_gh/netsim/ansible/templates/lag/frr.j2] ***
skipping: [dut]

TASK [eos_config: deploying lag from /home/pipi/netlab_gh/netsim/ansible/templates/lag/eos.j2] ***
changed: [x1]
changed: [x2]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for routing] *********************************
skipping: [dut]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [dut]
ok: [x1]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [x1] => 
  msg: |-
    routing configuration for x1
    =========================================
    !
    !
    ! AS-path access lists
    !
    !
    ! Static routes
    !
    ip route 0.0.0.0/0 port-channel1 172.16.0.1
ok: [x2] => 
  msg: |-
    routing configuration for x2
    =========================================
    !
    !
    ! AS-path access lists
    !
    !
    ! Static routes
    !
    ip route 0.0.0.0/0 port-channel1 172.16.1.1

TASK [Deploy routing configuration] ********************************************
skipping: [dut]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2

TASK [eos_config: deploying routing from /home/pipi/netlab_gh/netsim/ansible/templates/routing/eos.j2] ***
changed: [x1]
changed: [x2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=29   changed=5    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
x1                         : ok=33   changed=4    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
x2                         : ok=33   changed=4    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   



The device under is a router with a L3 LAG link connected to a FRR device. The
FRR device should be able to ping the loopback interface of DUT.

