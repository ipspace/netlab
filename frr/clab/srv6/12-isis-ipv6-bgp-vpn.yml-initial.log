[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [pe2]
ok: [ce1]
ok: [p]
ok: [ce2]
ok: [h1]
ok: [h2]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [pe2]
ok: [ce1]
ok: [ce2]
ok: [p]
ok: [h1]
ok: [h2]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p]
skipping: [h1]
skipping: [h2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, pe2, ce1, ce2, p, h1, h2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [pe2]
ok: [ce1]
ok: [ce2]
ok: [p]
ok: [h1]
ok: [h2]

TASK [Find configuration template for normalize] *******************************
ok: [pe2]
ok: [dut]
ok: [ce1]
ok: [ce2]
ok: [p]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [pe2]
ok: [ce1]
ok: [ce2]
ok: [p]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p]
skipping: [h1]
skipping: [h2]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p]
skipping: [h1]
skipping: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, pe2, ce1, ce2, p, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [pe2]
ok: [ce1]
ok: [ce2]
ok: [p]
ok: [h1]
ok: [h2]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [pe2]
ok: [ce1]
ok: [ce2]
ok: [h1]
ok: [p]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [pe2]
ok: [ce1]
ok: [ce2]
ok: [p]
ok: [h2]
ok: [h1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:1::6/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:1::6/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2::5/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2::5/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
    ip link set eth3 down
    sysctl -qw net.ipv6.conf.eth3.autoconf=0
    sysctl -qw net.ipv6.conf.eth3.accept_ra=0
    ip link set dev eth3 mtu 1500
    ip link set eth3 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname dut
    !
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 5f00::1/64
    !
    interface eth1
     no shutdown
     description dut -> p
     ! no ip address
     ipv6 address 2001:1::1/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description dut -> h1 [stub]
     ! no ip address
     ipv6 address 2001:db8:2::1/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth3
     no shutdown
     description dut -> ce1 [external]
     ! no ip address
     ipv6 address 2001:db8:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [pe2] => 
  msg: |-
    initial configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
    ip link set eth3 down
    sysctl -qw net.ipv6.conf.eth3.autoconf=0
    sysctl -qw net.ipv6.conf.eth3.accept_ra=0
    ip link set dev eth3 mtu 1500
    ip link set eth3 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname pe2
    !
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 5f00:0:1::1/64
    !
    interface eth1
     no shutdown
     description pe2 -> p
     ! no ip address
     ipv6 address 2001:1:0:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description pe2 -> h2 [stub]
     ! no ip address
     ipv6 address 2001:db8:2:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth3
     no shutdown
     description pe2 -> ce2 [external]
     ! no ip address
     ipv6 address 2001:db8:1:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [ce1] => 
  msg: |-
    initial configuration for ce1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname ce1
    !
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:0:2::1/64
    !
    interface eth1
     no shutdown
     description ce1 -> dut [external]
     ! no ip address
     ipv6 address 2001:db8:1::1/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p] => 
  msg: |-
    initial configuration for p
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p
    !
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 5f00:0:0:7::1/64
    !
    interface eth1
     no shutdown
     description p -> dut
     ! no ip address
     ipv6 address 2001:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description p -> pe2
     ! no ip address
     ipv6 address 2001:1:0:1::1/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [ce2] => 
  msg: |-
    initial configuration for ce2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname ce2
    !
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:0:3::1/64
    !
    interface eth1
     no shutdown
     description ce2 -> pe2 [external]
     ! no ip address
     ipv6 address 2001:db8:1:1::1/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for dut, pe2, ce1, ce2, p
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Attempt to load VRF kernel module] ***************************************
changed: [dut -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [dut]
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for dut, pe2, ce1, ce2, p

TASK [template] ****************************************************************
changed: [p]
changed: [ce1]
changed: [ce2]
changed: [pe2]
changed: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]
ok: [pe2]
ok: [ce1]
ok: [ce2]
ok: [p]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [ce1]
changed: [pe2]
changed: [p]
changed: [ce2]
changed: [dut]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [dut]
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-fudsc46_.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [p]
ok: [pe2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ce1, ce2, dut, p, pe2 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ce1, ce2, dut, p, pe2 => (item=isis)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ce1, ce2, dut, p, pe2 => (item=vrf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ce1, ce2, dut, p, pe2 => (item=srv6)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [p]
ok: [pe2]

TASK [Find configuration template for bgp] *************************************
skipping: [p]
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [dut]
skipping: [p]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [p]
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p]
ok: [ce1] => 
  msg: |-
    bgp configuration for ce1
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 2001:db8:1::2 remote-as 65000
      neighbor 2001:db8:1::2 description dut
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:0:2::/64
    !
    !
    !
      neighbor 2001:db8:1::2 activate
      no neighbor 2001:db8:1::2 send-community all
      neighbor 2001:db8:1::2 send-community standard
      neighbor 2001:db8:1::2 send-community large
    !
    !
    !
    do write
ok: [ce2] => 
  msg: |-
    bgp configuration for ce2
    =========================================
    !
    router bgp 65102
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 2001:db8:1:1::2 remote-as 65000
      neighbor 2001:db8:1:1::2 description pe2
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:0:3::/64
    !
    !
    !
      neighbor 2001:db8:1:1::2 activate
      no neighbor 2001:db8:1:1::2 send-community all
      neighbor 2001:db8:1:1::2 send-community standard
      neighbor 2001:db8:1:1::2 send-community large
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.1
    !
      neighbor 5f00:0:1::1 remote-as 65000
      neighbor 5f00:0:1::1 description pe2
      neighbor 5f00:0:1::1 update-source lo
    !
     address-family ipv6 unicast
    !
     redistribute connected
  
    !
    !
    !
    !
    !
    do write
ok: [pe2] => 
  msg: |-
    bgp configuration for pe2
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor 5f00::1 remote-as 65000
      neighbor 5f00::1 description dut
      neighbor 5f00::1 update-source lo
    !
     address-family ipv6 unicast
    !
     redistribute connected
  
    !
    !
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
skipping: [p]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for ce1, ce2, dut, pe2

TASK [template] ****************************************************************
changed: [pe2]
changed: [dut]
changed: [ce1]
changed: [ce2]

TASK [set_fact] ****************************************************************
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [pe2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [ce1]
skipping: [ce2]
skipping: [dut]
skipping: [pe2]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [ce2]
changed: [dut]
changed: [ce1]
changed: [pe2]

TASK [Figure out whether to deploy the module isis on current device] **********
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [p]
ok: [pe2]

TASK [Find configuration template for isis] ************************************
skipping: [ce1]
skipping: [ce2]
ok: [dut]
ok: [p]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [dut]
skipping: [p]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for isis] ********************
skipping: [ce1]
skipping: [ce2]
ok: [dut]
ok: [p]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ce1]
skipping: [ce2]
ok: [dut] => 
  msg: |-
    isis configuration for dut
    =========================================
    !
    !
    ipv6 forwarding
    !
    router isis Gandalf
     log-adjacency-changes
     hostname dynamic
     is-type level-2
     metric-style wide
     lsp-timers gen-interval 1 refresh-interval 900 max-lifetime 1800
     net 49.0001.0000.0000.0001.00
     topology ipv6-unicast
  
    !
    interface lo
    !
     ipv6 router isis Gandalf
    !
    interface eth1
    ! dut -> p
     ipv6 router isis Gandalf
     isis network point-to-point
    !
  
    !
    do write
ok: [p] => 
  msg: |-
    isis configuration for p
    =========================================
    !
    !
    ipv6 forwarding
    !
    router isis Gandalf
     log-adjacency-changes
     hostname dynamic
     is-type level-2
     metric-style wide
     lsp-timers gen-interval 1 refresh-interval 900 max-lifetime 1800
     net 49.0001.0000.0000.0007.00
     topology ipv6-unicast
  
    !
    interface lo
    !
     ipv6 router isis Gandalf
    !
    interface eth1
    ! p -> dut
     ipv6 router isis Gandalf
     isis network point-to-point
    !
    interface eth2
    ! p -> pe2
     ipv6 router isis Gandalf
     isis network point-to-point
    !
  
    !
    do write
ok: [pe2] => 
  msg: |-
    isis configuration for pe2
    =========================================
    !
    !
    ipv6 forwarding
    !
    router isis Gandalf
     log-adjacency-changes
     hostname dynamic
     is-type level-2
     metric-style wide
     lsp-timers gen-interval 1 refresh-interval 900 max-lifetime 1800
     net 49.0001.0000.0000.0002.00
     topology ipv6-unicast
  
    !
    interface lo
    !
     ipv6 router isis Gandalf
    !
    interface eth1
    ! pe2 -> p
     ipv6 router isis Gandalf
     isis network point-to-point
    !
  
    !
    do write

TASK [Deploy isis configuration] ***********************************************
skipping: [ce1]
skipping: [ce2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for dut, p, pe2

TASK [template] ****************************************************************
changed: [pe2]
changed: [dut]
changed: [p]

TASK [set_fact] ****************************************************************
ok: [dut]
ok: [p]
ok: [pe2]

TASK [run /tmp/config.sh to deploy isis config from /home/pipi/netlab_gh/netsim/ansible/templates/isis/frr.j2] ***
skipping: [dut]
skipping: [p]
skipping: [pe2]

TASK [run vtysh to import isis config from /home/pipi/netlab_gh/netsim/ansible/templates/isis/frr.j2] ***
changed: [pe2]
changed: [dut]
changed: [p]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [pe2]
ok: [p]

TASK [Find configuration template for vrf] *************************************
skipping: [ce1]
skipping: [ce2]
skipping: [p]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [dut]
skipping: [p]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [ce1]
skipping: [ce2]
skipping: [p]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ce1]
skipping: [ce2]
skipping: [p]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
    # Create VRF tables
    if [ ! -e /sys/devices/virtual/net/overlay ]; then
    ip link add overlay type vrf table 100
    fi
    ip link set overlay up
  
    # Move interfaces and loopbacks to vrfs
    sysctl -qw net.ipv6.conf.eth2.keep_addr_on_down=1
    ip link set eth2 master overlay
    sysctl -qw net.ipv6.conf.eth3.keep_addr_on_down=1
    ip link set eth3 master overlay
  
    cat >/tmp/vrf_config <<CONFIG
    vrf overlay
     exit-vrf
    !
    router bgp 65000
    !
    !
    router bgp 65000 vrf overlay
     no bgp ebgp-requires-policy
     no bgp default ipv4-unicast
     bgp router-id 10.0.0.1
     neighbor 2001:db8:1::1 remote-as 65101
     neighbor 2001:db8:1::1 description ce1
     address-family ipv6 unicast
      redistribute connected
  
      label vpn export auto
      export vpn
      import vpn
      rd vpn export 65000:1
      rt vpn import 65000:1
      rt vpn export 65000:1
      neighbor 2001:db8:1::1 activate
      neighbor 2001:db8:1::1 send-community standard
      neighbor 2001:db8:1::1 send-community large
     exit-address-family
    !
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?
ok: [pe2] => 
  msg: |-
    vrf configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
    # Create VRF tables
    if [ ! -e /sys/devices/virtual/net/overlay ]; then
    ip link add overlay type vrf table 100
    fi
    ip link set overlay up
  
    # Move interfaces and loopbacks to vrfs
    sysctl -qw net.ipv6.conf.eth2.keep_addr_on_down=1
    ip link set eth2 master overlay
    sysctl -qw net.ipv6.conf.eth3.keep_addr_on_down=1
    ip link set eth3 master overlay
  
    cat >/tmp/vrf_config <<CONFIG
    vrf overlay
     exit-vrf
    !
    router bgp 65000
    !
    !
    router bgp 65000 vrf overlay
     no bgp ebgp-requires-policy
     no bgp default ipv4-unicast
     bgp router-id 10.0.0.2
     neighbor 2001:db8:1:1::1 remote-as 65102
     neighbor 2001:db8:1:1::1 description ce2
     address-family ipv6 unicast
      redistribute connected
  
      label vpn export auto
      export vpn
      import vpn
      rd vpn export 65000:1
      rt vpn import 65000:1
      rt vpn export 65000:1
      neighbor 2001:db8:1:1::1 activate
      neighbor 2001:db8:1:1::1 send-community standard
      neighbor 2001:db8:1:1::1 send-community large
     exit-address-family
    !
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?

TASK [Deploy vrf configuration] ************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [p]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for dut, pe2

TASK [template] ****************************************************************
changed: [pe2]
changed: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]
ok: [pe2]

TASK [run /tmp/config.sh to deploy vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
changed: [pe2]
changed: [dut]

TASK [run vtysh to import vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
skipping: [dut]
skipping: [pe2]

TASK [Figure out whether to deploy the module srv6 on current device] **********
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [p]
ok: [pe2]

TASK [Find configuration template for srv6] ************************************
skipping: [ce1]
skipping: [ce2]
skipping: [p]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [dut]
skipping: [p]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for srv6] ********************
skipping: [ce1]
skipping: [ce2]
skipping: [p]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ce1]
skipping: [ce2]
skipping: [p]
ok: [dut] => 
  msg: |-
    srv6 configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e
  
    export SRv6_DEV="sr0"
  
    if [ ! -e /sys/devices/virtual/net/${SRv6_DEV} ]; then
    ip link add ${SRv6_DEV} type dummy
    ip link set ${SRv6_DEV} up
    fi
  
    # See https://onvox.net/2024/12/16/srv6-frr/
    sysctl -w net.ipv6.seg6_flowlabel=1
    sysctl -w net.ipv6.conf.all.seg6_enabled=1
    sysctl -w net.vrf.strict_mode=1
  
    #
    # Rest of SRv6 configuration done through VTYSH
    #
    cat >/tmp/srv6_config <<CONFIG
    segment-routing
     srv6
      encapsulation
       source-address 5f00::1
      locators
       locator dut
        prefix 5f00::/48
        behavior usid
        format usid-f3216
       exit
       !
      exit
      !
     exit
  
    router isis Gandalf
     metric-style wide
     segment-routing srv6
       locator dut
       # node-msd max-end-d 8
       interface ${SRv6_DEV}
     exit
    exit
  
    router bgp 65000
     segment-routing srv6
      locator dut
     exit
  
     neighbor 5f00:0:1::1 remote-as 65000
     neighbor 5f00:0:1::1 description pe2 (SRv6)
     address-family ipv6 vpn
    !
      neighbor 5f00:0:1::1 activate
      neighbor 5f00:0:1::1 send-community both
      neighbor 5f00:0:1::1 next-hop-self
    !
    router bgp 65000 vrf overlay
     sid vpn per-vrf export auto
     no bgp network import-check
  
    !
  
    do write
    CONFIG
    vtysh -f /tmp/srv6_config
    exit 0
ok: [pe2] => 
  msg: |-
    srv6 configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e
  
    export SRv6_DEV="sr0"
  
    if [ ! -e /sys/devices/virtual/net/${SRv6_DEV} ]; then
    ip link add ${SRv6_DEV} type dummy
    ip link set ${SRv6_DEV} up
    fi
  
    # See https://onvox.net/2024/12/16/srv6-frr/
    sysctl -w net.ipv6.seg6_flowlabel=1
    sysctl -w net.ipv6.conf.all.seg6_enabled=1
    sysctl -w net.vrf.strict_mode=1
  
    #
    # Rest of SRv6 configuration done through VTYSH
    #
    cat >/tmp/srv6_config <<CONFIG
    segment-routing
     srv6
      encapsulation
       source-address 5f00:0:1::1
      locators
       locator pe2
        prefix 5f00:0:1::/48
        behavior usid
        format usid-f3216
       exit
       !
      exit
      !
     exit
  
    router isis Gandalf
     metric-style wide
     segment-routing srv6
       locator pe2
       # node-msd max-end-d 8
       interface ${SRv6_DEV}
     exit
    exit
  
    router bgp 65000
     segment-routing srv6
      locator pe2
     exit
  
     neighbor 5f00::1 remote-as 65000
     neighbor 5f00::1 description dut (SRv6)
     address-family ipv6 vpn
    !
      neighbor 5f00::1 activate
      neighbor 5f00::1 send-community both
      neighbor 5f00::1 next-hop-self
    !
    router bgp 65000 vrf overlay
     sid vpn per-vrf export auto
     no bgp network import-check
  
    !
  
    do write
    CONFIG
    vtysh -f /tmp/srv6_config
    exit 0

TASK [Deploy srv6 configuration] ***********************************************
skipping: [ce1]
skipping: [ce2]
skipping: [p]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for dut, pe2

TASK [template] ****************************************************************
changed: [dut]
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [dut]
ok: [pe2]

TASK [run /tmp/config.sh to deploy srv6 config from /home/pipi/netlab_gh/netsim/ansible/templates/srv6/frr.j2] ***
changed: [dut]
changed: [pe2]

TASK [run vtysh to import srv6 config from /home/pipi/netlab_gh/netsim/ansible/templates/srv6/frr.j2] ***
skipping: [dut]
skipping: [pe2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
ce1                        : ok=32   changed=4    unreachable=0    failed=0    skipped=24   rescued=0    ignored=0   
ce2                        : ok=32   changed=4    unreachable=0    failed=0    skipped=24   rescued=0    ignored=0   
dut                        : ok=54   changed=11   unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
p                          : ok=32   changed=4    unreachable=0    failed=0    skipped=24   rescued=0    ignored=0   
pe2                        : ok=53   changed=10   unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   



The tested device (DUT) is a PE-router running IS-IS, BGP L3VPN and SRv6
across an IPv6-only network to interconnect two IPv6-only networks. The
validation test checks end-to-end L3VPN IPv6 connectivity across a SRv6 core.

