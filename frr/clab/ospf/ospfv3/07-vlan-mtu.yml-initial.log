[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1400
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1400
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1280
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname dut
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:1::1/64
    !
    interface eth1
     no shutdown
     description dut -> x3
     ! no ip address
    !
    interface eth2
     no shutdown
     description [Access VLAN ospf_1] dut -> x1
     ! no ip address
    !
    interface eth3
     no shutdown
     description [Access VLAN ospf_2] dut -> x2
     ! no ip address
    !
    interface eth1.502
     no shutdown
     description [SubIf VLAN ospf_3] dut -> x3
     ! no ip address
    !
    interface vlan500
     no shutdown
     description VLAN ospf_1 (500) -> [x1]
     ! no ip address
     ipv6 address 2001:db8:2::1/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface vlan501
     no shutdown
     description VLAN ospf_2 (501) -> [x2]
     ! no ip address
     ipv6 address 2001:db8:2:1::1/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface vlan502
     no shutdown
     description VLAN ospf_3 (502) -> [x3]
     ! no ip address
     ipv6 address 2001:db8:2:2::1/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1400
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description [Access VLAN ospf_1] x1 -> dut
     ! no ip address
    !
    interface vlan500
     no shutdown
     description VLAN ospf_1 (500) -> [dut]
     ! no ip address
     ipv6 address 2001:db8:2::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1280
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x2
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description [Access VLAN ospf_2] x2 -> dut
     ! no ip address
    !
    interface vlan501
     no shutdown
     description VLAN ospf_2 (501) -> [dut]
     ! no ip address
     ipv6 address 2001:db8:2:1::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x3] => 
  msg: |-
    initial configuration for x3
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x3
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:4::1/64
    !
    interface eth1
     no shutdown
     description x3 -> dut
     ! no ip address
    !
    interface eth1.502
     no shutdown
     description [SubIf VLAN ospf_3] x3 -> dut
     ! no ip address
    !
    interface vlan502
     no shutdown
     description VLAN ospf_3 (502) -> [dut]
     ! no ip address
     ipv6 address 2001:db8:2:2::4/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for dut, x1, x2, x3

TASK [Attempt to load VRF kernel module] ***************************************
changed: [dut -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for dut, x1, x2, x3

TASK [template] ****************************************************************
changed: [x1]
changed: [dut]
changed: [x2]
changed: [x3]

TASK [set_fact] ****************************************************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [x1]
changed: [x2]
changed: [dut]
changed: [x3]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3 => (item=ospf)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Find configuration template for vlan] ************************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    vlan configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/eth1.502 ]; then
      ip link add link eth1 name eth1.502 type vlan id 502
      ip link set dev eth1.502 up
    fi
    if [ ! -e /sys/devices/virtual/net/vlan500 ]; then
      brctl addbr vlan500
      ip link set dev vlan500 address 52:dc:ca:fd:01:00
  
      ip link set dev vlan500 mtu 1400
      ip addr flush dev vlan500
      sysctl -w net.ipv6.conf.vlan500.addr_gen_mode=3
      ip addr add 2001:db8:2::1/64 dev vlan500
    fi
    if [ ! -e /sys/devices/virtual/net/vlan501 ]; then
      brctl addbr vlan501
      ip link set dev vlan501 address 52:dc:ca:fd:01:01
  
      ip link set dev vlan501 mtu 1280
      ip addr flush dev vlan501
      sysctl -w net.ipv6.conf.vlan501.addr_gen_mode=3
      ip addr add 2001:db8:2:1::1/64 dev vlan501
    fi
    if [ ! -e /sys/devices/virtual/net/vlan502 ]; then
      brctl addbr vlan502
      ip link set dev vlan502 address 52:dc:ca:fd:01:02
  
      ip link set dev vlan502 mtu 1320
      ip addr flush dev vlan502
      sysctl -w net.ipv6.conf.vlan502.addr_gen_mode=3
      ip addr add 2001:db8:2:2::1/64 dev vlan502
    fi
  
    brctl addif vlan500 eth2
    brctl addif vlan501 eth3
    brctl addif vlan502 eth1.502
  
    ip link set dev vlan500 up
    ip link set dev vlan501 up
    ip link set dev vlan502 up
    exit 0
ok: [x1] => 
  msg: |-
    vlan configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan500 ]; then
      brctl addbr vlan500
      ip link set dev vlan500 address 52:dc:ca:fd:02:00
  
      ip link set dev vlan500 mtu 1400
      ip addr flush dev vlan500
      sysctl -w net.ipv6.conf.vlan500.addr_gen_mode=3
      ip addr add 2001:db8:2::2/64 dev vlan500
    fi
  
    brctl addif vlan500 eth1
  
    ip link set dev vlan500 up
    exit 0
ok: [x2] => 
  msg: |-
    vlan configuration for x2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan501 ]; then
      brctl addbr vlan501
      ip link set dev vlan501 address 52:dc:ca:fd:03:00
  
      ip link set dev vlan501 mtu 1280
      ip addr flush dev vlan501
      sysctl -w net.ipv6.conf.vlan501.addr_gen_mode=3
      ip addr add 2001:db8:2:1::3/64 dev vlan501
    fi
  
    brctl addif vlan501 eth1
  
    ip link set dev vlan501 up
    exit 0
ok: [x3] => 
  msg: |-
    vlan configuration for x3
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/eth1.502 ]; then
      ip link add link eth1 name eth1.502 type vlan id 502
      ip link set dev eth1.502 up
    fi
    if [ ! -e /sys/devices/virtual/net/vlan502 ]; then
      brctl addbr vlan502
      ip link set dev vlan502 address 52:dc:ca:fd:04:00
  
      ip link set dev vlan502 mtu 1320
      ip addr flush dev vlan502
      sysctl -w net.ipv6.conf.vlan502.addr_gen_mode=3
      ip addr add 2001:db8:2:2::4/64 dev vlan502
    fi
  
    brctl addif vlan502 eth1.502
  
    ip link set dev vlan502 up
    exit 0

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for dut, x1, x2, x3

TASK [template] ****************************************************************
changed: [x1]
changed: [x2]
changed: [dut]
changed: [x3]

TASK [set_fact] ****************************************************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
changed: [x1]
changed: [x2]
changed: [dut]
changed: [x3]

TASK [run vtysh to import vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Find configuration template for ospf] ************************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface vlan500
    ! VLAN ospf_1 (500) -> [x1]
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    interface vlan501
    ! VLAN ospf_2 (501) -> [x2]
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    interface vlan502
    ! VLAN ospf_3 (502) -> [x3]
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.1
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [x1] => 
  msg: |-
    ospf configuration for x1
    =========================================
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface vlan500
    ! VLAN ospf_1 (500) -> [dut]
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.2
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [x2] => 
  msg: |-
    ospf configuration for x2
    =========================================
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface vlan501
    ! VLAN ospf_2 (501) -> [dut]
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.3
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [x3] => 
  msg: |-
    ospf configuration for x3
    =========================================
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface vlan502
    ! VLAN ospf_3 (502) -> [dut]
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.4
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for dut, x1, x2, x3

TASK [template] ****************************************************************
changed: [dut]
changed: [x1]
changed: [x3]
changed: [x2]

TASK [set_fact] ****************************************************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [x2]
changed: [dut]
changed: [x1]
changed: [x3]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=35   changed=7    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
x1                         : ok=34   changed=6    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
x2                         : ok=34   changed=6    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
x3                         : ok=34   changed=6    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   



This lab tests OSPFv3 adjacencies on VLAN interfaces with non-default MTU
settings. The adjacency establishment could fail due to MTU mismatch.

Failure to establish X2-DUT adjacency means that the VLAN interface does not
get the correct MTU. Failure to establish X1-DUT adjacency indicates a
potential problem with system MTU.

