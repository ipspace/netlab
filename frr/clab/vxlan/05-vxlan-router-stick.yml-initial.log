[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [Find device readiness script] ********************************************
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [Wait for device to become ready] *****************************************
skipping: [ros]
skipping: [s1]
skipping: [h1]
skipping: [h2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ros, s1, h1, h2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [Find configuration template for normalize] *******************************
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [s1]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ros]
skipping: [s1]
skipping: [h1]
skipping: [h2]

TASK [Deploy normalize configuration] ******************************************
skipping: [ros]
skipping: [s1]
skipping: [h1]
skipping: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ros, s1, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [Find configuration template for initial] *********************************
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [s1]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.2 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.2 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [ros] => 
  msg: |-
    initial configuration for ros
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1600
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname ros
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description ros -> s1
     ip address 10.1.0.1/30
    !
    interface vlan1000
     no shutdown
     description VLAN red (1000) -> [h1,s1]
     ip address 172.16.0.2/24
    !
    interface vlan1001
     no shutdown
     description VLAN blue (1001) -> [h2,s1]
     ip address 172.16.1.2/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1600
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.1/32
    !
    interface eth1
     no shutdown
     description s1 -> ros
     ip address 10.1.0.2/30
    !
    interface eth2
     no shutdown
     description [Access VLAN red] s1 -> h1
     ! no ip address
    !
    interface eth3
     no shutdown
     description [Access VLAN blue] s1 -> h2
     ! no ip address
    !
    interface vlan1000
     no shutdown
     description VLAN red (1000) -> [h1,ros]
     ! no ip address
    !
    interface vlan1001
     no shutdown
     description VLAN blue (1001) -> [h2,ros]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for ros, s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Attempt to load VRF kernel module] ***************************************
changed: [ros -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [ros]
skipping: [s1]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for ros, s1

TASK [template] ****************************************************************
changed: [ros]
changed: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [ros]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [ros]
changed: [s1]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [ros]
skipping: [s1]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-ikvw5jit.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [ros]
ok: [s1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=vrf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=vxlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [ros]
ok: [s1]

TASK [Find configuration template for vlan] ************************************
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ros] => 
  msg: |-
    vlan configuration for ros
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
      brctl addbr vlan1000
      ip link set dev vlan1000 address 52:dc:ca:fd:02:00
  
      ip link set dev vlan1000 mtu 1500
      ip addr flush dev vlan1000
      ip addr add 172.16.0.2/24 dev vlan1000
    fi
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
      brctl addbr vlan1001
      ip link set dev vlan1001 address 52:dc:ca:fd:02:01
  
      ip link set dev vlan1001 mtu 1500
      ip addr flush dev vlan1001
      ip addr add 172.16.1.2/24 dev vlan1001
    fi
  
  
    ip link set dev vlan1000 up
    ip link set dev vlan1001 up
    exit 0
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
      brctl addbr vlan1000
      ip link set dev vlan1000 address 52:dc:ca:fd:01:00
  
      ip addr flush dev vlan1000
    fi
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
      brctl addbr vlan1001
      ip link set dev vlan1001 address 52:dc:ca:fd:01:01
  
      ip addr flush dev vlan1001
    fi
  
    brctl addif vlan1000 eth2
    brctl addif vlan1001 eth3
  
    ip link set dev vlan1000 up
    ip link set dev vlan1001 up
    exit 0

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for ros, s1

TASK [template] ****************************************************************
changed: [ros]
changed: [s1]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
changed: [s1]
changed: [ros]

TASK [run vtysh to import vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [ros]
skipping: [s1]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [ros]
ok: [s1]

TASK [Find configuration template for ospf] ************************************
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ros] => 
  msg: |-
    ospf configuration for ros
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! ros -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.1
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! s1 -> ros
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for ros, s1

TASK [template] ****************************************************************
changed: [ros]
changed: [s1]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [ros]
skipping: [s1]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [s1]
changed: [ros]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [ros]
ok: [s1]

TASK [Find configuration template for vrf] *************************************
skipping: [s1]
ok: [ros]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [s1]
ok: [ros]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
ok: [ros] => 
  msg: |-
    vrf configuration for ros
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
    # Create VRF tables
    if [ ! -e /sys/devices/virtual/net/tenant ]; then
    ip link add tenant type vrf table 100
    fi
    ip link set tenant up
  
    # Move interfaces and loopbacks to vrfs
    sysctl -qw net.ipv6.conf.vlan1000.keep_addr_on_down=1
    ip link set vlan1000 master tenant
    sysctl -qw net.ipv6.conf.vlan1001.keep_addr_on_down=1
    ip link set vlan1001 master tenant
  
    cat >/tmp/vrf_config <<CONFIG
    vrf tenant
     exit-vrf
    !
    router bgp 65000
    !
    !
    !
    ! OSPFv2 FRR configuration
    !
    router ospf vrf tenant
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
     redistribute connected
  
    exit
    !
    interface vlan1000
    ! VLAN red (1000) -> [h1,s1]
     ip ospf area 0.0.0.0
    !
    interface vlan1001
    ! VLAN blue (1001) -> [h2,s1]
     ip ospf area 0.0.0.0
    !
  
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?

TASK [Deploy vrf configuration] ************************************************
skipping: [s1]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for ros

TASK [template] ****************************************************************
changed: [ros]

TASK [set_fact] ****************************************************************
ok: [ros]

TASK [run /tmp/config.sh to deploy vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
changed: [ros]

TASK [run vtysh to import vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
skipping: [ros]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [ros]
ok: [s1]

TASK [Find configuration template for vxlan] ***********************************
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ros] => 
  msg: |-
    vxlan configuration for ros
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
  
  
    # Create L3 VNIs with bridges and add to correct vrf table
  
    # Create VXLAN L2 interface per vni
    ip link add vxlan101000 type vxlan \
      id 101000 \
      dstport 4789 \
      local 10.0.0.2
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
    brctl addbr vlan1000
    ip link set up dev vlan1000
    fi
    brctl addif vlan1000 vxlan101000
    brctl stp vlan1000 off
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan101000
    ip link set up dev vxlan101000
  
    bridge fdb append 00:00:00:00:00:00 dev vxlan101000 dst 10.0.0.1
    # Create VXLAN L2 interface per vni
    ip link add vxlan101001 type vxlan \
      id 101001 \
      dstport 4789 \
      local 10.0.0.2
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
    brctl addbr vlan1001
    ip link set up dev vlan1001
    fi
    brctl addif vlan1001 vxlan101001
    brctl stp vlan1001 off
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan101001
    ip link set up dev vxlan101001
  
    bridge fdb append 00:00:00:00:00:00 dev vxlan101001 dst 10.0.0.1
  
    exit $?
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
  
  
    # Create L3 VNIs with bridges and add to correct vrf table
  
    # Create VXLAN L2 interface per vni
    ip link add vxlan101000 type vxlan \
      id 101000 \
      dstport 4789 \
      local 10.0.0.1
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
    brctl addbr vlan1000
    ip link set up dev vlan1000
    fi
    brctl addif vlan1000 vxlan101000
    brctl stp vlan1000 off
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan101000
    ip link set up dev vxlan101000
  
    bridge fdb append 00:00:00:00:00:00 dev vxlan101000 dst 10.0.0.2
    # Create VXLAN L2 interface per vni
    ip link add vxlan101001 type vxlan \
      id 101001 \
      dstport 4789 \
      local 10.0.0.1
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
    brctl addbr vlan1001
    ip link set up dev vlan1001
    fi
    brctl addif vlan1001 vxlan101001
    brctl stp vlan1001 off
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan101001
    ip link set up dev vxlan101001
  
    bridge fdb append 00:00:00:00:00:00 dev vxlan101001 dst 10.0.0.2
  
    exit $?

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for ros, s1

TASK [template] ****************************************************************
changed: [s1]
changed: [ros]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [run /tmp/config.sh to deploy vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/frr.j2] ***
changed: [s1]
changed: [ros]

TASK [run vtysh to import vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/frr.j2] ***
skipping: [ros]
skipping: [s1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
ros                        : ok=54   changed=11   unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
s1                         : ok=46   changed=8    unreachable=0    failed=0    skipped=18   rescued=0    ignored=0   



The devices under test are VLAN-to-VXLAN bridge and VXLAN router-on-a-stick.
Assuming 'vxlan-bridging' test case succeeded, this one tests VXLAN-to-VXLAN
routing

* h1 and h2 should be able to ping each other

