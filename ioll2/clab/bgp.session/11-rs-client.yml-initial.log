[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r2]
ok: [r3]
ok: [rs]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [r2]
ok: [r3]
ok: [rs]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [r2]
skipping: [r3]
skipping: [rs]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/ioll2-clab.yml for dut

TASK [Check if 'sshpass' is installed] *****************************************
changed: [dut -> localhost]

TASK [Execute local ssh command to check ioll2 readiness] **********************
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check ioll2 readiness (20 retries left).
changed: [dut -> localhost]

TASK [Confirm dut SSH server works] ********************************************
ok: [dut] => 
  msg: Node dut is ready.

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r2, r3, rs

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [r2]
ok: [r3]
ok: [rs]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [r2]
ok: [r3]
ok: [rs]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.10/32
    !
    interface eth1
     no shutdown
     description r2 -> [dut,rs] [external]
     ip address 172.16.0.10/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r3] => 
  msg: |-
    initial configuration for r3
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r3
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description r3 -> dut [external]
     ip address 10.1.0.2/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [rs] => 
  msg: |-
    initial configuration for rs
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname rs
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description rs -> [dut,r2] [external]
     ip address 172.16.0.3/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host r2 10.0.0.10 172.16.0.10
    ip host r3 10.0.0.2 10.1.0.2
    ip host rs 10.0.0.3 172.16.0.3
    !
    ip routing
    !
    !
    interface Loopback0
     ip address 10.0.0.1 255.255.255.255
    !
    interface Ethernet0/0
     no lldp transmit
     no lldp receive
    !
    interface Ethernet0/1
     no shutdown
     no switchport
     description dut -> [r2,rs] [external]
     mtu 1500
     ip address 172.16.0.1 255.255.255.0
    !
    interface Ethernet0/2
     no shutdown
     no switchport
     description dut -> r3 [external]
     mtu 1500
     ip address 10.1.0.1 255.255.255.252
    !
    !
    line vty 0 4
     exec-timeout 0 0
    !
    no banner exec
    no banner login
    no banner incoming

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [r2]
ok: [r3]
ok: [rs]
ok: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for r2, r3, rs

TASK [ios_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/ios.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r2 -> localhost]
changed: [r3 -> localhost]
changed: [rs -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [r2]
skipping: [r3]
skipping: [rs]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for r2, r3, rs

TASK [template] ****************************************************************
changed: [rs]
changed: [r3]
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r2]
ok: [r3]
ok: [rs]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [r2]
changed: [rs]
changed: [r3]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [r2]
skipping: [r3]
skipping: [rs]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r2]
ok: [r3]
ok: [rs]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r2, r3, rs => (item=bgp)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [r2]
ok: [r3]
ok: [rs]
ok: [dut]

TASK [Find configuration template for bgp] *************************************
ok: [r2]
ok: [r3]
ok: [rs]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r2] => 
  msg: |-
    bgp configuration for r2
    =========================================
    !
    router bgp 65001
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.10
    !
      neighbor 172.16.0.3 remote-as 65100
      neighbor 172.16.0.3 description rs
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.10/32
    !
    !
    !
      neighbor 172.16.0.3 activate
      no neighbor 172.16.0.3 send-community all
      neighbor 172.16.0.3 send-community standard
      neighbor 172.16.0.3 send-community large
    !
    !
    !
    do write
ok: [r3] => 
  msg: |-
    bgp configuration for r3
    =========================================
    !
    router bgp 65002
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor 10.1.0.1 remote-as 65000
      neighbor 10.1.0.1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.2/32
    !
    !
    !
      neighbor 10.1.0.1 activate
      no neighbor 10.1.0.1 send-community all
      neighbor 10.1.0.1 send-community standard
      neighbor 10.1.0.1 send-community large
    !
    !
    !
    do write
ok: [rs] => 
  msg: |-
    bgp configuration for rs
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 172.16.0.1 remote-as 65000
      neighbor 172.16.0.1 description dut
    !
      neighbor 172.16.0.10 remote-as 65001
      neighbor 172.16.0.10 description r2
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.3/32
    !
    !
    !
      neighbor 172.16.0.1 activate
      no neighbor 172.16.0.1 send-community all
      neighbor 172.16.0.1 send-community standard
      neighbor 172.16.0.1 send-community large
    !
      neighbor 172.16.0.10 activate
      no neighbor 172.16.0.10 send-community all
      neighbor 172.16.0.10 send-community standard
      neighbor 172.16.0.10 send-community large
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    !
    ip bgp-community new-format
    !
    router bgp 65000
     no bgp default ipv4-unicast
     bgp update-delay 5
     bgp nopeerup-delay cold-boot 1
     bgp nopeerup-delay user-initiated 1
     bgp router-id 10.0.0.1
      neighbor 172.16.0.3 remote-as 65100
      neighbor 172.16.0.3 description rs
  
      neighbor 10.1.0.2 remote-as 65002
      neighbor 10.1.0.2 description r3
  
    !
     address-family ipv4
      bgp scan-time 5
  
    !
      network 10.0.0.1 mask 255.255.255.255
  
    !
    !
      neighbor 172.16.0.3 activate
      neighbor 172.16.0.3 advertisement-interval 0
      neighbor 172.16.0.3 send-community standard
  
      neighbor 10.1.0.2 activate
      neighbor 10.1.0.2 advertisement-interval 0
      neighbor 10.1.0.2 send-community standard
  
    !

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [r2]
ok: [r3]
ok: [rs]
ok: [dut]

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for r2, r3, rs

TASK [ios_config: deploying bgp from /home/pipi/net101/tools/netsim/ansible/templates/bgp/ios.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [r3]
changed: [r2]
changed: [rs]

TASK [set_fact] ****************************************************************
ok: [r2]
ok: [r3]
ok: [rs]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [r2]
skipping: [r3]
skipping: [rs]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [r2]
changed: [r3]
changed: [rs]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-custom-config.yml for dut, r2, rs => (item=bgp.session)

TASK [Find configuration template] *********************************************
ok: [r2]
ok: [rs]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r2]
skipping: [rs]

TASK [Check is the configuration template is a file] ***************************
ok: [r2 -> localhost]
ok: [rs -> localhost]
ok: [dut -> localhost]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r2]
skipping: [rs]

TASK [Process template /home/pipi/net101/tools/netsim/extra/bgp.session/ios.j2 for dut] ***
skipping: [r2]
skipping: [rs]
skipping: [dut]

TASK [Find custom configuration deployment script] *****************************
ok: [r2]
ok: [rs]
ok: [dut]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for r2, rs

TASK [ios_config: deploying bgp.session from /home/pipi/net101/tools/netsim/extra/bgp.session/ios.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [rs]
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r2]
ok: [rs]

TASK [run /tmp/config.sh to deploy bgp.session config from /home/pipi/net101/tools/netsim/extra/bgp.session/frr.j2] ***
changed: [r2]
changed: [rs]

TASK [run vtysh to import bgp.session config from /home/pipi/net101/tools/netsim/extra/bgp.session/frr.j2] ***
skipping: [r2]
skipping: [rs]

PLAY RECAP *********************************************************************
dut                        : ok=27   changed=5    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0   
r2                         : ok=31   changed=7    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
r3                         : ok=23   changed=5    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
rs                         : ok=31   changed=7    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   



Use this topology to test the 'disable first AS check ' functionality. The DUT has
to accept EBGP updates where the first AS in the AS path is not equal to the neighbor's
AS (the neighbor is a route server).

