/home/pipi/.local/lib/python3.10/site-packages/paramiko/pkey.py:100: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "cipher": algorithms.TripleDES,
/home/pipi/.local/lib/python3.10/site-packages/paramiko/transport.py:259: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "class": algorithms.TripleDES,
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [dut2]
ok: [x1]
ok: [x2]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [dut2]
ok: [x1]
ok: [x2]

TASK [Wait for device to become ready] *****************************************
skipping: [x1]
skipping: [x2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/vyos-clab.yml for dut, dut2

TASK [wait_for_connection] *****************************************************
ok: [dut2]
ok: [dut]

TASK [wait_for] ****************************************************************
ok: [dut]
ok: [dut2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, dut2, x1, x2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [dut2]
ok: [x1]
ok: [x2]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [dut2]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [dut2]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [dut2]
ok: [x1]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [dut2]
skipping: [x1]
skipping: [x2]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [dut2]
skipping: [x1]
skipping: [x2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, dut2, x1, x2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [dut2]
ok: [x1]
ok: [x2]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [dut2]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [dut2]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [dut2]
ok: [x1]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
    set system host-name 'dut'
  
  
    set interfaces dummy dum0 address 2001:db8:1::1/128
  
  
  
    set interfaces ethernet eth1 description 'dut -> x1 [external]'
  
    set interfaces ethernet eth1 mtu 1500
  
  
    set interfaces ethernet eth1 address 2001:db8:3::1/64;
  
  
  
  
    set interfaces ethernet eth2 description 'dut -> x2 [external]'
  
    set interfaces ethernet eth2 mtu 1500
  
  
    set interfaces ethernet eth2 address 2001:db8:3:1::1/64;
  
  
  
  
    set interfaces ethernet eth3 description 'dut -> dut2 [external]'
  
    set interfaces ethernet eth3 mtu 1500
  
  
    set interfaces ethernet eth3 address 2001:db8:cafe:e01::1/64;
  
  
  
  
    set interfaces dummy dum1 description 'dut -> stub'
  
  
  
    set interfaces dummy dum1 address 2001:db8:cafe:e42::1/64;
  
  
  
    set service lldp interface all
    >/dev/null 2>/dev/null set service lldp interface eth0 disable
    >/dev/null 2>/dev/null set service lldp interface eth0 mode disable
  
    set service router-advert interface eth1
    set service router-advert interface eth2
    set service router-advert interface eth3
  
    set service ssh
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
  
    # Restart FRR to pick up the new hostname
    sudo service frr restart
ok: [dut2] => 
  msg: |-
    initial configuration for dut2
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
    set system host-name 'dut2'
  
  
    set interfaces dummy dum0 address 2001:db8:1::2/128
  
  
  
    set interfaces ethernet eth1 description 'dut2 -> dut [external]'
  
    set interfaces ethernet eth1 mtu 1500
  
  
    set interfaces ethernet eth1 address 2001:db8:cafe:e01::2/64;
  
  
  
    set service lldp interface all
    >/dev/null 2>/dev/null set service lldp interface eth0 disable
    >/dev/null 2>/dev/null set service lldp interface eth0 mode disable
  
    set service router-advert interface eth1
  
    set service ssh
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
  
    # Restart FRR to pick up the new hostname
    sudo service frr restart
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    log file /tmp/logging
  
    !
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1::3/128
    !
    interface eth1
     no shutdown
     description x1 -> dut [external]
     ! no ip address
     ipv6 address 2001:db8:3::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    !
    exit 0
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x2
    !
    log file /tmp/logging
  
    !
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1::4/128
    !
    interface eth1
     no shutdown
     description x2 -> dut [external]
     ! no ip address
     ipv6 address 2001:db8:3:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    !
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for dut, dut2
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for x1, x2

TASK [set_fact] ****************************************************************
ok: [dut]
ok: [dut2]

TASK [template] ****************************************************************
changed: [dut]
changed: [dut2]

TASK [execute config-initial.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/vyos.j2] ***
changed: [dut2]
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [x1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [x1]
skipping: [x2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for x1, x2

TASK [template] ****************************************************************
changed: [x1]
changed: [x2]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [x2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [x2]
changed: [x1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [x1]
skipping: [x2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [dut2]
ok: [x1]
ok: [x2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, dut2, x1, x2 => (item=bgp)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [dut2]
ok: [x1]
ok: [x2]

TASK [Find configuration template for bgp] *************************************
ok: [dut]
ok: [dut2]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [dut2]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [dut]
ok: [dut2]
ok: [x1]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut2] => 
  msg: |-
    bgp configuration for dut2
    =========================================
  
    set protocols bgp system-as 65001
  
    set protocols bgp parameters router-id 10.0.0.2
  
  
  
    set protocols bgp neighbor 2001:db8:cafe:e01::1 remote-as 65000
    set protocols bgp neighbor 2001:db8:cafe:e01::1 description 'dut'
  
  
  
  
  
    # Work on Family ipv6
  
  
    set protocols bgp address-family ipv6-unicast network 2001:db8:1::2/128
  
  
  
  
  
    set protocols bgp neighbor 2001:db8:cafe:e01::1 address-family ipv6-unicast soft-reconfiguration inbound
  
    set protocols bgp neighbor 2001:db8:cafe:e01::1 address-family ipv6-unicast nexthop-self
  
    set protocols bgp neighbor 2001:db8:cafe:e01::1 address-family ipv6-unicast disable-send-community extended
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
  
    set protocols bgp system-as 65000
  
    set protocols bgp parameters router-id 10.0.0.1
  
  
  
    set protocols bgp neighbor 2001:db8:3::2 remote-as 65100
    set protocols bgp neighbor 2001:db8:3::2 description 'x1'
  
  
  
  
  
    set protocols bgp neighbor 2001:db8:3:1::2 remote-as 65101
    set protocols bgp neighbor 2001:db8:3:1::2 description 'x2'
  
  
  
  
  
    set protocols bgp neighbor 2001:db8:cafe:e01::2 remote-as 65001
    set protocols bgp neighbor 2001:db8:cafe:e01::2 description 'dut2'
  
  
  
  
  
    # Work on Family ipv6
  
  
  
    set protocols bgp address-family ipv6-unicast network 2001:db8:cafe:e42::/64
  
  
  
  
    set protocols bgp neighbor 2001:db8:3::2 address-family ipv6-unicast soft-reconfiguration inbound
  
    set protocols bgp neighbor 2001:db8:3::2 address-family ipv6-unicast nexthop-self
  
    set protocols bgp neighbor 2001:db8:3::2 address-family ipv6-unicast disable-send-community extended
  
  
  
    set protocols bgp neighbor 2001:db8:3:1::2 address-family ipv6-unicast soft-reconfiguration inbound
  
    set protocols bgp neighbor 2001:db8:3:1::2 address-family ipv6-unicast nexthop-self
  
    set protocols bgp neighbor 2001:db8:3:1::2 address-family ipv6-unicast disable-send-community extended
  
  
  
    set protocols bgp neighbor 2001:db8:cafe:e01::2 address-family ipv6-unicast soft-reconfiguration inbound
  
    set protocols bgp neighbor 2001:db8:cafe:e01::2 address-family ipv6-unicast nexthop-self
  
    set protocols bgp neighbor 2001:db8:cafe:e01::2 address-family ipv6-unicast disable-send-community extended
ok: [x1] => 
  msg: |-
    bgp configuration for x1
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 2001:db8:3::1 remote-as 65000
      neighbor 2001:db8:3::1 description dut
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1::3/128
    !
    !
    !
      neighbor 2001:db8:3::1 activate
      no neighbor 2001:db8:3::1 send-community all
      neighbor 2001:db8:3::1 send-community standard
      neighbor 2001:db8:3::1 send-community large
    !
    !
    !
    do write
ok: [x2] => 
  msg: |-
    bgp configuration for x2
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 2001:db8:3:1::1 remote-as 65000
      neighbor 2001:db8:3:1::1 description dut
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1::4/128
    !
    !
    !
      neighbor 2001:db8:3:1::1 activate
      no neighbor 2001:db8:3:1::1 send-community all
      neighbor 2001:db8:3:1::1 send-community standard
      neighbor 2001:db8:3:1::1 send-community large
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for dut, dut2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for x1, x2

TASK [set_fact] ****************************************************************
ok: [dut2]
ok: [dut]

TASK [template] ****************************************************************
changed: [dut]
changed: [dut2]

TASK [execute config-bgp.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/vyos.j2] ***
changed: [dut2]
changed: [dut]

TASK [template] ****************************************************************
changed: [x2]
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [x2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [x1]
skipping: [x2]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [x2]
changed: [x1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=28   changed=4    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
dut2                       : ok=28   changed=4    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
x1                         : ok=27   changed=5    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
x2                         : ok=26   changed=4    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   



Use this topology to test the origination and propagation
of IPv6 prefixes.

