[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s2]

TASK [Find device readiness script] ********************************************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s2]

TASK [Wait for device to become ready] *****************************************
skipping: [s1]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/eos-clab.yml for s2

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [s2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s2]

TASK [Find configuration template for normalize] *******************************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s2] => 
  msg: |-
    normalize configuration for s2
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0601
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0602
    !
    interface Ethernet3
     shutdown
     mac-address 52dc.cafe.0603

TASK [Deploy normalize configuration] ******************************************
skipping: [s1]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [eos_config: deploying normalize from /home/pipi/netlab_gh/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [s2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s2]

TASK [Find configuration template for initial] *********************************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s1]
ok: [h1]
ok: [h3]
ok: [h2]
ok: [h4]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.5 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.2.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.2.4/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.2.6 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.2.6 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.2.6 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.2.6 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.3/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.5 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.5 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.5 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.5 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.5 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
    set system host-name 's1'
  
    set vrf name customer table 100
  
    set interfaces bridge br0 description 'Global Switch Bridge'
    set interfaces bridge br0 enable-vlan
  
    set interfaces bridge br0 vif 1001
    set interfaces bridge br0 vif 1000
  
    set interfaces dummy dum0 address 10.0.0.5/32
  
  
  
    set interfaces ethernet eth1 description 's1 -> s2'
  
    set interfaces ethernet eth1 mtu 1600
  
    set interfaces ethernet eth1 address 10.1.0.1/30
  
  
  
  
  
    set interfaces ethernet eth2 description '[Access VLAN red] s1 -> h1'
  
    set interfaces ethernet eth2 mtu 1500
  
  
  
  
  
  
    set interfaces ethernet eth3 description '[Access VLAN blue] s1 -> h3'
  
    set interfaces ethernet eth3 mtu 1500
  
  
  
  
  
  
    set interfaces bridge br0 vif 1000 description 'VLAN red (1000) -> [h1,h2,s2] [external]'
  
    set interfaces bridge br0 vif 1000 mtu 1500
  
    set interfaces bridge br0 vif 1000 address 172.16.0.5/24
  
  
    set interfaces bridge br0 vif 1000 vrf customer
  
  
  
    set interfaces bridge br0 vif 1001 description 'VLAN blue (1001) -> [h3] [external]'
  
    set interfaces bridge br0 vif 1001 mtu 1500
  
    set interfaces bridge br0 vif 1001 address 172.16.1.5/24
  
  
    set interfaces bridge br0 vif 1001 vrf customer
  
  
    set service lldp interface all
    set service lldp interface eth0 disable
  
  
    set service ssh
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
  
    # Restart FRR to pick up the new hostname
    sudo service frr restart
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    hostname s2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    vrf instance customer
     rd 65000:1
    !
    ip routing vrf customer
    !
    !
    ip host h1 172.16.0.1
    ip host h2 172.16.0.2
    ip host h3 172.16.1.3
    ip host h4 172.16.2.4
    ip host s1 10.0.0.5 10.1.0.1
    ip host s1-customer 172.16.0.5 172.16.1.5
    ip host s2-customer 172.16.0.6 172.16.2.6
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.6/32
    !
    interface Ethernet1
     no switchport
     mtu 1600
     description s2 -> s1
     ip address 10.1.0.2/30
    !
     mac-address 52dc.cafe.0601
     no shutdown
    !
    interface Ethernet2
     no switchport
     description [Access VLAN red] s2 -> h2
    !
     mac-address 52dc.cafe.0602
     no shutdown
    !
    interface Ethernet3
     no switchport
     description [Access VLAN green] s2 -> h4
    !
     mac-address 52dc.cafe.0603
     no shutdown
    !
    interface Vlan1000
     vrf customer
     description VLAN red (1000) -> [h1,s1,h2] [external]
     ip address 172.16.0.6/24
    !
    interface Vlan1002
     vrf customer
     description VLAN green (1002) -> [h4] [external]
     ip address 172.16.2.6/24
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/vyos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4

TASK [wait_for_connection] *****************************************************
ok: [s1]

TASK [wait_for] ****************************************************************
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [template] ****************************************************************
changed: [s1]

TASK [execute config-initial.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/vyos.j2] ***
changed: [s1]

TASK [eos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/eos.j2] ***
changed: [s2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-b042cigs.sh] ***********************
changed: [h4 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vrf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vxlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=gateway)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=evpn)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
    set interfaces bridge br0 member interface eth2 native-vlan 1000
    set interfaces bridge br0 member interface eth3 native-vlan 1001
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    vlan 1002
     name green
    !
    vlan 1000
     name red
    !
  
    !
    interface Ethernet2
     switchport
     switchport access vlan 1000
    !
    interface Ethernet3
     switchport
     switchport access vlan 1002
    !
    interface Vlan1000
    !
    interface Vlan1002

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/vyos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [wait_for] ****************************************************************
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [template] ****************************************************************
changed: [s1]

TASK [execute config-vlan.sh to deploy vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/vyos.j2] ***
changed: [s1]

TASK [eos_config: deploying vlan from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [s1]
ok: [s2]

TASK [Find configuration template for routing] *********************************
skipping: [s1]
skipping: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]

TASK [Deploy routing configuration] ********************************************
skipping: [s1]
skipping: [s2]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [s1]
ok: [s2]

TASK [Find configuration template for bgp] *************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    bgp configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
  
    set protocols bgp system-as 65000
  
    set protocols bgp parameters router-id 10.0.0.5
  
  
  
    set protocols bgp neighbor 10.0.0.6 remote-as 65000
    set protocols bgp neighbor 10.0.0.6 description 's2'
  
    set protocols bgp neighbor 10.0.0.6 update-source dum0
  
  
  
  
    # Work on Family ipv4
  
  
    set protocols bgp address-family ipv4-unicast network 10.0.0.5/32
  
  
  
  
  
    set protocols bgp neighbor 10.0.0.6 address-family ipv4-unicast soft-reconfiguration inbound
  
    set protocols bgp neighbor 10.0.0.6 address-family ipv4-unicast nexthop-self
  
  
  
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [s2] => 
  msg: |-
    bgp configuration for s2
    =========================================
    !
    route-map next-hop-self-ipv4 permit 10
       match route-type external
       set ip next-hop peer-address
    !
    route-map next-hop-self-ipv4 permit 20
    !
    !
    router bgp 65000
      bgp advertise-inactive
      bgp log-neighbor-changes
      no bgp default ipv4-unicast
      no bgp default ipv6-unicast
      router-id 10.0.0.6
    !
      neighbor 10.0.0.5 remote-as 65000
      neighbor 10.0.0.5 description s1
      neighbor 10.0.0.5 update-source Loopback0
      neighbor 10.0.0.5 send-community standard extended large
    !
    !
     address-family ipv4
  
      network 10.0.0.6/32
    !
    !
    !
      neighbor 10.0.0.5 activate
      neighbor 10.0.0.5 route-map next-hop-self-ipv4 out
    !

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/vyos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [wait_for] ****************************************************************
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [template] ****************************************************************
changed: [s1]

TASK [execute config-bgp.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/vyos.j2] ***
changed: [s1]

TASK [eos_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for ospf] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
  
  
    set protocols ospf parameters router-id 10.0.0.5
  
  
  
  
    set protocols ospf interface dum0 passive
    set protocols ospf interface dum0 area 0.0.0.0
  
  
    set protocols ospf interface eth1 area 0.0.0.0
  
    set protocols ospf interface eth1 network point-to-point
  
  
  
    commit
    save
    exit
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.6
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! s2 -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/vyos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [wait_for] ****************************************************************
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [template] ****************************************************************
changed: [s1]

TASK [execute config-ospf.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/vyos.j2] ***
changed: [s1]

TASK [eos_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vrf] *************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vrf] *********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vrf configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
    set protocols bgp system-as 65000
  
    # Enter vrf sublevel
    edit vrf name customer
  
  
    set protocols bgp system-as 65000
  
    set protocols bgp parameters router-id 10.0.0.5
  
    set protocols bgp address-family ipv4-unicast rd vpn export 65000:1
    set protocols bgp address-family ipv4-unicast route-target vpn import "65000:1"
    set protocols bgp address-family ipv4-unicast route-target vpn export "65000:1"
    set protocols bgp address-family ipv4-unicast import vpn
    set protocols bgp address-family ipv4-unicast export vpn
    set protocols bgp address-family ipv4-unicast label vpn export auto
  
  
  
    set protocols bgp address-family ipv4-unicast redistribute connected
  
    # Define networks for VRF Loopback
  
  
  
    # Back to root level
    top
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [s2] => 
  msg: |-
    vrf configuration for s2
    =========================================
    !
    mpls ip
    !
    router bgp 65000
    !
     vrf customer
      router-id 10.0.0.6
      rd 65000:1
    !
      address-family ipv4
        redistribute connected

TASK [Deploy vrf configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/vyos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [wait_for] ****************************************************************
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [template] ****************************************************************
changed: [s1]

TASK [execute config-vrf.sh to deploy vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/vyos.j2] ***
changed: [s1]

TASK [eos_config: deploying vrf from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vxlan] ***********************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
  
    # Create VXLAN interface
    set interfaces vxlan vxlan21000 vni 21000
    set interfaces vxlan vxlan21000 source-address 10.0.0.5
    # And set UDP port to 4789
    set interfaces vxlan vxlan21000 port 4789
  
    # Add it to the global bridge
    ## NOTE: in the future we may want to switch to one-bridge-per-vni
    ##   (still to understand if single bridge can work with EVPN controlled VXLAN)
    set interfaces bridge br0 member interface vxlan21000 native-vlan 1000
  
    # Add VTEP Flood list
  
    # If flooding is based on EVPN, set 'parameters nolearning'
    set interfaces vxlan vxlan21000 parameters nolearning
  
  
    # Create VXLAN interface
    set interfaces vxlan vxlan21001 vni 21001
    set interfaces vxlan vxlan21001 source-address 10.0.0.5
    # And set UDP port to 4789
    set interfaces vxlan vxlan21001 port 4789
  
    # Add it to the global bridge
    ## NOTE: in the future we may want to switch to one-bridge-per-vni
    ##   (still to understand if single bridge can work with EVPN controlled VXLAN)
    set interfaces bridge br0 member interface vxlan21001 native-vlan 1001
  
    # Add VTEP Flood list
  
    # If flooding is based on EVPN, set 'parameters nolearning'
    set interfaces vxlan vxlan21001 parameters nolearning
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    interface vxlan 1
      vxlan source-interface Loopback0
      vxlan vlan 1000 vni 21000
      vxlan vlan 1002 vni 21002

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/vyos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [wait_for] ****************************************************************
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [template] ****************************************************************
changed: [s1]

TASK [execute config-vxlan.sh to deploy vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/vyos.j2] ***
changed: [s1]

TASK [eos_config: deploying vxlan from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module gateway on current device] *******
ok: [s1]
ok: [s2]

TASK [Find configuration template for gateway] *********************************
skipping: [s1]
skipping: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for gateway] *****************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]

TASK [Deploy gateway configuration] ********************************************
skipping: [s1]
skipping: [s2]

TASK [Figure out whether to deploy the module evpn on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for evpn] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for evpn] ********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    evpn configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
    # Configure Generic EVPN Stuff
    set protocols bgp address-family l2vpn-evpn advertise-svi-ip
    set protocols bgp address-family l2vpn-evpn advertise-all-vni
  
    set protocols bgp neighbor 10.0.0.6 address-family l2vpn-evpn nexthop-self
    set protocols bgp neighbor 10.0.0.6 address-family l2vpn-evpn soft-reconfiguration inbound
  
  
  
    # Configure VNI params
    set protocols bgp address-family l2vpn-evpn vni 21001 rd 10.0.0.5:1001
    set protocols bgp address-family l2vpn-evpn vni 21001 route-target import "65000:1001"
    set protocols bgp address-family l2vpn-evpn vni 21001 route-target export "65000:1001"
    set protocols bgp address-family l2vpn-evpn vni 21000 rd 10.0.0.5:1000
    set protocols bgp address-family l2vpn-evpn vni 21000 route-target import "65000:1000"
    set protocols bgp address-family l2vpn-evpn vni 21000 route-target export "65000:1000"
  
    # Work on L3VNI
  
    # If at least one VRF has evpn.transit_vni
    set protocols bgp address-family l2vpn-evpn advertise ipv4 unicast
  
    set vrf name customer protocols bgp address-family ipv4-unicast redistribute connected
    set vrf name customer protocols bgp address-family l2vpn-evpn advertise ipv4 unicast
    set vrf name customer vni '5042'
    set vrf name customer protocols bgp address-family l2vpn-evpn vni 5042
  
    set vrf name customer protocols bgp address-family l2vpn-evpn rd 65000:1
    set vrf name customer protocols bgp address-family l2vpn-evpn route-target import "65000:1"
    set vrf name customer protocols bgp address-family l2vpn-evpn route-target export "65000:1"
  
    # Need to create VXLAN and Bridge for L3VNI
    set interfaces vxlan vxlan5042 vni 5042
    set interfaces vxlan vxlan5042 source-address 10.0.0.5
    set interfaces vxlan vxlan5042 port 4789
    set interfaces vxlan vxlan5042 parameters nolearning
  
    # Dummy Bridge for L3VNI - See https://github.com/FRRouting/frr/issues/11212
    set interfaces bridge br5042 member interface vxlan5042
    set interfaces bridge br5042 description "Dummy Bridge for L3VNI 5042"
    set interfaces bridge br5042 vrf 'customer'
  
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [s2] => 
  msg: |-
    evpn configuration for s2
    =========================================
    !
    router bgp 65000
     address-family evpn
    !
      neighbor 10.0.0.5 activate
    !
     vlan 1002
      rd 10.0.0.6:1002
      route-target import 65000:1002
      route-target export 65000:1002
      redistribute learned
    !
     vlan 1000
      rd 10.0.0.6:1000
      route-target import 65000:1000
      route-target export 65000:1000
      redistribute learned
    !
     vrf customer
      rd 65000:1
      route-target import evpn 65000:1
      route-target export evpn 65000:1
      redistribute connected
    !
    interface vxlan 1
     vxlan vrf customer vni 5042

TASK [Deploy evpn configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/vyos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [wait_for] ****************************************************************
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [template] ****************************************************************
changed: [s1]

TASK [execute config-evpn.sh to deploy evpn config from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/vyos.j2] ***
changed: [s1]

TASK [eos_config: deploying evpn from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/eos.j2] ***
changed: [s2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h3                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h4                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
s1                         : ok=83   changed=14   unreachable=0    failed=0    skipped=33   rescued=0    ignored=0   
s2                         : ok=65   changed=8    unreachable=0    failed=0    skipped=18   rescued=0    ignored=0   



The device under test is a VLAN-to-VXLAN layer-3 switch between two access
VLANs and two VXLAN VNIs. Both EVPN PE-devices perform inter-VLAN routing
using transit VNI (symmetrical IRB) when needed.

All hosts should be able to ping each other.

Please note it might take a while for the lab to work due to STP learning
phase.

