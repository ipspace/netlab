[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h1]
ok: [h2]

TASK [Find device readiness script] ********************************************
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h1]
ok: [h2]

TASK [Wait for device to become ready] *****************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for l1, l2, spine, h1, h2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h1]
ok: [h2]

TASK [Find configuration template for normalize] *******************************
ok: [l1]
ok: [l2]
ok: [h1]
ok: [spine]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]

TASK [Deploy normalize configuration] ******************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for l1, l2, spine, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h1]
ok: [h2]

TASK [Find configuration template for initial] *********************************
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [l1] => 
  msg: |-
    initial configuration for l1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
    set system host-name 'l1'
  
  
    set interfaces bridge br0 description 'Global Switch Bridge'
    set interfaces bridge br0 enable-vlan
  
    set interfaces bridge br0 vif 1000
  
    set interfaces dummy dum0 address 10.0.0.3/32
  
  
  
    set interfaces ethernet eth1 description 'l1 -> spine'
  
    set interfaces ethernet eth1 mtu 1600
  
    set interfaces ethernet eth1 address 10.1.0.1/30
  
  
  
  
  
    set interfaces ethernet eth2 description '[Access VLAN red] l1 -> h1'
  
    set interfaces ethernet eth2 mtu 1500
  
  
  
  
  
  
    set interfaces bridge br0 vif 1000 description 'VLAN red (1000) -> [h1,h2,l2]'
  
  
  
  
  
  
    set service lldp interface all
    set service lldp interface eth0 disable
  
  
    set service ssh
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
  
    # Restart FRR to pick up the new hostname
    sudo service frr restart
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.1/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [l2] => 
  msg: |-
    initial configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set dev eth1 mtu 1600
    ip link set dev eth2 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname l2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description l2 -> spine
     ip address 10.1.0.5/30
    !
    interface eth2
     no shutdown
     description [Access VLAN red] l2 -> h2
     ! no ip address
    !
    interface vlan1000
     no shutdown
     description VLAN red (1000) -> [h1,l1,h2]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.2/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [spine] => 
  msg: |-
    initial configuration for spine
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
    set system host-name 'spine'
  
  
    set interfaces dummy dum0 address 10.0.0.5/32
  
  
  
    set interfaces ethernet eth1 description 'spine -> l1'
  
    set interfaces ethernet eth1 mtu 1600
  
    set interfaces ethernet eth1 address 10.1.0.2/30
  
  
  
  
  
    set interfaces ethernet eth2 description 'spine -> l2'
  
    set interfaces ethernet eth2 mtu 1600
  
    set interfaces ethernet eth2 address 10.1.0.6/30
  
  
  
  
    set service lldp interface all
    set service lldp interface eth0 disable
  
  
    set service ssh
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
  
    # Restart FRR to pick up the new hostname
    sudo service frr restart

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h2]
ok: [h1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for l1, spine
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for l2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [wait_for_connection] *****************************************************
ok: [l1]
ok: [spine]

TASK [wait_for] ****************************************************************
ok: [l1]
ok: [spine]

TASK [set_fact] ****************************************************************
ok: [l1]
ok: [spine]

TASK [set_fact] ****************************************************************
ok: [l1]
ok: [spine]

TASK [template] ****************************************************************
changed: [l1]
changed: [spine]

TASK [execute config-initial.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/vyos.j2] ***
changed: [spine]
changed: [l1]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [l2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [l2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for l2

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [l2]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [l2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-lxkr65oy.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for l1, l2, spine => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for l1, l2, spine => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for l1, l2, spine => (item=vxlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for l1, l2, spine => (item=evpn)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Find configuration template for vlan] ************************************
skipping: [spine]
ok: [l1]
ok: [l2]

TASK [fail] ********************************************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [spine]
ok: [l1] => 
  msg: |-
    vlan configuration for l1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
    set interfaces bridge br0 member interface eth2 native-vlan 1000
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [l2] => 
  msg: |-
    vlan configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
      brctl addbr vlan1000
  
  
      ip link set dev vlan1000 up
      ip addr flush dev vlan1000
    fi
  
    brctl addif vlan1000 eth2
    exit 0

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [spine]
ok: [l1]
ok: [l2]

TASK [Deploy vlan configuration] ***********************************************
skipping: [spine]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for l1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [wait_for_connection] *****************************************************
skipping: [l1]

TASK [wait_for] ****************************************************************
skipping: [l1]

TASK [set_fact] ****************************************************************
ok: [l1]

TASK [set_fact] ****************************************************************
ok: [l1]

TASK [template] ****************************************************************
changed: [l1]

TASK [execute config-vlan.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/vyos.j2] ***
changed: [l1]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
changed: [l2]

TASK [run vtysh to import vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [l2]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Find configuration template for bgp] *************************************
ok: [l1]
ok: [l2]
ok: [spine]

TASK [fail] ********************************************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [l1] => 
  msg: |-
    bgp configuration for l1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
  
    set protocols bgp system-as 65000
  
    set protocols bgp parameters router-id 10.0.0.3
  
  
  
    set protocols bgp neighbor 10.0.0.5 remote-as 65000
    set protocols bgp neighbor 10.0.0.5 description 'spine'
  
    set protocols bgp neighbor 10.0.0.5 update-source dum0
  
  
  
  
    set protocols bgp neighbor 10.1.0.2 remote-as 65100
    set protocols bgp neighbor 10.1.0.2 description 'spine'
  
  
    set protocols bgp neighbor 10.1.0.2 local-as 65201 no-prepend replace-as
  
  
  
    # Work on Family ipv4
  
  
    set protocols bgp address-family ipv4-unicast network 10.0.0.3/32
  
  
  
  
  
    set protocols bgp neighbor 10.1.0.2 address-family ipv4-unicast soft-reconfiguration inbound
  
    set protocols bgp neighbor 10.1.0.2 address-family ipv4-unicast nexthop-self
  
    set protocols bgp neighbor 10.1.0.2 address-family ipv4-unicast disable-send-community extended
  
  
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [spine] => 
  msg: |-
    bgp configuration for spine
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
  
    set protocols bgp system-as 65000
  
    set protocols bgp parameters router-id 10.0.0.5
    set protocols bgp parameters cluster-id 10.0.0.5
  
  
  
    set protocols bgp neighbor 10.0.0.3 remote-as 65000
    set protocols bgp neighbor 10.0.0.3 description 'l1'
  
    set protocols bgp neighbor 10.0.0.3 update-source dum0
  
  
  
  
    set protocols bgp neighbor 10.0.0.4 remote-as 65000
    set protocols bgp neighbor 10.0.0.4 description 'l2'
  
    set protocols bgp neighbor 10.0.0.4 update-source dum0
  
  
  
  
    set protocols bgp neighbor 10.1.0.1 remote-as 65201
    set protocols bgp neighbor 10.1.0.1 description 'l1'
  
  
    set protocols bgp neighbor 10.1.0.1 local-as 65100 no-prepend replace-as
  
  
  
    set protocols bgp neighbor 10.1.0.5 remote-as 65202
    set protocols bgp neighbor 10.1.0.5 description 'l2'
  
  
    set protocols bgp neighbor 10.1.0.5 local-as 65100 no-prepend replace-as
  
  
  
    # Work on Family ipv4
  
  
    set protocols bgp address-family ipv4-unicast network 10.0.0.5/32
  
  
  
  
  
    set protocols bgp neighbor 10.1.0.1 address-family ipv4-unicast soft-reconfiguration inbound
  
    set protocols bgp neighbor 10.1.0.1 address-family ipv4-unicast nexthop-self
  
    set protocols bgp neighbor 10.1.0.1 address-family ipv4-unicast disable-send-community extended
  
  
  
    set protocols bgp neighbor 10.1.0.5 address-family ipv4-unicast soft-reconfiguration inbound
  
    set protocols bgp neighbor 10.1.0.5 address-family ipv4-unicast nexthop-self
  
    set protocols bgp neighbor 10.1.0.5 address-family ipv4-unicast disable-send-community extended
  
  
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [l2] => 
  msg: |-
    bgp configuration for l2
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.0.0.5 remote-as 65000
      neighbor 10.0.0.5 description spine
      neighbor 10.0.0.5 update-source lo
    !
      neighbor 10.1.0.6 remote-as 65100
      neighbor 10.1.0.6 description spine
      neighbor 10.1.0.6 local-as 65202 no-prepend replace-as
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.4/32
    !
    !
    !
      neighbor 10.1.0.6 activate
      no neighbor 10.1.0.6 send-community all
      neighbor 10.1.0.6 send-community standard
      neighbor 10.1.0.6 send-community large
    !
    !
    !
    do write

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for l1, spine
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [wait_for_connection] *****************************************************
skipping: [l1]
skipping: [spine]

TASK [wait_for] ****************************************************************
skipping: [l1]
skipping: [spine]

TASK [set_fact] ****************************************************************
ok: [l1]
ok: [spine]

TASK [set_fact] ****************************************************************
ok: [l1]
ok: [spine]

TASK [template] ****************************************************************
changed: [spine]
changed: [l1]

TASK [execute config-bgp.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/vyos.j2] ***
changed: [l1]
changed: [spine]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [l2]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [l2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Find configuration template for vxlan] ***********************************
skipping: [spine]
ok: [l1]
ok: [l2]

TASK [fail] ********************************************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [spine]
ok: [l1] => 
  msg: |-
    vxlan configuration for l1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
  
    # Create VXLAN interface
    set interfaces vxlan vxlan1000 vni 1000
    set interfaces vxlan vxlan1000 source-address 10.0.0.3
    # And set UDP port to 4789
    set interfaces vxlan vxlan1000 port 4789
  
    # Add it to the global bridge
    ## NOTE: in the future we may want to switch to one-bridge-per-vni
    ##   (still to understand if single bridge can work with EVPN controlled VXLAN)
    set interfaces bridge br0 member interface vxlan1000 native-vlan 1000
  
    # Add VTEP Flood list
  
    # If flooding is based on EVPN, set 'parameters nolearning'
    set interfaces vxlan vxlan1000 parameters nolearning
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [l2] => 
  msg: |-
    vxlan configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
  
  
    # Determine max MTU used on interfaces, to configure VXLAN interface
  
    # Create L3 VNIs with bridges and add to correct vrf table
  
    # Create VXLAN L2 interface per vni
    ip link add vxlan1000 type vxlan \
      id 1000 \
      dstport 4789 \
      local 10.0.0.4 nolearning
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
    brctl addbr vlan1000
    ip link set up dev vlan1000
    fi
    brctl addif vlan1000 vxlan1000
    brctl stp vlan1000 off
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1600 addrgenmode none dev vxlan1000
    # Disable dynamic MAC learning for evpn, see https://docs.frrouting.org/en/latest/evpn.html
    bridge link set dev vxlan1000 learning off
    ip link set up dev vxlan1000
  
  
    exit $?

TASK [Find configuration deployment deploy_script for vxlan] *******************
skipping: [spine]
ok: [l1]
ok: [l2]

TASK [Deploy vxlan configuration] **********************************************
skipping: [spine]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for l1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [wait_for_connection] *****************************************************
skipping: [l1]

TASK [wait_for] ****************************************************************
skipping: [l1]

TASK [set_fact] ****************************************************************
ok: [l1]

TASK [set_fact] ****************************************************************
ok: [l1]

TASK [template] ****************************************************************
changed: [l1]

TASK [execute config-vxlan.sh to deploy vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/vyos.j2] ***
changed: [l1]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/frr.j2] ***
changed: [l2]

TASK [run vtysh to import vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/frr.j2] ***
skipping: [l2]

TASK [Figure out whether to deploy the module evpn on current device] **********
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Find configuration template for evpn] ************************************
ok: [l1]
ok: [l2]
ok: [spine]

TASK [fail] ********************************************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [l1] => 
  msg: |-
    evpn configuration for l1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
    # Configure Generic EVPN Stuff
    set protocols bgp address-family l2vpn-evpn advertise-svi-ip
    set protocols bgp address-family l2vpn-evpn advertise-all-vni
  
    set protocols bgp neighbor 10.0.0.5 address-family l2vpn-evpn nexthop-self
    set protocols bgp neighbor 10.0.0.5 address-family l2vpn-evpn soft-reconfiguration inbound
  
  
  
    # Configure VNI params
    set protocols bgp address-family l2vpn-evpn vni 1000 rd 10.0.0.3:1000
    set protocols bgp address-family l2vpn-evpn vni 1000 route-target import "65000:1000"
    set protocols bgp address-family l2vpn-evpn vni 1000 route-target export "65000:1000"
  
    # Work on L3VNI
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [l2] => 
  msg: |-
    evpn configuration for l2
    =========================================
    router bgp 65000
     address-family l2vpn evpn
      advertise-all-vni
      advertise-svi-ip
      advertise ipv4 unicast
  
    ! Configure explicit Route Targets and RD per L2 VNI; auto-derived differs
      vni 1000
       rd 10.0.0.4:1000
       route-target export 65000:1000
       route-target import 65000:1000
      exit-vni
  
      neighbor 10.0.0.5 activate
      neighbor 10.0.0.5 soft-reconfiguration inbound
  
     exit-address-family
    !
  
    exit
  
    ! L3 VRF EVPN handling
    !
    do write
ok: [spine] => 
  msg: |-
    evpn configuration for spine
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
    # Configure Generic EVPN Stuff
    set protocols bgp address-family l2vpn-evpn advertise-svi-ip
    set protocols bgp address-family l2vpn-evpn advertise-all-vni
  
    set protocols bgp neighbor 10.0.0.3 address-family l2vpn-evpn nexthop-self
    set protocols bgp neighbor 10.0.0.3 address-family l2vpn-evpn soft-reconfiguration inbound
  
    set protocols bgp neighbor 10.0.0.3 address-family l2vpn-evpn route-reflector-client
  
    set protocols bgp neighbor 10.0.0.4 address-family l2vpn-evpn nexthop-self
    set protocols bgp neighbor 10.0.0.4 address-family l2vpn-evpn soft-reconfiguration inbound
  
    set protocols bgp neighbor 10.0.0.4 address-family l2vpn-evpn route-reflector-client
  
  
    # Configure VNI params
  
    # Work on L3VNI
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit

TASK [Find configuration deployment deploy_script for evpn] ********************
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Deploy evpn configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for l1, spine
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [wait_for_connection] *****************************************************
skipping: [l1]
skipping: [spine]

TASK [wait_for] ****************************************************************
skipping: [l1]
skipping: [spine]

TASK [set_fact] ****************************************************************
ok: [l1]
ok: [spine]

TASK [set_fact] ****************************************************************
ok: [l1]
ok: [spine]

TASK [template] ****************************************************************
changed: [spine]
changed: [l1]

TASK [execute config-evpn.sh to deploy evpn config from /home/pipi/net101/tools/netsim/ansible/templates/evpn/vyos.j2] ***
changed: [spine]
changed: [l1]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy evpn config from /home/pipi/net101/tools/netsim/ansible/templates/evpn/frr.j2] ***
skipping: [l2]

TASK [run vtysh to import evpn config from /home/pipi/net101/tools/netsim/ansible/templates/evpn/frr.j2] ***
changed: [l2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h2                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
l1                         : ok=58   changed=10   unreachable=0    failed=0    skipped=18   rescued=0    ignored=0   
l2                         : ok=53   changed=11   unreachable=0    failed=0    skipped=16   rescued=0    ignored=0   
spine                      : ok=42   changed=6    unreachable=0    failed=0    skipped=22   rescued=0    ignored=0   



The devices under test are an EVPN PE-device and an EVPN route reflector. The
PE-device should originate EVPN routes with correct next-hop and the RR should
propagate EVPN AF routes between PE-devices, resulting in VXLAN-based VLAN
extension. However, the core routing protocol is not OSPF but EBGP faked with
BGP local-as settings. The overall design is thus EVPN IBGP between loopbacks
running over IPv4 EBGP.

* h1 and h2 should be able to ping each other

Please note it might take a while for the lab to work due to
STP learning phase

