[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for x1, x2

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [x1]
ok: [x2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for x1, x2, dut

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [x1]
skipping: [x2]
skipping: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [x1] => 
  msg: |-
    normalize configuration for x1
    =========================================
    !
    interface Ethernet1
     no switchport
     mac-address 52dc.cafe.0201
ok: [x2] => 
  msg: |-
    normalize configuration for x2
    =========================================
    !
    interface Ethernet1
     no switchport
     mac-address 52dc.cafe.0301

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [dut]
ok: [x1]
ok: [x2]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [x2]
changed: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for x1, x2, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [x1]
skipping: [x2]
skipping: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
    set system host-name 'dut'
  
  
    set interfaces bridge br0 description 'Global Switch Bridge'
    set interfaces bridge br0 enable-vlan
  
    set interfaces bridge br0 vif 1000
    set interfaces bridge br0 vif 1001
  
    set interfaces dummy dum0 address 2001:db8:1:1::1/64
  
  
  
    set interfaces ethernet eth1 description '[Access VLAN ospf_1] dut -> x1'
  
    set interfaces ethernet eth1 mtu 1400
  
  
  
  
  
  
    set interfaces ethernet eth2 description '[Access VLAN ospf_2] dut -> x2'
  
    set interfaces ethernet eth2 mtu 1280
  
  
  
  
  
  
    set interfaces bridge br0 vif 1000 description 'VLAN ospf_1 (1000) -> [x1]'
  
    set interfaces bridge br0 vif 1000 mtu 1400
  
  
    set interfaces bridge br0 vif 1000 address 2001:db8:2::1/64;
  
  
  
  
    set interfaces bridge br0 vif 1001 description 'VLAN ospf_2 (1001) -> [x2]'
  
    set interfaces bridge br0 vif 1001 mtu 1280
  
  
    set interfaces bridge br0 vif 1001 address 2001:db8:2:1::1/64;
  
  
  
    set service lldp interface all
    set service lldp interface eth0 disable
  
    set service router-advert interface br0.1000
    set service router-advert interface br0.1001
  
    set service ssh
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
  
    # Restart FRR to pick up the new hostname
    sudo service frr restart
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    hostname x1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ipv6 unicast-routing
    !
    !
    ipv6 host dut 2001:db8:1:1::1
    ipv6 host x2 2001:db8:1:3::1
    !
    interface defaults
     mtu 1400
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:1:2::1/64
    !
    interface Ethernet1
     no switchport
     description [Access VLAN ospf_1] x1 -> dut
    !
     mac-address 52dc.cafe.0201
     no shutdown
    !
    interface Vlan1000
     description VLAN ospf_1 (1000) -> [dut]
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:2::2/64
    !
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    hostname x2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ipv6 unicast-routing
    !
    !
    ipv6 host dut 2001:db8:1:1::1
    ipv6 host x1 2001:db8:1:2::1
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:1:3::1/64
    !
    interface Ethernet1
     no switchport
     mtu 1280
     description [Access VLAN ospf_2] x2 -> dut
    !
     mac-address 52dc.cafe.0301
     no shutdown
    !
    interface Vlan1001
     mtu 1280
     description VLAN ospf_2 (1001) -> [dut]
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:2:1::3/64
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for dut

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [x2]
changed: [x1]

TASK [wait_for_connection] *****************************************************
ok: [dut]

TASK [wait_for] ****************************************************************
ok: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [template] ****************************************************************
changed: [dut]

TASK [execute config-initial.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/vyos.j2] ***
changed: [dut]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2 => (item=ospf)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for vlan] ************************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    vlan configuration for dut
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
    set interfaces bridge br0 member interface eth1 native-vlan 1000
    set interfaces bridge br0 member interface eth2 native-vlan 1001
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [x1] => 
  msg: |-
    vlan configuration for x1
    =========================================
    vlan 1000
     name ospf_1
    !
  
    !
    interface Ethernet1
     switchport
     switchport access vlan 1000
    !
    interface Vlan1000
ok: [x2] => 
  msg: |-
    vlan configuration for x2
    =========================================
    vlan 1001
     name ospf_2
    !
  
    !
    interface Ethernet1
     switchport
     switchport access vlan 1001
    !
    interface Vlan1001

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [wait_for] ****************************************************************
skipping: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [template] ****************************************************************
changed: [dut]

TASK [execute config-vlan.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/vyos.j2] ***
changed: [dut]

TASK [eos_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/eos.j2] ***
changed: [x1]
changed: [x2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for ospf] ************************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
  
  
    set protocols ospfv3 parameters router-id 10.0.0.1
  
  
  
  
    set protocols ospfv3 interface dum0 passive
    set protocols ospfv3 interface dum0 area 0.0.0.0
  
  
    set protocols ospfv3 interface br0.1000 area 0.0.0.0
  
    set protocols ospfv3 interface br0.1000 network point-to-point
  
  
  
    set protocols ospfv3 interface br0.1001 area 0.0.0.0
  
    set protocols ospfv3 interface br0.1001 network point-to-point
  
  
  
    commit
    save
    exit
ok: [x1] => 
  msg: |-
    ospf configuration for x1
    =========================================
    !
    ! OSPFv3 configuration
    !
    interface Loopback0
    !
     ipv6 ospf 1 area 0.0.0.0
    !
    interface Vlan1000
    ! VLAN ospf_1 (1000) -> [dut]
     ipv6 ospf 1 area 0.0.0.0
     ipv6 ospf network point-to-point
    !
    !
    ipv6 router ospf 1
     router-id 10.0.0.2
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
ok: [x2] => 
  msg: |-
    ospf configuration for x2
    =========================================
    !
    ! OSPFv3 configuration
    !
    interface Loopback0
    !
     ipv6 ospf 1 area 0.0.0.0
    !
    interface Vlan1001
    ! VLAN ospf_2 (1001) -> [dut]
     ipv6 ospf 1 area 0.0.0.0
     ipv6 ospf network point-to-point
    !
    !
    ipv6 router ospf 1
     router-id 10.0.0.3
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [wait_for] ****************************************************************
skipping: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [template] ****************************************************************
changed: [dut]

TASK [execute config-ospf.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/vyos.j2] ***
changed: [dut]

TASK [eos_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/eos.j2] ***
changed: [x2]
changed: [x1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=38   changed=6    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
x1                         : ok=33   changed=4    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
x2                         : ok=33   changed=4    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   



This lab tests OSPFv3 adjacencies on VLAN interfaces with non-default MTU
settings. The adjacency establishment could fail due to MTU mismatch.

