/home/pipi/.local/lib/python3.10/site-packages/paramiko/pkey.py:100: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "cipher": algorithms.TripleDES,
/home/pipi/.local/lib/python3.10/site-packages/paramiko/transport.py:259: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "class": algorithms.TripleDES,
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]
ok: [s3]
ok: [s4]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]
ok: [d1]
ok: [d2]
ok: [d3]
ok: [d4]

TASK [Find device readiness script] ********************************************
ok: [s1]
ok: [s2]
ok: [s3]
ok: [s4]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]
ok: [d1]
ok: [d2]
ok: [d3]
ok: [d4]

TASK [Wait for device to become ready] *****************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [s4]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
skipping: [d1]
skipping: [d2]
skipping: [d3]
skipping: [d4]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3, s4, r1, r2, r3, r4, d1, d2, d3, d4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [s1]
ok: [s2]
ok: [s3]
ok: [s4]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]
ok: [d1]
ok: [d2]
ok: [d3]
ok: [d4]

TASK [Find configuration template for normalize] *******************************
ok: [s1]
ok: [s2]
ok: [s3]
ok: [s4]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]
ok: [d1]
ok: [d2]
ok: [d3]
ok: [d4]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [s4]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
skipping: [d1]
skipping: [d2]
skipping: [d3]
skipping: [d4]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [s1]
ok: [s2]
ok: [s3]
ok: [s4]
ok: [r2]
ok: [r1]
ok: [r4]
ok: [r3]
ok: [d1]
ok: [d3]
ok: [d2]
ok: [d4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [s4]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
skipping: [d1]
skipping: [d2]
skipping: [d3]
skipping: [d4]

TASK [Deploy normalize configuration] ******************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [s4]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
skipping: [d1]
skipping: [d2]
skipping: [d3]
skipping: [d4]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3, s4, r1, r2, r3, r4, d1, d2, d3, d4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [s1]
ok: [s2]
ok: [s3]
ok: [s4]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]
ok: [d1]
ok: [d2]
ok: [d3]
ok: [d4]

TASK [Find configuration template for initial] *********************************
ok: [s1]
ok: [s2]
ok: [s3]
ok: [s4]
ok: [r2]
ok: [r1]
ok: [r3]
ok: [r4]
ok: [d1]
ok: [d2]
ok: [d3]
ok: [d4]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [s4]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
skipping: [d1]
skipping: [d2]
skipping: [d3]
skipping: [d4]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s1]
ok: [s2]
ok: [s3]
ok: [s4]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]
ok: [d1]
ok: [d2]
ok: [d3]
ok: [d4]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
    set system host-name 's1'
  
  
    set interfaces bridge br0 description 'Global Switch Bridge'
    set interfaces bridge br0 enable-vlan
  
    set interfaces bridge br0 vif 700
  
    set interfaces dummy dum0 address 10.0.0.1/32
  
  
  
    set interfaces ethernet eth1 description 's1 -> s2'
  
  
  
  
  
  
  
    set interfaces ethernet eth2 description 's1 -> s3'
  
  
  
  
  
  
  
    set interfaces ethernet eth3 description 's1 -> s4'
  
  
  
  
  
  
  
    set interfaces ethernet eth4 description '[Access VLAN red] s1 -> r1'
  
  
  
  
  
  
  
    set interfaces ethernet eth5 description '[Access VLAN vlan_1] s1 -> d1'
  
  
  
  
  
  
  
    set interfaces bridge br0 description 'VLAN vlan_1 (1) -> [s3,d1,s2,s4,d2...]'
  
  
    set interfaces bridge br0 address 172.31.1.1/24
  
  
  
  
  
    set interfaces bridge br0 vif 700 description 'VLAN red (700) -> [s4,r1,s2,s3,r2...]'
  
  
  
  
  
  
    set service lldp interface all
    >/dev/null 2>/dev/null set service lldp interface eth0 disable
    >/dev/null 2>/dev/null set service lldp interface eth0 mode disable
  
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
  
    # Restart FRR to pick up the new hostname
    sudo service frr restart
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.5/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.6/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [r3] => 
  msg: |-
    initial configuration for r3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.7/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.7/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [r4] => 
  msg: |-
    initial configuration for r4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.8/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.8/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [d2] => 
  msg: |-
    initial configuration for d2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.10/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.10/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [d1] => 
  msg: |-
    initial configuration for d1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.9/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.9/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    cat <<SCRIPT >.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    export PATH=$PATH:/usr/sbin
    echo
    echo "Use sudo vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 s1
    172.31.1.1 br0.1.s1
    10.0.0.2 s2
    172.31.1.2 vlan1.s2
    10.0.0.3 s3
    172.31.1.3 vlan1.s3
    10.0.0.4 s4
    172.31.1.4 vlan1.s4
    172.31.1.5 r1 eth1.r1
    172.31.1.6 r2 eth1.r2
    172.31.1.7 r3 eth1.r3
    172.31.1.8 r4 eth1.r4
    172.31.1.9 d1 eth1.d1
    172.31.1.10 d2 eth1.d2
    172.31.1.11 d3 eth1.d3
    172.31.1.12 d4 eth1.d4
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Configure system defaults on Ubuntu
    #
    hostnamectl set-hostname s2
    APT_INSTALL=
    #
    if which gpg; then
      echo "Package gnupg already installed"
    else
      APT_INSTALL="$APT_INSTALL gnupg"
    fi
    #
    if which curl; then
      echo "Package curl already installed"
    else
      APT_INSTALL="$APT_INSTALL curl"
    fi
    #
    if which bridge; then
      echo "Package iproute2 already installed"
    else
      APT_INSTALL="$APT_INSTALL iproute2"
    fi
    #
    # APT_INSTALL always starts with a blank, so we can't just check if it's empty
    # The following hack turns a string that contains only whitespaces into
    # an empty string and removes leading whitespaces
    #
    APT_INSTALL=`echo $APT_INSTALL`
    if [ -n "$APT_INSTALL" ]; then
      echo "Installing packages $APT_INSTALL"
      apt-get update -qq && apt-get install -qq $APT_INSTALL
    fi
    #
    # Install FRR on a Ubuntu VM if needed
    #
    if which /usr/lib/frr/frrinit.sh; then
      echo "FRR already installed, skipping installation"
    else
      curl -s https://deb.frrouting.org/frr/keys.asc >/etc/apt/trusted.gpg.d/frr.asc
      FRRVER="frr-stable"
      echo deb https://deb.frrouting.org/frr $(lsb_release -s -c) $FRRVER > /etc/apt/sources.list.d/frr.list
      apt-get update -qq && apt-get install -qq frr frr-pythontools bridge-utils ethtool
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
    #
    # Enable FRR daemons
    #
  
    /usr/lib/frr/frrinit.sh restart
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
    ip link set eth3 down
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
    ip link set eth3 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s2
    !
    ip forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description s2 -> s1
     ! no ip address
    !
    interface eth2
     no shutdown
     description [Access VLAN red] s2 -> r2
     ! no ip address
    !
    interface eth3
     no shutdown
     description [Access VLAN vlan_1] s2 -> d2
     ! no ip address
    !
    interface eth1.700
     no shutdown
     description [SubIf VLAN red] s2 -> s1
     ! no ip address
    !
    interface eth1.1
     no shutdown
     description [SubIf VLAN vlan_1] s2 -> s1
     ! no ip address
    !
    interface vlan700
     no shutdown
     description VLAN red (700) -> [s4,s1,r1,s3,r2...]
     ! no ip address
    !
    interface vlan1
     no shutdown
     description VLAN vlan_1 (1) -> [s3,s1,d1,s4,d2...]
     ip address 172.31.1.2/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [s3] => 
  msg: |-
    initial configuration for s3
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    cat <<SCRIPT >.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    export PATH=$PATH:/usr/sbin
    echo
    echo "Use sudo vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 s1
    172.31.1.1 br0.1.s1
    10.0.0.2 s2
    172.31.1.2 vlan1.s2
    10.0.0.3 s3
    172.31.1.3 vlan1.s3
    10.0.0.4 s4
    172.31.1.4 vlan1.s4
    172.31.1.5 r1 eth1.r1
    172.31.1.6 r2 eth1.r2
    172.31.1.7 r3 eth1.r3
    172.31.1.8 r4 eth1.r4
    172.31.1.9 d1 eth1.d1
    172.31.1.10 d2 eth1.d2
    172.31.1.11 d3 eth1.d3
    172.31.1.12 d4 eth1.d4
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Configure system defaults on Ubuntu
    #
    hostnamectl set-hostname s3
    APT_INSTALL=
    #
    if which gpg; then
      echo "Package gnupg already installed"
    else
      APT_INSTALL="$APT_INSTALL gnupg"
    fi
    #
    if which curl; then
      echo "Package curl already installed"
    else
      APT_INSTALL="$APT_INSTALL curl"
    fi
    #
    if which bridge; then
      echo "Package iproute2 already installed"
    else
      APT_INSTALL="$APT_INSTALL iproute2"
    fi
    #
    # APT_INSTALL always starts with a blank, so we can't just check if it's empty
    # The following hack turns a string that contains only whitespaces into
    # an empty string and removes leading whitespaces
    #
    APT_INSTALL=`echo $APT_INSTALL`
    if [ -n "$APT_INSTALL" ]; then
      echo "Installing packages $APT_INSTALL"
      apt-get update -qq && apt-get install -qq $APT_INSTALL
    fi
    #
    # Install FRR on a Ubuntu VM if needed
    #
    if which /usr/lib/frr/frrinit.sh; then
      echo "FRR already installed, skipping installation"
    else
      curl -s https://deb.frrouting.org/frr/keys.asc >/etc/apt/trusted.gpg.d/frr.asc
      FRRVER="frr-stable"
      echo deb https://deb.frrouting.org/frr $(lsb_release -s -c) $FRRVER > /etc/apt/sources.list.d/frr.list
      apt-get update -qq && apt-get install -qq frr frr-pythontools bridge-utils ethtool
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
    #
    # Enable FRR daemons
    #
  
    /usr/lib/frr/frrinit.sh restart
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
    ip link set eth3 down
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
    ip link set eth3 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s3
    !
    ip forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description s3 -> s1
     ! no ip address
    !
    interface eth2
     no shutdown
     description [Access VLAN red] s3 -> r3
     ! no ip address
    !
    interface eth3
     no shutdown
     description [Access VLAN vlan_1] s3 -> d3
     ! no ip address
    !
    interface eth1.700
     no shutdown
     description [SubIf VLAN red] s3 -> s1
     ! no ip address
    !
    interface vlan1
     no shutdown
     description VLAN vlan_1 (1) -> [s1,d1,s2,s4,d2...]
     ip address 172.31.1.3/24
    !
    interface vlan700
     no shutdown
     description VLAN red (700) -> [s4,s1,r1,s2,r2...]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [d3] => 
  msg: |-
    initial configuration for d3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.11/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.11/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [d4] => 
  msg: |-
    initial configuration for d4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.12/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.12/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [s4] => 
  msg: |-
    initial configuration for s4
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    cat <<SCRIPT >.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    export PATH=$PATH:/usr/sbin
    echo
    echo "Use sudo vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 s1
    172.31.1.1 br0.1.s1
    10.0.0.2 s2
    172.31.1.2 vlan1.s2
    10.0.0.3 s3
    172.31.1.3 vlan1.s3
    10.0.0.4 s4
    172.31.1.4 vlan1.s4
    172.31.1.5 r1 eth1.r1
    172.31.1.6 r2 eth1.r2
    172.31.1.7 r3 eth1.r3
    172.31.1.8 r4 eth1.r4
    172.31.1.9 d1 eth1.d1
    172.31.1.10 d2 eth1.d2
    172.31.1.11 d3 eth1.d3
    172.31.1.12 d4 eth1.d4
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Configure system defaults on Ubuntu
    #
    hostnamectl set-hostname s4
    APT_INSTALL=
    #
    if which gpg; then
      echo "Package gnupg already installed"
    else
      APT_INSTALL="$APT_INSTALL gnupg"
    fi
    #
    if which curl; then
      echo "Package curl already installed"
    else
      APT_INSTALL="$APT_INSTALL curl"
    fi
    #
    if which bridge; then
      echo "Package iproute2 already installed"
    else
      APT_INSTALL="$APT_INSTALL iproute2"
    fi
    #
    # APT_INSTALL always starts with a blank, so we can't just check if it's empty
    # The following hack turns a string that contains only whitespaces into
    # an empty string and removes leading whitespaces
    #
    APT_INSTALL=`echo $APT_INSTALL`
    if [ -n "$APT_INSTALL" ]; then
      echo "Installing packages $APT_INSTALL"
      apt-get update -qq && apt-get install -qq $APT_INSTALL
    fi
    #
    # Install FRR on a Ubuntu VM if needed
    #
    if which /usr/lib/frr/frrinit.sh; then
      echo "FRR already installed, skipping installation"
    else
      curl -s https://deb.frrouting.org/frr/keys.asc >/etc/apt/trusted.gpg.d/frr.asc
      FRRVER="frr-stable"
      echo deb https://deb.frrouting.org/frr $(lsb_release -s -c) $FRRVER > /etc/apt/sources.list.d/frr.list
      apt-get update -qq && apt-get install -qq frr frr-pythontools bridge-utils ethtool
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
    #
    # Enable FRR daemons
    #
  
    /usr/lib/frr/frrinit.sh restart
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
    ip link set eth3 down
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
    ip link set eth3 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s4
    !
    ip forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description s4 -> s1
     ! no ip address
    !
    interface eth2
     no shutdown
     description [Access VLAN red] s4 -> r4
     ! no ip address
    !
    interface eth3
     no shutdown
     description [Access VLAN vlan_1] s4 -> d4
     ! no ip address
    !
    interface eth1.1
     no shutdown
     description [SubIf VLAN vlan_1] s4 -> s1
     ! no ip address
    !
    interface vlan700
     no shutdown
     description VLAN red (700) -> [s1,r1,s2,s3,r2...]
     ! no ip address
    !
    interface vlan1
     no shutdown
     description VLAN vlan_1 (1) -> [s3,s1,d1,s2,d2...]
     ip address 172.31.1.4/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s2, s3, s4
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for r1, r2, r3, r4, d1, d2, d3, d4

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [wait_for] ****************************************************************
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [template] ****************************************************************
changed: [s1]

TASK [execute config-initial.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/vyos.j2] ***
changed: [s1]

TASK [template] ****************************************************************
changed: [s2]
changed: [s4]
changed: [s3]

TASK [set_fact] ****************************************************************
ok: [s2]
ok: [s3]
ok: [s4]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [s3]
changed: [s2]
changed: [s4]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [s2]
skipping: [s3]
skipping: [s4]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]
ok: [d1]
ok: [d2]
ok: [d3]
ok: [d4]

TASK [Create a temporary file for the rendered script] *************************
changed: [d1 -> localhost]
changed: [d3 -> localhost]
changed: [r1 -> localhost]
changed: [r3 -> localhost]
changed: [d4 -> localhost]
changed: [d2 -> localhost]
changed: [r2 -> localhost]
changed: [r4 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [r2 -> localhost]
changed: [d1 -> localhost]
changed: [r1 -> localhost]
changed: [r3 -> localhost]
changed: [d4 -> localhost]
changed: [r4 -> localhost]
changed: [d3 -> localhost]
changed: [d2 -> localhost]

TASK [Copy script into running container at /tmp/config-r1_initial.sh] *********
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
skipping: [d1]
skipping: [d2]
skipping: [d3]
skipping: [d4]

TASK [Execute /tmp/config-r1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
skipping: [d1]
skipping: [d2]
skipping: [d3]
skipping: [d4]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [r1 -> localhost]
changed: [r2 -> localhost]
changed: [r3 -> localhost]
changed: [d2 -> localhost]
changed: [d1 -> localhost]
changed: [r4 -> localhost]
changed: [d3 -> localhost]
changed: [d4 -> localhost]

TASK [Remove temporary file /tmp/r1_initial-3wwb4uth.sh] ***********************
changed: [r1 -> localhost]
changed: [r4 -> localhost]
changed: [r3 -> localhost]
changed: [d2 -> localhost]
changed: [d4 -> localhost]
changed: [r2 -> localhost]
changed: [d3 -> localhost]
changed: [d1 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]
ok: [s3]
ok: [s4]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]
ok: [d1]
ok: [d2]
ok: [d3]
ok: [d4]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3, s4, r1, r2, r3, r4, d1, d2, d3, d4 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3, s4, r1, r2, r3, r4, d1, d2, d3, d4 => (item=routing)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s1]
ok: [s2]
ok: [s3]
ok: [s4]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]
ok: [d1]
ok: [d2]
ok: [d3]
ok: [d4]

TASK [Find configuration template for vlan] ************************************
ok: [s1]
ok: [s2]
skipping: [r1]
ok: [s3]
skipping: [r2]
skipping: [r3]
ok: [s4]
skipping: [r4]
skipping: [d1]
skipping: [d2]
skipping: [d3]
skipping: [d4]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [s4]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
skipping: [d1]
skipping: [d2]
skipping: [d3]
skipping: [d4]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [r1]
ok: [s1]
ok: [s2]
skipping: [r2]
ok: [s3]
skipping: [r3]
skipping: [r4]
ok: [s4]
skipping: [d1]
skipping: [d2]
skipping: [d3]
skipping: [d4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r1]
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
    set interfaces bridge br0 member interface eth1 allowed-vlan 700
    set interfaces bridge br0 member interface eth1 allowed-vlan 1
    set interfaces bridge br0 member interface eth2 native-vlan 1
    set interfaces bridge br0 member interface eth2 allowed-vlan 700
    set interfaces bridge br0 member interface eth2 allowed-vlan 1
    set interfaces bridge br0 member interface eth3 native-vlan 700
    set interfaces bridge br0 member interface eth3 allowed-vlan 700
    set interfaces bridge br0 member interface eth3 allowed-vlan 1
    set interfaces bridge br0 member interface eth4 native-vlan 700
    set interfaces bridge br0 member interface eth5 native-vlan 1
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
skipping: [r2]
skipping: [r3]
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/eth1.700 ]; then
      ip link add link eth1 name eth1.700 type vlan id 700
      ip link set dev eth1.700 up
    fi
    if [ ! -e /sys/devices/virtual/net/eth1.1 ]; then
      ip link add link eth1 name eth1.1 type vlan id 1
      ip link set dev eth1.1 up
    fi
    if [ ! -e /sys/devices/virtual/net/vlan700 ]; then
      ip link add vlan700 type bridge
      ip link set dev vlan700 address 52:dc:ca:fd:02:00
  
      ip addr flush dev vlan700
    fi
    if [ ! -e /sys/devices/virtual/net/vlan1 ]; then
      ip link add vlan1 type bridge
      ip link set dev vlan1 address 52:dc:ca:fd:02:01
  
      ip link set dev vlan1 mtu 1500
      ip addr flush dev vlan1
      ip addr add 172.31.1.2/24 dev vlan1
    fi
  
    ip link set dev eth2 master vlan700
    ip link set dev eth3 master vlan1
    ip link set dev eth1.700 master vlan700
    ip link set dev eth1.1 master vlan1
  
    ip link set dev vlan700 up
    ip link set dev vlan1 up
ok: [s3] => 
  msg: |-
    vlan configuration for s3
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/eth1.700 ]; then
      ip link add link eth1 name eth1.700 type vlan id 700
      ip link set dev eth1.700 up
    fi
    if [ ! -e /sys/devices/virtual/net/vlan1 ]; then
      ip link add vlan1 type bridge
      ip link set dev vlan1 address 52:dc:ca:fd:03:00
  
      ip link set dev vlan1 mtu 1500
      ip addr flush dev vlan1
      ip addr add 172.31.1.3/24 dev vlan1
    fi
    if [ ! -e /sys/devices/virtual/net/vlan700 ]; then
      ip link add vlan700 type bridge
      ip link set dev vlan700 address 52:dc:ca:fd:03:01
  
      ip addr flush dev vlan700
    fi
  
    ip link set dev eth1 master vlan1
    ip link set dev eth2 master vlan700
    ip link set dev eth3 master vlan1
    ip link set dev eth1.700 master vlan700
  
    ip link set dev vlan1 up
    ip link set dev vlan700 up
skipping: [r4]
skipping: [d1]
skipping: [d2]
ok: [s4] => 
  msg: |-
    vlan configuration for s4
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/eth1.1 ]; then
      ip link add link eth1 name eth1.1 type vlan id 1
      ip link set dev eth1.1 up
    fi
    if [ ! -e /sys/devices/virtual/net/vlan700 ]; then
      ip link add vlan700 type bridge
      ip link set dev vlan700 address 52:dc:ca:fd:04:00
  
      ip addr flush dev vlan700
    fi
    if [ ! -e /sys/devices/virtual/net/vlan1 ]; then
      ip link add vlan1 type bridge
      ip link set dev vlan1 address 52:dc:ca:fd:04:01
  
      ip link set dev vlan1 mtu 1500
      ip addr flush dev vlan1
      ip addr add 172.31.1.4/24 dev vlan1
    fi
  
    ip link set dev eth1 master vlan700
    ip link set dev eth2 master vlan700
    ip link set dev eth3 master vlan1
    ip link set dev eth1.1 master vlan1
  
    ip link set dev vlan700 up
    ip link set dev vlan1 up
skipping: [d3]
skipping: [d4]

TASK [Deploy vlan configuration] ***********************************************
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
skipping: [d1]
skipping: [d2]
skipping: [d3]
skipping: [d4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s2, s3, s4

TASK [wait_for_connection] *****************************************************
skipping: [s1]

TASK [wait_for] ****************************************************************
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]

TASK [template] ****************************************************************
changed: [s1]

TASK [execute config-vlan.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/vyos.j2] ***
changed: [s1]

TASK [template] ****************************************************************
changed: [s4]
changed: [s2]
changed: [s3]

TASK [set_fact] ****************************************************************
ok: [s2]
ok: [s3]
ok: [s4]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
changed: [s3]
changed: [s4]
changed: [s2]

TASK [run vtysh to import vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [s2]
skipping: [s3]
skipping: [s4]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [s1]
ok: [s2]
ok: [s3]
ok: [s4]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]
ok: [d1]
ok: [d2]
ok: [d3]
ok: [d4]

TASK [Find configuration template for routing] *********************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [s4]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [d1]
ok: [r4]
ok: [d2]
ok: [d3]
ok: [d4]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [s4]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
skipping: [d1]
skipping: [d2]
skipping: [d3]
skipping: [d4]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [s4]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]
ok: [d1]
ok: [d3]
ok: [d4]
ok: [d2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [s4]
ok: [r1] => 
  msg: |-
    routing configuration for r1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [r2] => 
  msg: |-
    routing configuration for r2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [r3] => 
  msg: |-
    routing configuration for r3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [d1] => 
  msg: |-
    routing configuration for d1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.31.1.3 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.31.1.3 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.31.1.3 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.31.1.3 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [r4] => 
  msg: |-
    routing configuration for r4
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [d2] => 
  msg: |-
    routing configuration for d2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.31.1.3 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.31.1.3 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.31.1.3 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.31.1.3 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [d3] => 
  msg: |-
    routing configuration for d3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.31.1.3 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.31.1.3 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.31.1.3 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.31.1.3 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [d4] => 
  msg: |-
    routing configuration for d4
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.31.1.3 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.31.1.3 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.31.1.3 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.31.1.3 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [s4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for r1, r2, r3, r4, d1, d2, d3, d4

TASK [Define script filename and determine whether to execute in netns] ********
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]
ok: [d1]
ok: [d2]
ok: [d3]
ok: [d4]

TASK [Create a temporary file for the rendered script] *************************
changed: [r1 -> localhost]
changed: [r2 -> localhost]
changed: [r3 -> localhost]
changed: [d1 -> localhost]
changed: [r4 -> localhost]
changed: [d2 -> localhost]
changed: [d3 -> localhost]
changed: [d4 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [r1 -> localhost]
changed: [r3 -> localhost]
changed: [r4 -> localhost]
changed: [r2 -> localhost]
changed: [d1 -> localhost]
changed: [d2 -> localhost]
changed: [d3 -> localhost]
changed: [d4 -> localhost]

TASK [Copy script into running container at /tmp/config-r1_routing.sh] *********
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
skipping: [d1]
skipping: [d2]
skipping: [d3]
skipping: [d4]

TASK [Execute /tmp/config-r1_routing.sh to deploy routing config based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
skipping: [d1]
skipping: [d2]
skipping: [d3]
skipping: [d4]

TASK [Container configuration for routing based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [r2 -> localhost]
changed: [r4 -> localhost]
changed: [r3 -> localhost]
changed: [d1 -> localhost]
changed: [r1 -> localhost]
changed: [d3 -> localhost]
changed: [d2 -> localhost]
changed: [d4 -> localhost]

TASK [Remove temporary file /tmp/r1_routing-hc3fbi54.sh] ***********************
changed: [r1 -> localhost]
changed: [r2 -> localhost]
changed: [r3 -> localhost]
changed: [d4 -> localhost]
changed: [d3 -> localhost]
changed: [r4 -> localhost]
changed: [d2 -> localhost]
changed: [d1 -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
d1                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
d2                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
d3                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
d4                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
r1                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
r2                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
r3                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
r4                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
s1                         : ok=29   changed=4    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
s2                         : ok=27   changed=4    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
s3                         : ok=27   changed=4    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
s4                         : ok=27   changed=4    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   



The topology tests whether the device deals correctly with VLAN 1
in a vlan.trunk:

* As a native VLAN
* As a regular (tagged) VLAN
* In a trunk where another VLAN is a native VLAN

All r* hosts should be able to ping each other and all d* hosts should
be able to ping each other.

Please note it might take a while for the lab to work due to
STP learning phase

