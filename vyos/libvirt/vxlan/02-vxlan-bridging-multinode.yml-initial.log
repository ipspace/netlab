[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h6]
ok: [h5]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, h6, s1, s2, s3

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h6]
ok: [h5]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [h5]
ok: [s1]
ok: [h6]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, h6, s1, s2, s3

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [s1]
ok: [s2]
ok: [s3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]
ok: [s2]
ok: [s3]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h5] => 
  msg: |-
    initial configuration for h5
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.5/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h6] => 
  msg: |-
    initial configuration for h6
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.6/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
    set system host-name 's1'
  
  
    set interfaces bridge br0 description 'Global Switch Bridge'
    set interfaces bridge br0 enable-vlan
  
    set interfaces bridge br0 vif 1001
    set interfaces bridge br0 vif 1000
  
    set interfaces dummy dum0 address 10.0.0.7/32
  
  
  
    set interfaces ethernet eth1 description 's1 -> s2'
  
    set interfaces ethernet eth1 mtu 1600
  
    set interfaces ethernet eth1 address 10.1.0.1/30
  
  
  
  
  
    set interfaces ethernet eth2 description 's1 -> s3'
  
    set interfaces ethernet eth2 mtu 1600
  
    set interfaces ethernet eth2 address 10.1.0.9/30
  
  
  
  
  
    set interfaces ethernet eth3 description '[Access VLAN red] s1 -> h1'
  
  
  
  
  
  
  
    set interfaces ethernet eth4 description '[Access VLAN blue] s1 -> h4'
  
  
  
  
  
  
  
    set interfaces bridge br0 vif 1000 description 'VLAN red (1000) -> [h1,h2,s2,h3,s3]'
  
  
  
  
  
  
  
    set interfaces bridge br0 vif 1001 description 'VLAN blue (1001) -> [h4,h5,s2,h6,s3]'
  
  
  
  
  
  
    set service lldp interface all
    >/dev/null 2>/dev/null set service lldp interface eth0 disable
    >/dev/null 2>/dev/null set service lldp interface eth0 mode disable
  
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
  
    # Restart FRR to pick up the new hostname
    sudo service frr restart
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
    set system host-name 's2'
  
  
    set interfaces bridge br0 description 'Global Switch Bridge'
    set interfaces bridge br0 enable-vlan
  
    set interfaces bridge br0 vif 1001
    set interfaces bridge br0 vif 1000
  
    set interfaces dummy dum0 address 10.0.0.8/32
  
  
  
    set interfaces ethernet eth1 description 's2 -> s1'
  
    set interfaces ethernet eth1 mtu 1600
  
    set interfaces ethernet eth1 address 10.1.0.2/30
  
  
  
  
  
    set interfaces ethernet eth2 description 's2 -> s3'
  
    set interfaces ethernet eth2 mtu 1600
  
    set interfaces ethernet eth2 address 10.1.0.5/30
  
  
  
  
  
    set interfaces ethernet eth3 description '[Access VLAN red] s2 -> h2'
  
  
  
  
  
  
  
    set interfaces ethernet eth4 description '[Access VLAN blue] s2 -> h5'
  
  
  
  
  
  
  
    set interfaces bridge br0 vif 1000 description 'VLAN red (1000) -> [h1,s1,h2,h3,s3]'
  
  
  
  
  
  
  
    set interfaces bridge br0 vif 1001 description 'VLAN blue (1001) -> [h4,s1,h5,h6,s3]'
  
  
  
  
  
  
    set service lldp interface all
    >/dev/null 2>/dev/null set service lldp interface eth0 disable
    >/dev/null 2>/dev/null set service lldp interface eth0 mode disable
  
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
  
    # Restart FRR to pick up the new hostname
    sudo service frr restart
ok: [s3] => 
  msg: |-
    initial configuration for s3
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
    set system host-name 's3'
  
  
    set interfaces bridge br0 description 'Global Switch Bridge'
    set interfaces bridge br0 enable-vlan
  
    set interfaces bridge br0 vif 1001
    set interfaces bridge br0 vif 1000
  
    set interfaces dummy dum0 address 10.0.0.9/32
  
  
  
    set interfaces ethernet eth1 description 's3 -> s2'
  
    set interfaces ethernet eth1 mtu 1600
  
    set interfaces ethernet eth1 address 10.1.0.6/30
  
  
  
  
  
    set interfaces ethernet eth2 description 's3 -> s1'
  
    set interfaces ethernet eth2 mtu 1600
  
    set interfaces ethernet eth2 address 10.1.0.10/30
  
  
  
  
  
    set interfaces ethernet eth3 description '[Access VLAN red] s3 -> h3'
  
  
  
  
  
  
  
    set interfaces ethernet eth4 description '[Access VLAN blue] s3 -> h6'
  
  
  
  
  
  
  
    set interfaces bridge br0 vif 1000 description 'VLAN red (1000) -> [h1,s1,h2,s2,h3]'
  
  
  
  
  
  
  
    set interfaces bridge br0 vif 1001 description 'VLAN blue (1001) -> [h4,s1,h5,s2,h6]'
  
  
  
  
  
  
    set service lldp interface all
    >/dev/null 2>/dev/null set service lldp interface eth0 disable
    >/dev/null 2>/dev/null set service lldp interface eth0 mode disable
  
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
  
    # Restart FRR to pick up the new hostname
    sudo service frr restart

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4, h5, h6
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for s1, s2, s3

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h5 -> localhost]
changed: [h6 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h5 -> localhost]
changed: [h6 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h5 -> localhost]
changed: [h6 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-l2sthxw5.sh] ***********************
changed: [h6 -> localhost]
changed: [h4 -> localhost]
changed: [h1 -> localhost]
changed: [h5 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [wait_for_connection] *****************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [wait_for] ****************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [template] ****************************************************************
changed: [s1]
changed: [s2]
changed: [s3]

TASK [execute config-initial.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/vyos.j2] ***
changed: [s1]
changed: [s2]
changed: [s3]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, h6, s1, s2, s3 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, h6, s1, s2, s3 => (item=vxlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, h6, s1, s2, s3 => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, h6, s1, s2, s3 => (item=ospf)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
    set interfaces bridge br0 member interface eth3 native-vlan 1000
    set interfaces bridge br0 member interface eth4 native-vlan 1001
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
    set interfaces bridge br0 member interface eth3 native-vlan 1000
    set interfaces bridge br0 member interface eth4 native-vlan 1001
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [s3] => 
  msg: |-
    vlan configuration for s3
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
    set interfaces bridge br0 member interface eth3 native-vlan 1000
    set interfaces bridge br0 member interface eth4 native-vlan 1001
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for s1, s2, s3

TASK [wait_for_connection] *****************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [wait_for] ****************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [template] ****************************************************************
changed: [s1]
changed: [s3]
changed: [s2]

TASK [execute config-vlan.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/vyos.j2] ***
changed: [s2]
changed: [s1]
changed: [s3]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for vxlan] ***********************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for vxlan] *******************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
  
    # Create VXLAN interface
    set interfaces vxlan vxlan101000 vni 101000
    set interfaces vxlan vxlan101000 source-address 10.0.0.7
    # And set UDP port to 4789
    set interfaces vxlan vxlan101000 port 4789
  
    # Add it to the global bridge
    ## NOTE: in the future we may want to switch to one-bridge-per-vni
    ##   (still to understand if single bridge can work with EVPN controlled VXLAN)
    set interfaces bridge br0 member interface vxlan101000 native-vlan 1000
  
    # Add VTEP Flood list
    set interfaces vxlan vxlan101000 remote 10.0.0.8
    set interfaces vxlan vxlan101000 remote 10.0.0.9
  
    # If flooding is based on EVPN, set 'parameters nolearning'
  
  
    # Create VXLAN interface
    set interfaces vxlan vxlan101001 vni 101001
    set interfaces vxlan vxlan101001 source-address 10.0.0.7
    # And set UDP port to 4789
    set interfaces vxlan vxlan101001 port 4789
  
    # Add it to the global bridge
    ## NOTE: in the future we may want to switch to one-bridge-per-vni
    ##   (still to understand if single bridge can work with EVPN controlled VXLAN)
    set interfaces bridge br0 member interface vxlan101001 native-vlan 1001
  
    # Add VTEP Flood list
    set interfaces vxlan vxlan101001 remote 10.0.0.8
    set interfaces vxlan vxlan101001 remote 10.0.0.9
  
    # If flooding is based on EVPN, set 'parameters nolearning'
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
  
    # Create VXLAN interface
    set interfaces vxlan vxlan101000 vni 101000
    set interfaces vxlan vxlan101000 source-address 10.0.0.8
    # And set UDP port to 4789
    set interfaces vxlan vxlan101000 port 4789
  
    # Add it to the global bridge
    ## NOTE: in the future we may want to switch to one-bridge-per-vni
    ##   (still to understand if single bridge can work with EVPN controlled VXLAN)
    set interfaces bridge br0 member interface vxlan101000 native-vlan 1000
  
    # Add VTEP Flood list
    set interfaces vxlan vxlan101000 remote 10.0.0.7
    set interfaces vxlan vxlan101000 remote 10.0.0.9
  
    # If flooding is based on EVPN, set 'parameters nolearning'
  
  
    # Create VXLAN interface
    set interfaces vxlan vxlan101001 vni 101001
    set interfaces vxlan vxlan101001 source-address 10.0.0.8
    # And set UDP port to 4789
    set interfaces vxlan vxlan101001 port 4789
  
    # Add it to the global bridge
    ## NOTE: in the future we may want to switch to one-bridge-per-vni
    ##   (still to understand if single bridge can work with EVPN controlled VXLAN)
    set interfaces bridge br0 member interface vxlan101001 native-vlan 1001
  
    # Add VTEP Flood list
    set interfaces vxlan vxlan101001 remote 10.0.0.7
    set interfaces vxlan vxlan101001 remote 10.0.0.9
  
    # If flooding is based on EVPN, set 'parameters nolearning'
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [s3] => 
  msg: |-
    vxlan configuration for s3
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
  
    # Create VXLAN interface
    set interfaces vxlan vxlan101000 vni 101000
    set interfaces vxlan vxlan101000 source-address 10.0.0.9
    # And set UDP port to 4789
    set interfaces vxlan vxlan101000 port 4789
  
    # Add it to the global bridge
    ## NOTE: in the future we may want to switch to one-bridge-per-vni
    ##   (still to understand if single bridge can work with EVPN controlled VXLAN)
    set interfaces bridge br0 member interface vxlan101000 native-vlan 1000
  
    # Add VTEP Flood list
    set interfaces vxlan vxlan101000 remote 10.0.0.7
    set interfaces vxlan vxlan101000 remote 10.0.0.8
  
    # If flooding is based on EVPN, set 'parameters nolearning'
  
  
    # Create VXLAN interface
    set interfaces vxlan vxlan101001 vni 101001
    set interfaces vxlan vxlan101001 source-address 10.0.0.9
    # And set UDP port to 4789
    set interfaces vxlan vxlan101001 port 4789
  
    # Add it to the global bridge
    ## NOTE: in the future we may want to switch to one-bridge-per-vni
    ##   (still to understand if single bridge can work with EVPN controlled VXLAN)
    set interfaces bridge br0 member interface vxlan101001 native-vlan 1001
  
    # Add VTEP Flood list
    set interfaces vxlan vxlan101001 remote 10.0.0.7
    set interfaces vxlan vxlan101001 remote 10.0.0.8
  
    # If flooding is based on EVPN, set 'parameters nolearning'
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit

TASK [Deploy vxlan configuration] **********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for s1, s2, s3

TASK [wait_for_connection] *****************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [wait_for] ****************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [template] ****************************************************************
changed: [s3]
changed: [s2]
changed: [s1]

TASK [execute config-vxlan.sh to deploy vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/vyos.j2] ***
changed: [s3]
changed: [s2]
changed: [s1]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [s1]
ok: [h6]
ok: [s2]
ok: [s3]

TASK [Find configuration template for routing] *********************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
skipping: [s1]
ok: [h5]
ok: [h6]
skipping: [s2]
skipping: [s3]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for routing] *****************
ok: [h1]
ok: [h2]
skipping: [s1]
ok: [h3]
skipping: [s2]
ok: [h5]
skipping: [s3]
ok: [h4]
ok: [h6]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
skipping: [s1]
skipping: [s2]
skipping: [s3]
ok: [h4] => 
  msg: |-
    routing configuration for h4
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h5] => 
  msg: |-
    routing configuration for h5
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h6] => 
  msg: |-
    routing configuration for h6
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4, h5, h6

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]
changed: [h5 -> localhost]
changed: [h6 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h5 -> localhost]
changed: [h6 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Container configuration for routing based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]
changed: [h2 -> localhost]
changed: [h6 -> localhost]
changed: [h5 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-f3np5eqz.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h5 -> localhost]
changed: [h4 -> localhost]
changed: [h6 -> localhost]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for ospf] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
  
  
    set protocols ospf parameters router-id 10.0.0.7
  
  
  
  
    set protocols ospf interface dum0 passive
    set protocols ospf interface dum0 area 0.0.0.0
  
  
    set protocols ospf interface eth1 area 0.0.0.0
  
    set protocols ospf interface eth1 network point-to-point
  
  
  
    set protocols ospf interface eth2 area 0.0.0.0
  
    set protocols ospf interface eth2 network point-to-point
  
  
  
    commit
    save
    exit
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
  
  
    set protocols ospf parameters router-id 10.0.0.8
  
  
  
  
    set protocols ospf interface dum0 passive
    set protocols ospf interface dum0 area 0.0.0.0
  
  
    set protocols ospf interface eth1 area 0.0.0.0
  
    set protocols ospf interface eth1 network point-to-point
  
  
  
    set protocols ospf interface eth2 area 0.0.0.0
  
    set protocols ospf interface eth2 network point-to-point
  
  
  
    commit
    save
    exit
ok: [s3] => 
  msg: |-
    ospf configuration for s3
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
  
  
    set protocols ospf parameters router-id 10.0.0.9
  
  
  
  
    set protocols ospf interface dum0 passive
    set protocols ospf interface dum0 area 0.0.0.0
  
  
    set protocols ospf interface eth1 area 0.0.0.0
  
    set protocols ospf interface eth1 network point-to-point
  
  
  
    set protocols ospf interface eth2 area 0.0.0.0
  
    set protocols ospf interface eth2 network point-to-point
  
  
  
    commit
    save
    exit

TASK [Deploy ospf configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for s1, s2, s3

TASK [wait_for_connection] *****************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [wait_for] ****************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [template] ****************************************************************
changed: [s2]
changed: [s1]
changed: [s3]

TASK [execute config-ospf.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/vyos.j2] ***
changed: [s2]
changed: [s3]
changed: [s1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h2                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h3                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h4                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h5                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h6                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
s1                         : ok=49   changed=8    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0   
s2                         : ok=49   changed=8    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0   
s3                         : ok=49   changed=8    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0   



This is the multi-node version of the vxlan-bridging lab.
Use it to check that you don't have spanning tree problems
in VXLAN overlay

* h1, h2 and h3 should be able to ping each other
* h4, h5 and h6 should be able to ping each other

Please note it might take a while for the lab to work due to
OSPF adjacency establishment and STP learning phase

