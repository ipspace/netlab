[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v2]
ok: [v1]
ok: [v3]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]
skipping: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, v1, v2, v3, dut

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v3]
ok: [v2]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v3]
ok: [v2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]
skipping: [dut]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]
skipping: [dut]

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]
skipping: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, v1, v2, v3, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v2]
ok: [v1]
ok: [v3]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]
skipping: [dut]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v2]
ok: [v1]
ok: [dut]
ok: [v3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2::2/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2::2/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.42.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.42.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:42::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:42::3/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.42.42/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.42.42/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:42::2a/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:42::2a/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [v1] => 
  msg: |-
    initial configuration for v1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:1::4/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:1::4/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [v2] => 
  msg: |-
    initial configuration for v2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.42.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.42.5/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:42::5/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:42::5/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [v3] => 
  msg: |-
    initial configuration for v3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.42.64/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.42.64/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:42::40/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:42::40/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
    set system host-name 'dut'
  
    set vrf name tenant table 100
  
    set interfaces dummy dum0 address 10.0.0.1/32
    set interfaces dummy dum0 address 2001:db8:1:1::1/64
  
  
  
    set interfaces ethernet eth1 description 'dut -> h1 [stub]'
  
  
    set interfaces ethernet eth1 address 172.16.0.1/24
  
    set interfaces ethernet eth1 address 2001:db8:2::1/64;
  
  
  
  
    set interfaces ethernet eth2 description 'dut -> [h2,h3] [stub]'
  
  
    set interfaces ethernet eth2 address 172.16.42.1/24
  
    set interfaces ethernet eth2 address 2001:db8:cafe:42::1/64;
  
  
  
  
    set interfaces ethernet eth3 description 'dut -> v1 [stub]'
  
  
    set interfaces ethernet eth3 address 172.16.1.1/24
  
    set interfaces ethernet eth3 address 2001:db8:2:1::1/64;
  
    set interfaces ethernet eth3 vrf tenant
  
  
  
    set interfaces ethernet eth4 description 'dut -> [v2,v3] [stub]'
  
  
    set interfaces ethernet eth4 address 172.16.42.1/24
  
    set interfaces ethernet eth4 address 2001:db8:cafe:42::1/64;
  
    set interfaces ethernet eth4 vrf tenant
  
  
    set service lldp interface all
    >/dev/null 2>/dev/null set service lldp interface eth0 disable
    >/dev/null 2>/dev/null set service lldp interface eth0 mode disable
  
    set service router-advert interface eth1
    set service router-advert interface eth2
    set service router-advert interface eth3
    set service router-advert interface eth4
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
  
    # Restart FRR to pick up the new hostname
    sudo service frr restart

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, v1, v2, v3
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/vyos.yml for dut

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v2]
ok: [v1]
ok: [v3]

TASK [Create a temporary file for the rendered script] *************************
changed: [v1 -> localhost]
changed: [v3 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [v2 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [v3 -> localhost]
changed: [v1 -> localhost]
changed: [v2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [v1 -> localhost]
changed: [v3 -> localhost]
changed: [v2 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-ziyjlqay.sh] ***********************
changed: [h3 -> localhost]
changed: [v3 -> localhost]
changed: [h1 -> localhost]
changed: [v1 -> localhost]
changed: [h2 -> localhost]
changed: [v2 -> localhost]

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [wait_for] ****************************************************************
skipping: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [template] ****************************************************************
changed: [dut]

TASK [execute config-initial.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/vyos.j2] ***
changed: [dut]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, v1, v2, v3 => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, v1, v2, v3 => (item=vrf)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Find configuration template for routing] *********************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v2]
ok: [v1]
ok: [v3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Find configuration deployment deploy_script for routing] *****************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    routing configuration for dut
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
  
  
  
  
  
    # Static routing
  
    set  protocols static route 172.16.42.42/32 blackhole
    set  protocols static route6 2001:db8:cafe:42::2a/128 blackhole
    set vrf name tenant protocols static route 172.16.42.64/32 blackhole
    set vrf name tenant protocols static route6 2001:db8:cafe:42::40/128 blackhole
  
    commit
    save
    exit
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.42.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [v1] => 
  msg: |-
    routing configuration for v1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.42.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [v2] => 
  msg: |-
    routing configuration for v2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.42.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [v3] => 
  msg: |-
    routing configuration for v3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.42.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/vyos.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, v1, v2, v3

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [wait_for] ****************************************************************
skipping: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [template] ****************************************************************
changed: [dut]

TASK [execute config-routing.sh to deploy routing config from /home/pipi/netlab_gh/netsim/ansible/templates/routing/vyos.j2] ***
changed: [dut]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [v1 -> localhost]
changed: [v2 -> localhost]
changed: [v3 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [v1 -> localhost]
changed: [v2 -> localhost]
changed: [v3 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [v2 -> localhost]
changed: [v1 -> localhost]
changed: [h2 -> localhost]
changed: [v3 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-__wxkbpe.sh] ***********************
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [v1 -> localhost]
changed: [v2 -> localhost]
changed: [h1 -> localhost]
changed: [v3 -> localhost]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Find configuration template for vrf] *************************************
skipping: [h1]
skipping: [h2]
ok: [dut]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
ok: [dut]
skipping: [v2]
skipping: [v3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
  
    # Enter vrf sublevel
    edit vrf name tenant
  
  
  
    # Back to root level
    top
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
skipping: [v2]
skipping: [v3]

TASK [Deploy vrf configuration] ************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/vyos.yml for dut

TASK [wait_for_connection] *****************************************************
skipping: [dut]

TASK [wait_for] ****************************************************************
skipping: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [template] ****************************************************************
changed: [dut]

TASK [execute config-vrf.sh to deploy vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/vyos.j2] ***
changed: [dut]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=37   changed=6    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
h1                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
h2                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
h3                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
v1                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
v2                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
v3                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   



Use this topology to test 'discard' IPv4 and IPv6 static routes.
H1 should be able to reach H2 but not H3 (due to a discard static route)

