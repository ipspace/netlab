[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [xf]
ok: [p1]
ok: [p2]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [xf]
ok: [p1]
ok: [p2]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [xf]
skipping: [p1]
skipping: [p2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, xf, p1, p2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [xf]
ok: [p1]
ok: [p2]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [xf]
ok: [p1]
ok: [p2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [xf]
skipping: [p1]
skipping: [p2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [xf]
ok: [p1]
ok: [p2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [xf]
skipping: [p1]
skipping: [p2]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [xf]
skipping: [p1]
skipping: [p2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, xf, p1, p2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [xf]
ok: [p1]
ok: [p2]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [xf]
ok: [p1]
ok: [p2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [xf]
skipping: [p1]
skipping: [p2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [xf]
ok: [p1]
ok: [p2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
    updates:
  
    - path: /interface[name=system0]/subinterface[index=0]
      value:
       description: "No description"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.0.0.1/32"
  
  
    - path: /interface[name=ethernet-1/1]
      value:
       subinterface:
        index: 0
        description: "dut ~ p1"
  
    - path: /interface[name=ethernet-1/1]/subinterface[index=0]
      value:
       description: "dut ~ p1"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.1.0.1/30"
          primary: [null]
  
    - path: /interface[name=ethernet-1/2]
      value:
       subinterface:
        index: 0
        description: "dut ~ p2"
  
    - path: /interface[name=ethernet-1/2]/subinterface[index=0]
      value:
       description: "dut ~ p2"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.1.0.5/30"
          primary: [null]
  
    - path: /interface[name=ethernet-1/3]
      value:
       subinterface:
        index: 0
        description: "dut ~ xf"
  
    - path: /interface[name=ethernet-1/3]/subinterface[index=0]
      value:
       description: "dut ~ xf"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.1.0.9/30"
          primary: [null]
  
    - path: /interface[name=lo0]
      value:
       subinterface:
        index: 1
        description: "VRF Loopback d2"
  
    - path: /interface[name=lo0]/subinterface[index=1]
      value:
       description: "VRF Loopback d2"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "192.168.43.1/32"
          primary: [null]
  
  
  
    - path: /network-instance[name=default]
      value:
       type: default
       interface:
       - name: system0.0
  
  
  
  
    # TODO: vdata.rd, vdata.import/export, vdata.af
    - path: /network-instance[name=d1]
      value:
       type: ip-vrf
       interface:
       - name: ethernet-1/1.0
  
  
  
    # TODO: vdata.rd, vdata.import/export, vdata.af
    - path: /network-instance[name=d2]
      value:
       type: ip-vrf
       interface:
       - name: ethernet-1/2.0
    - path: /network-instance[name=d2]
      value:
       type: ip-vrf
       interface:
       - name: ethernet-1/3.0
    - path: /network-instance[name=d2]
      value:
       type: ip-vrf
       interface:
       - name: lo0.1
ok: [xf] => 
  msg: |-
    initial configuration for xf
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname xf
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description xf -> dut [external]
     ip address 10.1.0.10/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p1] => 
  msg: |-
    initial configuration for p1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description p1 -> dut
     ip address 10.1.0.2/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p2] => 
  msg: |-
    initial configuration for p2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description p2 -> dut
     ip address 10.1.0.6/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for xf, p1, p2

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [dut]

TASK [Update SRL initial node configuration (template=/home/pipi/net101/tools/netsim/ansible/templates/initial/srlinux.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [xf -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [xf]
skipping: [p1]
skipping: [p2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for xf, p1, p2

TASK [template] ****************************************************************
changed: [p1]
changed: [xf]
changed: [p2]

TASK [set_fact] ****************************************************************
ok: [xf]
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [p1]
changed: [xf]
changed: [p2]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [xf]
skipping: [p1]
skipping: [p2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [xf]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, xf => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, xf => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, xf => (item=vrf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [p1]
ok: [p2]
ok: [xf]

TASK [Find configuration template for bgp] *************************************
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [xf]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [xf]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [xf]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p1]
skipping: [p2]
ok: [xf] => 
  msg: |-
    bgp configuration for xf
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.1.0.9 remote-as 65000
      neighbor 10.1.0.9 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.4/32
    !
    !
    !
      neighbor 10.1.0.9 activate
      no neighbor 10.1.0.9 send-community all
      neighbor 10.1.0.9 send-community standard
      neighbor 10.1.0.9 send-community large
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    updates:
  
    - path: /routing-policy/policy[name=accept_all]
      value:
        default-action:
          policy-result: accept
  
    - path: /routing-policy/community-set[name=ibgp-mark]
      value:
        member: [ "65536:0:65536" ]
  
    - path: /routing-policy/policy[name=ibgp-mark]
      value:
        default-action:
          policy-result: reject
        statement:
        - name: mark-ibgp-routes
          action:
            bgp:
              communities:
                add: ibgp-mark
            policy-result: accept
  
    - path: /routing-policy/prefix-set[name=default_bgp_advertise]
      value:
        prefix: [] # Make sure it exists
  
    - path: /routing-policy/policy[name=default_bgp_export]
      value:
        default-action:
          policy-result: reject
        statement:
        - name: prefixes
          match:
            prefix-set: default_bgp_advertise
          action:
            policy-result: next-policy
        - name: bgp
          match:
            protocol: bgp
          action:
            policy-result: next-policy
            bgp:
              communities:
                remove:
                  ibgp-mark
  
  
    - path: /network-instance[name=default]/protocols/bgp
      value:
        admin-state: enable
        autonomous-system: 65000
        router-id: 10.0.0.1
        ebgp-default-policy:
          export-reject-all: False
          import-reject-all: False
  
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
  
    - path: /routing-policy/prefix-set[name=default_bgp_advertise]
      value:
        prefix:
        - ip-prefix: 10.0.0.1/32
          mask-length-range: exact

TASK [Deploy bgp configuration] ************************************************
skipping: [p1]
skipping: [p2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for xf

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [dut]

TASK [Update SRL bgp node configuration (template=/home/pipi/net101/tools/netsim/ansible/templates/bgp/srlinux.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [template] ****************************************************************
changed: [xf]

TASK [set_fact] ****************************************************************
ok: [xf]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [xf]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [xf]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [dut]
ok: [p1]
ok: [p2]
ok: [xf]

TASK [Find configuration template for ospf] ************************************
ok: [dut]
skipping: [xf]
ok: [p1]
ok: [p2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [xf]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [xf]
ok: [dut]
ok: [p1]
ok: [p2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [xf]
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
    updates:
ok: [p1] => 
  msg: |-
    ospf configuration for p1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [p2] => 
  msg: |-
    ospf configuration for p2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p2 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
skipping: [xf]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for p1, p2

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [dut]

TASK [Update SRL ospf node configuration (template=/home/pipi/net101/tools/netsim/ansible/templates/ospf/srlinux.j2)] ***
skipping: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [template] ****************************************************************
changed: [p1]
changed: [p2]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [p1]
skipping: [p2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [p1]
changed: [p2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [dut]
ok: [p1]
ok: [p2]
ok: [xf]

TASK [Find configuration template for vrf] *************************************
skipping: [p1]
skipping: [p2]
skipping: [xf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [xf]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [p1]
skipping: [p2]
skipping: [xf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p1]
skipping: [p2]
skipping: [xf]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
    updates:
  
    - path: /network-instance[name=d1]
      value:
       type: ip-vrf
  
    - path: /routing-policy/prefix-set[name=default_route]
      value:
        prefix:
        - ip-prefix: "0.0.0.0/0"
          mask-length-range: exact
        - ip-prefix: "::/0"
          mask-length-range: exact
    - path: /network-instance[name=d1]/next-hop-groups/group[name=blackhole]
      value:
        blackhole:
          generate-icmp: True
  
    - path: /network-instance[name=d1]/static-routes
      value:
        route:
        - prefix: 0.0.0.0/0
          preference: 254
          next-hop-group: blackhole
    - path: /routing-policy/policy[name=d1_export_ospf]
      value:
        default-action:
          policy-result: reject
        statement:
        - name: default
          match:
            prefix-set: default_route
          action:
            policy-result: accept
        - name: export_bgp
          match:
            protocol: bgp
          action:
            policy-result: accept
        - name: export_local
          match:
            protocol: local
          action:
            policy-result: accept
  
  
    - path: /network-instance[name=d1]
      value:
        router-id: 10.0.0.1
        protocols:
          ospf:
            instance:
            - name: "0"
              version: ospf-v2
              admin-state: enable
              max-ecmp-paths: 64
              asbr: {}
              export-policy: "d1_export_ospf"
              area:
              - area-id: 0.0.0.0
                interface:
                - interface-name: ethernet-1/1.0
                  interface-type: "point-to-point"
                  failure-detection:
                    enable-bfd: False
  
  
    - path: /routing-policy/community-set[name=C65000_1]
      value:
       member:
       - "target:65000:1" # Single member, else matching is AND
  
    - path: /routing-policy/community-set[name=d1_export]
      value:
       member:
       - "target:65000:1"
  
  
    - path: /routing-policy/policy[name=d1_bgp_export]
      value:
        default-action:
          policy-result: reject
        statement:
        - name: bgp
          match:
            protocol: bgp
          action:
            policy-result: next-policy
            bgp:
              communities:
                remove:
                  ibgp-mark
        - name: export_local
          match:
            protocol: local
          action:
            policy-result: next-policy
        - name: export_ospfv2
          match:
            protocol: ospfv2
          action:
            policy-result: next-policy
        - name: export_ospfv3
          match:
            protocol: ospfv3
          action:
            policy-result: next-policy
  
  
    - path: /network-instance[name=d1]/protocols/bgp
      value:
        admin-state: enable
        autonomous-system: 65000
        router-id: 10.0.0.1
        ebgp-default-policy:
          export-reject-all: False
          import-reject-all: False
  
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
  
  
  
  
  
  
  
  
    - path: /network-instance[name=d1]/protocols/bgp-vpn
      value:
       bgp-instance:
       - id: 1
         route-distinguisher:
          rd: "65000:1"
  
    - path: /network-instance[name=d1]/inter-instance-policies
      value:
       apply-policy:
        export-policy: "d1_vpn_export"
        import-policy: "d1_vpn_import"
  
    - path: /routing-policy/policy[name=d1_vpn_export]
      value:
       default-action:
        policy-result: "accept"
        bgp:
         communities:
          add: "d1_export"
  
    - path: /routing-policy/policy[name=d1_vpn_import]
      value:
       default-action:
        policy-result: "reject"
       statement:
       - name: 11
         match:
          bgp:
           community-set: "C65000_1"
         action:
          policy-result: "accept"
  
  
    - path: /network-instance[name=d2]
      value:
       type: ip-vrf
  
    - path: /routing-policy/prefix-set[name=default_route]
      value:
        prefix:
        - ip-prefix: "0.0.0.0/0"
          mask-length-range: exact
        - ip-prefix: "::/0"
          mask-length-range: exact
    - path: /routing-policy/policy[name=d2_export_ospf]
      value:
        default-action:
          policy-result: reject
        statement:
        - name: default
          match:
            prefix-set: default_route
          action:
            policy-result: accept
        - name: export_bgp
          match:
            protocol: bgp
          action:
            policy-result: accept
        - name: export_local
          match:
            protocol: local
          action:
            policy-result: accept
  
  
    - path: /network-instance[name=d2]
      value:
        router-id: 10.0.0.1
        protocols:
          ospf:
            instance:
            - name: "0"
              version: ospf-v2
              admin-state: enable
              max-ecmp-paths: 64
              asbr: {}
              export-policy: "d2_export_ospf"
              area:
              - area-id: 0.0.0.0
                interface:
                - interface-name: ethernet-1/2.0
                  interface-type: "point-to-point"
                  failure-detection:
                    enable-bfd: False
              - area-id: 0.0.0.0
                interface:
                - interface-name: lo0.1
                  failure-detection:
                    enable-bfd: False
  
  
    - path: /routing-policy/community-set[name=C65000_2]
      value:
       member:
       - "target:65000:2" # Single member, else matching is AND
  
    - path: /routing-policy/community-set[name=d2_export]
      value:
       member:
       - "target:65000:2"
  
  
    - path: /routing-policy/policy[name=d2_bgp_export]
      value:
        default-action:
          policy-result: reject
        statement:
        - name: bgp
          match:
            protocol: bgp
          action:
            policy-result: next-policy
            bgp:
              communities:
                remove:
                  ibgp-mark
        - name: export_local
          match:
            protocol: local
          action:
            policy-result: next-policy
        - name: export_ospfv2
          match:
            protocol: ospfv2
          action:
            policy-result: next-policy
        - name: export_ospfv3
          match:
            protocol: ospfv3
          action:
            policy-result: next-policy
  
  
    - path: /network-instance[name=d2]/protocols/bgp
      value:
        admin-state: enable
        autonomous-system: 65000
        router-id: 10.0.0.1
        ebgp-default-policy:
          export-reject-all: False
          import-reject-all: False
  
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
  
  
  
  
  
    - path: /network-instance[name=d2]/protocols/bgp/group[group-name=ebgp]
      value:
        admin-state: enable
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
          import-policy: ['accept_all']
          export-policy: ['d2_bgp_export', 'accept_all']
        - afi-safi-name: ipv6-unicast
          admin-state: enable
          import-policy: ['accept_all']
          export-policy: ['d2_bgp_export', 'accept_all']
  
        timers:
          connect-retry: 10
          _annotate_connect-retry: "Reduce default 120s to 10s"
          minimum-advertisement-interval: 1
        send-community:
          standard: True
          large: True
          _annotate_large: "Assuming 'standard' implies 'large' here"
  
  
    - path: /network-instance[name=d2]/protocols/bgp
      value:
        neighbor:
        - peer-address: "10.1.0.10"
          description: xf
          peer-group: ebgp
          afi-safi:
          - afi-safi-name: ipv4-unicast
            admin-state: enable
  
          peer-as: 65100
  
  
  
  
    - path: /network-instance[name=d2]/protocols/bgp-vpn
      value:
       bgp-instance:
       - id: 1
         route-distinguisher:
          rd: "65000:2"
  
    - path: /network-instance[name=d2]/inter-instance-policies
      value:
       apply-policy:
        export-policy: "d2_vpn_export"
        import-policy: "d2_vpn_import"
  
    - path: /routing-policy/policy[name=d2_vpn_export]
      value:
       default-action:
        policy-result: "accept"
        bgp:
         communities:
          add: "d2_export"
  
    - path: /routing-policy/policy[name=d2_vpn_import]
      value:
       default-action:
        policy-result: "reject"
       statement:
       - name: 11
         match:
          bgp:
           community-set: "C65000_2"
         action:
          policy-result: "accept"

TASK [Deploy vrf configuration] ************************************************
skipping: [p1]
skipping: [p2]
skipping: [xf]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for dut

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [dut]

TASK [Update SRL vrf node configuration (template=/home/pipi/net101/tools/netsim/ansible/templates/vrf/srlinux.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=38   changed=3    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
p1                         : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
p2                         : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
xf                         : ok=31   changed=5    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   



This lab tests the VRF OSPF default route origination. The device under test
should originate the default route in multiple VRFs, one always, the other one
based on BGP default route.

