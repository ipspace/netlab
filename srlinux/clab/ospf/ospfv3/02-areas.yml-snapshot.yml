<<<<<<< HEAD
%YAML 1.1
---
message: |
  This lab tests the OSPFv3 areas. The device under test has three interfaces
  in three different areas and the loopback interface in one of those areas.
defaults:
  provider: clab
  providers:
    clab:
      description: containerlab with Docker
      config: clab.yml
      lab_prefix: clab
      node_config_attributes:
      - type
      - cmd
      - dns
      - env
      - license
      - ports
      - startup-delay
      - restart-policy
      template: clab.j2
      start: sudo -E containerlab deploy --reconfigure -t clab.yml
      stop: sudo -E containerlab destroy --cleanup -t clab.yml
      act_probe: docker ps
      act_title: Running containers
      probe:
      - cmd: containerlab version
        err: Containerlab is not installed
      - cmd:
        - bash
        - -c
        - "[[ `containerlab version|awk '/version/ {print $2}'` > '0.62.1' ]] && echo
          OK"
        err: Containerlab version is too old, please upgrade to 0.62.2 or later 
          with 'sudo containerlab version upgrade'
      cleanup:
      - clab.yml
      - clab_files
      bridge_type: bridge
      runtime: docker
      kmods:
        lag:
        - bonding
        mpls:
        - mpls-router
        - mpls-iptunnel
        sr:
        - mpls-router
        - mpls-iptunnel
        vxlan:
        - vxlan
        - udp_tunnel
        - ip6_udp_tunnel
        vrf:
        - vrf
      attributes:
        node:
          type: dict
          _keys:
            binds:
            kind: str
            config_templates:
            type: str
            cmd: str
            dns:
            env:
            ports: list
            image: str
            startup-config: str
            srl-agents:
            license: str
            runtime: str
            startup-delay: int
            restart-policy: str
        interface:
          name: str
        link:
          uplink: str
          provider: dict
    external:
      description: External devices
      config: external.txt
      template: external.j2
      start: []
      stop: []
      probe: []
      cleanup:
      - external.txt
    libvirt:
      description: Vagrant with libvirt/KVM
      config: Vagrantfile
      start: vagrant up --provider libvirt
      stop: vagrant destroy -f
      probe:
      - cmd: stat /usr/sbin/kvm-ok
        err: KVM is not installed or does not include kvm-ok utility
      - cmd: /usr/sbin/kvm-ok
        err: KVM is not enabled or not working properly
      - cmd: which virsh
        err: libvirt is not installed
      - cmd: which vagrant
        err: vagrant is not installed
      - cmd:
        - bash
        - -c
        - vagrant plugin list|grep vagrant-libvirt
        err: vagrant-libvirt plugin is not installed
      - cmd: virsh net-list
        err: You don't have access to virsh networking, your user should be in 
          libvirt group
      act_probe: virsh list
      act_title: KVM/libvirt domains (virtual machines)
      cleanup:
      - Vagrantfile
      - .vagrant
      tunnel_id: '17'
      vifprefix: vgif_17
      clab:
        start: sudo -E containerlab deploy --reconfigure -t clab-augment.yml
        stop: sudo -E containerlab destroy --cleanup -t clab-augment.yml
        filename: clab-augment.yml
        recreate_config: true
      attributes:
        node:
          nic_model_type: str
          nic_adapter_count: int
          image: str
          uuid: str
        link:
          permanent: bool
          public:
            type: str
            valid_values:
            - bridge
            - vepa
            - passthrough
            - private
            true_value: bridge
          provider: dict
          uplink: str
        global:
          providers:
    virtualbox:
      description: Vagrant with Virtualbox
      config: Vagrantfile
      start: vagrant up --provider virtualbox
      stop: vagrant destroy -f
      probe:
      - VBoxManage -h
      - vagrant plugin list
      cleanup:
      - Vagrantfile
      - .vagrant
      inventory:
        ansible_host: 127.0.0.1
      inventory_port_map:
        ssh: ansible_port
      forwarded:
        ssh: 2000
        http: 8000
        netconf: 3000
  devices:
    arubacx:
      description: ArubaOS-CX
      interface_name: 1/1/{ifindex}
      mgmt_if: mgmt
      loopback_interface_name: loopback {ifindex}
      tunnel_interface_name: tunnel {ifindex}
      lag_interface_name: lag {lag.ifindex}
      ifindex_offset: 1
      libvirt:
        image: aruba/cx
        build: https://netlab.tools/labs/arubacx/
        create: virt-install --connect=qemu:///system --name=vm_box 
          --arch=x86_64 --cpu host --vcpus=2 --hvm --ram=4096 
          --network=network:vagrant-libvirt,model=virtio --graphics none 
          --import --disk path=vm.qcow2,format=qcow2,bus=ide
      clab:
        image: vrnetlab/aruba_arubaos-cx:20240731173624
        build: https://containerlab.dev/manual/kinds/vr-aoscx/
        mtu: 1500
        node:
          kind: vr-aoscx
        interface:
          name: eth{ifindex}
        group_vars:
          netlab_check_retries: 40
          netlab_check_delay: 15
      group_vars:
        ansible_network_os: arubanetworks.aoscx.aoscx
        ansible_connection: network_cli
        ansible_user: admin
        ansible_ssh_pass: admin
        netlab_device_type: arubacx
      features:
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        bfd: {}
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: false
          vrf_local_as: true
          import:
          - ospf
          - connected
          - static
          - vrf
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        lag:
          mlag:
            peer:
              ifindex: 255
              mac: 0600.0000.0000
          passive: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          import:
          - bgp
          - connected
          - vrf
          - static
          default: true
          password: true
          priority: true
          timers: true
          unnumbered: true
        routing:
          policy:
            set:
              locpref: true
              med: true
              weight: true
              prepend: true
              community:
                standard: true
                delete: true
                append: true
            match:
            - prefix
            - nexthop
            - aspath
            - community
          prefix: true
          aspath: true
          community:
            expanded: true
          static:
            vrf: true
            inter_vrf: true
            discard: true
        stp:
          supported_protocols:
          - mstp
          - pvrst
          - stp
          enable_per_port: true
        vlan:
          model: switch
          svi_interface_name: vlan{vlan}
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
        vxlan: {}
      external:
        image: none
      graphite:
        icon: switch
    asav:
      description: Cisco ASAv
      interface_name: GigabitEthernet0/{ifindex}
      ifindex_offset: 0
      mgmt_if: Management0/0
      group_vars:
        ansible_user: vagrant
        ansible_ssh_pass: vagrant1
        ansible_become_method: enable
        ansible_become_password: vagrant1
        ansible_network_os: asa
        ansible_connection: network_cli
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group14-sha1 -o 
          PubkeyAcceptedKeyTypes=+ssh-rsa -o HostKeyAlgorithms=+ssh-rsa
      external:
        image: none
      features:
        bgp: {}
        isis: {}
      libvirt:
        image: cisco/asav
        create_template: asav.xml.j2
        build: https://netlab.tools/labs/asav/
        create_iso: asav
    cat8000v:
      description: Cisco CSR 1000v
      loopback_interface_name: Loopback{ifindex}
      tunnel_interface_name: Tunnel{ifindex}
      group_vars:
        ansible_become_method: enable
        ansible_network_os: ios
        ansible_connection: network_cli
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o
          PubkeyAcceptedKeyTypes=ssh-rsa -o HostKeyAlgorithms=+ssh-rsa
        netlab_device_type: cat8000v
        ansible_user: vagrant
        ansible_ssh_pass: vagrant
        ansible_become_password: vagrant
      role: router
      routing:
        _rm_per_af: true
      features:
        bfd: {}
        bgp:
          local_as: true
          vrf_local_as: true
          local_as_ibgp: true
          activate_af: true
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          community:
            standard:
            - standard
            extended:
            - extended
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          vrf: true
          server: true
        eigrp: {}
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
            use_ra: true
          roles:
          - host
          - router
          - bridge
          mgmt_vrf: true
          min_mtu: 68
          min_phy_mtu: 1500
          max_mtu: 9216
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - static
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          ldp: true
          bgp: true
          vpn: true
          6pe: true
        ospf:
          unnumbered: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          default:
            policy: true
          password: true
          priority: true
          timers: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
        routing:
          policy:
            set:
              locpref: true
              med: true
              weight: true
              prepend: true
              community:
                standard: true
                append: true
            match:
            - prefix
            - nexthop
            - aspath
            - community
          prefix: true
          aspath: true
          community:
            expanded: true
          static:
            vrf: true
            inter_vrf: true
            discard: true
        vlan:
          model: l3-switch
          svi_interface_name: BDI{vlan}
          subif_name: '{ifname}.{subif_index}'
          mixed_trunk: true
          native_routed: true
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
          ripv2: true
          ripng: true
        gateway:
          protocol:
          - vrrp
        sr: {}
      external:
        image: none
      graphite:
        icon: router
      interface_name: GigabitEthernet{ifindex}
      ifindex_offset: 2
      virtualbox: {}
      clab:
        group_vars:
          ansible_ssh_pass: admin
          ansible_user: admin
          netlab_check_retries: 50
        image: vrnetlab/vr-c8000v:17.13.01a
        node:
          kind: cisco_c8000v
        interface:
          name: eth{ifindex-1}
        build: https://containerlab.dev/manual/kinds/vr-c8000v/
      node:
        min_mtu: 1500
      libvirt:
        image: cisco/cat8000v
        build: https://netlab.tools/labs/cat8000v/
        create: virt-install --connect=qemu:///system --name=vm_box 
          --os-variant=rhel4.0 --arch=x86_64 --cpu host --vcpus=1 --hvm 
          --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2 
          --network=network:vagrant-libvirt,model=virtio --graphics none 
          --import
        create_template: cat8000v.xml.j2
        create_iso: cat8000v
    csr:
      description: Cisco CSR 1000v
      loopback_interface_name: Loopback{ifindex}
      tunnel_interface_name: Tunnel{ifindex}
      group_vars:
        ansible_become_method: enable
        ansible_network_os: ios
        ansible_connection: network_cli
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o
          PubkeyAcceptedKeyTypes=ssh-rsa -o HostKeyAlgorithms=+ssh-rsa
        netlab_device_type: csr
        ansible_user: vagrant
        ansible_ssh_pass: vagrant
        ansible_become_password: vagrant
      role: router
      routing:
        _rm_per_af: true
      features:
        bfd: {}
        bgp:
          local_as: true
          vrf_local_as: true
          local_as_ibgp: true
          activate_af: true
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          community:
            standard:
            - standard
            extended:
            - extended
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          vrf: true
          server: true
        eigrp: {}
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
            use_ra: true
          roles:
          - host
          - router
          - bridge
          mgmt_vrf: true
          min_mtu: 68
          min_phy_mtu: 1500
          max_mtu: 9216
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - static
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          ldp: true
          bgp: true
          vpn: true
          6pe: true
        ospf:
          unnumbered: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          default:
            policy: true
          password: true
          priority: true
          timers: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
        routing:
          policy:
            set:
              locpref: true
              med: true
              weight: true
              prepend: true
              community:
                standard: true
                append: true
            match:
            - prefix
            - nexthop
            - aspath
            - community
          prefix: true
          aspath: true
          community:
            expanded: true
          static:
            vrf: true
            inter_vrf: true
            discard: true
        vlan:
          model: l3-switch
          svi_interface_name: BDI{vlan}
          subif_name: '{ifname}.{subif_index}'
          mixed_trunk: true
          native_routed: true
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
          ripv2: true
          ripng: true
        gateway:
          protocol:
          - vrrp
        sr: {}
        vxlan: {}
      external:
        image: none
      graphite:
        icon: router
      interface_name: GigabitEthernet{ifindex}
      ifindex_offset: 2
      virtualbox:
        image: cisco/csr1000v
      clab:
        group_vars:
          ansible_ssh_pass: admin
          ansible_user: admin
          netlab_check_retries: 50
        image: vrnetlab/vr-csr:17.03.04
        node:
          kind: cisco_csr1000v
        interface:
          name: eth{ifindex-1}
        build: https://containerlab.dev/manual/kinds/vr-csr/
      node:
        min_mtu: 1500
      libvirt:
        image: cisco/csr1000v
        build: https://netlab.tools/labs/csr/
        create: virt-install --connect=qemu:///system --name=vm_box 
          --os-variant=rhel4.0 --arch=x86_64 --cpu host --vcpus=1 --hvm 
          --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2 
          --network=network:vagrant-libvirt,model=virtio --graphics none 
          --import
    cumulus:
      description: Cumulus VX 4.x or 5.x configured without NVUE
      interface_name: swp{ifindex}
      loopback_interface_name: lo{ifindex if ifindex else ""}
      tunnel_interface_name: tun{ifindex}
      lag_interface_name: bond{lag.ifindex}
      mgmt_if: eth0
      mtu: 1500
      libvirt:
        image: CumulusCommunity/cumulus-vx:4.4.5
      virtualbox:
        image: CumulusCommunity/cumulus-vx:4.3.0
      clab:
        kmods:
        node:
          kind: cvx
          runtime: docker
          config_templates:
            interfaces: /etc/network/interfaces
            hosts: /etc/hosts
        image: networkop/cx:4.4.0
        group_vars:
          ansible_connection: docker
          ansible_user: root
      external:
        image: none
      group_vars:
        ansible_user: vagrant
        ansible_ssh_pass: vagrant
        ansible_network_os: cumulus
        ansible_connection: paramiko
        netlab_show_command:
        - sudo
        - vtysh
        - -c
        - show $@
        netlab_initial: always
      evpn:
        _start_transit_vlan: 3900
      features:
        initial:
          system_mtu: true
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        bfd: {}
        bgp:
          ipv6_lla: true
          rfc8950: true
          activate_af: true
          local_as: true
          vrf_local_as: true
          import:
          - ospf
          - ripv2
          - connected
          - static
          - vrf
          community:
            standard:
            - standard
            - large
            large:
            - large
            extended:
            - extended
            2octet:
            - standard
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay:
            ipv4: true
        evpn:
          irb: true
          asymmetrical_irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        lag:
          passive: false
        ospf:
          unnumbered: true
          import:
          - bgp
          - ripv2
          - connected
          - static
          - vrf
          default: true
          password: true
          priority: true
          timers: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
        routing:
          policy:
            set:
              locpref: true
              med: true
              weight: true
              prepend: true
              community:
                standard: true
                large: true
                extended: true
                append: true
            match:
            - prefix
            - nexthop
            - aspath
            - community
          prefix: true
          aspath: true
          community:
            expanded: true
          static:
            vrf: true
            inter_vrf: true
        stp:
          supported_protocols:
          - stp
          - rstp
          enable_per_port: true
          port_type: true
        vlan:
          model: switch
          svi_interface_name: vlan{vlan}
          subif_name: '{ifname}.{vlan.access_id}'
        vrf:
          ospfv2: true
          bgp: true
          ripv2: true
          ripng: true
        vxlan: {}
      graphite:
        icon: switch
    cumulus_nvue:
      description: Cumulus VX 5.x configured with NVUE
      interface_name: swp{ifindex}
      lag_interface_name: bond{lag.ifindex}
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      mtu: 1500
      libvirt:
        image: CumulusCommunity/cumulus-vx:5.10.0
      virtualbox:
        image: CumulusCommunity/cumulus-vx:5.10.0
      group_vars:
        ansible_user: cumulus
        ansible_ssh_pass: GetLost1!
        ansible_network_os: cumulus_nvue
        ansible_connection: paramiko
        ansible_python_interpreter: auto_silent
      features:
        initial:
          system_mtu: true
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        bgp:
          activate_af: true
          import:
          - connected
          - ospf
          - vrf
          ipv6_lla: true
          rfc8950: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        evpn:
          irb: true
          asymmetrical_irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        lag:
          passive: false
          mlag:
            peer:
              global: true
              mac: 44:38:39:ff:00:00
              vlan: 4094
              ip: linklocal
              backup_ip: loopback.ipv4
        ospf:
          import:
          - bgp
          - connected
          - vrf
          unnumbered: true
          timers: true
          priority: true
        stp:
          supported_protocols:
          - stp
          - rstp
          - pvrst
          enable_per_port: true
          port_type: true
        vlan:
          model: router
          svi_interface_name: vlan{vlan}
          native_routed: true
          mixed_trunk: true
          subif_name: '{ifname}.{vlan.access_id}'
        vrf:
          ospfv2: true
          bgp: true
        vxlan: {}
      clab:
        kmods:
          initial:
          - ebtables
        node:
          kind: cvx
          runtime: docker
        image: networkop/cx:5.3.0
        group_vars:
          ansible_connection: docker
          ansible_user: root
      external:
        image: none
      graphite:
        icon: switch
    dellos10:
      description: Dell OS10
      interface_name: ethernet1/1/{ifindex}
      mgmt_if: mgmt1/1/1
      loopback_interface_name: loopback{ifindex}
      lag_interface_name: port-channel{lag.ifindex}
      features:
        initial:
          system_mtu: true
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          delay: 30
        bfd: {}
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: false
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        lag:
          reserved_ifindex_range:
          - 1000
          mlag:
            peer:
              mac: 0200.01a9.0000
              ip: loopback.ipv4
          passive: true
        ospf:
          default: true
          timers: true
          password: true
          priority: true
        routing:
          aspath: true
          community:
            expanded: false
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              locpref: true
              med: true
              weight: true
              prepend: true
              community:
                standard: true
                large: false
                extended: true
                append: true
                delete: false
          prefix: true
          static:
            vrf: true
            inter_vrf: true
        stp:
          supported_protocols:
          - stp
          - rstp
          - mstp
          - pvrst
          enable_per_port: true
          port_type: true
        vlan:
          model: switch
          svi_interface_name: virtual-network{vlan}
        vrf:
          ospfv2: true
          bgp: true
        vxlan: {}
      mtu: 1500
      clab:
        image: vrnetlab/vr-ftosv
        build: https://containerlab.dev/manual/kinds/vr-ftosv/
        node:
          kind: vr-ftosv
        interface:
          name: eth{ifindex}
        group_vars:
          ansible_user: admin
          ansible_ssh_pass: admin
          netlab_check_retries: 40
          netlab_check_delay: 10
      libvirt:
        image: dell/os10
        build: https://netlab.tools/labs/dellos10/
        create: virt-install --connect=qemu:///system --name=vm_box 
          --arch=x86_64 --cpu host --vcpus=2 --hvm --ram=4096 
          --network=network:vagrant-libvirt,model=virtio --graphics none 
          --import --disk path=vm.qcow2,format=qcow2,bus=sata --disk 
          path=hdb_OS10-installer.qcow2,format=qcow2,bus=virtio --disk 
          path=hdc_OS10-platform.qcow2,format=qcow2,bus=virtio
        pre_install: dellos10
      group_vars:
        ansible_network_os: dellos10
        ansible_connection: network_cli
        ansible_user: vagrant
        ansible_ssh_pass: vagrant
        netlab_save_config: true
      external:
        image: none
      graphite:
        icon: switch
    eos:
      description: Arista vEOS VM or cEOS container
      interface_name: Ethernet{ifindex}
      mgmt_if: Management1
      loopback_interface_name: Loopback{ifindex}
      tunnel_interface_name: Tunnel{ifindex}
      lag_interface_name: port-channel{lag.ifindex}
      role: router
      virtualbox:
        image: arista/veos
      group_vars:
        ansible_user: vagrant
        ansible_ssh_pass: vagrant
        ansible_network_os: eos
        ansible_connection: network_cli
      features:
        initial:
          system_mtu: true
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
            use_ra: true
          max_mtu: 9194
          min_mtu: 68
          roles:
          - host
          - router
          - bridge
          mgmt_vrf: true
        bfd: {}
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          community:
            standard:
            - standard
            - large
            large:
            - large
            extended:
            - extended
            2octet:
            - standard
        dhcp:
          client:
            ipv4: true
          relay: true
          vrf: true
          server: true
        evpn:
          asymmetrical_irb: true
          bundle:
          - vlan_aware
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - static
          - vrf
        lag:
          mlag:
            peer:
              vlan: 4094
              ifindex: 4094
              ip: 169.254.127.0/31
          passive: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          default:
            policy: true
          password: true
          priority: true
          timers: true
        ripv2:
          ipv4: true
          ipv6: false
          passive: false
        routing:
          policy:
            set:
            - locpref
            - med
            - weight
            - prepend
            - community
            match:
            - prefix
            - nexthop
            - aspath
            - community
          prefix: true
          aspath: true
          community:
            expanded: true
          static:
            vrf: true
            inter_vrf: true
            discard: true
        sr: {}
        stp:
          supported_protocols:
          - stp
          - rstp
          - mstp
          - pvrst
          enable_per_port: true
          port_type: true
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: Vlan{vlan}
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
          isis: true
        vxlan: {}
      clab:
        build: https://netlab.tools/labs/ceos/
        features:
          dhcp:
            client:
              ipv4: false
              ipv6: false
            _provider: clab
        interface:
          name: et{ifindex}
        node:
          kind: ceos
          env:
            INTFTYPE: et
            CLAB_MGMT_VRF: management
        mgmt_if: Management0
        image: ceos:4.33.1F
        group_vars:
          ansible_user: admin
          ansible_ssh_pass: admin
          ansible_become: 'yes'
          ansible_become_method: enable
      libvirt:
        build: https://netlab.tools/labs/eos/
        image: arista/veos
        create_template: eos.xml.j2
      external:
        image: none
      graphite:
        icon: switch
      bgp:
        _cprop_order:
        - standard
        - extended
        - large
        - link-bandwidth
      attributes:
        node:
          eos:
            serialnumber: str
            systemmacaddr: mac
    fortios:
      description: Fortinet FortiOS firewall
      interface_name: port{ifindex}
      loopback_interface_name: loopback{ifindex}
      mgmt_if: port1
      ifindex_offset: 2
      libvirt:
        image: fortinet/fortios
        build: https://netlab.tools/labs/fortios/
        create_template: fortios.xml.j2
      group_vars:
        ansible_user: admin
        ansible_password: admin
        ansible_ssh_pass: admin
        ansible_network_os: fortinet.fortios.fortios
        ansible_connection: httpapi
        collections:
        - fortinet.fortios
        vdom: root
        ansible_httpapi_use_ssl: 'no'
        ansible_httpapi_validate_certs: 'no'
        ansible_httpapi_port: 80
        netlab_console_connection: ssh
        netlab_skip_missing_template: true
        netlab_config_tasks: true
      external:
        image: none
      features:
        ospf: {}
      graphite:
        icon: firewall
    frr:
      description: FRR container
      interface_name: eth{ifindex}
      mgmt_if: eth0
      loopback_interface_name: lo{ifindex if ifindex else ""}
      tunnel_interface_name: tun{ifindex}
      lag_interface_name: bond{lag.ifindex}
      role: router
      routing:
        _rm_per_af: true
      group_vars:
        ansible_network_os: frr
        ansible_python_interpreter: auto_silent
        netlab_initial: always
        netlab_linux_packages:
          gnupg: gpg
          curl: curl
          iproute2: bridge
      mtu: 1500
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
          netlab_show_command:
          - vtysh
          - -c
          - show $@
          netlab_mgmt_vrf: true
        image: quay.io/frrouting/frr:10.3.1
        kmods:
        node:
          kind: linux
          config_templates:
            daemons: /etc/frr/daemons
            hosts: /etc/hosts
      libvirt:
        image: debian/bookworm64
        group_vars:
          ansible_connection: paramiko
          ansible_user: vagrant
          ansible_ssh_pass: vagrant
          ansible_ssh_private_key_file: .vagrant/machines/{{ inventory_hostname 
            }}/libvirt/private_key
          netlab_show_command:
          - sudo
          - vtysh
          - -c
          - show $@
      virtualbox:
        image: generic/ubuntu2004
        group_vars:
          ansible_connection: paramiko
          ansible_user: vagrant
          ansible_ssh_pass: vagrant
          netlab_show_command:
          - sudo
          - vtysh
          - -c
          - show $@
      external:
        image: none
      features:
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
            use_ra: true
          roles:
          - host
          - router
        bfd: {}
        bgp:
          activate_af: true
          ipv6_lla: true
          rfc8950: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
          import:
          - ospf
          - ripv2
          - isis
          - connected
          - static
          - vrf
          community:
            standard:
            - standard
            - large
            large:
            - large
            extended:
            - extended
            2octet:
            - standard
        evpn:
          irb: true
          asymmetrical_irb: true
          multi_rt: true
        gateway:
          protocol:
          - vrrp
          - anycast
        isis:
          import:
          - bgp
          - ripv2
          - ospf
          - connected
          - static
          - vrf
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        lag:
          passive: false
        mpls:
          ldp: true
          vpn:
            ipv4: true
        ospf:
          unnumbered: true
          import:
          - bgp
          - ripv2
          - isis
          - connected
          - static
          - vrf
          default: true
          password: true
          priority: true
          timers: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
        routing:
          policy:
            set:
              locpref: true
              med: true
              weight: true
              prepend: true
              community:
                standard: true
                large: true
                extended: true
                append: true
                delete: clist
                delete_list: true
            match:
            - prefix
            - nexthop
            - aspath
            - community
          prefix: true
          aspath: true
          community:
            expanded: true
          static:
            vrf: true
            inter_vrf: true
            discard: true
        sr: {}
        srv6:
          bgp: false
          isis: true
          vpn: true
        stp:
          supported_protocols:
          - stp
          enable_per_port: false
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: vlan{vlan}
        vrf:
          keep_module: true
          ospfv2: true
          ospfv3: true
          ripv2: true
          ripng: true
          bgp: true
          isis: true
        vxlan:
          vtep6: true
      graphite:
        icon: router
    iol:
      description: Cisco IOL
      loopback_interface_name: Loopback{ifindex}
      tunnel_interface_name: Tunnel{ifindex}
      group_vars:
        ansible_become_method: enable
        ansible_network_os: ios
        ansible_connection: network_cli
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o
          PubkeyAcceptedKeyTypes=ssh-rsa -o HostKeyAlgorithms=+ssh-rsa
      role: router
      routing:
        _rm_per_af: true
      features:
        bfd: {}
        bgp:
          local_as: true
          vrf_local_as: true
          local_as_ibgp: true
          activate_af: true
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          community:
            standard:
            - standard
            extended:
            - extended
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          vrf: true
          server: true
        eigrp: {}
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
            use_ra: true
          roles:
          - host
          - router
          - bridge
          mgmt_vrf: true
          min_mtu: 68
          min_phy_mtu: 1501
          max_mtu: 1500
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - static
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          ldp: true
          bgp: true
          vpn: true
          6pe: true
        ospf:
          unnumbered: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          default:
            policy: true
          password: true
          priority: true
          timers: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
        routing:
          policy:
            set:
              locpref: true
              med: true
              weight: true
              prepend: true
              community:
                standard: true
                append: true
            match:
            - prefix
            - nexthop
            - aspath
            - community
          prefix: true
          aspath: true
          community:
            expanded: true
          static:
            vrf: true
            inter_vrf: true
            discard: true
        vlan:
          model: l3-switch
          svi_interface_name: BDI{vlan}
          subif_name: '{ifname}.{subif_index}'
          mixed_trunk: true
          native_routed: true
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
          ripv2: true
          ripng: true
        gateway:
          protocol:
          - vrrp
        sr: {}
      external:
        image: none
      graphite:
        icon: router
      interface_name: Ethernet{ifindex // 4}/{ifindex % 4}
      clab:
        group_vars:
          ansible_user: admin
          ansible_ssh_pass: admin
          ansible_become_password: admin
          netlab_device_type: iol
          netlab_check_retries: 20
        interface:
          name: Ethernet{ifindex // 4}/{ifindex % 4}
        build: https://containerlab.dev/manual/kinds/cisco_iol/
        image: vrnetlab/cisco_iol:17.12.01
        node:
          kind: cisco_iol
    ioll2:
      description: IOSv L2 image
      loopback_interface_name: Loopback{ifindex}
      tunnel_interface_name: Tunnel{ifindex}
      group_vars:
        ansible_become_method: enable
        ansible_network_os: ios
        ansible_connection: network_cli
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o
          PubkeyAcceptedKeyTypes=ssh-rsa -o HostKeyAlgorithms=+ssh-rsa
      role: router
      routing:
        _rm_per_af: true
      features:
        bfd: {}
        bgp:
          local_as: true
          vrf_local_as: true
          local_as_ibgp: true
          activate_af: true
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          community:
            standard:
            - standard
            extended:
            - extended
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          vrf: true
          server: true
        eigrp: {}
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
            use_ra: true
          roles:
          - host
          - router
          - bridge
          mgmt_vrf: true
          min_mtu: 68
          min_phy_mtu: 1501
          max_mtu: 1500
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - static
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          ldp: true
          bgp: true
          vpn: true
          6pe: true
        ospf:
          unnumbered: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          default:
            policy: true
          password: true
          priority: true
          timers: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
        routing:
          policy:
            set:
              locpref: true
              med: true
              weight: true
              prepend: true
              community:
                standard: true
                append: true
            match:
            - prefix
            - nexthop
            - aspath
            - community
          prefix: true
          aspath: true
          community:
            expanded: true
          static:
            vrf: true
            inter_vrf: true
            discard: true
        vlan:
          model: l3-switch
          svi_interface_name: Vlan{vlan}
          subif_name: '{ifname}.{subif_index}'
          mixed_trunk: false
          native_routed: true
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
          ripv2: true
          ripng: true
        gateway:
          protocol:
          - vrrp
        sr: {}
      external:
        image: none
      graphite:
        icon: router
      interface_name: Ethernet{ifindex // 4}/{ifindex % 4}
      clab:
        group_vars:
          ansible_user: admin
          ansible_ssh_pass: admin
          ansible_become_password: admin
          netlab_device_type: ioll2
          netlab_check_retries: 20
        interface:
          name: Ethernet{ifindex // 4}/{ifindex % 4}
        build: https://containerlab.dev/manual/kinds/cisco_iol/
        image: vrnetlab/cisco_iol:L2-17.12.01
        node:
          kind: cisco_iol
          type: l2
        mtu: 1500
    iosv:
      description: Cisco IOSv
      loopback_interface_name: Loopback{ifindex}
      tunnel_interface_name: Tunnel{ifindex}
      group_vars:
        ansible_become_method: enable
        ansible_network_os: ios
        ansible_connection: network_cli
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o
          PubkeyAcceptedKeyTypes=ssh-rsa -o HostKeyAlgorithms=+ssh-rsa
        netlab_device_type: ios
        ansible_user: vagrant
        ansible_ssh_pass: vagrant
        ansible_become_password: vagrant
      role: router
      routing:
        _rm_per_af: true
      features:
        bfd: {}
        bgp:
          local_as: true
          vrf_local_as: true
          local_as_ibgp: true
          activate_af: true
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          community:
            standard:
            - standard
            extended:
            - extended
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          vrf: true
          server: true
        eigrp: {}
        initial:
          ipv4:
            unnumbered: false
          ipv6:
            lla: true
            use_ra: true
          roles:
          - host
          - router
          - bridge
          mgmt_vrf: true
          min_mtu: 64
          max_mtu: 9600
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - static
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          ldp: true
          bgp: true
          vpn: true
          6pe: true
        ospf:
          unnumbered: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          default:
            policy: true
          password: true
          priority: true
          timers: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
        routing:
          policy:
            set:
              locpref: true
              med: true
              weight: true
              prepend: true
              community:
                standard: true
                append: true
            match:
            - prefix
            - nexthop
            - aspath
            - community
          prefix: true
          aspath: true
          community:
            expanded: true
          static:
            vrf: true
            inter_vrf: true
            discard: true
        vlan:
          model: router
          svi_interface_name: BVI{bvi}
          subif_name: '{ifname}.{subif_index}'
          mixed_trunk: true
          native_routed: true
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
          ripv2: true
          ripng: true
        gateway:
          protocol:
          - vrrp
      external:
        image: none
      graphite:
        icon: router
      interface_name: GigabitEthernet0/{ifindex}
      libvirt:
        image: cisco/iosv
        build: https://netlab.tools/labs/iosv/
        create_template: iosv.xml.j2
      virtualbox:
        image: cisco/iosv
      clab:
        group_vars:
          ansible_ssh_pass: VR-netlab9
          ansible_user: vrnetlab
          netlab_check_retries: 50
        image: vrnetlab/cisco_vios:15.9.3
        node:
          kind: linux
        interface:
          name: eth{ifindex}
        build: https://github.com/hellt/vrnetlab/tree/master/vios
    iosvl2:
      description: IOSv L2 image
      loopback_interface_name: Loopback{ifindex}
      tunnel_interface_name: Tunnel{ifindex}
      group_vars:
        ansible_become_method: enable
        ansible_network_os: ios
        ansible_connection: network_cli
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o
          PubkeyAcceptedKeyTypes=ssh-rsa -o HostKeyAlgorithms=+ssh-rsa
        netlab_device_type: iosvl2
        ansible_user: vagrant
        ansible_ssh_pass: vagrant
        ansible_become_password: vagrant
      role: router
      routing:
        _rm_per_af: true
      features:
        bfd: {}
        bgp:
          local_as: true
          vrf_local_as: true
          local_as_ibgp: true
          activate_af: true
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          community:
            standard:
            - standard
            extended:
            - extended
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          vrf: true
          server: true
        eigrp: {}
        initial:
          ipv4:
            unnumbered: false
          ipv6:
            lla: true
            use_ra: true
          roles:
          - host
          - router
          - bridge
          mgmt_vrf: true
          min_mtu: 68
          max_mtu: 4700
          min_phy_mtu: 1500
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - static
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          ldp: true
          bgp: true
          vpn: true
          6pe: true
        ospf:
          unnumbered: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          default:
            policy: true
          password: true
          priority: true
          timers: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
        routing:
          policy:
            set:
              locpref: true
              med: true
              weight: true
              prepend: true
              community:
                standard: true
                append: true
            match:
            - prefix
            - nexthop
            - aspath
            - community
          prefix: true
          aspath: true
          community:
            expanded: true
          static:
            vrf: true
            inter_vrf: true
            discard: true
        vlan:
          model: l3-switch
          svi_interface_name: Vlan{vlan}
          subif_name: '{ifname}.{subif_index}'
          mixed_trunk: false
          native_routed: true
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
          ripv2: true
          ripng: true
        gateway:
          protocol:
          - vrrp
      external:
        image: none
      graphite:
        icon: router
      interface_name: GigabitEthernet{ifindex // 4}/{ifindex % 4}
      libvirt:
        image: cisco/iosvl2
        build: https://netlab.tools/labs/iosvl2/
        create_template: iosv.xml.j2
      virtualbox:
        image: cisco/iosv
      clab:
        group_vars:
          ansible_ssh_pass: VR-netlab9
          ansible_user: vrnetlab
          netlab_check_retries: 50
        image: vrnetlab/cisco_vios:15.9.3
        node:
          kind: linux
        interface:
          name: eth{ifindex}
        build: https://github.com/hellt/vrnetlab/tree/master/vios
    iosxr:
      description: Cisco IOS XRv
      mgmt_if: MgmtEth0/RP0/CPU0/0
      interface_name: GigabitEthernet0/0/0/{ifindex}
      loopback_interface_name: Loopback{ifindex}
      ifindex_offset: 0
      group_vars:
        ansible_user: vagrant
        ansible_ssh_pass: vagrant
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_network_os: iosxr
        ansible_connection: network_cli
      features:
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        ospf:
          unnumbered: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        bgp:
          activate_af: true
      external:
        image: none
      libvirt:
        image: cisco/iosxr
        build: https://netlab.tools/labs/iosxr/
        create: virt-install --connect=qemu:///system --network 
          network=vagrant-libvirt,model=e1000 --name=vm_box --cpu host 
          --arch=x86_64 --vcpus=2 --ram=8192 --virt-type=kvm --disk 
          path=vm.qcow2,format=qcow2,device=disk,bus=ide --graphics none 
          --import
      clab:
        node:
          kind: cisco_xrd
          runtime: docker
        mgmt_if: MgmtEth0/RP0/CPU0/0
        interface:
          name: Gi0-0-0-{ifindex}
        image: ios-xr/xrd-control-plane:7.11.1
        build: https://containerlab.dev/manual/kinds/xrd/
        group_vars:
          ansible_user: clab
          ansible_ssh_pass: clab@123
          ansible_become_password: clab@123
    linux:
      description: Generic Linux host
      interface_name: eth{ifindex}
      lag_interface_name: bond{lag.ifindex}
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      role: host
      features:
        lag:
          passive: false
        routing:
          static: true
        initial:
          ipv4:
            unnumbered: peer
          ipv6:
            use_ra: true
          roles:
          - host
      libvirt:
        image: bento/ubuntu-24.04
        group_vars:
          netlab_linux_distro: ubuntu
        features:
          dhcp:
            client:
              ipv4: true
              ipv6: true
            server: true
            relay:
              ipv4: true
            _provider: libvirt
      virtualbox:
        image: bento/ubuntu-24.04
        group_vars:
          netlab_linux_distro: ubuntu
      group_vars:
        ansible_network_os: linux
        ansible_connection: paramiko
        ansible_user: vagrant
        ansible_ssh_pass: vagrant
        docker_shell: sh -il
        ansible_python_interpreter: auto_silent
        netlab_lldp_enable: false
        netlab_net_tools: false
      clab:
        features:
          initial:
            roles:
            - host
            - bridge
          vlan:
            mixed_trunk: true
            model: router
            native_routed: true
            subif_name: '{ifname}.{vlan.access_id}'
            svi_interface_name: vlan{vlan}
            _provider: clab
        image: python:3.13-alpine
        mtu: 1500
        kmods:
        node:
          kind: linux
          config_templates:
            hosts: /etc/hosts
        group_vars:
          ansible_connection: docker
          ansible_user: root
          netlab_linux_distro: vanilla
      external:
        image: none
      graphite:
        icon: server
    none:
      description: Dummy device used to test topology transformation
      interface_name: eth{ifindex}
      lag_interface_name: bond{lag.ifindex}
      loopback_interface_name: Loopback{ifindex}
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: none
      libvirt:
        image: none
      clab:
        image: none
      external:
        image: none
      group_vars:
        ansible_connection: paramiko_ssh
        ansible_network_os: none
      features:
        bfd: {}
        bgp:
          local_as: true
          vrf_local_as: true
          local_as_ibgp: true
          activate_af: true
          ipv6_lla: true
          rfc8950: true
          bandwidth: true
          multihop:
            vrf: true
          allowas_in: true
          as_override: true
          bfd: true
          default_originate: true
          gtsm: true
          passive: true
          password: true
          remove_private_as: true
          rs_client: true
          rs: true
          tcp_ao:
          - libvirt
          - virtualbox
          - external
          timers: true
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          vrf: true
          server: true
        eigrp: {}
        evpn:
          irb: true
          asymmetrical_irb: true
          bundle:
          - vlan_aware
          multi_rt: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          mgmt_vrf: true
          roles:
          - router
          - bridge
          - host
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - vrf
          vrf: true
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        lag:
          mlag: true
          passive: true
        mpls:
          ldp: true
          bgp: true
          vpn: true
          6pe: true
        ospf:
          unnumbered: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          default:
            policy: true
          password: true
          priority: true
          timers: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
          import:
          - bgp
          - isis
          - ospf
          - connected
          - vrf
        routing:
          policy:
            set:
              locpref: true
              med: true
              weight: true
              prepend: true
              community: true
            match:
            - prefix
            - nexthop
            - aspath
            - community
          prefix: true
          aspath: true
          community:
            expanded: true
          static:
            vrf: true
            inter_vrf: true
            discard: true
        sr: {}
        srv6:
          isis: true
          ospf: true
          bgp: true
          vpn: true
        stp:
          supported_protocols:
          - stp
          - rstp
          - mstp
          - pvrst
          enable_per_port: true
          port_type: true
        vlan:
          model: router
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: Vlan{vlan}
          mixed_trunk: true
          native_routed: true
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
          ripv2: true
          ripng: true
          isis: true
        vxlan:
          vtep6: true
    nxos:
      description: Cisco Nexus 9300v
      interface_name: Ethernet1/{ifindex}
      mgmt_if: mgmt0
      loopback_interface_name: loopback{ifindex}
      virtualbox:
        image: cisco/nexus9300v
      clab:
        group_vars:
          ansible_ssh_pass: admin
          ansible_user: admin
        image: vrnetlab/vr-n9kv:9.3.8
        node:
          kind: cisco_n9kv
        interface:
          name: eth{ifindex}
        build: https://containerlab.dev/manual/kinds/vr-n9kv/
      group_vars:
        ansible_user: vagrant
        ansible_ssh_pass: vagrant
        ansible_network_os: nxos
        ansible_connection: network_cli
        netlab_check_retries: 50
        netlab_check_delay: 10
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group14-sha1 -o 
          PubkeyAcceptedKeyTypes=+ssh-rsa -o HostKeyAlgorithms=+ssh-rsa
      bfd:
        min_rx: 500
      evpn:
        _start_transit_vlan: 3800
      features:
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        bfd: {}
        bgp: {}
        eigrp: {}
        evpn:
          irb: true
        gateway:
          protocol:
          - vrrp
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        ospf:
          unnumbered: true
          timers: true
          password: true
          priority: true
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: vlan{vlan}
        vrf:
          ospfv2: true
          bgp: true
        vxlan: {}
      libvirt:
        create_template: nxos.xml.j2
        image: cisco/nexus9300v
        build: https://netlab.tools/labs/nxos/
      external:
        image: none
      graphite:
        icon: nexus5000
    routeros:
      description: Mikrotik RouterOS version 6
      interface_name: ether{ifindex}
      mgmt_if: ether1
      ifindex_offset: 2
      loopback_interface_name: loopback
      libvirt:
        image: mikrotik/chr
        build: https://stefano.dscnet.org/a/mikrotik_vagrant/
      group_vars:
        ansible_network_os: routeros
        ansible_connection: network_cli
        ansible_user: admin
        ansible_ssh_pass: admin
      features:
        bgp: {}
        mpls:
          ldp: true
          vpn: true
        ospf: {}
        vlan:
          model: router
          svi_interface_name: bridge{vlan}
          subif_name: '{ifname}-{vlan.access_id}'
          mixed_trunk: true
          native_routed: true
        vrf:
          ospfv2: true
          bgp: true
      external:
        image: none
      graphite:
        icon: router
    routeros7:
      description: Mikrotik RouterOS version 7
      interface_name: ether{ifindex}
      mgmt_if: ether1
      loopback_interface_name: loopback{ifindex}
      ifindex_offset: 2
      libvirt:
        image: mikrotik/chr7
        build: https://netlab.tools/labs/routeros7/
        create: virt-install --connect=qemu:///system --name=vm_box 
          --arch=x86_64 --cpu host --vcpus=2 --hvm --ram=256 
          --network=network:vagrant-libvirt,model=virtio --graphics none 
          --import --disk path=vm.qcow2,format=qcow2,bus=ide
      group_vars:
        ansible_network_os: routeros
        ansible_connection: network_cli
        ansible_user: admin
        ansible_ssh_pass: admin
        netlab_device_type: routeros7
      features:
        bgp: {}
        mpls:
          ldp: true
          vpn: true
        ospf: {}
        vlan:
          model: l3-switch
          svi_interface_name: vlan{vlan}
          subif_name: '{ifname}-{vlan.access_id}'
          native_routed: true
        vrf:
          ospfv2: true
          bgp: true
      clab:
        image: vrnetlab/vr-routeros:7.6
        build: https://containerlab.dev/manual/kinds/vr-ros/
        node:
          kind: vr-ros
        interface:
          name: eth{ifindex-1}
      external:
        image: none
      graphite:
        icon: router
    sonic:
      description: Sonic VM
      interface_name: Ethernet{ifindex * 4}
      ifindex_offset: 0
      mgmt_if: eth0
      loopback_interface_name: Loopback{ifindex}
      group_vars:
        ansible_network_os: frr
        ansible_python_interpreter: auto_silent
        netlab_device_type: sonic
      libvirt:
        image: netlab/sonic
        mtu: 1500
        create_template: sonic.xml.j2
        group_vars:
          ansible_connection: paramiko
          ansible_user: admin
          ansible_ssh_pass: YourPaSsWoRd
          netlab_show_command:
          - sudo
          - vtysh
          - -c
          - show $@
      external:
        image: none
      features:
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
          community:
            standard:
            - standard
            - large
            large:
            - large
            extended:
            - extended
            2octet:
            - standard
      graphite:
        icon: router
    srlinux:
      description: Nokia SR Linux container
      mgmt_if: mgmt0
      interface_name: ethernet-1/{ifindex}
      loopback_interface_name: lo0.{ifindex}
      group_vars:
        ansible_user: admin
        ansible_ssh_pass: NokiaSrl1!
        ansible_network_os: srlinux
        ansible_connection: paramiko
        netlab_console_connection: ssh
        netlab_match_protomap:
          ospf:
          - ospfv2
          - ospfv3
          bgp:
          - bgp
          - bgp-evpn
          connected:
          - local
          isis:
          - isis
      sr:
        srgb_range_start: 500000
        srgb_range_size: 1000
        ipv6_sid_offset: 100
      bfd:
        min_tx: 100
        min_rx: 100
      clab:
        image: ghcr.io/nokia/srlinux:25.3.2
        node:
          kind: srl
          type: ixrd2
        interface:
          name: e1-{ifindex}
        group_vars:
          srlinux_grpc_port: 57400
      features:
        initial:
          system_mtu: true
          min_mtu: 1436
          max_mtu: 9500
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        bfd: {}
        bgp:
          local_as: true
          vrf_local_as: true
          local_as_ibgp: true
          activate_af: true
          ipv6_lla: true
          import:
          - ospf
          - isis
          - connected
          - vrf
          - no_policy
          community:
            standard:
            - standard
            - large
            large:
            - large
            extended:
            - extended
            2octet:
            - standard
        evpn:
          irb: true
          asymmetrical_irb: true
        gateway:
          protocol:
          - anycast
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
          import:
          - ospf
          - bgp
          - connected
          - vrf
          - no_policy
        mpls:
          ldp: true
        ospf:
          unnumbered: true
          import:
          - bgp
          - isis
          - connected
          - vrf
          - no_policy
          default: true
        routing:
          policy:
            match:
              prefix: true
            set:
            - locpref
            - med
          prefix: true
        sr: {}
        vlan:
          model: router
          svi_interface_name: irb0.{vlan}
          subif_name: '{ifname}.{vlan.access_id}'
          mixed_trunk: true
        vrf:
          keep_module: true
          ospfv2: true
          ospfv3: true
          bgp: true
          isis: true
        vxlan:
          requires:
          - evpn
      external:
        image: none
      graphite:
        icon: router
      provider: clab
    sros:
      description: Nokia SR OS container
      mgmt_if: A/1
      interface_name: eth-1/1/c{ifindex}
      loopback_interface_name: >-
        {"loopback."+str(ifindex) if ifindex else "system"}
      group_vars:
        ansible_user: admin
        ansible_ssh_pass: admin
        ansible_network_os: sros
        ansible_connection: paramiko_ssh
        netlab_console_connection: ssh
        sros_use_openconfig: false
        netlab_match_protomap:
          ospf:
          - ospf
          - ospf3
          bgp:
          - bgp
          connected:
          - direct
          isis:
          - isis
      sr:
        srgb_range_start: 500000
        srgb_range_size: 1000
        ipv6_sid_offset: 100
      bfd:
        min_tx: 100
        min_rx: 100
      features:
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          min_phy_mtu: 1500
          max_mtu: 9782
        bfd: {}
        bgp:
          local_as: true
          vrf_local_as: true
          local_as_ibgp: true
          activate_af: true
          ipv6_lla: false
          import:
          - ospf
          - isis
          - connected
          - vrf
          - no_policy
        evpn:
          irb: true
          asymmetrical_irb: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: false
          import:
          - ospf
          - bgp
          - connected
          - vrf
          - no_policy
        mpls:
          ldp: true
          bgp: true
          vpn: true
          6pe: true
        ospf:
          unnumbered: true
          import:
          - bgp
          - isis
          - connected
          - vrf
          - no_policy
          strict_bfd: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
        routing:
          policy:
            set:
            - locpref
            - med
        gateway:
          protocol:
          - anycast
          - vrrp
        sr: {}
        srv6:
          bgp: true
          isis: true
        vlan:
          model: router
          svi_interface_name: svi.{vlan}
          subif_name: '{ifname}/1_{vlan.access_id}'
          mixed_trunk: true
          native_routed: true
        vrf:
          ospfv2: true
          ospfv3: true
          isis: true
          bgp: true
        vxlan:
          requires:
          - evpn
      clab:
        image: vrnetlab/vr-sros
        build: https://containerlab.dev/manual/kinds/vr-sros/
        mtu: 1500
        node:
          kind: vr-sros
          type: sr-1
          license: /Projects/SR_OS_VSR-SIM_license.txt
        interface:
          name: eth{ifindex}
        group_vars:
          sros_grpc_port: 57400
      external:
        image: none
      graphite:
        icon: router
    unknown:
      description: Generic Unknown Device
      interface_name: eth{ifindex}
      mgmt_if: eth0
      graphite:
        icon: server
      features:
        bfd: {}
        bgp: {}
        evpn: {}
        gateway: {}
        isis: {}
        mpls: {}
        ospf: {}
        sr: {}
        srv6: {}
        vlan: {}
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
        vxlan: {}
    vjunos-router:
      description: vJunos Router (similar to vMX)
      loopback_interface_name: lo0.{ifindex}
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      lag_interface_name: ae{lag.ifindex}
      mgmt_if: fxp0
      group_vars:
        ansible_user: admin
        ansible_ssh_pass: admin@123
        ansible_network_os: junos
        ansible_connection: netconf
        netlab_console_connection: ssh
        netlab_device_type: vjunos-router
        netlab_check_retries: 20
        netlab_license_url: 
          https://www.juniper.net/content/dam/www/assets/dm/us/en/E421992502.txt
      features:
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        bfd: {}
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        gateway:
          protocol:
          - anycast
          - vrrp
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        routing:
          policy:
            match:
            - prefix
            - aspath
            - community
            set:
              locpref: true
              med: true
              prepend: true
              community:
                standard: true
                large: true
                extended: true
                append: true
                delete: true
          static:
            vrf: true
            discard: true
          prefix: true
          aspath: true
          community:
            expanded: true
        sr: {}
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
        vlan:
          model: router
          svi_interface_name: irb.{vlan}
          subif_name: '{ifname}.{vlan.access_id}'
          mixed_trunk: true
          native_routed: true
      external:
        image: none
      clab:
        image: vrnetlab/juniper_vjunos-router:23.4R2-S2.1
        build: https://containerlab.dev/manual/kinds/vr-vjunosrouter/
        node:
          kind: juniper_vjunosrouter
        interface:
          name: eth{ifindex+1}
        mtu: 1500
        group_vars:
          ansible_user: admin
          ansible_ssh_pass: admin@123
          netlab_check_retries: 60
          netlab_check_delay: 10
      graphite:
        icon: router
    vjunos-switch:
      description: vJunos Switch
      loopback_interface_name: lo0.{ifindex}
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      lag_interface_name: ae{lag.ifindex}
      mgmt_if: fxp0
      group_vars:
        ansible_user: vagrant
        ansible_ssh_pass: Vagrant
        ansible_network_os: junos
        ansible_connection: netconf
        netlab_console_connection: ssh
        netlab_device_type: vjunos-switch
      features:
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        bfd: {}
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        gateway:
          protocol:
          - anycast
          - vrrp
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        routing:
          policy:
            match:
            - prefix
            - aspath
            - community
            set:
              locpref: true
              med: true
              prepend: true
              community:
                standard: true
                large: true
                extended: true
                append: true
                delete: true
          static:
            vrf: true
            discard: true
          prefix: true
          aspath: true
          community:
            expanded: true
        sr: {}
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
        evpn:
          asymmetrical_irb: true
          irb: true
          multi_rt: true
        lag:
          passive: true
        vlan:
          model: l3-switch
          svi_interface_name: irb.{vlan}
          subif_name: '{ifname}.{vlan.access_id}'
          native_routed: true
        vxlan: {}
      external:
        image: none
      clab:
        image: vrnetlab/juniper_vjunos-switch:23.4R2-S2.1
        build: https://containerlab.dev/manual/kinds/vr-vjunosswitch/
        mtu: 1500
        node:
          kind: juniper_vjunosswitch
        interface:
          name: eth{ifindex+1}
        group_vars:
          ansible_user: admin
          ansible_ssh_pass: admin@123
          netlab_check_retries: 40
          netlab_check_delay: 10
      graphite:
        icon: switch
    vmx:
      description: Juniper vMX container
      loopback_interface_name: lo0.{ifindex}
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      lag_interface_name: ae{lag.ifindex}
      mgmt_if: fxp0
      group_vars:
        ansible_user: admin
        ansible_ssh_pass: admin@123
        ansible_network_os: junos
        ansible_connection: netconf
        netlab_console_connection: ssh
        netlab_device_type: vmx
        netlab_check_retries: 20
        netlab_license_url: 
          https://www.juniper.net/content/dam/www/assets/dm/us/en/E421992502.txt
      features:
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        bfd: {}
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        gateway:
          protocol:
          - anycast
          - vrrp
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        routing:
          policy:
            match:
            - prefix
            - aspath
            - community
            set:
              locpref: true
              med: true
              prepend: true
              community:
                standard: true
                large: true
                extended: true
                append: true
                delete: true
          static:
            vrf: true
            discard: true
          prefix: true
          aspath: true
          community:
            expanded: true
        sr: {}
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
        vlan:
          model: router
          svi_interface_name: irb.{vlan}
          subif_name: '{ifname}.{vlan.access_id}'
          mixed_trunk: true
          native_routed: true
      external:
        image: none
      clab:
        image: vrnetlab/vr-vmx:18.2R1.9
        build: https://containerlab.dev/manual/kinds/vr-vmx/
        node:
          kind: vr-vmx
        interface:
          name: eth{ifindex+1}
      graphite:
        icon: router
    vptx:
      description: Juniper vPTX
      loopback_interface_name: lo0.{ifindex}
      ifindex_offset: 0
      interface_name: et-0/0/{ifindex}
      lag_interface_name: ae{lag.ifindex}
      mgmt_if: re0:mgmt-0
      group_vars:
        ansible_user: vagrant
        ansible_ssh_pass: Vagrant
        ansible_network_os: junos
        ansible_connection: netconf
        netlab_console_connection: ssh
        netlab_device_type: vptx
      features:
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        bfd: {}
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        gateway:
          protocol:
          - vrrp
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        routing:
          policy:
            match:
            - prefix
            - aspath
            - community
            set:
              locpref: true
              med: true
              prepend: true
              community:
                standard: true
                large: true
                extended: true
                append: true
                delete: true
          static:
            vrf: true
            discard: true
          prefix: true
          aspath: true
          community:
            expanded: true
        sr: {}
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
        lag:
          passive: true
        vlan:
          model: l3-switch
          svi_interface_name: irb.{vlan}
          subif_name: '{ifname}.{vlan.access_id}'
          native_routed: true
      external:
        image: none
      libvirt:
        image: juniper/vptx
        build: https://netlab.tools/labs/vptx/
        pre_install: vptx
        create_template: vptx.xml.j2
      clab:
        image: vrnetlab/juniper_vjunosevolved:23.4R2-S2.1
        build: https://containerlab.dev/manual/kinds/vr-vjunosevolved/
        mtu: 1500
        node:
          kind: juniper_vjunosevolved
        interface:
          name: eth{ifindex+1}
        group_vars:
          ansible_user: admin
          ansible_ssh_pass: admin@123
          netlab_check_retries: 40
          netlab_check_delay: 10
      graphite:
        icon: switch
    vsrx:
      description: Juniper vSRX 3.0
      loopback_interface_name: lo0.{ifindex}
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      lag_interface_name: ae{lag.ifindex}
      mgmt_if: fxp0
      group_vars:
        ansible_user: vagrant
        ansible_ssh_pass: Vagrant
        ansible_network_os: junos
        ansible_connection: netconf
        netlab_console_connection: ssh
        netlab_device_type: vsrx
      features:
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        bfd: {}
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        gateway:
          protocol:
          - vrrp
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        routing:
          policy:
            match:
            - prefix
            - aspath
            - community
            set:
              locpref: true
              med: true
              prepend: true
              community:
                standard: true
                large: true
                extended: true
                append: true
                delete: true
          static:
            vrf: true
            discard: true
          prefix: true
          aspath: true
          community:
            expanded: true
        sr: {}
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
        lag:
          passive: true
        vlan:
          model: router
          subif_name: '{ifname}.{vlan.access_id}'
          mixed_trunk: false
          native_routed: true
      external:
        image: none
      virtualbox:
        image: juniper/vsrx3
      libvirt:
        image: juniper/vsrx3
        build: https://netlab.tools/labs/vsrx/
        create_iso: vsrx
        create: virt-install --connect=qemu:///system --name=vm_box 
          --os-variant=freebsd10.0 --arch=x86_64 --cpu host --vcpus=2 --hvm 
          --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2 --disk 
          path=bootstrap.iso,device=cdrom,bus=ide --boot hd 
          --network=network:vagrant-libvirt,model=virtio --graphics none 
          --import
      clab:
        image: vrnetlab/juniper_vsrx:21.3R1.9
        build: https://containerlab.dev/manual/kinds/vr-vsrx/
        node:
          kind: vr-vsrx
        interface:
          name: eth{ifindex+1}
        group_vars:
          ansible_user: admin
          ansible_ssh_pass: admin@123
          netlab_check_retries: 60
          netlab_check_delay: 10
      graphite:
        icon: firewall
    vyos:
      description: VyOS VM/container
      interface_name: eth{ifindex}
      loopback_interface_name: dum{ifindex}
      mgmt_if: eth0
      libvirt:
        image: vyos/current
      group_vars:
        ansible_network_os: vyos
        ansible_connection: paramiko
        ansible_user: vyos
        ansible_ssh_pass: vyos
        docker_shell: su - vyos
      features:
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        bfd: {}
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          vrf_local_as: true
          import:
          - ospf
          - ripv2
          - connected
          - static
          - vrf
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - vrrp
        isis: {}
        mpls:
          ldp: true
          vpn:
            ipv4: true
        ospf:
          unnumbered: true
          import:
          - bgp
          - ripv2
          - connected
          - static
          - vrf
          default: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
        routing:
          policy:
            set:
              locpref: true
              med: true
              prepend: true
              community:
                standard: true
                large: true
                extended: true
                append: true
                delete: false
            match:
            - prefix
            - nexthop
            - aspath
            - community
          prefix: true
          aspath: true
          community:
            expanded: true
          static:
            vrf: true
            inter_vrf: true
            discard: true
        vlan:
          model: l3-switch
          svi_interface_name: br0.{vlan}
          subif_name: '{ifname}.{vlan.access_id}'
          native_routed: true
        vrf:
          ospfv2: true
          ospfv3: true
          bgp: true
        vxlan:
          vtep6: true
      clab:
        image: ghcr.io/sysoleg/vyos-container
        mtu: 1500
        kmods:
        node:
          kind: linux
          binds:
            /lib/modules: /lib/modules
        group_vars:
          ansible_connection: docker
          ansible_user: vyos
        features:
          stub_loopback: {}
      external:
        image: none
      graphite:
        icon: router
    bird:
      description: BIRD Internet Routing Daemon
      interface_name: eth{ifindex}
      lag_interface_name: bond{lag.ifindex}
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      role: host
      features:
        lag:
          passive: false
        routing:
          static:
            discard: true
        initial:
          ipv4:
            unnumbered: peer
          ipv6:
            use_ra: true
            lla: true
          roles:
          - host
          - router
        bfd: {}
        bgp:
          activate_af: true
          ipv6_lla: false
          rfc8950: true
          local_as: true
          local_as_ibgp: true
          community:
            standard:
            - standard
            - large
            large:
            - large
            extended:
            - extended
            2octet:
            - standard
          import:
          - ospf
          - connected
          - static
        ospf:
          import:
          - bgp
          - connected
          - static
          password: true
          priority: true
          timers: true
          unnumbered: true
      libvirt:
        group_vars:
          netlab_linux_distro: ubuntu
        features:
          dhcp:
            client:
              ipv4: true
              ipv6: true
            server: true
            relay:
              ipv4: true
            _provider: libvirt
      virtualbox:
        group_vars:
          netlab_linux_distro: ubuntu
      group_vars:
        ansible_network_os: linux
        ansible_connection: paramiko
        ansible_user: vagrant
        ansible_ssh_pass: vagrant
        docker_shell: sh -il
        ansible_python_interpreter: auto_silent
        netlab_lldp_enable: false
        netlab_net_tools: false
        netlab_import_map:
          bgp: RTS_BGP
          ospf: RTS_OSPF
          connected: RTS_DEVICE
          static: RTS_STATIC_DEVICE,RTS_STATIC
        netlab_device_type: bird
      clab:
        features:
          initial:
            roles:
            - host
            - router
          vlan:
            mixed_trunk: true
            model: router
            native_routed: true
            subif_name: '{ifname}.{vlan.access_id}'
            svi_interface_name: vlan{vlan}
            _provider: clab
        image: netlab/bird:latest
        mtu: 1500
        node:
          kind: linux
          config_templates:
            hosts: /etc/hosts
        group_vars:
          ansible_connection: docker
          ansible_user: root
          netlab_linux_distro: vanilla
          netlab_show_command:
          - birdc
          - show $@
          docker_shell: bash -il
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
      external:
        image: none
      graphite:
        icon: server
      packages:
        bird: bird
      daemon_config:
        bird: /etc/bird/bird.conf
        bgp: /etc/bird/bgp.mod.conf
        ospf: /etc/bird/ospf.mod.conf
        routing: /etc/bird/routing.mod.conf
      daemon: true
      daemon_parent: linux
    dnsmasq:
      description: DNSmasq - DNS and DHCP server
      interface_name: eth{ifindex}
      lag_interface_name: bond{lag.ifindex}
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      role: host
      features:
        lag:
          passive: false
        routing:
          static: true
        initial:
          ipv4:
            unnumbered: peer
          ipv6:
            use_ra: true
          roles:
          - host
        dhcp:
          server: true
      libvirt:
        group_vars:
          netlab_linux_distro: ubuntu
        features:
          dhcp:
            client:
              ipv4: true
              ipv6: true
            server: true
            relay:
              ipv4: true
            _provider: libvirt
      virtualbox:
        group_vars:
          netlab_linux_distro: ubuntu
      group_vars:
        ansible_network_os: linux
        ansible_connection: paramiko
        ansible_user: vagrant
        ansible_ssh_pass: vagrant
        docker_shell: sh -il
        ansible_python_interpreter: auto_silent
        netlab_lldp_enable: false
        netlab_net_tools: false
        netlab_device_type: dnsmasq
      clab:
        features:
          initial:
            roles:
            - host
          vlan:
            mixed_trunk: true
            model: router
            native_routed: true
            subif_name: '{ifname}.{vlan.access_id}'
            svi_interface_name: vlan{vlan}
            _provider: clab
        image: netlab/dnsmasq:latest
        mtu: 1500
        node:
          kind: linux
          config_templates:
            hosts: /etc/hosts
        group_vars:
          ansible_connection: docker
          ansible_user: root
          netlab_linux_distro: vanilla
          docker_shell: bash -il
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
      external:
        image: none
      graphite:
        icon: server
      packages:
        dnsmasq: dnsmasq
      daemon_config:
        dnsmasq: /etc/dnsmasq.conf
        dhcp: /etc/dhcp.ignore
      node:
        module:
        - dhcp
      dhcp:
        server: true
      module:
      - dhcp
      daemon: true
      daemon_parent: linux
  daemons:
    bird:
      description: BIRD Internet Routing Daemon
      group_vars:
        netlab_import_map:
          bgp: RTS_BGP
          ospf: RTS_OSPF
          connected: RTS_DEVICE
          static: RTS_STATIC_DEVICE,RTS_STATIC
      packages:
        bird: bird
      daemon_config:
        bird: /etc/bird/bird.conf
        bgp: /etc/bird/bgp.mod.conf
        ospf: /etc/bird/ospf.mod.conf
        routing: /etc/bird/routing.mod.conf
      clab:
        group_vars:
          netlab_show_command:
          - birdc
          - show $@
          docker_shell: bash -il
        image: netlab/bird:latest
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
        features:
          initial:
            roles:
            - host
            - router
      libvirt:
        image:
      virtualbox:
        image:
      features:
        bfd: true
        bgp:
          activate_af: true
          ipv6_lla: false
          rfc8950: true
          local_as: true
          local_as_ibgp: true
          community:
            standard:
            - standard
            - large
            large:
            - large
            extended:
            - extended
            2octet:
            - standard
          import:
          - ospf
          - connected
          - static
        ospf:
          import:
          - bgp
          - connected
          - static
          password: true
          priority: true
          timers: true
          unnumbered: true
        routing:
          static:
            discard: true
        dhcp: false
        initial:
          ipv4:
            unnumbered: peer
          ipv6:
            lla: true
          roles:
          - host
          - router
    dnsmasq:
      description: DNSmasq - DNS and DHCP server
      packages:
        dnsmasq: dnsmasq
      daemon_config:
        dnsmasq: /etc/dnsmasq.conf
        dhcp: /etc/dhcp.ignore
      node:
        module:
        - dhcp
      clab:
        group_vars:
          docker_shell: bash -il
        image: netlab/dnsmasq:latest
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
        features:
          initial:
            roles:
            - host
      libvirt:
        image:
      virtualbox:
        image:
      features:
        dhcp:
          server: true
        initial:
          roles:
          - host
      dhcp:
        server: true
      module:
      - dhcp
  outputs:
    d2:
      node_address_label: true
      interface_labels: false
      as_clusters: true
      rr_sessions: true
      router:
        shape: oval
        style:
          font-size: 20
      switch:
        shape: hexagon
        style:
          font-size: 20
      lan:
        shape: rectangle
        style:
          border-radius: 8
          font-size: 20
      ibgp:
        style:
          stroke: '#613913'
          stroke-width: 4
        source-arrowhead:
          shape: arrow
        target-arrowhead:
          shape: arrow
      ebgp:
        style:
          stroke: '#b21a1a'
          stroke-width: 4
        source-arrowhead:
          shape: arrow
        target-arrowhead:
          shape: arrow
      styles:
        color: stroke
        width: stroke-width
      attributes:
        node:
          color: str
          width:
            type: int
            min_value: 1
            max_value: 32
        link:
          color: str
          width:
            type: int
            min_value: 1
            max_value: 32
          linkorder:
            type: int
            min_value: 1
            max_value: 200
    graph:
      interface_labels: false
      node_address_label: true
      as_clusters: true
      colors:
        as: '#e8e8e8'
        node: '#ff9f01'
        stub: '#d1bfab'
        ibgp: '#613913'
        ebgp: '#b21a1a'
      margins:
        as: 16
    provider: {}
    yaml=netlab:
      snapshot:
        yml: {}
  tools:
    edgeshark:
      runtime: docker
      docker:
        up:
        - docker network inspect "ghost-in-da-edge" >/dev/null 2>&1 || docker 
          network create "ghost-in-da-edge"
        - docker run -d --name gostwire --restart "unless-stopped" --pull 
          "always" --read-only --user 65534 --cap-drop ALL --cap-add SYS_ADMIN 
          --cap-add SYS_CHROOT --cap-add SYS_PTRACE --cap-add DAC_READ_SEARCH 
          --cap-add DAC_OVERRIDE --cap-add NET_RAW --cap-add NET_ADMIN 
          --security-opt "apparmor:unconfined" --pid "host" --network 
          "ghost-in-da-edge" --label "com.docker.compose.project=edgeshark" 
          --entrypoint "/gostwire" ghcr.io/siemens/ghostwire "--http=[::]:5000" 
          "--initialcgroup" "--brand=Edgeshark"
        - docker run -d --name edgeshark --publish "5001:5001" --restart 
          "unless-stopped" --pull "always" --read-only --user 65534 --cap-drop 
          ALL --cap-add SYS_ADMIN --cap-add SYS_CHROOT --cap-add SYS_PTRACE 
          --cap-add NET_RAW --cap-add NET_ADMIN --security-opt 
          "apparmor:unconfined" --pid "host" --network "ghost-in-da-edge" 
          --label "com.docker.compose.project=edgeshark" --entrypoint 
          "/packetflix" ghcr.io/siemens/packetflix "--port=5001" 
          "--discovery-service=gostwire.ghost-in-da-edge" "--gw-port=5000" 
          "--proxy-discovery"
        message: Open http://{sys.ipaddr}:5001 in your browser
        down:
        - docker rm -f edgeshark
        - docker rm -f gostwire
        - docker network inspect "ghost-in-da-edge" >/dev/null 2>&1 && docker 
          network rm "ghost-in-da-edge"
    graphite:
      runtime: docker
      docker:
        up: docker run -d --rm {sys.docker_net} --mount 
          type=bind,source="$(pwd)/graphite/graphite-default.json",target=/htdocs/default/default.json,readonly
          -p { 8080 + defaults.multilab.id if defaults.multilab.id else 8080 
          }:80 --name '{name}_graphite' netreplica/graphite:0.4.2
        message: Open http://{sys.ipaddr}:{ 8080 + defaults.multilab.id if 
          defaults.multilab.id else 8080 }/graphite/ in your browser
        down: docker kill '{name}_graphite'
      config:
      - dest: graphite-default.json
        render: graphite
      attributes:
        node:
          icon: str
    nso:
      runtime: docker
      docker:
        up: docker run --rm -itd --name {name}-cisco-nso {sys.docker_net} -v 
          {name}-nso-vol:/nso -v {name}-nso-log-vol:/log -p { 8888 + 
          defaults.multilab.id if defaults.multilab.id else 8888 }:8080 -e 
          ADMIN_USERNAME=admin -e ADMIN_PASSWORD=admin -e 
          EXTRA_ARGS='--with-package-reload --ignore-initial-validation' 
          cisco-nso-prod; docker exec -it {name}-cisco-nso sed -i.original -e 
          "/<webui>/,/<\\/webui>/ {{ /<transport>/,/<\\/transport>/ {{ 
          /<tcp>/,/<\\/tcp>/ {{ /<enabled>/ s/false/true/ }} }} }}" 
          /etc/ncs/ncs.conf; docker exec -it {name}-cisco-nso sed -i.backup -e 
          "/<local-authentication>/{{n;s|<enabled>false</enabled>|<enabled>true</enabled>|}}"
          /etc/ncs/ncs.conf; docker exec -it {name}-cisco-nso sed -i.backup -e 
          "/<webui>/a <package-upload> <enabled>true</enabled> 
          </package-upload>" /etc/ncs/ncs.conf;
        message: Open http://{sys.ipaddr}:{ 8888 + defaults.multilab.id if 
          defaults.multilab.id else 8888 } in your browser Use admin/admin for 
          login Use 'netlab connect nso' to start nso CLI and type ncs_cli -C -u
          admin to acces cisco CLI
        connect: docker exec -it '{name}-cisco-nso' bash
        down: docker kill {name}-cisco-nso
        cleanup: docker volume rm '{name}-nso-vol' docker volume rm 
          '{name}-nso-log-vol'
    suzieq:
      runtime: docker
      docker:
        up: docker run --rm -itd --name '{name}_suzieq' {sys.docker_net} -v 
          '{name}_suzieq':/parquet -v './suzieq':/suzieq netenglabs/suzieq-demo 
          -c 'sq-poller -I /suzieq/suzieq-inventory.yml'
        message: Use 'netlab connect suzieq' to start SuzieQ CLI
        connect: docker exec -it '{name}_suzieq' /usr/local/bin/suzieq-cli
        down: docker kill '{name}_suzieq'
        cleanup: docker volume rm '{name}_suzieq'
      config:
      - dest: suzieq-inventory.yml
        template: suzieq.inventory.j2
      - dest: suzieq-cfg.yml
        template: suzieq-cfg.yml
  addressing:
    loopback:
      ipv4: false
      ipv6: 2001:db8:1::/48
    router_id:
      ipv4: 10.0.0.0/24
      prefix: 32
    lan:
      ipv4: false
      ipv6: 2001:db8:2::/48
    p2p:
      ipv4: false
      ipv6: 2001:db8:3::/48
    mgmt:
      ipv4: 192.168.121.0/24
      start: 100
      mac: 08-4F-A9-00-00-00
    l2only:
=======
addressing:
  l2only: {}
  lan:
    ipv6: 2001:db8:2::/48
    prefix: 24
  loopback:
    ipv6: 2001:db8:1::/48
    prefix: 32
  mgmt:
    _bridge: nl_mgmt_17
    _network: nl_mgmt_17
    ipv4: 192.168.17.0/24
    mac: 08-4F-A9-00-00-00
    prefix: 24
    start: 100
  p2p:
    ipv6: 2001:db8:3::/48
    prefix: 30
  router_id:
    ipv4: 10.0.0.0/24
    prefix: 32
  vrf_loopback:
    ipv4: 10.2.0.0/24
    prefix: 32
defaults:
  _globals:
    _modlist:
    - bfd
    - bgp
    - dhcp
    - eigrp
    - evpn
    - gateway
    - isis
    - lag
    - mpls
    - ospf
    - ripv2
    - routing
    - sr
    - srv6
    - stp
    - vlan
    - vrf
    - vxlan
  addressing:
    l2only: null
    lan:
      ipv4: false
      ipv6: 2001:db8:2::/48
    loopback:
      ipv4: false
      ipv6: 2001:db8:1::/48
    mgmt:
      ipv4: 192.168.121.0/24
      mac: 08-4F-A9-00-00-00
      start: 100
    p2p:
      ipv4: false
      ipv6: 2001:db8:3::/48
    router_id:
      ipv4: 10.0.0.0/24
      prefix: 32
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    vrf_loopback:
      ipv4: 10.2.0.0/24
      prefix: 32
  attributes:
<<<<<<< HEAD
    global:
      addressing:
        type: dict
        _keytype: id
      defaults:
      groups:
      links:
      module:
      name:
        type: id
        _help: |
          Topology name should be no longer than 16 characters. It should start with a letter
          and contain letters, underscores or numbers. netlab derives it from the directory name
          when it's not specified in the lab topology file.
      nodes:
      plugin:
        type: list
        _subtype: str
      prefix:
        type: dict
        _keytype: id
        _subtype: _prefix
      provider: id
      tools:
        type: dict
        _subtype:
          type: dict
          create_empty: true
      validate:
        type: dict
        _keytype: id
        _subtype: _v_entry
      version:
      vlans:
        type: dict
        _subtype: vlan
        _keytype: id
        _requires:
        - vlan
      vrfs:
        type: dict
        _subtype: vrf
        _keytype: id
        _requires:
        - vrf
    internal:
      input:
      pools: dict
      Provider:
      Plugin:
      message: str
    can_be_false:
    - link
    - interface
=======
    _prefix:
      allocation:
        type: str
        valid_values:
        - p2p
        - sequential
        - id_based
      ipv4:
        type: ipv4
        use: prefix
      ipv6:
        type: ipv6
        use: prefix
      pool:
        _valid_with:
        - allocation
        type: str
    _r_import:
      _description: 'Routing protocol import specification. Each entry specifies a
        protocol to

        import. Values might contain routing policies

        '
      _keytype: r_proto
      _list_to_dict: true
      _subtype:
        _alt_types:
        - NoneType
        - bool
        policy:
          _requires:
          - routing
          type: id
      type: dict
    _v_entry:
      _description: Single network validation test (an entry in the validate dictionary)
      config:
        _alt_types:
        - str
        template: str
        variable: dict
      description: str
      devices:
        _subtype: device
        type: list
      exec: _v_option
      fail: str
      level:
        type: str
        valid_values:
        - warning
      nodes:
        _subtype: node_id
        type: list
      pass: str
      plugin: str
      show: _v_option
      stop_on_error: bool
      suzieq:
        _alt_types:
        - str
        expect:
          type: str
          valid_values:
          - empty
        show: str
        valid:
          type: str
          valid_values:
          - all
          - any
      valid: _v_option
      wait:
        _alt_types:
        - id
        type: int
      wait_msg: str
    _v_option:
      _alt_types:
      - str
      _description: 'A "show", "exec" or "valid" parameter in a network validation
        test. It''s a

        dictionary of device types with each value being a command to execute or

        expression to evaluate.

        '
      _keytype: device
      type: dict
    aspath_entry:
      action:
        type: str
        valid_values:
        - permit
        - deny
      path:
        _alt_types:
        - str
        - asn
        _subtype: asn
        type: list
      sequence:
        max_value: 32767
        min_value: 1
        type: int
    can_be_false:
    - link
    - interface
    community_entry:
      action:
        type: str
        valid_values:
        - permit
        - deny
      list:
        _valid_with:
        - action
        - sequence
        type: list
      path:
        _valid_with:
        - action
        - sequence
        type: list
      regexp:
        _valid_with:
        - action
        - sequence
        type: str
      sequence:
        max_value: 32767
        min_value: 1
        type: int
    global:
      addressing:
        _keytype: id
        type: dict
      defaults: null
      groups: null
      links: null
      module: null
      name:
        _help: 'Topology name should be no longer than 16 characters. It should start
          with a letter

          and contain letters, underscores or numbers. netlab derives it from the
          directory name

          when it''s not specified in the lab topology file.

          '
        type: id
      nodes: null
      plugin:
        _subtype: str
        type: list
      prefix:
        _keytype: id
        _subtype: _prefix
        type: dict
      provider: id
      tools:
        _subtype:
          create_empty: true
          type: dict
        type: dict
      validate:
        _keytype: id
        _subtype: _v_entry
        type: dict
      version: null
      vlans:
        _keytype: id
        _requires:
        - vlan
        _subtype: vlan
        type: dict
      vrfs:
        _keytype: id
        _requires:
        - vrf
        _subtype: vrf
        type: dict
    interface:
      ifindex: int
      ifname: str
      ipv4:
        type: ipv4
        use: interface
      ipv6:
        type: ipv6
        use: interface
      node: node_id
    internal:
      Plugin: null
      Provider: null
      input: null
      message: str
      pools: dict
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    link:
      bandwidth: int
      bridge: id
      disable: bool
<<<<<<< HEAD
      name: str
      prefix:
        type: dict
        _keys:
          ipv4:
            type: ipv4
            use: subnet_prefix
          ipv6:
            type: ipv6
            use: subnet_prefix
=======
      interfaces: null
      mtu:
        max_value: 9216
        min_value: 64
        type: int
      name: str
      pool: id
      prefix:
        _alt_types:
        - bool_false
        - prefix_str
        - named_pfx
        _keys:
          _name: str
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
          allocation:
            type: str
            valid_values:
            - p2p
            - sequential
            - id_based
<<<<<<< HEAD
          _name: str
        _alt_types:
        - bool_false
        - prefix_str
        - named_pfx
      role: id
      pool: id
=======
          ipv4:
            type: ipv4
            use: subnet_prefix
          ipv6:
            type: ipv6
            use: subnet_prefix
        type: dict
      role: id
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      type:
        type: str
        valid_values:
        - lan
        - p2p
        - stub
        - loopback
        - tunnel
        - vlan_member
      unnumbered: bool
<<<<<<< HEAD
      interfaces:
      mtu:
        type: int
        min_value: 64
        max_value: 9216
=======
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      vlan_name: id
    link_internal:
      linkindex: int
      parentindex: int
<<<<<<< HEAD
=======
    link_module_no_propagate:
    - vlan
    - dhcp
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    link_no_propagate:
    - prefix
    - interfaces
    - gateway
<<<<<<< HEAD
    link_module_no_propagate:
    - vlan
    - dhcp
    interface:
      node: node_id
      ipv4:
        type: ipv4
        use: interface
      ipv6:
        type: ipv6
        use: interface
      ifindex: int
      ifname: str
    node:
      name: str
      interfaces: list
      module:
        type: list
        _subtype: id
      device: device
      box: str
      id:
        type: int
        min_value: 1
        max_value: 150
      config: list
      group: list
      role:
        type: str
        valid_values:
        - router
        - host
        - bridge
        - gateway
      mgmt:
=======
    node:
      box: str
      config: list
      cpu: null
      device: device
      group: list
      id:
        max_value: 150
        min_value: 1
        type: int
      interfaces: list
      loopback:
        _alt_types:
        - bool
        ipv4:
          _alt_types:
          - bool
          type: ipv4
          use: host_prefix
        ipv6:
          _alt_types:
          - bool
          type: ipv6
          use: host_prefix
        pool: addr_pool
      memory: int
      mgmt:
        ifname: str
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        ipv4:
          type: ipv4
          use: interface
        ipv6:
          type: ipv6
          use: interface
        mac: str
<<<<<<< HEAD
        ifname: str
      mtu:
        type: int
        min_value: 64
        max_value: 9216
      loopback:
        ipv4:
          type: ipv4
          use: host_prefix
          _alt_types:
          - bool
        ipv6:
          type: ipv6
          use: host_prefix
          _alt_types:
          - bool
        pool: addr_pool
        _alt_types:
        - bool
      provider: id
      cpu:
      memory: int
      unmanaged: bool
      vlans:
        type: dict
        _subtype: node_vlan
        _keytype: id
        _requires:
        - vlan
      vrfs:
        type: dict
        _subtype: vrf
        _keytype: id
        _requires:
        - vrf
    pool:
      ipv4:
        type: ipv4
        use: subnet_prefix
      ipv6:
        type: ipv6
        use: subnet_prefix
      start:
        type: int
        min_value: 0
      prefix:
        type: int
        min_value: 1
        max_value: 32
      prefix6:
        type: int
        min_value: 1
        max_value: 128
=======
      module:
        _subtype: id
        type: list
      mtu:
        max_value: 9216
        min_value: 64
        type: int
      name: str
      provider: id
      role:
        type: str
        valid_values:
        - router
        - host
        - bridge
        - gateway
      unmanaged: bool
      vlans:
        _keytype: id
        _requires:
        - vlan
        _subtype: node_vlan
        type: dict
      vrfs:
        _keytype: id
        _requires:
        - vrf
        _subtype: vrf
        type: dict
    node_group:
      _description: Node groups
      _namespace:
      - node
      config: list
      device: device
      members:
        _subtype:
          max_length: MAX_NODE_ID_LENGTH
          type: id
        type: list
      module: list
      node_data:
        true_value: {}
        type: dict
      vars: dict
    node_vlan:
      _description: Node VLAN definition
      _namespace:
      - link
      - interface
      id:
        max_value: 4095
        min_value: 1
        type: int
      links: list
      mode:
        type: str
        valid_values:
        - bridge
        - irb
        - route
      prefix: null
      stp:
        enable: bool
        priority:
          max_value: 61440
          min_value: 0
          type: int
      vni:
        max_value: 16777215
        min_value: 1
        type: int
    pfx_entry:
      action:
        type: str
        valid_values:
        - permit
        - deny
      ipv4:
        type: ipv4
        use: prefix
      ipv6:
        type: ipv6
        use: prefix
      max:
        _alt_types:
        - int
        ipv4:
          max_value: 32
          min_value: 0
          type: int
        ipv6:
          max_value: 128
          min_value: 0
          type: int
      min:
        _alt_types:
        - int
        ipv4:
          max_value: 32
          min_value: 0
          type: int
        ipv6:
          max_value: 128
          min_value: 0
          type: int
      pool:
        _valid_with:
        - action
        - sequence
        - min
        - max
        type: addr_pool
      prefix:
        _valid_with:
        - action
        - sequence
        - min
        - max
        type: named_pfx
      sequence:
        max_value: 32767
        min_value: 1
        type: int
    pool:
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      allocation:
        type: str
        valid_values:
        - p2p
        - sequential
        - id_based
<<<<<<< HEAD
      mac: mac
=======
      ipv4:
        type: ipv4
        use: subnet_prefix
      ipv6:
        type: ipv6
        use: subnet_prefix
      mac: mac
      prefix:
        max_value: 32
        min_value: 1
        type: int
      prefix6:
        max_value: 128
        min_value: 1
        type: int
      start:
        min_value: 0
        type: int
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      unnumbered: bool
    pool_no_copy:
    - start
    - prefix
    - prefix6
    - mac
    prefix:
<<<<<<< HEAD
      ipv4:
        type: ipv4
        use: subnet_prefix
      ipv6:
        type: ipv6
        use: subnet_prefix
=======
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      allocation:
        type: str
        valid_values:
        - p2p
        - sequential
        - id_based
<<<<<<< HEAD
    node_group:
      _description: Node groups
      _namespace:
      - node
      members:
        type: list
        _subtype:
          type: id
          max_length: MAX_NODE_ID_LENGTH
      vars: dict
      config: list
      node_data:
        type: dict
        true_value: {}
      device: device
      module: list
    vlan_group:
      _description: VLAN groups
      _namespace:
      - vlan
      - link
      type: str
      members:
        type: list
        _subtype: id
    vrf_group:
      _description: VRF groups
      _namespace:
      - vrf
      type: str
      members:
        type: list
        _subtype: id
    _prefix:
      ipv4:
        type: ipv4
        use: prefix
      ipv6:
        type: ipv6
        use: prefix
      allocation:
        type: str
        valid_values:
        - p2p
        - sequential
        - id_based
      pool:
        type: str
        _valid_with:
        - allocation
    _v_entry:
      _description: Single network validation test (an entry in the validate 
        dictionary)
      description: str
      fail: str
      pass: str
      wait:
        type: int
        _alt_types:
        - id
      wait_msg: str
      nodes:
        type: list
        _subtype: node_id
      devices:
        type: list
        _subtype: device
      exec: _v_option
      show: _v_option
      config:
        template: str
        variable: dict
        _alt_types:
        - str
      valid: _v_option
      suzieq:
        _alt_types:
        - str
        show: str
        expect:
          type: str
          valid_values:
          - empty
        valid:
          type: str
          valid_values:
          - all
          - any
      plugin: str
      stop_on_error: bool
      level:
        type: str
        valid_values:
        - warning
    _v_option:
      _description: |
        A "show", "exec" or "valid" parameter in a network validation test. It's a
        dictionary of device types with each value being a command to execute or
        expression to evaluate.
      type: dict
      _alt_types:
      - str
      _keytype: device
    _r_import:
      _description: |
        Routing protocol import specification. Each entry specifies a protocol to
        import. Values might contain routing policies
      type: dict
      _keytype: r_proto
      _list_to_dict: true
      _subtype:
        _alt_types:
        - NoneType
        - bool
        policy:
          type: id
          _requires:
          - routing
=======
      ipv4:
        type: ipv4
        use: subnet_prefix
      ipv6:
        type: ipv6
        use: subnet_prefix
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    rp_entry:
      _description: Routing policy entry
      action:
        type: str
        valid_values:
        - permit
        - deny
<<<<<<< HEAD
      sequence:
        type: int
        min_value: 1
        max_value: 32767
      set:
        locpref:
          type: int
          min_value: 0
          max_value: 4294967295
        med:
          type: int
          min_value: 0
          max_value: 32767
        weight:
          type: int
          min_value: 0
          max_value: 65535
        prepend:
          count:
            type: int
            min_value: 1
            max_value: 32
          path: str
        community:
          standard: list
          extended: list
          large: list
          append:
            type: bool
            _valid_with:
            - standard
            - extended
            - large
          delete:
            type: bool
            _valid_with:
            - standard
            - extended
            - large
          delete_list:
            type: str
            _valid_with: []
      match:
        prefix: str
        nexthop: str
        aspath: str
        community: str
    pfx_entry:
      action:
        type: str
        valid_values:
        - permit
        - deny
      sequence:
        type: int
        min_value: 1
        max_value: 32767
      pool:
        type: addr_pool
        _valid_with:
        - action
        - sequence
        - min
        - max
      prefix:
        type: named_pfx
        _valid_with:
        - action
        - sequence
        - min
        - max
      min:
        ipv4:
          type: int
          min_value: 0
          max_value: 32
        ipv6:
          type: int
          min_value: 0
          max_value: 128
        _alt_types:
        - int
      max:
        ipv4:
          type: int
          min_value: 0
          max_value: 32
        ipv6:
          type: int
          min_value: 0
          max_value: 128
        _alt_types:
        - int
      ipv4:
        type: ipv4
        use: prefix
      ipv6:
        type: ipv6
        use: prefix
    aspath_entry:
      action:
        type: str
        valid_values:
        - permit
        - deny
      sequence:
        type: int
        min_value: 1
        max_value: 32767
      path:
        type: list
        _subtype: asn
        _alt_types:
        - str
        - asn
    community_entry:
      action:
        type: str
        valid_values:
        - permit
        - deny
      sequence:
        type: int
        min_value: 1
        max_value: 32767
      path:
        type: list
        _valid_with:
        - action
        - sequence
      list:
        type: list
        _valid_with:
        - action
        - sequence
      regexp:
        type: str
        _valid_with:
        - action
        - sequence
    static_entry:
=======
      match:
        aspath: str
        community: str
        nexthop: str
        prefix: str
      sequence:
        max_value: 32767
        min_value: 1
        type: int
      set:
        community:
          append:
            _valid_with:
            - standard
            - extended
            - large
            type: bool
          delete:
            _valid_with:
            - standard
            - extended
            - large
            type: bool
          delete_list:
            _valid_with: []
            type: str
          extended: list
          large: list
          standard: list
        locpref:
          max_value: 4294967295
          min_value: 0
          type: int
        med:
          max_value: 32767
          min_value: 0
          type: int
        prepend:
          count:
            max_value: 32
            min_value: 1
            type: int
          path: str
        weight:
          max_value: 65535
          min_value: 0
          type: int
    static_entry:
      include:
        _valid_with:
        - nexthop
        - vrf
        type: id
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      ipv4:
        type: ipv4
        use: prefix
      ipv6:
        type: ipv6
        use: prefix
<<<<<<< HEAD
      prefix:
        type: named_pfx
        _valid_with:
        - nexthop
        - vrf
      node:
        type: node_id
        _valid_with:
        - nexthop
        - vrf
      pool:
        type: addr_pool
        _valid_with:
        - nexthop
        - vrf
      vrf:
        type: id
      nexthop:
        node:
          type: node_id
          _valid_with:
          - vrf
          - link
=======
      nexthop:
        discard:
          _valid_with:
          - none
          type: bool
          valid_values:
          - true
        gateway:
          _valid_with:
          - vrf
          - link
          type: bool
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        ipv4:
          type: ipv4
          use: address
        ipv6:
          type: ipv6
          use: address
<<<<<<< HEAD
        discard:
          type: bool
          valid_values:
          - true
          _valid_with:
          - none
        gateway:
          type: bool
          _valid_with:
          - vrf
          - link
        link: str
        vrf:
          type: id
          _alt_types: NoneType
      include:
        type: id
        _valid_with:
        - nexthop
        - vrf
    node_vlan:
      stp:
        priority:
          type: int
          min_value: 0
          max_value: 61440
        enable: bool
      _description: Node VLAN definition
      id:
        type: int
        min_value: 1
        max_value: 4095
      vni:
        type: int
        min_value: 1
        max_value: 16777215
      mode:
        type: str
        valid_values:
        - bridge
        - irb
        - route
      links: list
      prefix:
      _namespace:
      - link
      - interface
    vlan:
      _description: Global VLAN definition
      id:
        type: int
        min_value: 1
        max_value: 4095
      vni:
        type: int
        min_value: 1
        max_value: 16777215
=======
        link: str
        node:
          _valid_with:
          - vrf
          - link
          type: node_id
        vrf:
          _alt_types: NoneType
          type: id
      node:
        _valid_with:
        - nexthop
        - vrf
        type: node_id
      pool:
        _valid_with:
        - nexthop
        - vrf
        type: addr_pool
      prefix:
        _valid_with:
        - nexthop
        - vrf
        type: named_pfx
      vrf:
        type: id
    vlan:
      _description: Global VLAN definition
      _namespace:
      - link
      id:
        max_value: 4095
        min_value: 1
        type: int
      links: list
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      mode:
        type: str
        valid_values:
        - bridge
        - irb
        - route
<<<<<<< HEAD
      links: list
      prefix:
      _namespace:
      - link
    vrf:
      _description: Global or node-level VRF definition
      rd: rd
      import: list
      export: list
      id:
        type: int
        min_value: 1
      links: list
      loopback:
      _namespace:
      - link
=======
      prefix: null
      vni:
        max_value: 16777215
        min_value: 1
        type: int
    vlan_group:
      _description: VLAN groups
      _namespace:
      - vlan
      - link
      members:
        _subtype: id
        type: list
      type: str
    vrf:
      _description: Global or node-level VRF definition
      _namespace:
      - link
      export: list
      id:
        min_value: 1
        type: int
      import: list
      links: list
      loopback: null
      rd: rd
    vrf_group:
      _description: VRF groups
      _namespace:
      - vrf
      members:
        _subtype: id
        type: list
      type: str
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
  automation:
    ansible:
      cleanup:
      - ansible.cfg
      - hosts.yml
      - group_vars
      - host_vars
      - config
<<<<<<< HEAD
  const:
    routing_protocols:
    - bgp
    - connected
    - eigrp
    - isis
    - ospf
    - ripv2
    - static
    vrf_igp_protocols:
    - connected
    - ospf
    - isis
    - ripv2
    multi_provider:
    - libvirt
    - clab
    ifname:
      neighbors: 5
      maxlength: 255
    validate:
      ping: 5
      vxlan_ping: 20
      ra_send: 30
      ospfv2_adj_p2p: 30
      ospfv2_adj_lan: 50
      ospfv2_spf: 10
      ospfv3_adj_p2p: 30
      ospfv3_adj_lan: 50
      ospfv3_spf: 10
      ospf_import: 20
      ebgp_session: 30
      bgp_scan_time: 5
      isis_adj_p2p: 20
      isis_spf: 15
      stp_forwarding: 40
  hints:
    evpn:
      irb_group: >
        All VLANs that are part of a VRF using asymmetric IRB have to be present on
        all nodes
        using that VRF. The easiest way to achieve that is to create a group with
        all
        participating nodes and list VLANs in the 'vlans' attribute of that group
      node_attr: |
        evpn.bundle and evpn.transit_vni attributes can be used only in global VRF definition
      asn: >
        You could use the global 'bgp.as' parameter to specify the AS to use in EVPN
        route targets. 'bgp.as' specified on individual nodes or groups will not work.
        You
        can also specify the global AS used by EVPN in 'vrf.as' parameter if you use
        VRFs, or in 'evpn.as' parameter if you use EVPN in bridging-only scenarios.
    report:
      source: >
        A report can be specified in a file with .j2 suffix within 'reports' subdirectory
        in
        package-, system-, user- or current directory. You can also specify a report
        in a
        defaults.outputs.report setting.
    junos:
      single_lb: >
        Junos devices cannot have more than one loopback interface per routing instance
    vlan:
      mixed_fwd_check: >
        You can disable this error with "defaults.vlan.warnings.mixed_fwd_check: False",
        but then
        you might get the same IP prefix assigned to multiple segments of the routed
        VLAN.
    vrf:
      inactive: >
        A globally-defined VRF is not used on a node unless that node is attached
        to a VRF link,
        or has the VRF listed in the node 'vrfs' dictionary and uses VRF loopbacks.
    cli:
      recreate: netlab transforms lab topology into device- and platform data 
        and stores the results in a snapshot file that is used by most netlab 
        commands. Changes to source files (including lab topology or defaults) 
        are not automatically reflected in the snapshot file. Use 'netlab 
        create' or 'netlab up' to create a new snapshot file.
      interrupt: Use 'netlab status' command to display the status of your lab 
        and 'netlab down --cleanup' command to clean it up. You might have to 
        use the '--force' option of the 'netlab down' command.
    routing:
      policy:
        match_af: A routing policy 'match.prefix' condition can match a single 
          address family. Use 'match.af' parameter to specify the address family
          you want to match.
      host_gw: Hosts attached to routers need a shared gateway or a gateway of 
        last resort. In both cases, at least one adjacent router needs a real 
        (not unnumbered/LLA) IP address.
    validation:
      nodes: A test that uses 'show', 'exec' or 'plugin' action must specify the
        nodes on which that action will be executed.
      valid: A test that includes the 'valid' check must generate some output to
        check. That output can be generated with 'show','exec', or 'suzieq' 
        action.
      show: The 'show' action should return structured data that is then 
        validated with the 'valid' check. If you want to execute a command on 
        the device without checking the results, use the 'exec' action.
    libvirt:
      capture: |
        Change the link type to Linux bridge with 'type: lan' link attribute or see
        https://netlab.tools/labs/libvirt/#libvirt-capture for other options.
    nodes:
      unmanaged_device: Netlab uses the node device type for unmanaged nodes to 
        figure out what features the node supports. If you're using a device 
        that is not supported by netlab, set the device type to 'none'.
  multilab:
    change:
      name: ml_17
      defaults:
        name: ml_17
        providers:
          libvirt:
            tunnel_id: '17'
            vifprefix: vgif_17
      addressing:
        mgmt:
          ipv4: 192.168.17.0/24
          _network: nl_mgmt_17
          _bridge: nl_mgmt_17
    id: 17
  netlab:
    capture:
      command: tcpdump -i {intf}
      command_args: --immediate-mode -l -vv
  paths:
    validate:
    - /home/pipi/netlab_gh/netsim/validate
    plugin:
    - /work/netlab_cicd
    - /home/pipi/net101/tools/tests/integration/ospf/ospfv3
    - /home/pipi/.netlab
    - /home/pipi/netlab_gh/netsim/extra
    custom:
      dirs:
      - /home/pipi/net101/tools/tests/integration/ospf/ospfv3
      - /work/netlab_cicd
      - /home/pipi/.netlab
      - /home/pipi/netlab_gh/netsim/extra
      files:
      - "{{ custom_config + '/' + inventory_hostname + '.' + netlab_device_type +
        '-' + node_provider + '.j2' }}"
      - "{{ custom_config + '/' + inventory_hostname + '.' + netlab_device_type +
        '.j2' }}"
      - "{{ custom_config + '/' + inventory_hostname + '.j2' }}"
      - "{{ custom_config + '/' + inventory_hostname + '.cfg' }}"
      - "{{ custom_config + '/' + netlab_device_type + '-' + node_provider + '.j2'
        }}"
      - "{{ custom_config + '/' + netlab_device_type + '.j2' }}"
      - "{{ custom_config + '/' + ansible_network_os + '-' + node_provider + '.j2'
        }}"
      - "{{ custom_config + '/' + ansible_network_os + '.j2' }}"
      - "{{ custom_config + '.' + inventory_hostname + '.' + netlab_device_type +
        '.j2' }}"
      - "{{ custom_config + '.' + inventory_hostname + '.' + ansible_network_os +
        '.j2' }}"
      - "{{ custom_config + '.' + inventory_hostname + '.j2' }}"
      - "{{ custom_config + '.' + netlab_device_type + '.j2' }}"
      - "{{ custom_config + '.' + ansible_network_os + '.j2' }}"
      - "{{ custom_config + '.j2' }}"
      tasks:
      - '{{ custom_config }}/deploy-{{ inventory_hostname }}.yml'
      - '{{ custom_config }}/deploy.{{ netlab_device_type }}-{{ node_provider }}.yml'
      - '{{ custom_config }}/deploy.{{ netlab_device_type }}.yml'
      - '{{ custom_config }}/deploy.{{ ansible_network_os }}-{{ node_provider }}.yml'
      - '{{ custom_config }}/deploy.{{ ansible_network_os }}.yml'
      - '{{ custom_config }}/deploy.yml'
    deploy:
      dirs:
      - /home/pipi/netlab_gh/netsim/ansible/tasks
      tasks_generic:
      - deploy-config/{{ netlab_device_type }}-{{ node_provider }}.yml
      - deploy-config/{{ netlab_device_type }}.yml
      - deploy-config/{{ ansible_network_os }}-{{ node_provider }}.yml
      - deploy-config/{{ ansible_network_os }}.yml
      files:
      - '{{ netlab_device_type }}/{{ config_module }}-{{ provider|default(netlab_provider)
        }}.yml'
      - '{{ netlab_device_type }}/{{ config_module }}.yml'
      - deploy-config/{{ netlab_device_type }}-{{ 
        provider|default(netlab_provider) }}.yml
      - deploy-config/{{ netlab_device_type }}.yml
      - '{{ ansible_network_os }}/{{ config_module }}-{{ provider|default(netlab_provider)
        }}.yml'
      - '{{ ansible_network_os }}/{{ config_module }}.yml'
      - deploy-config/{{ ansible_network_os }}-{{ 
        provider|default(netlab_provider) }}.yml
      - deploy-config/{{ ansible_network_os }}.yml
    templates:
      dirs:
      - /home/pipi/netlab_gh/netsim/daemons
      - /home/pipi/netlab_gh/netsim/ansible/templates
    t_files:
      files:
      - '{{config_module}}/{{netlab_device_type}}-{{provider|default(netlab_provider)}}.j2'
      - '{{config_module}}/{{netlab_device_type}}.j2'
      - '{{config_module}}.{{netlab_device_type}}.j2'
      - '{{config_module}}/{{ansible_network_os}}-{{provider|default(netlab_provider)}}.j2'
      - '{{config_module}}/{{ansible_network_os}}.j2'
      - '{{config_module}}.{{ansible_network_os}}.j2'
      - '{{netlab_device_type}}/{{config_module}}.j2'
    ready:
      dirs:
      - /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check
      files:
      - '{{netlab_device_type}}-{{provider|default(netlab_provider)}}.yml'
      - '{{netlab_device_type}}.yml'
      - '{{ansible_network_os}}-{{provider|default(netlab_provider)}}.yml'
      - '{{ansible_network_os}}.yml'
    collect:
      dirs:
      - /home/pipi/netlab_gh/netsim/ansible/tasks/fetch-config
  ports:
    ssh: 22
    http: 80
    https: 443
    netconf: 830
  warnings:
    duplicate_address: true
  bfd:
    min_echo_rx: 0
    multiplier: 3
    attributes:
      global:
        min_tx:
          type: int
          min_value: 1
        min_rx:
          type: int
          min_value: 1
        min_echo_rx:
          type: int
          min_value: 0
        multiplier:
          type: int
          min_value: 0
      node:
        min_tx:
          type: int
          min_value: 1
        min_rx:
          type: int
          min_value: 1
        min_echo_rx:
          type: int
          min_value: 0
        multiplier:
          type: int
          min_value: 0
      link:
        min_tx:
          type: int
          min_value: 1
        min_rx:
          type: int
          min_value: 1
        min_echo_rx:
          type: int
          min_value: 0
        multiplier:
          type: int
          min_value: 0
=======
  bfd:
    attributes:
      global:
        min_echo_rx:
          min_value: 0
          type: int
        min_rx:
          min_value: 1
          type: int
        min_tx:
          min_value: 1
          type: int
        multiplier:
          min_value: 0
          type: int
      link:
        min_echo_rx:
          min_value: 0
          type: int
        min_rx:
          min_value: 1
          type: int
        min_tx:
          min_value: 1
          type: int
        multiplier:
          min_value: 0
          type: int
      node:
        min_echo_rx:
          min_value: 0
          type: int
        min_rx:
          min_value: 1
          type: int
        min_tx:
          min_value: 1
          type: int
        multiplier:
          min_value: 0
          type: int
    min_echo_rx: 0
    multiplier: 3
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      arubacx: true
      bird: true
      cat8000v: true
      csr: true
      cumulus: true
      dellos10: true
      eos: true
      frr: true
      iol: true
      ioll2: true
      ios: true
      iosv: true
      iosvl2: true
      junos: true
      none: true
      nxos: true
      srlinux: true
      sros: true
      unknown: true
      vjunos-router: true
      vjunos-switch: true
      vmx: true
      vptx: true
      vsrx: true
      vyos: true
  bgp:
<<<<<<< HEAD
    ebgp_role: external
    advertise_roles:
    - stub
    advertise_loopback: true
    community:
      ibgp:
      - standard
      - extended
      ebgp:
      - standard
    no_propagate:
      ebgp_role:
      advertise_roles:
      rr_list:
      as_list:
    transform_after:
    - vlan
    config_after:
    - routing
    - ospf
    - isis
    - eigrp
    - ripv2
    next_hop_self: true
    attributes:
      global:
        as: asn
        next_hop_self: bool
        rr_cluster_id:
          type: ipv4
          use: id
        rr_list: list
        ebgp_role: str
        as_list: dict
        sessions:
          ipv4:
          - ibgp
          - ebgp
          - localas_ibgp
          ipv6:
          - ibgp
          - ebgp
          - localas_ibgp
=======
    advertise_loopback: true
    advertise_roles:
    - stub
    attributes:
      as_list:
        _keytype: int
        _subtype:
          members:
            _required: true
            _subtype: node_id
            type: list
          rr:
            _subtype: node_id
            type: list
        type: dict
      global:
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        activate:
          ipv4:
          - ibgp
          - ebgp
          - localas_ibgp
          ipv6:
          - ibgp
          - ebgp
          - localas_ibgp
        advertise_loopback: bool
        advertise_roles: list
<<<<<<< HEAD
        community:
          ibgp:
          - standard
          - extended
          - large
          - 2octet
=======
        as: asn
        as_list: dict
        community:
          _alt_types:
          - str
          - BoxList
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
          ebgp:
          - standard
          - extended
          - large
          - 2octet
<<<<<<< HEAD
          _alt_types:
          - str
          - BoxList
        replace_global_as: bool
      node:
        as:
          type: asn
          _required: true
        next_hop_self: bool
        rr: bool
        rr_cluster_id:
          type: ipv4
          use: id
        originate:
          type: list
          _subtype:
            type: ipv4
            use: subnet_prefix
            named: true
        advertise_loopback: bool
=======
          ibgp:
          - standard
          - extended
          - large
          - 2octet
        ebgp_role: str
        next_hop_self: bool
        replace_global_as: bool
        rr_cluster_id:
          type: ipv4
          use: id
        rr_list: list
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        sessions:
          ipv4:
          - ibgp
          - ebgp
          - localas_ibgp
          ipv6:
          - ibgp
          - ebgp
          - localas_ibgp
<<<<<<< HEAD
=======
      interface:
        local_as: asn
        replace_global_as: bool
      link:
        advertise:
          _intra_as: true
          type: bool
      node:
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        activate:
          ipv4:
          - ibgp
          - ebgp
          - localas_ibgp
          ipv6:
          - ibgp
          - ebgp
          - localas_ibgp
<<<<<<< HEAD
        community:
          ibgp:
          - standard
          - extended
          - large
          - 2octet
=======
        advertise_loopback: bool
        as:
          _required: true
          type: asn
        community:
          _alt_types:
          - str
          - BoxList
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
          ebgp:
          - standard
          - extended
          - large
          - 2octet
<<<<<<< HEAD
          _alt_types:
          - str
          - BoxList
        router_id:
          type: ipv4
          use: id
        local_as: asn
        replace_global_as: bool
        import: _r_import
      vrf:
        router_id:
          type: ipv4
          use: id
        import: _r_import
      node_copy:
      - local_as
      - replace_global_as
      link:
        advertise:
          type: bool
          _intra_as: true
      interface:
        local_as: asn
        replace_global_as: bool
      as_list:
        type: dict
        _keytype: int
        _subtype:
          members:
            type: list
            _subtype: node_id
            _required: true
          rr:
            type: list
            _subtype: node_id
    features:
      local_as: Supports local-as functionality
      vrf_local_as: Supports local-as within a VRF
      local_as_ibgp: Can use local-as to create IBGP sesssion
      activate_af: Can control activation of individual address families
      ipv6_lla: Can run EBGP sessions over IPv6 link-local addresses
      rfc8950: Can run IPv4 AF over regular IPv6 EBGP session
      community: Granular BGP community propagation
      import: Import routes from other routing protocols
    warnings:
      missing_igp: true
      igp_list:
      - ospf
      - eigrp
      - isis
      - ripv2
=======
          ibgp:
          - standard
          - extended
          - large
          - 2octet
        import: _r_import
        local_as: asn
        next_hop_self: bool
        originate:
          _subtype:
            named: true
            type: ipv4
            use: subnet_prefix
          type: list
        replace_global_as: bool
        router_id:
          type: ipv4
          use: id
        rr: bool
        rr_cluster_id:
          type: ipv4
          use: id
        sessions:
          ipv4:
          - ibgp
          - ebgp
          - localas_ibgp
          ipv6:
          - ibgp
          - ebgp
          - localas_ibgp
      node_copy:
      - local_as
      - replace_global_as
      vrf:
        import: _r_import
        router_id:
          type: ipv4
          use: id
    community:
      ebgp:
      - standard
      ibgp:
      - standard
      - extended
    config_after:
    - routing
    ebgp_role: external
    features:
      activate_af: Can control activation of individual address families
      community: Granular BGP community propagation
      import: Import routes from other routing protocols
      ipv6_lla: Can run EBGP sessions over IPv6 link-local addresses
      local_as: Supports local-as functionality
      local_as_ibgp: Can use local-as to create IBGP sesssion
      rfc8950: Can run IPv4 AF over regular IPv6 EBGP session
      vrf_local_as: Supports local-as within a VRF
    next_hop_self: true
    no_propagate:
      advertise_roles: null
      as_list: null
      ebgp_role: null
      rr_list: null
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      arubacx: true
      asav: true
      bird: true
      cat8000v: true
      csr: true
      cumulus: true
      cumulus_nvue: true
      dellos10: true
      eos: true
      frr: true
      iol: true
      ioll2: true
      ios: true
      iosv: true
      iosvl2: true
      iosxr: true
      junos: true
      none: true
      nxos: true
      routeros: true
      routeros7: true
      sonic: true
      srlinux: true
      sros: true
      unknown: true
      vjunos-router: true
      vjunos-switch: true
      vmx: true
      vptx: true
      vsrx: true
      vyos: true
<<<<<<< HEAD
  dhcp:
    transform_after:
    - vlan
    - vrf
    - ospf
    - eigrp
    - isis
    - bgp
=======
    transform_after:
    - vlan
    warnings:
      igp_list:
      - ospf
      - eigrp
      - isis
      - ripv2
      missing_igp: true
  const:
    ifname:
      maxlength: 255
      neighbors: 5
    multi_provider:
    - libvirt
    - clab
    routing_protocols:
    - bgp
    - connected
    - eigrp
    - isis
    - ospf
    - ripv2
    - static
    validate:
      bgp_scan_time: 5
      ebgp_session: 30
      isis_adj_p2p: 20
      isis_spf: 15
      ospf_import: 20
      ospfv2_adj_lan: 50
      ospfv2_adj_p2p: 30
      ospfv2_spf: 10
      ospfv3_adj_lan: 50
      ospfv3_adj_p2p: 30
      ospfv3_spf: 10
      ping: 5
      ra_send: 30
      stp_forwarding: 40
      vxlan_ping: 20
    vrf_igp_protocols:
    - connected
    - ospf
    - isis
    - ripv2
  daemons:
    bird:
      clab:
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
        features:
          initial:
            roles:
            - host
            - router
        group_vars:
          docker_shell: bash -il
          netlab_show_command:
          - birdc
          - show $@
        image: netlab/bird:latest
      daemon_config:
        bgp: /etc/bird/bgp.mod.conf
        bird: /etc/bird/bird.conf
        ospf: /etc/bird/ospf.mod.conf
        routing: /etc/bird/routing.mod.conf
      description: BIRD Internet Routing Daemon
      features:
        bfd: true
        bgp:
          activate_af: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          import:
          - ospf
          - connected
          - static
          ipv6_lla: false
          local_as: true
          local_as_ibgp: true
          rfc8950: true
        dhcp: false
        initial:
          ipv4:
            unnumbered: peer
          ipv6:
            lla: true
          roles:
          - host
          - router
        ospf:
          import:
          - bgp
          - connected
          - static
          password: true
          priority: true
          timers: true
          unnumbered: true
        routing:
          static:
            discard: true
      group_vars:
        netlab_import_map:
          bgp: RTS_BGP
          connected: RTS_DEVICE
          ospf: RTS_OSPF
          static: RTS_STATIC_DEVICE,RTS_STATIC
      libvirt:
        image: null
      packages:
        bird: bird
      virtualbox:
        image: null
    dnsmasq:
      clab:
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
        features:
          initial:
            roles:
            - host
        group_vars:
          docker_shell: bash -il
        image: netlab/dnsmasq:latest
      daemon_config:
        dhcp: /etc/dhcp.ignore
        dnsmasq: /etc/dnsmasq.conf
      description: DNSmasq - DNS and DHCP server
      dhcp:
        server: true
      features:
        dhcp:
          server: true
        initial:
          roles:
          - host
      libvirt:
        image: null
      module:
      - dhcp
      node:
        module:
        - dhcp
      packages:
        dnsmasq: dnsmasq
      virtualbox:
        image: null
  device: srlinux
  devices:
    arubacx:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-aoscx/
        group_vars:
          netlab_check_delay: 15
          netlab_check_retries: 40
        image: vrnetlab/vr-aoscx:20240129204649
        interface:
          name: eth{ifindex}
        mtu: 1500
        node:
          kind: vr-aoscx
      description: ArubaOS-CX
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          import:
          - ospf
          - connected
          - static
          - vrf
          local_as: true
          local_as_ibgp: false
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        lag:
          mlag:
            peer:
              ifindex: 255
              mac: 0600.0000.0000
          passive: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          default: true
          import:
          - bgp
          - connected
          - vrf
          - static
          password: true
          priority: true
          timers: true
          unnumbered: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                delete: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            discard: true
            inter_vrf: true
            vrf: true
        stp:
          enable_per_port: true
          supported_protocols:
          - mstp
          - pvrst
          - stp
        vlan:
          model: switch
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
        vxlan: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: arubanetworks.aoscx.aoscx
        ansible_ssh_pass: admin
        ansible_user: admin
        netlab_device_type: arubacx
      ifindex_offset: 1
      interface_name: 1/1/{ifindex}
      lag_interface_name: lag {lag.ifindex}
      libvirt:
        build: https://netlab.tools/labs/arubacx/
        create: virt-install --connect=qemu:///system --name=vm_box --arch=x86_64
          --cpu host --vcpus=2 --hvm --ram=4096 --network=network:vagrant-libvirt,model=virtio
          --graphics none --import --disk path=vm.qcow2,format=qcow2,bus=ide
        image: aruba/cx
      loopback_interface_name: loopback {ifindex}
      mgmt_if: mgmt
      provider: libvirt
      tunnel_interface_name: tunnel {ifindex}
    asav:
      description: Cisco ASAv
      external:
        image: none
      features:
        bgp: {}
        isis: {}
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant1
        ansible_connection: network_cli
        ansible_network_os: asa
        ansible_ssh_pass: vagrant1
        ansible_user: vagrant
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group14-sha1 -o PubkeyAcceptedKeyTypes=+ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      ifindex_offset: 0
      interface_name: GigabitEthernet0/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/asav/
        create_iso: asav
        create_template: asav.xml.j2
        image: cisco/asav
      mgmt_if: Management0/0
    bird:
      clab:
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
        features:
          initial:
            roles:
            - host
            - router
          vlan:
            _provider: clab
            mixed_trunk: true
            model: router
            native_routed: true
            subif_name: '{ifname}.{vlan.access_id}'
            svi_interface_name: vlan{vlan}
        group_vars:
          ansible_connection: docker
          ansible_user: root
          docker_shell: bash -il
          netlab_linux_distro: vanilla
          netlab_show_command:
          - birdc
          - show $@
        image: netlab/bird:latest
        mtu: 1500
        node:
          config_templates:
            hosts: /etc/hosts
          kind: linux
      daemon: true
      daemon_config:
        bgp: /etc/bird/bgp.mod.conf
        bird: /etc/bird/bird.conf
        ospf: /etc/bird/ospf.mod.conf
        routing: /etc/bird/routing.mod.conf
      daemon_parent: linux
      description: BIRD Internet Routing Daemon
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          import:
          - ospf
          - connected
          - static
          ipv6_lla: false
          local_as: true
          local_as_ibgp: true
          rfc8950: true
        initial:
          ipv4:
            unnumbered: peer
          ipv6:
            lla: true
            use_ra: true
          roles:
          - host
          - router
        lag:
          passive: false
        ospf:
          import:
          - bgp
          - connected
          - static
          password: true
          priority: true
          timers: true
          unnumbered: true
        routing:
          static:
            discard: true
      graphite:
        icon: server
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: linux
        ansible_python_interpreter: auto_silent
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        docker_shell: sh -il
        netlab_device_type: bird
        netlab_import_map:
          bgp: RTS_BGP
          connected: RTS_DEVICE
          ospf: RTS_OSPF
          static: RTS_STATIC_DEVICE,RTS_STATIC
        netlab_lldp_enable: false
        netlab_net_tools: false
      interface_name: eth{ifindex}
      lag_interface_name: bond{lag.ifindex}
      libvirt:
        features:
          dhcp:
            _provider: libvirt
            client:
              ipv4: true
              ipv6: true
            relay:
              ipv4: true
            server: true
        group_vars:
          netlab_linux_distro: ubuntu
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      packages:
        bird: bird
      role: host
      virtualbox:
        group_vars:
          netlab_linux_distro: ubuntu
    cat8000v:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-c8000v/
        group_vars:
          ansible_ssh_pass: admin
          ansible_user: admin
          netlab_check_retries: 50
        image: vrnetlab/vr-c8000v:17.13.01a
        interface:
          name: eth{ifindex-1}
        node:
          kind: cisco_c8000v
      description: Cisco CSR 1000v
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            extended:
            - extended
            standard:
            - standard
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
            use_ra: true
          max_mtu: 9216
          mgmt_vrf: true
          min_mtu: 68
          min_phy_mtu: 1500
          roles:
          - host
          - router
          - bridge
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - static
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            discard: true
            inter_vrf: true
            vrf: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: BDI{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: ios
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_device_type: cat8000v
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o PubkeyAcceptedKeyTypes=ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      ifindex_offset: 2
      interface_name: GigabitEthernet{ifindex}
      libvirt:
        build: https://netlab.tools/labs/cat8000v/
        create: virt-install --connect=qemu:///system --name=vm_box --os-variant=rhel4.0
          --arch=x86_64 --cpu host --vcpus=1 --hvm --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2
          --network=network:vagrant-libvirt,model=virtio --graphics none --import
        create_iso: cat8000v
        create_template: cat8000v.xml.j2
        image: cisco/cat8000v
      loopback_interface_name: Loopback{ifindex}
      node:
        min_mtu: 1500
      role: router
      routing:
        _rm_per_af: true
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox: {}
    csr:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-csr/
        group_vars:
          ansible_ssh_pass: admin
          ansible_user: admin
          netlab_check_retries: 50
        image: vrnetlab/cisco_csr1000v:17.03.08
        interface:
          name: eth{ifindex-1}
        node:
          kind: cisco_csr1000v
      description: Cisco CSR 1000v
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            extended:
            - extended
            standard:
            - standard
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
            use_ra: true
          max_mtu: 9216
          mgmt_vrf: true
          min_mtu: 68
          min_phy_mtu: 1500
          roles:
          - host
          - router
          - bridge
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - static
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            discard: true
            inter_vrf: true
            vrf: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: BDI{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
        vxlan: {}
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: ios
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_device_type: csr
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o PubkeyAcceptedKeyTypes=ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      ifindex_offset: 2
      interface_name: GigabitEthernet{ifindex}
      libvirt:
        build: https://netlab.tools/labs/csr/
        create: virt-install --connect=qemu:///system --name=vm_box --os-variant=rhel4.0
          --arch=x86_64 --cpu host --vcpus=1 --hvm --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2
          --network=network:vagrant-libvirt,model=virtio --graphics none --import
        image: cisco/csr1000v
      loopback_interface_name: Loopback{ifindex}
      node:
        min_mtu: 1500
      role: router
      routing:
        _rm_per_af: true
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: cisco/csr1000v
    cumulus:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
        image: networkop/cx:4.4.0
        kmods: null
        node:
          config_templates:
            hosts: /etc/hosts
            interfaces: /etc/network/interfaces
          kind: cvx
          runtime: docker
      description: Cumulus VX 4.x or 5.x configured without NVUE
      evpn:
        _start_transit_vlan: 3900
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          import:
          - ospf
          - ripv2
          - connected
          - static
          - vrf
          ipv6_lla: true
          local_as: true
          rfc8950: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay:
            ipv4: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          system_mtu: true
        lag:
          passive: false
        ospf:
          default: true
          import:
          - bgp
          - ripv2
          - connected
          - static
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                extended: true
                large: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            inter_vrf: true
            vrf: true
        stp:
          enable_per_port: true
          port_type: true
          supported_protocols:
          - stp
          - rstp
        vlan:
          model: switch
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ripng: true
          ripv2: true
        vxlan: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: cumulus
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_initial: always
        netlab_show_command:
        - sudo
        - vtysh
        - -c
        - show $@
      interface_name: swp{ifindex}
      lag_interface_name: bond{lag.ifindex}
      libvirt:
        image: CumulusCommunity/cumulus-vx:4.4.5
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      mtu: 1500
      tunnel_interface_name: tun{ifindex}
      virtualbox:
        image: CumulusCommunity/cumulus-vx:4.3.0
    cumulus_nvue:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
        image: networkop/cx:5.3.0
        kmods:
          initial:
          - ebtables
        node:
          kind: cvx
          runtime: docker
      description: Cumulus VX 5.x configured with NVUE
      external:
        image: none
      features:
        bgp:
          activate_af: true
          import:
          - connected
          - ospf
          - vrf
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          rfc8950: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          system_mtu: true
        lag:
          mlag:
            peer:
              backup_ip: loopback.ipv4
              global: true
              ip: linklocal
              mac: 44:38:39:ff:00:00
              vlan: 4094
          passive: false
        ospf:
          import:
          - bgp
          - connected
          - vrf
          priority: true
          timers: true
          unnumbered: true
        stp:
          enable_per_port: true
          port_type: true
          supported_protocols:
          - stp
          - rstp
          - pvrst
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
        vxlan: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: cumulus_nvue
        ansible_python_interpreter: auto_silent
        ansible_ssh_pass: GetLost1!
        ansible_user: cumulus
      interface_name: swp{ifindex}
      lag_interface_name: bond{lag.ifindex}
      libvirt:
        image: CumulusCommunity/cumulus-vx:5.10.0
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      mtu: 1500
      virtualbox:
        image: CumulusCommunity/cumulus-vx:5.10.0
    dellos10:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-ftosv/
        group_vars:
          ansible_ssh_pass: admin
          ansible_user: admin
          netlab_check_delay: 10
          netlab_check_retries: 40
        image: vrnetlab/vr-ftosv
        interface:
          name: eth{ifindex}
        node:
          kind: vr-ftosv
      description: Dell OS10
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: false
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          delay: 30
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          system_mtu: true
        lag:
          mlag:
            peer:
              ip: loopback.ipv4
              mac: 0200.01a9.0000
          passive: true
          reserved_ifindex_range:
          - 1000
        ospf:
          default: true
          password: true
          priority: true
          timers: true
        routing:
          aspath: true
          community:
            expanded: false
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                delete: false
                extended: true
                large: false
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            inter_vrf: true
            vrf: true
        stp:
          enable_per_port: true
          port_type: true
          supported_protocols:
          - stp
          - rstp
          - mstp
          - pvrst
        vlan:
          model: switch
          svi_interface_name: virtual-network{vlan}
        vrf:
          bgp: true
          ospfv2: true
        vxlan: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: dellos10
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_save_config: true
      interface_name: ethernet1/1/{ifindex}
      lag_interface_name: port-channel{lag.ifindex}
      libvirt:
        build: https://netlab.tools/labs/dellos10/
        create: virt-install --connect=qemu:///system --name=vm_box --arch=x86_64
          --cpu host --vcpus=2 --hvm --ram=4096 --network=network:vagrant-libvirt,model=virtio
          --graphics none --import --disk path=vm.qcow2,format=qcow2,bus=sata --disk
          path=hdb_OS10-installer.qcow2,format=qcow2,bus=virtio --disk path=hdc_OS10-platform.qcow2,format=qcow2,bus=virtio
        image: dell/os10
        pre_install: dellos10
      loopback_interface_name: loopback{ifindex}
      mgmt_if: mgmt1/1/1
      mtu: 1500
      provider: libvirt
    dnsmasq:
      clab:
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
        features:
          initial:
            roles:
            - host
          vlan:
            _provider: clab
            mixed_trunk: true
            model: router
            native_routed: true
            subif_name: '{ifname}.{vlan.access_id}'
            svi_interface_name: vlan{vlan}
        group_vars:
          ansible_connection: docker
          ansible_user: root
          docker_shell: bash -il
          netlab_linux_distro: vanilla
        image: netlab/dnsmasq:latest
        mtu: 1500
        node:
          config_templates:
            hosts: /etc/hosts
          kind: linux
      daemon: true
      daemon_config:
        dhcp: /etc/dhcp.ignore
        dnsmasq: /etc/dnsmasq.conf
      daemon_parent: linux
      description: DNSmasq - DNS and DHCP server
      dhcp:
        server: true
      external:
        image: none
      features:
        dhcp:
          server: true
        initial:
          ipv4:
            unnumbered: peer
          ipv6:
            use_ra: true
          roles:
          - host
        lag:
          passive: false
        routing:
          static: true
      graphite:
        icon: server
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: linux
        ansible_python_interpreter: auto_silent
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        docker_shell: sh -il
        netlab_device_type: dnsmasq
        netlab_lldp_enable: false
        netlab_net_tools: false
      interface_name: eth{ifindex}
      lag_interface_name: bond{lag.ifindex}
      libvirt:
        features:
          dhcp:
            _provider: libvirt
            client:
              ipv4: true
              ipv6: true
            relay:
              ipv4: true
            server: true
        group_vars:
          netlab_linux_distro: ubuntu
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      module:
      - dhcp
      node:
        module:
        - dhcp
      packages:
        dnsmasq: dnsmasq
      role: host
      virtualbox:
        group_vars:
          netlab_linux_distro: ubuntu
    eos:
      attributes:
        node:
          eos:
            serialnumber: str
            systemmacaddr: mac
      bgp:
        _cprop_order:
        - standard
        - extended
        - large
        - link-bandwidth
      clab:
        build: https://netlab.tools/labs/ceos/
        features:
          dhcp:
            _provider: clab
            client:
              ipv4: false
              ipv6: false
        group_vars:
          ansible_become: true
          ansible_become_method: enable
          ansible_ssh_pass: admin
          ansible_user: admin
        image: ceos:4.33.1F
        interface:
          name: et{ifindex}
        mgmt_if: Management0
        node:
          env:
            CLAB_MGMT_VRF: management
            INTFTYPE: et
          kind: ceos
      description: Arista vEOS VM or cEOS container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
          relay: true
          server: true
          vrf: true
        evpn:
          asymmetrical_irb: true
          bundle:
          - vlan_aware
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
            use_ra: true
          max_mtu: 9194
          mgmt_vrf: true
          min_mtu: 68
          roles:
          - host
          - router
          - bridge
          system_mtu: true
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - static
          - vrf
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        lag:
          mlag:
            peer:
              ifindex: 4094
              ip: 169.254.127.0/31
              vlan: 4094
          passive: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          ipv4: true
          ipv6: false
          passive: false
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
            - locpref
            - med
            - weight
            - prepend
            - community
          prefix: true
          static:
            discard: true
            inter_vrf: true
            vrf: true
        sr: {}
        stp:
          enable_per_port: true
          port_type: true
          supported_protocols:
          - stp
          - rstp
          - mstp
          - pvrst
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: Vlan{vlan}
        vrf:
          bgp: true
          isis: true
          ospfv2: true
          ospfv3: true
        vxlan: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: eos
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      interface_name: Ethernet{ifindex}
      lag_interface_name: port-channel{lag.ifindex}
      libvirt:
        build: https://netlab.tools/labs/eos/
        create_template: eos.xml.j2
        image: arista/veos
      loopback_interface_name: Loopback{ifindex}
      mgmt_if: Management1
      provider: libvirt
      role: router
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: arista/veos
    fortios:
      description: Fortinet FortiOS firewall
      external:
        image: none
      features:
        ospf: {}
      graphite:
        icon: firewall
      group_vars:
        ansible_connection: httpapi
        ansible_httpapi_port: 80
        ansible_httpapi_use_ssl: false
        ansible_httpapi_validate_certs: false
        ansible_network_os: fortinet.fortios.fortios
        ansible_password: admin
        ansible_ssh_pass: admin
        ansible_user: admin
        collections:
        - fortinet.fortios
        netlab_config_tasks: true
        netlab_console_connection: ssh
        netlab_skip_missing_template: true
        vdom: root
      ifindex_offset: 2
      interface_name: port{ifindex}
      libvirt:
        build: https://netlab.tools/labs/fortios/
        create_template: fortios.xml.j2
        image: fortinet/fortios
      loopback_interface_name: loopback{ifindex}
      mgmt_if: port1
    frr:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
          netlab_mgmt_vrf: true
          netlab_show_command:
          - vtysh
          - -c
          - show $@
        image: quay.io/frrouting/frr:10.3.1
        kmods: null
        node:
          config_templates:
            daemons: /etc/frr/daemons
            hosts: /etc/hosts
          kind: linux
      description: FRR container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          import:
          - ospf
          - ripv2
          - isis
          - connected
          - static
          - vrf
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          rfc8950: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
          multi_rt: true
        gateway:
          protocol:
          - vrrp
          - anycast
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
            use_ra: true
          roles:
          - host
          - router
        isis:
          import:
          - bgp
          - ripv2
          - ospf
          - connected
          - static
          - vrf
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        lag:
          passive: false
        mpls:
          ldp: true
          vpn:
            ipv4: true
        ospf:
          default: true
          import:
          - bgp
          - ripv2
          - isis
          - connected
          - static
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                delete: clist
                delete_list: true
                extended: true
                large: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            discard: true
            inter_vrf: true
            vrf: true
        sr: {}
        srv6:
          bgp: false
          isis: true
          vpn: true
        stp:
          enable_per_port: false
          supported_protocols:
          - stp
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          isis: true
          keep_module: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
        vxlan:
          vtep6: true
      graphite:
        icon: router
      group_vars:
        ansible_network_os: frr
        ansible_python_interpreter: auto_silent
        netlab_initial: always
        netlab_linux_packages:
          curl: curl
          gnupg: gpg
          iproute2: bridge
      interface_name: eth{ifindex}
      lag_interface_name: bond{lag.ifindex}
      libvirt:
        group_vars:
          ansible_connection: paramiko
          ansible_ssh_pass: vagrant
          ansible_ssh_private_key_file: .vagrant/machines/{{ inventory_hostname }}/libvirt/private_key
          ansible_user: vagrant
          netlab_show_command:
          - sudo
          - vtysh
          - -c
          - show $@
        image: debian/bookworm64
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      mtu: 1500
      provider: clab
      role: router
      routing:
        _rm_per_af: true
      tunnel_interface_name: tun{ifindex}
      virtualbox:
        group_vars:
          ansible_connection: paramiko
          ansible_ssh_pass: vagrant
          ansible_user: vagrant
          netlab_show_command:
          - sudo
          - vtysh
          - -c
          - show $@
        image: generic/ubuntu2004
    iol:
      clab:
        build: https://containerlab.dev/manual/kinds/cisco_iol/
        group_vars:
          ansible_become_password: admin
          ansible_ssh_pass: admin
          ansible_user: admin
          netlab_check_retries: 20
          netlab_device_type: iol
        image: vrnetlab/cisco_iol:17.12.01
        interface:
          name: Ethernet{ifindex // 4}/{ifindex % 4}
        node:
          kind: cisco_iol
      description: Cisco IOL
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            extended:
            - extended
            standard:
            - standard
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
            use_ra: true
          max_mtu: 1500
          mgmt_vrf: true
          min_mtu: 68
          min_phy_mtu: 1501
          roles:
          - host
          - router
          - bridge
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - static
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            discard: true
            inter_vrf: true
            vrf: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: BDI{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_connection: network_cli
        ansible_network_os: ios
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o PubkeyAcceptedKeyTypes=ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      interface_name: Ethernet{ifindex // 4}/{ifindex % 4}
      loopback_interface_name: Loopback{ifindex}
      provider: clab
      role: router
      routing:
        _rm_per_af: true
      tunnel_interface_name: Tunnel{ifindex}
    ioll2:
      clab:
        build: https://containerlab.dev/manual/kinds/cisco_iol/
        group_vars:
          ansible_become_password: admin
          ansible_ssh_pass: admin
          ansible_user: admin
          netlab_check_retries: 20
          netlab_device_type: ioll2
        image: vrnetlab/cisco_iol:L2-17.12.01
        interface:
          name: Ethernet{ifindex // 4}/{ifindex % 4}
        mtu: 1500
        node:
          kind: cisco_iol
          type: l2
      description: IOSv L2 image
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            extended:
            - extended
            standard:
            - standard
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
            use_ra: true
          max_mtu: 1500
          mgmt_vrf: true
          min_mtu: 68
          min_phy_mtu: 1501
          roles:
          - host
          - router
          - bridge
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - static
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            discard: true
            inter_vrf: true
            vrf: true
        sr: {}
        vlan:
          mixed_trunk: false
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: Vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_connection: network_cli
        ansible_network_os: ios
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o PubkeyAcceptedKeyTypes=ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      interface_name: Ethernet{ifindex // 4}/{ifindex % 4}
      loopback_interface_name: Loopback{ifindex}
      provider: clab
      role: router
      routing:
        _rm_per_af: true
      tunnel_interface_name: Tunnel{ifindex}
    iosv:
      clab:
        build: https://github.com/hellt/vrnetlab/tree/master/vios
        group_vars:
          ansible_ssh_pass: VR-netlab9
          ansible_user: vrnetlab
          netlab_check_retries: 50
        image: vrnetlab/cisco_vios:15.9.3
        interface:
          name: eth{ifindex}
        node:
          kind: linux
      description: Cisco IOSv
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            extended:
            - extended
            standard:
            - standard
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: false
          ipv6:
            lla: true
            use_ra: true
          max_mtu: 9600
          mgmt_vrf: true
          min_mtu: 64
          roles:
          - host
          - router
          - bridge
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - static
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            discard: true
            inter_vrf: true
            vrf: true
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: BVI{bvi}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: ios
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_device_type: ios
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o PubkeyAcceptedKeyTypes=ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      interface_name: GigabitEthernet0/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/iosv/
        create_template: iosv.xml.j2
        image: cisco/iosv
      loopback_interface_name: Loopback{ifindex}
      role: router
      routing:
        _rm_per_af: true
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: cisco/iosv
    iosvl2:
      clab:
        build: https://github.com/hellt/vrnetlab/tree/master/vios
        group_vars:
          ansible_ssh_pass: VR-netlab9
          ansible_user: vrnetlab
          netlab_check_retries: 50
        image: vrnetlab/cisco_vios:15.9.3
        interface:
          name: eth{ifindex}
        node:
          kind: linux
      description: IOSv L2 image
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            extended:
            - extended
            standard:
            - standard
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: false
          ipv6:
            lla: true
            use_ra: true
          max_mtu: 4700
          mgmt_vrf: true
          min_mtu: 68
          min_phy_mtu: 1500
          roles:
          - host
          - router
          - bridge
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - static
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - static
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            discard: true
            inter_vrf: true
            vrf: true
        vlan:
          mixed_trunk: false
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: Vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: ios
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_device_type: iosvl2
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o PubkeyAcceptedKeyTypes=ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      interface_name: GigabitEthernet{ifindex // 4}/{ifindex % 4}
      libvirt:
        build: https://netlab.tools/labs/iosvl2/
        create_template: iosv.xml.j2
        image: cisco/iosvl2
      loopback_interface_name: Loopback{ifindex}
      role: router
      routing:
        _rm_per_af: true
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: cisco/iosv
    iosxr:
      clab:
        build: https://containerlab.dev/manual/kinds/xrd/
        group_vars:
          ansible_become_password: clab@123
          ansible_ssh_pass: clab@123
          ansible_user: clab
        image: ios-xr/xrd-control-plane:7.11.1
        interface:
          name: Gi0-0-0-{ifindex}
        mgmt_if: MgmtEth0/RP0/CPU0/0
        node:
          kind: cisco_xrd
          runtime: docker
      description: Cisco IOS XRv
      external:
        image: none
      features:
        bgp:
          activate_af: true
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        ospf:
          unnumbered: true
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: iosxr
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      ifindex_offset: 0
      interface_name: GigabitEthernet0/0/0/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/iosxr/
        create: virt-install --connect=qemu:///system --network network=vagrant-libvirt,model=e1000
          --name=vm_box --cpu host --arch=x86_64 --vcpus=2 --ram=8192 --virt-type=kvm
          --disk path=vm.qcow2,format=qcow2,device=disk,bus=ide --graphics none --import
        image: cisco/iosxr
      loopback_interface_name: Loopback{ifindex}
      mgmt_if: MgmtEth0/RP0/CPU0/0
    linux:
      clab:
        features:
          initial:
            roles:
            - host
            - bridge
          vlan:
            _provider: clab
            mixed_trunk: true
            model: router
            native_routed: true
            subif_name: '{ifname}.{vlan.access_id}'
            svi_interface_name: vlan{vlan}
        group_vars:
          ansible_connection: docker
          ansible_user: root
          netlab_linux_distro: vanilla
        image: python:3.13-alpine
        kmods: null
        mtu: 1500
        node:
          config_templates:
            hosts: /etc/hosts
          kind: linux
      description: Generic Linux host
      external:
        image: none
      features:
        initial:
          ipv4:
            unnumbered: peer
          ipv6:
            use_ra: true
          roles:
          - host
        lag:
          passive: false
        routing:
          static: true
      graphite:
        icon: server
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: linux
        ansible_python_interpreter: auto_silent
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        docker_shell: sh -il
        netlab_lldp_enable: false
        netlab_net_tools: false
      interface_name: eth{ifindex}
      lag_interface_name: bond{lag.ifindex}
      libvirt:
        features:
          dhcp:
            _provider: libvirt
            client:
              ipv4: true
              ipv6: true
            relay:
              ipv4: true
            server: true
        group_vars:
          netlab_linux_distro: ubuntu
        image: bento/ubuntu-24.04
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      role: host
      virtualbox:
        group_vars:
          netlab_linux_distro: ubuntu
        image: bento/ubuntu-24.04
    none:
      clab:
        image: none
      description: Dummy device used to test topology transformation
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          allowas_in: true
          as_override: true
          bandwidth: true
          bfd: true
          default_originate: true
          gtsm: true
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - static
          - vrf
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          multihop:
            vrf: true
          passive: true
          password: true
          remove_private_as: true
          rfc8950: true
          rs: true
          rs_client: true
          tcp_ao:
          - libvirt
          - virtualbox
          - external
          timers: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        evpn:
          asymmetrical_irb: true
          bundle:
          - vlan_aware
          irb: true
          multi_rt: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          mgmt_vrf: true
          roles:
          - router
          - bridge
          - host
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - vrf
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
          vrf: true
        lag:
          mlag: true
          passive: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - static
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            discard: true
            inter_vrf: true
            vrf: true
        sr: {}
        srv6:
          bgp: true
          isis: true
          ospf: true
          vpn: true
        stp:
          enable_per_port: true
          port_type: true
          supported_protocols:
          - stp
          - rstp
          - mstp
          - pvrst
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: Vlan{vlan}
        vrf:
          bgp: true
          isis: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
        vxlan:
          vtep6: true
      group_vars:
        ansible_connection: paramiko_ssh
        ansible_network_os: none
      interface_name: eth{ifindex}
      lag_interface_name: bond{lag.ifindex}
      libvirt:
        image: none
      loopback_interface_name: Loopback{ifindex}
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: none
    nxos:
      bfd:
        min_rx: 500
      clab:
        build: https://containerlab.dev/manual/kinds/vr-n9kv/
        group_vars:
          ansible_ssh_pass: admin
          ansible_user: admin
        image: vrnetlab/vr-n9kv:9.3.10
        interface:
          name: eth{ifindex}
        node:
          kind: cisco_n9kv
      description: Cisco Nexus 9300v
      evpn:
        _start_transit_vlan: 3800
      external:
        image: none
      features:
        bfd: {}
        bgp: {}
        eigrp: {}
        evpn:
          irb: true
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        ospf:
          password: true
          priority: true
          timers: true
          unnumbered: true
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
        vxlan: {}
      graphite:
        icon: nexus5000
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: nxos
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_check_delay: 10
        netlab_check_retries: 50
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group14-sha1 -o PubkeyAcceptedKeyTypes=+ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      interface_name: Ethernet1/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/nxos/
        create_template: nxos.xml.j2
        image: cisco/nexus9300v
      loopback_interface_name: loopback{ifindex}
      mgmt_if: mgmt0
      virtualbox:
        image: cisco/nexus9300v
    routeros:
      description: Mikrotik RouterOS version 6
      external:
        image: none
      features:
        bgp: {}
        mpls:
          ldp: true
          vpn: true
        ospf: {}
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}-{vlan.access_id}'
          svi_interface_name: bridge{vlan}
        vrf:
          bgp: true
          ospfv2: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: routeros
        ansible_ssh_pass: admin
        ansible_user: admin
      ifindex_offset: 2
      interface_name: ether{ifindex}
      libvirt:
        build: https://stefano.dscnet.org/a/mikrotik_vagrant/
        image: mikrotik/chr
      loopback_interface_name: loopback
      mgmt_if: ether1
    routeros7:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-ros/
        image: vrnetlab/vr-routeros:7.6
        interface:
          name: eth{ifindex-1}
        node:
          kind: vr-ros
      description: Mikrotik RouterOS version 7
      external:
        image: none
      features:
        bgp: {}
        mpls:
          ldp: true
          vpn: true
        ospf: {}
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}-{vlan.access_id}'
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: routeros
        ansible_ssh_pass: admin
        ansible_user: admin
        netlab_device_type: routeros7
      ifindex_offset: 2
      interface_name: ether{ifindex}
      libvirt:
        build: https://netlab.tools/labs/routeros7/
        create: virt-install --connect=qemu:///system --name=vm_box --arch=x86_64
          --cpu host --vcpus=2 --hvm --ram=256 --network=network:vagrant-libvirt,model=virtio
          --graphics none --import --disk path=vm.qcow2,format=qcow2,bus=ide
        image: mikrotik/chr7
      loopback_interface_name: loopback{ifindex}
      mgmt_if: ether1
    sonic:
      description: Sonic VM
      external:
        image: none
      features:
        bgp:
          activate_af: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
      graphite:
        icon: router
      group_vars:
        ansible_network_os: frr
        ansible_python_interpreter: auto_silent
        netlab_device_type: sonic
      ifindex_offset: 0
      interface_name: Ethernet{ifindex * 4}
      libvirt:
        create_template: sonic.xml.j2
        group_vars:
          ansible_connection: paramiko
          ansible_ssh_pass: YourPaSsWoRd
          ansible_user: admin
          netlab_show_command:
          - sudo
          - vtysh
          - -c
          - show $@
        image: netlab/sonic
        mtu: 1500
      loopback_interface_name: Loopback{ifindex}
      mgmt_if: eth0
    srlinux:
      bfd:
        min_rx: 100
        min_tx: 100
      clab:
        group_vars:
          srlinux_grpc_port: 57400
        image: ghcr.io/nokia/srlinux:25.3.2
        interface:
          name: e1-{ifindex}
        node:
          kind: srl
          type: ixrd2
      description: Nokia SR Linux container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          import:
          - ospf
          - isis
          - connected
          - vrf
          - no_policy
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          max_mtu: 9500
          min_mtu: 1436
          system_mtu: true
        isis:
          import:
          - ospf
          - bgp
          - connected
          - vrf
          - no_policy
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          ldp: true
        ospf:
          default: true
          import:
          - bgp
          - isis
          - connected
          - vrf
          - no_policy
          unnumbered: true
        routing:
          policy:
            match:
              prefix: true
            set:
            - locpref
            - med
          prefix: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: router
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb0.{vlan}
        vrf:
          bgp: true
          isis: true
          keep_module: true
          ospfv2: true
          ospfv3: true
        vxlan:
          requires:
          - evpn
      graphite:
        icon: router
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: srlinux
        ansible_ssh_pass: NokiaSrl1!
        ansible_user: admin
        netlab_console_connection: ssh
        netlab_match_protomap:
          bgp:
          - bgp
          - bgp-evpn
          connected:
          - local
          isis:
          - isis
          ospf:
          - ospfv2
          - ospfv3
      interface_name: ethernet-1/{ifindex}
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: mgmt0
      provider: clab
      sr:
        ipv6_sid_offset: 100
        srgb_range_size: 1000
        srgb_range_start: 500000
    sros:
      bfd:
        min_rx: 100
        min_tx: 100
      clab:
        build: https://containerlab.dev/manual/kinds/vr-sros/
        group_vars:
          sros_grpc_port: 57400
        image: vrnetlab/nokia_sros:25.3.R2
        interface:
          name: eth{ifindex}
        mtu: 1500
        node:
          kind: vr-sros
          license: ~/.netlab/license_sros25.txt
          type: sr-1
      description: Nokia SR OS container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          import:
          - ospf
          - isis
          - connected
          - vrf
          - no_policy
          ipv6_lla: false
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          max_mtu: 9782
          min_phy_mtu: 1500
        isis:
          import:
          - ospf
          - bgp
          - connected
          - vrf
          - no_policy
          unnumbered:
            ipv4: true
            ipv6: true
            network: false
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          import:
          - bgp
          - isis
          - connected
          - vrf
          - no_policy
          strict_bfd: true
          unnumbered: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
        routing:
          policy:
            set:
            - locpref
            - med
        sr: {}
        srv6:
          bgp: true
          isis: true
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}/1_{vlan.access_id}'
          svi_interface_name: svi.{vlan}
        vrf:
          bgp: true
          isis: true
          ospfv2: true
          ospfv3: true
        vxlan:
          requires:
          - evpn
      graphite:
        icon: router
      group_vars:
        ansible_connection: paramiko_ssh
        ansible_network_os: sros
        ansible_ssh_pass: admin
        ansible_user: admin
        netlab_console_connection: ssh
        netlab_match_protomap:
          bgp:
          - bgp
          connected:
          - direct
          isis:
          - isis
          ospf:
          - ospf
          - ospf3
        sros_use_openconfig: false
      interface_name: eth-1/1/c{ifindex}
      loopback_interface_name: '{"loopback."+str(ifindex) if ifindex else "system"}'
      mgmt_if: A/1
      sr:
        ipv6_sid_offset: 100
        srgb_range_size: 1000
        srgb_range_start: 500000
    unknown:
      description: Generic Unknown Device
      features:
        bfd: {}
        bgp: {}
        evpn: {}
        gateway: {}
        isis: {}
        mpls: {}
        ospf: {}
        sr: {}
        srv6: {}
        vlan: {}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
        vxlan: {}
      graphite:
        icon: server
      interface_name: eth{ifindex}
      mgmt_if: eth0
    vjunos-router:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-vjunosrouter/
        group_vars:
          ansible_ssh_pass: admin@123
          ansible_user: admin
          netlab_check_delay: 10
          netlab_check_retries: 60
        image: vrnetlab/juniper_vjunos-router:23.4R2-S2.1
        interface:
          name: eth{ifindex+1}
        mtu: 1500
        node:
          kind: juniper_vjunosrouter
      description: vJunos Router (similar to vMX)
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - aspath
            - community
            set:
              community:
                append: true
                delete: true
                extended: true
                large: true
                standard: true
              locpref: true
              med: true
              prepend: true
          prefix: true
          static:
            discard: true
            vrf: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb.{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: admin@123
        ansible_user: admin
        netlab_check_retries: 20
        netlab_console_connection: ssh
        netlab_device_type: vjunos-router
        netlab_license_url: https://www.juniper.net/content/dam/www/assets/dm/us/en/E421992502.txt
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      lag_interface_name: ae{lag.ifindex}
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: fxp0
    vjunos-switch:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-vjunosswitch/
        group_vars:
          ansible_ssh_pass: admin@123
          ansible_user: admin
          netlab_check_delay: 10
          netlab_check_retries: 40
        image: vrnetlab/juniper_vjunos-switch:23.4R2-S2.1
        interface:
          name: eth{ifindex+1}
        mtu: 1500
        node:
          kind: juniper_vjunosswitch
      description: vJunos Switch
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
          multi_rt: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        lag:
          passive: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - aspath
            - community
            set:
              community:
                append: true
                delete: true
                extended: true
                large: true
                standard: true
              locpref: true
              med: true
              prepend: true
          prefix: true
          static:
            discard: true
            vrf: true
        sr: {}
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb.{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
        vxlan: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: Vagrant
        ansible_user: vagrant
        netlab_console_connection: ssh
        netlab_device_type: vjunos-switch
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      lag_interface_name: ae{lag.ifindex}
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: fxp0
    vmx:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-vmx/
        image: vrnetlab/vr-vmx:18.2R1.9
        interface:
          name: eth{ifindex+1}
        node:
          kind: vr-vmx
      description: Juniper vMX container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - aspath
            - community
            set:
              community:
                append: true
                delete: true
                extended: true
                large: true
                standard: true
              locpref: true
              med: true
              prepend: true
          prefix: true
          static:
            discard: true
            vrf: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb.{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: admin@123
        ansible_user: admin
        netlab_check_retries: 20
        netlab_console_connection: ssh
        netlab_device_type: vmx
        netlab_license_url: https://www.juniper.net/content/dam/www/assets/dm/us/en/E421992502.txt
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      lag_interface_name: ae{lag.ifindex}
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: fxp0
    vptx:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-vjunosevolved/
        group_vars:
          ansible_ssh_pass: admin@123
          ansible_user: admin
          netlab_check_delay: 10
          netlab_check_retries: 40
        image: vrnetlab/juniper_vjunosevolved:23.2R2.21-EVO
        interface:
          name: eth{ifindex+1}
        mtu: 1500
        node:
          kind: juniper_vjunosevolved
      description: Juniper vPTX
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        lag:
          passive: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - aspath
            - community
            set:
              community:
                append: true
                delete: true
                extended: true
                large: true
                standard: true
              locpref: true
              med: true
              prepend: true
          prefix: true
          static:
            discard: true
            vrf: true
        sr: {}
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb.{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
      graphite:
        icon: switch
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: Vagrant
        ansible_user: vagrant
        netlab_console_connection: ssh
        netlab_device_type: vptx
      ifindex_offset: 0
      interface_name: et-0/0/{ifindex}
      lag_interface_name: ae{lag.ifindex}
      libvirt:
        build: https://netlab.tools/labs/vptx/
        create_template: vptx.xml.j2
        image: juniper/vptx
        pre_install: vptx
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: re0:mgmt-0
    vsrx:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-vsrx/
        group_vars:
          ansible_ssh_pass: admin@123
          ansible_user: admin
          netlab_check_delay: 10
          netlab_check_retries: 60
        image: vrnetlab/juniper_vsrx:junos-vsrx-21.4R1.12
        interface:
          name: eth{ifindex+1}
        node:
          kind: vr-vsrx
      description: Juniper vSRX 3.0
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        lag:
          passive: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - aspath
            - community
            set:
              community:
                append: true
                delete: true
                extended: true
                large: true
                standard: true
              locpref: true
              med: true
              prepend: true
          prefix: true
          static:
            discard: true
            vrf: true
        sr: {}
        vlan:
          mixed_trunk: false
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
      graphite:
        icon: firewall
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: Vagrant
        ansible_user: vagrant
        netlab_console_connection: ssh
        netlab_device_type: vsrx
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      lag_interface_name: ae{lag.ifindex}
      libvirt:
        build: https://netlab.tools/labs/vsrx/
        create: virt-install --connect=qemu:///system --name=vm_box --os-variant=freebsd10.0
          --arch=x86_64 --cpu host --vcpus=2 --hvm --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2
          --disk path=bootstrap.iso,device=cdrom,bus=ide --boot hd --network=network:vagrant-libvirt,model=virtio
          --graphics none --import
        create_iso: vsrx
        image: juniper/vsrx3
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: fxp0
      virtualbox:
        image: juniper/vsrx3
    vyos:
      clab:
        features:
          stub_loopback: {}
        group_vars:
          ansible_connection: docker
          ansible_user: vyos
        image: ghcr.io/sysoleg/vyos-container
        kmods: null
        mtu: 1500
        node:
          binds:
            /lib/modules: /lib/modules
          kind: linux
      description: VyOS VM/container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          import:
          - ospf
          - ripv2
          - connected
          - static
          - vrf
          ipv6_lla: true
          local_as: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis: {}
        mpls:
          ldp: true
          vpn:
            ipv4: true
        ospf:
          default: true
          import:
          - bgp
          - ripv2
          - connected
          - static
          - vrf
          unnumbered: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                delete: false
                extended: true
                large: true
                standard: true
              locpref: true
              med: true
              prepend: true
          prefix: true
          static:
            discard: true
            inter_vrf: true
            vrf: true
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: br0.{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
        vxlan:
          vtep6: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: vyos
        ansible_ssh_pass: vyos
        ansible_user: vyos
        docker_shell: su - vyos
      interface_name: eth{ifindex}
      libvirt:
        image: vyos/current
      loopback_interface_name: dum{ifindex}
      mgmt_if: eth0
  dhcp:
    attributes:
      interface:
        client:
          default: bool
          ipv4: bool
          ipv6: bool
        server:
          _subtype: node_id
          type: list
        vrf: str
      link:
        client:
          default: bool
          ipv4: bool
          ipv6: bool
        subnet:
          ipv4: bool
          ipv6: bool
      node:
        server: bool
        vrf: bool
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    config_after:
    - vlan
    - vrf
    - vxlan
<<<<<<< HEAD
    attributes:
      node:
        server: bool
        vrf: bool
      interface:
        server:
          type: list
          _subtype: node_id
        vrf: str
        client:
          ipv4: bool
          ipv6: bool
          default: bool
      link:
        client:
          ipv4: bool
          ipv6: bool
          default: bool
        subnet:
          ipv4: bool
          ipv6: bool
=======
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    features:
      client:
        ipv4: IPv4 DHCP client
        ipv6: IPv6 DHCP client
      relay: DHCP relay (IPv4 and IPv6)
      server: DHCP server
      vrf: Inter-VRF DHCP relay
    supported_on:
      bird:
        libvirt: true
      cat8000v: true
      csr: true
      cumulus: true
      dnsmasq: true
      eos: true
      iol: true
      ioll2: true
      ios: true
      iosv: true
      iosvl2: true
      linux:
        libvirt: true
      none: true
<<<<<<< HEAD
  eigrp:
    transform_after:
    - vlan
    - vrf
    config_after:
    - vlan
    - dhcp
    - routing
=======
    transform_after:
    - vlan
    - vrf
    - ospf
    - eigrp
    - isis
    - bgp
  eigrp:
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    as: 1
    attributes:
      global:
        af:
<<<<<<< HEAD
          _list_to_dict: true
          _alt_types:
          - NoneType
          ipv4: bool
          ipv6: bool
        as: asn
      node:
        af:
          _list_to_dict: true
          _alt_types:
          - NoneType
=======
          _alt_types:
          - NoneType
          _list_to_dict: true
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
          ipv4: bool
          ipv6: bool
        as: asn
      link:
        passive: bool
<<<<<<< HEAD
    warnings:
      inactive: true
=======
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        as: asn
    config_after:
    - vlan
    - dhcp
    - routing
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      cat8000v: true
      csr: true
      iol: true
      ioll2: true
      ios: true
      iosv: true
      iosvl2: true
      none: true
      nxos: true
<<<<<<< HEAD
  evpn:
    requires:
    - bgp
    no_propagate:
    - start_transit_vni
    - transport
    - vlan_bundle_service
    - as
    transform_after:
    - vlan
    - vxlan
    - vrf
    config_after:
    - vlan
    - vxlan
    - vrf
    session:
    - ibgp
    start_transit_vni: 200000
    attributes:
      global:
=======
    transform_after:
    - vlan
    - vrf
    warnings:
      inactive: true
  evpn:
    attributes:
      bundle:
      - vlan_aware
      - vlan
      - port
      - port_vlan
      global:
        as: asn
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        session:
        - ibgp
        - ebgp
        start_transit_vni:
<<<<<<< HEAD
          type: int
          min_value: 1
          max_value: 16777215
=======
          max_value: 16777215
          min_value: 1
          type: int
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        transport:
          type: str
          valid_values:
          - vxlan
          - mpls
        vlans: list
        vrfs: list
<<<<<<< HEAD
        as: asn
      bundle:
      - vlan_aware
      - vlan
      - port
      - port_vlan
=======
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      node:
        session:
        - ibgp
        - ebgp
        vlans: list
        vrfs: list
<<<<<<< HEAD
      vlan:
        evi: rd
        rd: rd
        import: list
        export: list
      node_vlan:
        import: list
        export: list
      vrf:
        transit_vni:
          type: int
          min_value: 1
          max_value: 16777215
          _alt_types:
          - str
          - bool
=======
      node_vlan:
        export: list
        import: list
      vlan:
        evi: rd
        export: list
        import: list
        rd: rd
      vrf:
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        bundle:
          type: str
          valid_values:
          - vlan_aware
          - vlan
          - port
          - port_vlan
<<<<<<< HEAD
    features:
      irb: Supports symmetrical IRB (routing on ingress and egress)
      asymmetrical_irb: Support asymmetrical IRB (routing on ingress, bridging 
        on egress)
      bundle: EVPN bundle service support
      multi_rt: Multiple import/export route targets
=======
        transit_vni:
          _alt_types:
          - str
          - bool
          max_value: 16777215
          min_value: 1
          type: int
    config_after:
    - vlan
    - vxlan
    - vrf
    features:
      asymmetrical_irb: Support asymmetrical IRB (routing on ingress, bridging on
        egress)
      bundle: EVPN bundle service support
      irb: Supports symmetrical IRB (routing on ingress and egress)
      multi_rt: Multiple import/export route targets
    no_propagate:
    - start_transit_vni
    - transport
    - vlan_bundle_service
    - as
    requires:
    - bgp
    session:
    - ibgp
    start_transit_vni: 200000
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      arubacx: true
      cumulus: true
      cumulus_nvue: true
      dellos10: true
      eos: true
      frr: true
      none: true
      nxos: true
      srlinux: true
      sros: true
      unknown: true
      vjunos-switch: true
      vyos: true
<<<<<<< HEAD
  gateway:
    transform_after:
    - vlan
    - vrf
    - ospf
    - isis
    - eigrp
    config_after:
    - vlan
    - vrf
    id: -2
    protocol: anycast
    anycast:
      mac: 0200.cafe.00ff
      unicast: true
    vrrp:
      group: 1
    no_propagate:
    - id
    - protocol
    attributes:
      global:
=======
    transform_after:
    - vlan
    - vxlan
    - vrf
  gateway:
    anycast:
      mac: 0200.cafe.00ff
      unicast: true
    attributes:
      anycast:
      - unicast
      - mac
      can_be_true:
      - link
      global:
        anycast:
          mac: mac
          unicast: bool
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        id: int
        protocol:
          type: str
          valid_values:
          - anycast
          - vrrp
<<<<<<< HEAD
        anycast:
          unicast: bool
          mac: mac
        vrrp:
          group: int
          priority: int
          preempt: bool
      node:
        anycast:
          unicast: bool
          mac: mac
        vrrp:
          group: int
          priority: int
          preempt: bool
      can_be_true:
      - link
      anycast:
      - unicast
      - mac
      protocols:
      - anycast
      - vrrp
      vrrp:
      - group
      link:
=======
        vrrp:
          group: int
          preempt: bool
          priority: int
      link:
        anycast:
          mac: mac
          unicast: bool
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        id: int
        ipv4:
          type: ipv4
          use: interface
        ipv6:
          type: ipv6
          use: interface
        protocol:
          type: str
          valid_values:
          - anycast
          - vrrp
<<<<<<< HEAD
        anycast:
          unicast: bool
          mac: mac
        vrrp:
          group: int
          priority: int
          preempt: bool
      link_to_neighbor: true
    features:
      protocol: Supported FHRP protocols
=======
        vrrp:
          group: int
          preempt: bool
          priority: int
      link_to_neighbor: true
      node:
        anycast:
          mac: mac
          unicast: bool
        vrrp:
          group: int
          preempt: bool
          priority: int
      protocols:
      - anycast
      - vrrp
      vrrp:
      - group
    config_after:
    - vlan
    - vrf
    features:
      protocol: Supported FHRP protocols
    id: -2
    no_propagate:
    - id
    - protocol
    protocol: anycast
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      arubacx: true
      cat8000v: true
      csr: true
      cumulus: true
      cumulus_nvue: true
      dellos10: true
      eos: true
      frr: true
      iol: true
      ioll2: true
      ios: true
      iosv: true
      iosvl2: true
      junos: true
      none: true
      nxos: true
      srlinux: true
      sros: true
      unknown: true
      vjunos-router: true
      vjunos-switch: true
      vmx: true
      vptx: true
      vsrx: true
      vyos: true
<<<<<<< HEAD
  initial:
    features:
      system_mtu: System-wide MTU setting
=======
    transform_after:
    - vlan
    - vrf
    - ospf
    - isis
    - eigrp
    vrrp:
      group: 1
  groups:
    all:
      _default_group: true
      members: []
      vars:
        netlab_show_config: true
  hints:
    cli:
      interrupt: Use 'netlab status' command to display the status of your lab and
        'netlab down --cleanup' command to clean it up. You might have to use the
        '--force' option of the 'netlab down' command.
      recreate: netlab transforms lab topology into device- and platform data and
        stores the results in a snapshot file that is used by most netlab commands.
        Changes to source files (including lab topology or defaults) are not automatically
        reflected in the snapshot file. Use 'netlab create' or 'netlab up' to create
        a new snapshot file.
    evpn:
      asn: 'You could use the global ''bgp.as'' parameter to specify the AS to use
        in EVPN route targets. ''bgp.as'' specified on individual nodes or groups
        will not work. You can also specify the global AS used by EVPN in ''vrf.as''
        parameter if you use VRFs, or in ''evpn.as'' parameter if you use EVPN in
        bridging-only scenarios.

        '
      irb_group: 'All VLANs that are part of a VRF using asymmetric IRB have to be
        present on all nodes using that VRF. The easiest way to achieve that is to
        create a group with all participating nodes and list VLANs in the ''vlans''
        attribute of that group

        '
      node_attr: 'evpn.bundle and evpn.transit_vni attributes can be used only in
        global VRF definition

        '
    junos:
      single_lb: 'Junos devices cannot have more than one loopback interface per routing
        instance

        '
    libvirt:
      capture: 'Change the link type to Linux bridge with ''type: lan'' link attribute
        or see

        https://netlab.tools/labs/libvirt/#libvirt-capture for other options.

        '
    nodes:
      unmanaged_device: Netlab uses the node device type for unmanaged nodes to figure
        out what features the node supports. If you're using a device that is not
        supported by netlab, set the device type to 'none'.
    report:
      source: 'A report can be specified in a file with .j2 suffix within ''reports''
        subdirectory in package-, system-, user- or current directory. You can also
        specify a report in a defaults.outputs.report setting.

        '
    routing:
      host_gw: Hosts attached to routers need a shared gateway or a gateway of last
        resort. In both cases, at least one adjacent router needs a real (not unnumbered/LLA)
        IP address.
      policy:
        match_af: A routing policy 'match.prefix' condition can match a single address
          family. Use 'match.af' parameter to specify the address family you want
          to match.
    validation:
      nodes: A test that uses 'show', 'exec' or 'plugin' action must specify the nodes
        on which that action will be executed.
      show: The 'show' action should return structured data that is then validated
        with the 'valid' check. If you want to execute a command on the device without
        checking the results, use the 'exec' action.
      valid: A test that includes the 'valid' check must generate some output to check.
        That output can be generated with 'show','exec', or 'suzieq' action.
    vlan:
      mixed_fwd_check: 'You can disable this error with "defaults.vlan.warnings.mixed_fwd_check:
        False", but then you might get the same IP prefix assigned to multiple segments
        of the routed VLAN.

        '
    vrf:
      inactive: 'A globally-defined VRF is not used on a node unless that node is
        attached to a VRF link, or has the VRF listed in the node ''vrfs'' dictionary
        and uses VRF loopbacks.

        '
  initial:
    features:
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      ipv4:
        unnumbered: Unnumbered IPv4 interfaces
      ipv6:
        lla: IPv6 LLA-only interfaces
        use_ra: Listen to RA messages when running as a host
<<<<<<< HEAD
      min_mtu: Minimum layer-3 MTU supported by the device
      max_mtu: Maximum layer-3 MTU supported by the device
      min_phy_mtu: Minimum MTU that can be configured with 'mtu' command. Lower 
        MTU settings use 'ip mtu'
      roles: Valid device roles
  isis:
    area: '49.0001'
    type: level-2
    instance: Gandalf
    transform_after:
    - vlan
    - vrf
    config_after:
    - vlan
    - dhcp
    - routing
    attributes:
      global:
        af:
          _list_to_dict: true
          _alt_types:
          - NoneType
          ipv4: bool
          ipv6: bool
        area: net
=======
      max_mtu: Maximum layer-3 MTU supported by the device
      min_mtu: Minimum layer-3 MTU supported by the device
      min_phy_mtu: Minimum MTU that can be configured with 'mtu' command. Lower MTU
        settings use 'ip mtu'
      roles: Valid device roles
      system_mtu: System-wide MTU setting
  isis:
    area: '49.0001'
    attributes:
      global:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        area: net
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        instance: str
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        type:
          type: str
          valid_values:
          - level-1
          - level-2
          - level-1-2
<<<<<<< HEAD
        bfd:
          ipv4: bool
          ipv6: bool
          _alt_types:
          - bool
        instance: str
      node:
        af:
          _list_to_dict: true
          _alt_types:
          - NoneType
=======
      link:
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        cost:
          max_value: 16777215
          min_value: 1
          type: int
        metric:
          max_value: 16777215
          min_value: 1
          type: int
        network_type:
          _alt_types:
          - bool
          type: str
          valid_values:
          - point-to-point
        passive: bool
        type:
          type: str
          valid_values:
          - level-1
          - level-2
          - level-1-2
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
          ipv4: bool
          ipv6: bool
        area: net
        bfd:
<<<<<<< HEAD
          ipv4: bool
          ipv6: bool
          _alt_types:
          - bool
=======
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        import: _r_import
        instance: str
        net: net
        type:
          type: str
          valid_values:
          - level-1
          - level-2
          - level-1-2
<<<<<<< HEAD
      link:
        metric:
          type: int
          min_value: 1
          max_value: 16777215
        cost:
          type: int
          min_value: 1
          max_value: 16777215
        type:
          type: str
          valid_values:
          - level-1
          - level-2
          - level-1-2
        bfd:
          ipv4: bool
          ipv6: bool
          _alt_types:
          - bool
        network_type:
          type: str
          valid_values:
          - point-to-point
          _alt_types:
          - bool
        passive: bool
    features:
=======
    config_after:
    - vlan
    - dhcp
    - routing
    features:
      import: Route redistribution
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      unnumbered:
        ipv4: IPv4 unnumbered interfaces
        ipv6: IPv6 unnumbered interfaces
        network: multi-access unnumbered links
<<<<<<< HEAD
      import: Route redistribution
    warnings:
      inactive: true
=======
    instance: Gandalf
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      asav: true
      cat8000v: true
      csr: true
      eos: true
      frr: true
      iol: true
      ioll2: true
      ios: true
      iosv: true
      iosvl2: true
      iosxr: true
      junos: true
      none: true
      nxos: true
      srlinux: true
      sros: true
      unknown: true
      vjunos-router: true
      vjunos-switch: true
      vmx: true
      vptx: true
      vsrx: true
      vyos: true
<<<<<<< HEAD
  lag:
    no_propagate:
    - start_lag_id
    start_lag_id: 1
    lacp: fast
    lacp_mode: active
=======
    transform_after:
    - vlan
    - vrf
    type: level-2
    warnings:
      inactive: true
  lag:
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    attributes:
      global:
        lacp:
          type: str
          valid_values:
          - 'off'
          - slow
          - fast
        lacp_mode:
          type: str
          valid_values:
          - passive
          - active
        mode:
          type: str
          valid_values:
          - 802.3ad
          - balance-xor
<<<<<<< HEAD
=======
      lag_l2_linkattr:
        bandwidth: null
        mtu: null
      lag_member_linkattr:
        _linkname: null
        bandwidth: null
        interfaces: null
        mtu: null
      lag_no_propagate:
        _linkname: null
        ifindex: null
        interfaces: null
        name: null
      link:
        ifindex:
          max_value: 10000
          min_value: 0
          type: int
        lacp:
          type: str
          valid_values:
          - 'off'
          - slow
          - fast
        lacp_mode:
          type: str
          valid_values:
          - passive
          - active
        members: null
        mlag:
          mac: mac
          peergroup:
            _alt_types:
            - bool
            min_value: 1
            type: int
        mode:
          type: str
          valid_values:
          - 802.3ad
          - balance-xor
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      node:
        lacp:
          type: str
          valid_values:
          - 'off'
          - slow
          - fast
        lacp_mode:
          type: str
          valid_values:
          - passive
          - active
        mlag:
          mac: mac
        mode:
          type: str
          valid_values:
          - 802.3ad
          - balance-xor
<<<<<<< HEAD
      link:
        lacp:
          type: str
          valid_values:
          - 'off'
          - slow
          - fast
        lacp_mode:
          type: str
          valid_values:
          - passive
          - active
        ifindex:
          type: int
          min_value: 0
          max_value: 10000
        members:
        mode:
          type: str
          valid_values:
          - 802.3ad
          - balance-xor
        mlag:
          peergroup:
            type: int
            min_value: 1
            _alt_types:
            - bool
          mac: mac
      lag_l2_linkattr:
        mtu:
        bandwidth:
      lag_member_linkattr:
        mtu:
        bandwidth:
        _linkname:
        interfaces:
      lag_no_propagate:
        interfaces:
        _linkname:
        name:
        ifindex:
=======
    lacp: fast
    lacp_mode: active
    no_propagate:
    - start_lag_id
    start_lag_id: 1
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      arubacx: true
      bird: true
      cumulus: true
      cumulus_nvue: true
      dellos10: true
      dnsmasq: true
      eos: true
      frr: true
      linux: true
      none: true
      vjunos-switch: true
      vptx: true
      vsrx: true
<<<<<<< HEAD
  mpls:
=======
  module:
  - ospf
  mpls:
    attributes:
      global:
        6pe:
          true_value:
          - ibgp
          type: list
        bgp:
          _alt_types:
          - bool
          - BoxList
          disable_unlabeled: bool
          explicit_null: bool
          ipv4:
            true_value:
            - ibgp
            - ebgp
            type: list
          ipv6:
            true_value:
            - ibgp
            - ebgp
            type: list
        ldp:
          _alt_types:
          - bool
          advertise: list
          explicit_null: bool
          igp_sync: bool
          router_id:
            type: ipv4
            use: id
        vpn:
          _alt_types:
          - bool
          - BoxList
          ipv4:
            true_value:
            - ibgp
            type: list
          ipv6:
            true_value:
            - ibgp
            type: list
      link:
        ldp: bool
      node:
        6pe:
          true_value:
          - ibgp
          type: list
        bgp:
          _alt_types:
          - bool
          - BoxList
          disable_unlabeled: bool
          explicit_null: bool
          ipv4:
            true_value:
            - ibgp
            - ebgp
            type: list
          ipv6:
            true_value:
            - ibgp
            - ebgp
            type: list
        ldp:
          _alt_types:
          - bool
          advertise: list
          explicit_null: bool
          igp_sync: bool
          router_id:
            type: ipv4
            use: id
        vpn:
          _alt_types:
          - bool
          - BoxList
          ipv4:
            true_value:
            - ibgp
            type: list
          ipv6:
            true_value:
            - ibgp
            type: list
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    config_after:
    - vlan
    - ospf
    - isis
    - bgp
<<<<<<< HEAD
    transform_after:
    - vlan
    - bgp
    - vrf
    ldp: true
    attributes:
      global:
        ldp:
          _alt_types:
          - bool
          router_id:
            type: ipv4
            use: id
          igp_sync: bool
          explicit_null: bool
          advertise: list
        bgp:
          _alt_types:
          - bool
          - BoxList
          ipv4:
            type: list
            true_value:
            - ibgp
            - ebgp
          ipv6:
            type: list
            true_value:
            - ibgp
            - ebgp
          explicit_null: bool
          disable_unlabeled: bool
        vpn:
          _alt_types:
          - bool
          - BoxList
          ipv4:
            type: list
            true_value:
            - ibgp
          ipv6:
            type: list
            true_value:
            - ibgp
        6pe:
          type: list
          true_value:
          - ibgp
      node:
        ldp:
          _alt_types:
          - bool
          router_id:
            type: ipv4
            use: id
          igp_sync: bool
          explicit_null: bool
          advertise: list
        bgp:
          _alt_types:
          - bool
          - BoxList
          ipv4:
            type: list
            true_value:
            - ibgp
            - ebgp
          ipv6:
            type: list
            true_value:
            - ibgp
            - ebgp
          explicit_null: bool
          disable_unlabeled: bool
        vpn:
          _alt_types:
          - bool
          - BoxList
          ipv4:
            type: list
            true_value:
            - ibgp
          ipv6:
            type: list
            true_value:
            - ibgp
        6pe:
          type: list
          true_value:
          - ibgp
      link:
        ldp: bool
    features:
      ldp: Can run LDP within an autonomous system
      bgp: Supports BGP Labeled Unicast address family
      vpn: Supports MPLS/VPN
      6pe: Supports 6PE
=======
    features:
      6pe: Supports 6PE
      bgp: Supports BGP Labeled Unicast address family
      ldp: Can run LDP within an autonomous system
      vpn: Supports MPLS/VPN
    ldp: true
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      arubacx: true
      cat8000v: true
      csr: true
      eos: true
      frr: true
      iol: true
      ioll2: true
      ios: true
      iosv: true
      iosvl2: true
      junos: true
      none: true
      routeros: true
      routeros7: true
      srlinux: true
      sros: true
      unknown: true
      vjunos-router: true
      vjunos-switch: true
      vmx: true
      vptx: true
      vsrx: true
      vyos: true
<<<<<<< HEAD
  ospf:
    area: 0.0.0.0
    transform_after:
    - vlan
    - vrf
    config_after:
    - vlan
    - dhcp
    - routing
    attributes:
      global:
        af:
          _list_to_dict: true
          _alt_types:
          - NoneType
=======
    transform_after:
    - vlan
    - bgp
    - vrf
  multilab:
    change:
      addressing:
        mgmt:
          _bridge: nl_mgmt_17
          _network: nl_mgmt_17
          ipv4: 192.168.17.0/24
      defaults:
        name: ml_17
        providers:
          libvirt:
            tunnel_id: '17'
            vifprefix: vgif_17
      name: ml_17
    id: 17
  name: ml_17
  netlab:
    capture:
      command: tcpdump -i {intf}
      command_args: --immediate-mode -l -vv
  ospf:
    area: 0.0.0.0
    attributes:
      global:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
          ipv4: bool
          ipv6: bool
        area:
          type: ipv4
          use: id
        bfd:
<<<<<<< HEAD
=======
          _alt_types:
          - bool
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
          ipv4: bool
          ipv6: bool
          strict: bool
          strict_delay:
<<<<<<< HEAD
            type: int
            min_value: 0
            max_value: 600
          _alt_types:
          - bool
        passive: bool
        password: str
        process:
          type: int
          min_value: 1
        reference_bandwidth:
          type: int
          min_value: 1
        timers:
          hello:
            type: int
            min_value: 1
            max_value: 8192
          dead:
            type: int
            min_value: 3
            max_value: 8192
      node:
        af:
          _list_to_dict: true
          _alt_types:
          - NoneType
          ipv4: bool
          ipv6: bool
        area:
          type: ipv4
          use: id
        bfd:
          ipv4: bool
          ipv6: bool
          strict: bool
          strict_delay:
            type: int
            min_value: 0
            max_value: 600
          _alt_types:
          - bool
        default:
          _alt_types:
          - bool
          type: dict
          _keys:
            always: bool
            policy: id
            cost: int
            type:
              type: str
              valid_values:
              - e1
              - e2
        digest:
          type: dict
        import: _r_import
        passive: bool
        password: str
        priority:
          type: int
          min_value: 0
          max_value: 255
        process:
          type: int
          min_value: 1
        reference_bandwidth:
          type: int
          min_value: 1
        router_id:
          type: ipv4
          use: id
        timers:
          hello:
            type: int
            min_value: 1
            max_value: 8192
          dead:
            type: int
            min_value: 3
            max_value: 8192
      node_copy:
      - area
      - passive
      - digest
      - password
      - priority
      - timers
      vrf_aware:
      - area
      vrf_copy:
      - area
      - router_id
      - reference_bandwidth
      vrf:
        active: bool
        area:
          type: ipv4
          use: id
        import: _r_import
        default:
          _alt_types:
          - bool
          type: dict
          _keys:
            always: bool
            policy: id
            cost: int
            type:
              type: str
              valid_values:
              - e1
              - e2
        digest:
          type: dict
        passive: bool
        password: str
        router_id:
          type: ipv4
          use: id
        timers:
          hello:
            type: int
            min_value: 1
            max_value: 8192
          dead:
            type: int
            min_value: 3
            max_value: 8192
=======
            max_value: 600
            min_value: 0
            type: int
        passive: bool
        password: str
        process:
          min_value: 1
          type: int
        reference_bandwidth:
          min_value: 1
          type: int
        timers:
          dead:
            max_value: 8192
            min_value: 3
            type: int
          hello:
            max_value: 8192
            min_value: 1
            type: int
      interface:
        priority:
          max_value: 255
          min_value: 0
          type: int
      intf_optional:
      - timers
      - priority
      - password
      - digest
      intf_to_neighbor: false
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      link:
        area:
          type: ipv4
          use: id
        bfd: bool
        cost:
<<<<<<< HEAD
          type: int
          min_value: 1
          max_value: 65534
=======
          max_value: 65534
          min_value: 1
          type: int
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        digest:
          type: dict
        network_type:
          type: str
          valid_values:
          - point-to-point
          - point-to-multipoint
          - broadcast
          - non-broadcast
        passive: bool
        password: str
        timers:
<<<<<<< HEAD
          hello:
            type: int
            min_value: 1
            max_value: 8192
          dead:
            type: int
            min_value: 3
            max_value: 8192
      intf_to_neighbor: false
      intf_optional:
      - timers
      - priority
      - password
      - digest
      interface:
        priority:
          type: int
          min_value: 0
          max_value: 255
=======
          dead:
            max_value: 8192
            min_value: 3
            type: int
          hello:
            max_value: 8192
            min_value: 1
            type: int
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        area:
          type: ipv4
          use: id
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
          strict: bool
          strict_delay:
            max_value: 600
            min_value: 0
            type: int
        default:
          _alt_types:
          - bool
          _keys:
            always: bool
            cost: int
            policy: id
            type:
              type: str
              valid_values:
              - e1
              - e2
          type: dict
        digest:
          type: dict
        import: _r_import
        passive: bool
        password: str
        priority:
          max_value: 255
          min_value: 0
          type: int
        process:
          min_value: 1
          type: int
        reference_bandwidth:
          min_value: 1
          type: int
        router_id:
          type: ipv4
          use: id
        timers:
          dead:
            max_value: 8192
            min_value: 3
            type: int
          hello:
            max_value: 8192
            min_value: 1
            type: int
      node_copy:
      - area
      - passive
      - digest
      - password
      - priority
      - timers
      vrf:
        active: bool
        area:
          type: ipv4
          use: id
        default:
          _alt_types:
          - bool
          _keys:
            always: bool
            cost: int
            policy: id
            type:
              type: str
              valid_values:
              - e1
              - e2
          type: dict
        digest:
          type: dict
        import: _r_import
        passive: bool
        password: str
        router_id:
          type: ipv4
          use: id
        timers:
          dead:
            max_value: 8192
            min_value: 3
            type: int
          hello:
            max_value: 8192
            min_value: 1
            type: int
      vrf_aware:
      - area
      vrf_copy:
      - area
      - router_id
      - reference_bandwidth
    config_after:
    - vlan
    - dhcp
    - routing
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    features:
      default: Originate external default route
      digest: MD5 authentication
      import: Import routes from other routing protocols
      password: Cleartext authentication
      priority: Router priority
      strict_bfd: Supports strict BFD mode (RFC 9355)
      timers: Supports OSPF interface timers
      unnumbered: Can run OSPFv2 over unnumbered IPv4 interfaces
<<<<<<< HEAD
    warnings:
      inactive: true
=======
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      arubacx: true
      bird: true
      cat8000v: true
      csr: true
      cumulus: true
      cumulus_nvue: true
      dellos10: true
      eos: true
      fortios: true
      frr: true
      iol: true
      ioll2: true
      ios: true
      iosv: true
      iosvl2: true
      iosxr: true
      junos: true
      none: true
      nxos: true
      routeros: true
      routeros7: true
      srlinux: true
      sros: true
      unknown: true
      vjunos-router: true
      vjunos-switch: true
      vmx: true
      vptx: true
      vsrx: true
      vyos: true
<<<<<<< HEAD
  ripv2:
    version: 2
    transform_after:
    - vlan
    - vrf
=======
    transform_after:
    - vlan
    - vrf
    warnings:
      inactive: true
  outputs:
    d2:
      as_clusters: true
      attributes:
        link:
          color: str
          linkorder:
            max_value: 200
            min_value: 1
            type: int
          width:
            max_value: 32
            min_value: 1
            type: int
        node:
          color: str
          width:
            max_value: 32
            min_value: 1
            type: int
      ebgp:
        source-arrowhead:
          shape: arrow
        style:
          stroke: '#b21a1a'
          stroke-width: 4
        target-arrowhead:
          shape: arrow
      ibgp:
        source-arrowhead:
          shape: arrow
        style:
          stroke: '#613913'
          stroke-width: 4
        target-arrowhead:
          shape: arrow
      interface_labels: false
      lan:
        shape: rectangle
        style:
          border-radius: 8
          font-size: 20
      node_address_label: true
      router:
        shape: oval
        style:
          font-size: 20
      rr_sessions: true
      styles:
        color: stroke
        width: stroke-width
      switch:
        shape: hexagon
        style:
          font-size: 20
    graph:
      as_clusters: true
      colors:
        as: '#e8e8e8'
        ebgp: '#b21a1a'
        ibgp: '#613913'
        node: '#ff9f01'
        stub: '#d1bfab'
      interface_labels: false
      margins:
        as: 16
      node_address_label: true
    provider: {}
    yaml=netlab:
      snapshot:
        yml: {}
  paths:
    collect:
      dirs:
      - /home/pipi/net101/tools/netsim/ansible/tasks/fetch-config
    custom:
      dirs:
      - /home/pipi/net101/tools/tests/integration/ospf/ospfv3
      - /work/netlab_cicd
      - /home/pipi/.netlab
      - /home/pipi/net101/tools/netsim/extra
      files:
      - '{{ custom_config + ''/'' + inventory_hostname + ''.'' + netlab_device_type
        + ''-'' + node_provider + ''.j2'' }}'
      - '{{ custom_config + ''/'' + inventory_hostname + ''.'' + netlab_device_type
        + ''.j2'' }}'
      - '{{ custom_config + ''/'' + inventory_hostname + ''.j2'' }}'
      - '{{ custom_config + ''/'' + inventory_hostname + ''.cfg'' }}'
      - '{{ custom_config + ''/'' + netlab_device_type + ''-'' + node_provider + ''.j2''
        }}'
      - '{{ custom_config + ''/'' + netlab_device_type + ''.j2'' }}'
      - '{{ custom_config + ''/'' + ansible_network_os + ''-'' + node_provider + ''.j2''
        }}'
      - '{{ custom_config + ''/'' + ansible_network_os + ''.j2'' }}'
      - '{{ custom_config + ''.'' + inventory_hostname + ''.'' + netlab_device_type
        + ''.j2'' }}'
      - '{{ custom_config + ''.'' + inventory_hostname + ''.'' + ansible_network_os
        + ''.j2'' }}'
      - '{{ custom_config + ''.'' + inventory_hostname + ''.j2'' }}'
      - '{{ custom_config + ''.'' + netlab_device_type + ''.j2'' }}'
      - '{{ custom_config + ''.'' + ansible_network_os + ''.j2'' }}'
      - '{{ custom_config + ''.j2'' }}'
      tasks:
      - '{{ custom_config }}/deploy-{{ inventory_hostname }}.yml'
      - '{{ custom_config }}/deploy.{{ netlab_device_type }}-{{ node_provider }}.yml'
      - '{{ custom_config }}/deploy.{{ netlab_device_type }}.yml'
      - '{{ custom_config }}/deploy.{{ ansible_network_os }}-{{ node_provider }}.yml'
      - '{{ custom_config }}/deploy.{{ ansible_network_os }}.yml'
      - '{{ custom_config }}/deploy.yml'
    deploy:
      dirs:
      - /home/pipi/net101/tools/netsim/ansible/tasks
      files:
      - '{{ netlab_device_type }}/{{ config_module }}-{{ provider|default(netlab_provider)
        }}.yml'
      - '{{ netlab_device_type }}/{{ config_module }}.yml'
      - deploy-config/{{ netlab_device_type }}-{{ provider|default(netlab_provider)
        }}.yml
      - deploy-config/{{ netlab_device_type }}.yml
      - '{{ ansible_network_os }}/{{ config_module }}-{{ provider|default(netlab_provider)
        }}.yml'
      - '{{ ansible_network_os }}/{{ config_module }}.yml'
      - deploy-config/{{ ansible_network_os }}-{{ provider|default(netlab_provider)
        }}.yml
      - deploy-config/{{ ansible_network_os }}.yml
      tasks_generic:
      - deploy-config/{{ netlab_device_type }}-{{ node_provider }}.yml
      - deploy-config/{{ netlab_device_type }}.yml
      - deploy-config/{{ ansible_network_os }}-{{ node_provider }}.yml
      - deploy-config/{{ ansible_network_os }}.yml
    plugin:
    - /work/netlab_cicd
    - /home/pipi/net101/tools/tests/integration/ospf/ospfv3
    - /home/pipi/.netlab
    - /home/pipi/net101/tools/netsim/extra
    ready:
      dirs:
      - /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check
      files:
      - '{{netlab_device_type}}-{{provider|default(netlab_provider)}}.yml'
      - '{{netlab_device_type}}.yml'
      - '{{ansible_network_os}}-{{provider|default(netlab_provider)}}.yml'
      - '{{ansible_network_os}}.yml'
    t_files:
      files:
      - '{{config_module}}/{{netlab_device_type}}-{{provider|default(netlab_provider)}}.j2'
      - '{{config_module}}/{{netlab_device_type}}.j2'
      - '{{config_module}}.{{netlab_device_type}}.j2'
      - '{{config_module}}/{{ansible_network_os}}-{{provider|default(netlab_provider)}}.j2'
      - '{{config_module}}/{{ansible_network_os}}.j2'
      - '{{config_module}}.{{ansible_network_os}}.j2'
      - '{{netlab_device_type}}/{{config_module}}.j2'
    templates:
      dirs:
      - /home/pipi/net101/tools/netsim/daemons
      - /home/pipi/net101/tools/netsim/ansible/templates
    validate:
    - /home/pipi/net101/tools/netsim/validate
  plugin:
  - multilab
  ports:
    http: 80
    https: 443
    netconf: 830
    ssh: 22
  prefix:
    any:
      ipv4: 0.0.0.0/0
      ipv6: ::/0
  provider: clab
  providers:
    clab:
      act_probe: docker ps
      act_title: Running containers
      attributes:
        interface:
          name: str
        link:
          provider: dict
          uplink: str
        node:
          _keys:
            binds: null
            cmd: str
            config_templates: null
            dns: null
            env: null
            image: str
            kind: str
            license: str
            ports: list
            restart-policy: str
            runtime: str
            srl-agents: null
            startup-config: str
            startup-delay: int
            type: str
          type: dict
      bridge_type: bridge
      cleanup:
      - clab.yml
      - clab_files
      config: clab.yml
      description: containerlab with Docker
      kmods:
        lag:
        - bonding
        mpls:
        - mpls-router
        - mpls-iptunnel
        sr:
        - mpls-router
        - mpls-iptunnel
        vrf:
        - vrf
        vxlan:
        - vxlan
        - udp_tunnel
        - ip6_udp_tunnel
      lab_prefix: clab
      node_config_attributes:
      - type
      - cmd
      - dns
      - env
      - license
      - ports
      - startup-delay
      - restart-policy
      probe:
      - cmd: containerlab version
        err: Containerlab is not installed
      - cmd:
        - bash
        - -c
        - '[[ `containerlab version|awk ''/version/ {print $2}''` > ''0.62.1'' ]]
          && echo OK'
        err: Containerlab version is too old, please upgrade to 0.62.2 or later with
          'sudo containerlab version upgrade'
      runtime: docker
      start: sudo -E containerlab deploy --reconfigure -t clab.yml
      stop: sudo -E containerlab destroy --cleanup -t clab.yml
      template: clab.j2
    external:
      cleanup:
      - external.txt
      config: external.txt
      description: External devices
      probe: []
      start: []
      stop: []
      template: external.j2
    libvirt:
      act_probe: virsh list
      act_title: KVM/libvirt domains (virtual machines)
      attributes:
        global:
          providers: null
        link:
          permanent: bool
          provider: dict
          public:
            true_value: bridge
            type: str
            valid_values:
            - bridge
            - vepa
            - passthrough
            - private
          uplink: str
        node:
          image: str
          nic_adapter_count: int
          nic_model_type: str
          uuid: str
      clab:
        filename: clab-augment.yml
        recreate_config: true
        start: sudo -E containerlab deploy --reconfigure -t clab-augment.yml
        stop: sudo -E containerlab destroy --cleanup -t clab-augment.yml
      cleanup:
      - Vagrantfile
      - .vagrant
      config: Vagrantfile
      description: Vagrant with libvirt/KVM
      probe:
      - cmd: stat /usr/sbin/kvm-ok
        err: KVM is not installed or does not include kvm-ok utility
      - cmd: /usr/sbin/kvm-ok
        err: KVM is not enabled or not working properly
      - cmd: which virsh
        err: libvirt is not installed
      - cmd: which vagrant
        err: vagrant is not installed
      - cmd:
        - bash
        - -c
        - vagrant plugin list|grep vagrant-libvirt
        err: vagrant-libvirt plugin is not installed
      - cmd: virsh net-list
        err: You don't have access to virsh networking, your user should be in libvirt
          group
      start: vagrant up --provider libvirt
      stop: vagrant destroy -f
      tunnel_id: '17'
      vifprefix: vgif_17
    virtualbox:
      cleanup:
      - Vagrantfile
      - .vagrant
      config: Vagrantfile
      description: Vagrant with Virtualbox
      forwarded:
        http: 8000
        netconf: 3000
        ssh: 2000
      inventory:
        ansible_host: 127.0.0.1
      inventory_port_map:
        ssh: ansible_port
      probe:
      - VBoxManage -h
      - vagrant plugin list
      start: vagrant up --provider virtualbox
      stop: vagrant destroy -f
  ripv2:
    attributes:
      global:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        timers:
          garbage:
            max_value: 600
            min_value: 5
            type: int
          timeout:
            max_value: 3600
            min_value: 5
            type: int
          update:
            max_value: 60
            min_value: 5
            type: int
        version:
          max_value: 2
          min_value: 2
          type: int
      link:
        passive: bool
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        import: _r_import
        timers:
          garbage:
            max_value: 600
            min_value: 5
            type: int
          timeout:
            max_value: 3600
            min_value: 5
            type: int
          update:
            max_value: 60
            min_value: 5
            type: int
        version:
          max_value: 2
          min_value: 2
          type: int
      vrf:
        active: bool
        timers:
          garbage:
            max_value: 600
            min_value: 5
            type: int
          timeout:
            max_value: 3600
            min_value: 5
            type: int
          update:
            max_value: 60
            min_value: 5
            type: int
      vrf_copy:
      - timers
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    config_after:
    - vlan
    - dhcp
    - routing
<<<<<<< HEAD
    attributes:
      global:
        version:
          type: int
          min_value: 2
          max_value: 2
        timers:
          update:
            type: int
            min_value: 5
            max_value: 60
          timeout:
            type: int
            min_value: 5
            max_value: 3600
          garbage:
            type: int
            min_value: 5
            max_value: 600
        af:
          _list_to_dict: true
          _alt_types:
          - NoneType
          ipv4: bool
          ipv6: bool
        bfd:
          ipv4: bool
          ipv6: bool
          _alt_types:
          - bool
      node:
        af:
          _list_to_dict: true
          _alt_types:
          - NoneType
          ipv4: bool
          ipv6: bool
        version:
          type: int
          min_value: 2
          max_value: 2
        import: _r_import
        timers:
          update:
            type: int
            min_value: 5
            max_value: 60
          timeout:
            type: int
            min_value: 5
            max_value: 3600
          garbage:
            type: int
            min_value: 5
            max_value: 600
      vrf:
        active: bool
        timers:
          update:
            type: int
            min_value: 5
            max_value: 60
          timeout:
            type: int
            min_value: 5
            max_value: 3600
          garbage:
            type: int
            min_value: 5
            max_value: 600
      vrf_copy:
      - timers
      link:
        passive: bool
    warnings:
      inactive: true
    features:
      ipv4: RIPv2
      ipv6: RIPng
      passive: Passive interfaces
      import: Route redistribution
=======
    features:
      import: Route redistribution
      ipv4: RIPv2
      ipv6: RIPng
      passive: Passive interfaces
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      cat8000v: true
      csr: true
      cumulus: true
      eos: true
      frr: true
      iol: true
      ioll2: true
      ios: true
      iosv: true
      iosvl2: true
      none: true
      sros: true
      vyos: true
<<<<<<< HEAD
  prefix:
    any:
      ipv4: 0.0.0.0/0
      ipv6: ::/0
  routing:
    no_propagate:
      policy:
      prefix:
      aspath:
      community:
      static:
    transform_after:
    - vlan
    config_after:
    - vlan
    hooks:
    - normalize
    attributes:
      global:
        policy:
          type: dict
          _keytype: id
          _subtype:
            type: list
            make_list: true
            _subtype: rp_entry
        prefix:
          type: dict
          _keytype: id
          _subtype:
            type: list
            make_list: true
            _subtype: pfx_entry
        aspath:
          type: dict
          _keytype: id
          _subtype:
            type: list
            make_list: true
            _subtype: aspath_entry
        community:
          type: dict
          _keytype: id
          _subtype:
            type: list
            make_list: true
            _subtype: community_entry
        static:
          type: dict
          _keytype: id
          _subtype:
            type: list
            make_list: true
            _subtype: static_entry
      node:
        policy:
          type: dict
          _keytype: id
          _subtype:
            type: list
            make_list: true
            _subtype: rp_entry
            _alt_types:
            - NoneType
        prefix:
          type: dict
          _keytype: id
          _subtype:
            type: list
            make_list: true
            _subtype: pfx_entry
            _alt_types:
            - NoneType
        aspath:
          type: dict
          _keytype: id
          _subtype:
            type: list
            make_list: true
            _subtype: aspath_entry
            _alt_types:
            - NoneType
        community:
          type: dict
          _keytype: id
          _subtype:
            type: list
            make_list: true
            _subtype: community_entry
            _alt_types:
            - NoneType
        static:
          type: list
          _subtype: static_entry
      route_map:
=======
    transform_after:
    - vlan
    - vrf
    version: 2
    warnings:
      inactive: true
  routing:
    attributes:
      global:
        aspath:
          _keytype: id
          _subtype:
            _subtype: aspath_entry
            make_list: true
            type: list
          type: dict
        community:
          _keytype: id
          _subtype:
            _subtype: community_entry
            make_list: true
            type: list
          type: dict
        policy:
          _keytype: id
          _subtype:
            _subtype: rp_entry
            make_list: true
            type: list
          type: dict
        prefix:
          _keytype: id
          _subtype:
            _subtype: pfx_entry
            make_list: true
            type: list
          type: dict
        static:
          _keytype: id
          _subtype:
            _subtype: static_entry
            make_list: true
            type: list
          type: dict
      node:
        aspath:
          _keytype: id
          _subtype:
            _alt_types:
            - NoneType
            _subtype: aspath_entry
            make_list: true
            type: list
          type: dict
        community:
          _keytype: id
          _subtype:
            _alt_types:
            - NoneType
            _subtype: community_entry
            make_list: true
            type: list
          type: dict
        policy:
          _keytype: id
          _subtype:
            _alt_types:
            - NoneType
            _subtype: rp_entry
            make_list: true
            type: list
          type: dict
        prefix:
          _keytype: id
          _subtype:
            _alt_types:
            - NoneType
            _subtype: pfx_entry
            make_list: true
            type: list
          type: dict
        static:
          _subtype: static_entry
          type: list
      route_map:
        match:
        - prefix
        - nexthop
        - aspath
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        set:
        - locpref
        - med
        - weight
        - prepend
<<<<<<< HEAD
        match:
        - prefix
        - nexthop
        - aspath
    features:
      policy:
        set: Route map SET attributes
        match: Route map MATCH attributes
      static: Static routes
=======
    config_after:
    - vlan
    features:
      policy:
        match: Route map MATCH attributes
        set: Route map SET attributes
      static: Static routes
    hooks:
    - normalize
    no_propagate:
      aspath: null
      community: null
      policy: null
      prefix: null
      static: null
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      arubacx: true
      bird: true
      cat8000v: true
      csr: true
      cumulus: true
      dellos10: true
      dnsmasq: true
      eos: true
      frr: true
      iol: true
      ioll2: true
      ios: true
      iosv: true
      iosvl2: true
      junos: true
      linux: true
      none: true
      srlinux: true
      sros: true
      vjunos-router: true
      vjunos-switch: true
      vmx: true
      vptx: true
      vsrx: true
      vyos: true
<<<<<<< HEAD
  sr:
    requires:
    - isis
    transform_after:
    - vlan
    attributes:
      global:
        srgb_range_start:
          type: int
          min_value: 1
        srgb_range_size:
          type: int
          min_value: 1
        ipv6_sid_offset:
          type: int
          min_value: 1
      node:
        srgb_range_start:
          type: int
          min_value: 1
        srgb_range_size:
          type: int
          min_value: 1
        ipv6_sid_offset:
          type: int
          min_value: 1
=======
    transform_after:
    - vlan
  sources:
    extra:
    - ../../wait_times.yml
    list: []
    system: []
    user: []
  sr:
    attributes:
      global:
        ipv6_sid_offset:
          min_value: 1
          type: int
        srgb_range_size:
          min_value: 1
          type: int
        srgb_range_start:
          min_value: 1
          type: int
      node:
        ipv6_sid_offset:
          min_value: 1
          type: int
        srgb_range_size:
          min_value: 1
          type: int
        srgb_range_start:
          min_value: 1
          type: int
    requires:
    - isis
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      cat8000v: true
      csr: true
      eos: true
      frr: true
      iol: true
      ioll2: true
      junos: true
      none: true
      srlinux: true
      sros: true
      unknown: true
      vjunos-router: true
      vjunos-switch: true
      vmx: true
      vptx: true
      vsrx: true
<<<<<<< HEAD
  srv6:
    config_after:
    - vlan
    - isis
    - ospf
    - bgp
    transform_after:
    - vlan
    - bgp
    - vrf
    no_propagate:
    - locator_pool
    allocate_loopback: true
    locator_pool: 5F00::/16
    igp:
    - isis
    bgp:
      ipv4:
      - ibgp
      ipv6:
      - ibgp
=======
    transform_after:
    - vlan
  srv6:
    allocate_loopback: true
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    attributes:
      global:
        allocate_loopback: bool
        bgp:
          _alt_types:
          - bool
          - BoxList
          ipv4:
<<<<<<< HEAD
            type: list
            true_value:
            - ibgp
          ipv6:
            type: list
            true_value:
            - ibgp
=======
            true_value:
            - ibgp
            type: list
          ipv6:
            true_value:
            - ibgp
            type: list
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        igp:
          type: list
          valid_values:
          - isis
          - ospf
<<<<<<< HEAD
=======
        locator_pool:
          type: ipv6
          use: subnet_prefix
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        vpn:
          _alt_types:
          - bool
          - BoxList
          ipv4:
<<<<<<< HEAD
            type: list
            true_value:
            - ibgp
          ipv6:
            type: list
            true_value:
            - ibgp
        locator_pool:
          type: ipv6
          use: subnet_prefix
=======
            true_value:
            - ibgp
            type: list
          ipv6:
            true_value:
            - ibgp
            type: list
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      node:
        allocate_loopback: bool
        bgp:
          _alt_types:
          - bool
          - BoxList
          ipv4:
<<<<<<< HEAD
            type: list
            true_value:
            - ibgp
          ipv6:
            type: list
            true_value:
            - ibgp
=======
            true_value:
            - ibgp
            type: list
          ipv6:
            true_value:
            - ibgp
            type: list
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        igp:
          type: list
          valid_values:
          - isis
          - ospf
<<<<<<< HEAD
=======
        locator:
          type: ipv6
          use: subnet_prefix
        transit_only: bool
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        vpn:
          _alt_types:
          - bool
          - BoxList
          ipv4:
<<<<<<< HEAD
            type: list
            true_value:
            - ibgp
          ipv6:
            type: list
            true_value:
            - ibgp
        locator:
          type: ipv6
          use: subnet_prefix
        transit_only: bool
    features:
      bgp: Supports BGP v4/v6 over SRv6
      vpn: Supports BGP L3VPN v4/v6 over SRv6
      isis: Supports SRv6 with IS-IS
      ospf: Supports SRv6 with OSPFv3
=======
            true_value:
            - ibgp
            type: list
          ipv6:
            true_value:
            - ibgp
            type: list
    bgp:
      ipv4:
      - ibgp
      ipv6:
      - ibgp
    config_after:
    - vlan
    - isis
    - ospf
    - bgp
    features:
      bgp: Supports BGP v4/v6 over SRv6
      isis: Supports SRv6 with IS-IS
      ospf: Supports SRv6 with OSPFv3
      vpn: Supports BGP L3VPN v4/v6 over SRv6
    igp:
    - isis
    locator_pool: 5F00::/16
    no_propagate:
    - locator_pool
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      frr: true
      none: true
      sros: true
      unknown: true
<<<<<<< HEAD
  stp:
    requires:
    - vlan
    transform_after:
    - vlan
    config_after:
    - vlan
    no_propagate:
    - stub_port_type
    enable: true
    protocol: stp
    stub_port_type: none
    attributes:
      global:
        enable: bool
        stub_port_type:
          type: str
          valid_values:
          - normal
          - edge
          - network
          - auto
          - none
=======
    transform_after:
    - vlan
    - bgp
    - vrf
  stp:
    attributes:
      global:
        enable: bool
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        port_type:
          type: str
          valid_values:
          - normal
          - edge
          - network
          - auto
        protocol:
          type: str
          valid_values:
          - stp
          - rstp
          - mstp
          - pvrst
<<<<<<< HEAD
=======
        stub_port_type:
          type: str
          valid_values:
          - normal
          - edge
          - network
          - auto
          - none
      interface:
        enable: bool
        port_priority:
          max_value: 15
          min_value: 0
          type: int
        port_type:
          type: str
          valid_values:
          - normal
          - edge
          - network
          - auto
      intf_to_neighbor: false
      link:
        enable: bool
        port_type:
          type: str
          valid_values:
          - normal
          - edge
          - network
          - auto
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      node:
        enable: bool
        port_type:
          type: str
          valid_values:
          - normal
          - edge
          - network
          - auto
        priority:
<<<<<<< HEAD
          type: int
          min_value: 0
          max_value: 61440
=======
          max_value: 61440
          min_value: 0
          type: int
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        protocol:
          type: str
          valid_values:
          - stp
          - rstp
          - mstp
          - pvrst
<<<<<<< HEAD
      link:
        enable: bool
        port_type:
          type: str
          valid_values:
          - normal
          - edge
          - network
          - auto
      intf_to_neighbor: false
      interface:
        enable: bool
        port_priority:
          type: int
          min_value: 0
          max_value: 15
        port_type:
          type: str
          valid_values:
          - normal
          - edge
          - network
          - auto
    features:
      supported_protocols: Subset of supported STP variants
      enable_per_port: Whether the device supports port level granularity for 
        enable/disable
=======
    config_after:
    - vlan
    enable: true
    features:
      enable_per_port: Whether the device supports port level granularity for enable/disable
      supported_protocols: Subset of supported STP variants
    no_propagate:
    - stub_port_type
    protocol: stp
    requires:
    - vlan
    stub_port_type: none
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      arubacx: true
      cumulus: true
      cumulus_nvue: true
      dellos10: true
      eos: true
      frr: true
      none: true
<<<<<<< HEAD
  vlan:
    config_after:
    - lag
    transform_after:
    - lag
    no_propagate:
    - start_vlan_id
    - mode
    start_vlan_id: 1000
    mode: irb
    attributes:
=======
    transform_after:
    - vlan
  tools:
    edgeshark:
      docker:
        down:
        - docker rm -f edgeshark
        - docker rm -f gostwire
        - docker network inspect "ghost-in-da-edge" >/dev/null 2>&1 && docker network
          rm "ghost-in-da-edge"
        message: Open http://{sys.ipaddr}:5001 in your browser
        up:
        - docker network inspect "ghost-in-da-edge" >/dev/null 2>&1 || docker network
          create "ghost-in-da-edge"
        - docker run -d --name gostwire --restart "unless-stopped" --pull "always"
          --read-only --user 65534 --cap-drop ALL --cap-add SYS_ADMIN --cap-add SYS_CHROOT
          --cap-add SYS_PTRACE --cap-add DAC_READ_SEARCH --cap-add DAC_OVERRIDE --cap-add
          NET_RAW --cap-add NET_ADMIN --security-opt "apparmor:unconfined" --pid "host"
          --network "ghost-in-da-edge" --label "com.docker.compose.project=edgeshark"
          --entrypoint "/gostwire" ghcr.io/siemens/ghostwire "--http=[::]:5000" "--initialcgroup"
          "--brand=Edgeshark"
        - docker run -d --name edgeshark --publish "5001:5001" --restart "unless-stopped"
          --pull "always" --read-only --user 65534 --cap-drop ALL --cap-add SYS_ADMIN
          --cap-add SYS_CHROOT --cap-add SYS_PTRACE --cap-add NET_RAW --cap-add NET_ADMIN
          --security-opt "apparmor:unconfined" --pid "host" --network "ghost-in-da-edge"
          --label "com.docker.compose.project=edgeshark" --entrypoint "/packetflix"
          ghcr.io/siemens/packetflix "--port=5001" "--discovery-service=gostwire.ghost-in-da-edge"
          "--gw-port=5000" "--proxy-discovery"
      runtime: docker
    graphite:
      attributes:
        node:
          icon: str
      config:
      - dest: graphite-default.json
        render: graphite
      docker:
        down: docker kill '{name}_graphite'
        message: Open http://{sys.ipaddr}:{ 8080 + defaults.multilab.id if defaults.multilab.id
          else 8080 }/graphite/ in your browser
        up: docker run -d --rm {sys.docker_net} --mount type=bind,source="$(pwd)/graphite/graphite-default.json",target=/htdocs/default/default.json,readonly
          -p { 8080 + defaults.multilab.id if defaults.multilab.id else 8080 }:80
          --name '{name}_graphite' netreplica/graphite:0.4.2
      runtime: docker
    nso:
      docker:
        cleanup: docker volume rm '{name}-nso-vol' docker volume rm '{name}-nso-log-vol'
        connect: docker exec -it '{name}-cisco-nso' bash
        down: docker kill {name}-cisco-nso
        message: Open http://{sys.ipaddr}:{ 8888 + defaults.multilab.id if defaults.multilab.id
          else 8888 } in your browser Use admin/admin for login Use 'netlab connect
          nso' to start nso CLI and type ncs_cli -C -u admin to acces cisco CLI
        up: docker run --rm -itd --name {name}-cisco-nso {sys.docker_net} -v {name}-nso-vol:/nso
          -v {name}-nso-log-vol:/log -p { 8888 + defaults.multilab.id if defaults.multilab.id
          else 8888 }:8080 -e ADMIN_USERNAME=admin -e ADMIN_PASSWORD=admin -e EXTRA_ARGS='--with-package-reload
          --ignore-initial-validation' cisco-nso-prod; docker exec -it {name}-cisco-nso
          sed -i.original -e "/<webui>/,/<\\/webui>/ {{ /<transport>/,/<\\/transport>/
          {{ /<tcp>/,/<\\/tcp>/ {{ /<enabled>/ s/false/true/ }} }} }}" /etc/ncs/ncs.conf;
          docker exec -it {name}-cisco-nso sed -i.backup -e "/<local-authentication>/{{n;s|<enabled>false</enabled>|<enabled>true</enabled>|}}"
          /etc/ncs/ncs.conf; docker exec -it {name}-cisco-nso sed -i.backup -e "/<webui>/a
          <package-upload> <enabled>true</enabled> </package-upload>" /etc/ncs/ncs.conf;
      runtime: docker
    suzieq:
      config:
      - dest: suzieq-inventory.yml
        template: suzieq.inventory.j2
      - dest: suzieq-cfg.yml
        template: suzieq-cfg.yml
      docker:
        cleanup: docker volume rm '{name}_suzieq'
        connect: docker exec -it '{name}_suzieq' /usr/local/bin/suzieq-cli
        down: docker kill '{name}_suzieq'
        message: Use 'netlab connect suzieq' to start SuzieQ CLI
        up: docker run --rm -itd --name '{name}_suzieq' {sys.docker_net} -v '{name}_suzieq':/parquet
          -v './suzieq':/suzieq netenglabs/suzieq-demo -c 'sq-poller -I /suzieq/suzieq-inventory.yml'
      runtime: docker
  vlan:
    attributes:
      copy_vlan_to_intf:
        gateway: null
        ipv4: null
        ipv6: null
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      global:
        mode:
          type: str
          valid_values:
          - bridge
          - irb
          - route
<<<<<<< HEAD
      node:
        mode:
      link:
        access: id
        native: id
=======
      keep_subif:
        ifindex: null
        ifname: null
        type: null
        virtual_interface: null
        vlan: null
      link:
        access: id
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
        mode:
          type: str
          valid_values:
          - route
<<<<<<< HEAD
        trunk:
      vlan_no_propagate:
        id:
        vni:
        mode:
        prefix:
        evpn:
        stp:
        lag:
      copy_vlan_to_intf:
        ipv4:
        ipv6:
        gateway:
      phy_ifattr:
        bridge:
        ifindex:
        parentindex:
        ifname:
        linkindex:
        type:
        vlan:
        mtu:
        bandwidth:
        _selfloop_ifindex:
        stp:
        virtual_interface:
        lag:
      keep_subif:
        vlan:
        ifindex:
        ifname:
        type:
        virtual_interface:
    features:
      model: Conceptual device configuration model
      mixed_trunk: Supports trunk interfaces with mixed routed/bridged VLANs
      native_routed: Supports native layer-3 interface on a trunk port
    warnings:
      mixed_fwd_check: true
=======
        native: id
        trunk: null
      node:
        mode: null
      phy_ifattr:
        _selfloop_ifindex: null
        bandwidth: null
        bridge: null
        ifindex: null
        ifname: null
        lag: null
        linkindex: null
        mtu: null
        parentindex: null
        stp: null
        type: null
        virtual_interface: null
        vlan: null
      vlan_no_propagate:
        evpn: null
        id: null
        lag: null
        mode: null
        prefix: null
        stp: null
        vni: null
    config_after:
    - lag
    features:
      mixed_trunk: Supports trunk interfaces with mixed routed/bridged VLANs
      model: Conceptual device configuration model
      native_routed: Supports native layer-3 interface on a trunk port
    mode: irb
    no_propagate:
    - start_vlan_id
    - mode
    start_vlan_id: 1000
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      arubacx: true
      bird:
        clab: true
      cat8000v: true
      csr: true
      cumulus: true
      cumulus_nvue: true
      dellos10: true
      dnsmasq:
        clab: true
      eos: true
      frr: true
      iol: true
      ioll2: true
      ios: true
      iosv: true
      iosvl2: true
      linux:
        clab: true
      none: true
      nxos: true
      routeros: true
      routeros7: true
      srlinux: true
      sros: true
      unknown: true
      vjunos-router: true
      vjunos-switch: true
      vmx: true
      vptx: true
      vsrx: true
      vyos: true
<<<<<<< HEAD
  vrf:
    config_after:
    - vlan
    - ospf
    - isis
    - bgp
    - mpls
    transform_after:
    - vlan
    - bgp
=======
    transform_after:
    - lag
    warnings:
      mixed_fwd_check: true
  vrf:
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    as: 65000
    attributes:
      global:
        as: asn
        loopback: bool
<<<<<<< HEAD
      node:
        as: asn
        loopback: bool
      link: id
      interface: id
=======
      interface: id
      link: id
      node:
        as: asn
        loopback: bool
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      reserved:
      - default
      - system
      - global
      - base
      - mgmt
      - management
      - mgmt_junos
<<<<<<< HEAD
    warnings:
      inactive: true
    features:
      ospfv2: VRF-aware OSPFv2
      ospfv3: VRF-aware OSPFv3
      ripv2: VRF-aware RIPv2
      ripng: VRF-aware RIPng
      isis: VRF-aware IS-IS
      bgp: BGP neighbors in VRF BGP instances
=======
    config_after:
    - vlan
    - ospf
    - isis
    - bgp
    - mpls
    features:
      bgp: BGP neighbors in VRF BGP instances
      isis: VRF-aware IS-IS
      ospfv2: VRF-aware OSPFv2
      ospfv3: VRF-aware OSPFv3
      ripng: VRF-aware RIPng
      ripv2: VRF-aware RIPv2
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      arubacx: true
      cat8000v: true
      csr: true
      cumulus: true
      cumulus_nvue: true
      dellos10: true
      eos: true
      frr: true
      iol: true
      ioll2: true
      ios: true
      iosv: true
      iosvl2: true
      junos: true
      none: true
      nxos: true
      routeros: true
      routeros7: true
      srlinux: true
      sros: true
      unknown: true
      vjunos-router: true
      vjunos-switch: true
      vmx: true
      vptx: true
      vsrx: true
      vyos: true
<<<<<<< HEAD
  vxlan:
    requires:
    - vlan
    config_after:
    - vrf
    - bgp
    transform_after:
    - vlan
    - vrf
    domain: global
    flooding: static
    start_vni: 100000
=======
    transform_after:
    - vlan
    - bgp
    warnings:
      inactive: true
  vxlan:
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    attributes:
      global:
        domain: id
        flooding:
          type: str
          valid_values:
          - static
          - evpn
<<<<<<< HEAD
        vlans: list
        use_v6_vtep: bool
=======
        use_v6_vtep: bool
        vlans: list
      link:
        vtep: bool
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
      node:
        domain: id
        flooding:
          type: str
          valid_values:
          - static
          - evpn
        vlans: list
<<<<<<< HEAD
      link:
        vtep: bool
    no_propagate:
    - use_v6_vtep
    - start_vni
    use_v6_vtep: false
    features:
      vtep6: VXLAN over IPv6
=======
    config_after:
    - vrf
    - bgp
    domain: global
    features:
      vtep6: VXLAN over IPv6
    flooding: static
    no_propagate:
    - use_v6_vtep
    - start_vni
    requires:
    - vlan
    start_vni: 100000
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
    supported_on:
      arubacx: true
      csr: true
      cumulus: true
      cumulus_nvue: true
      dellos10: true
      eos: true
      frr: true
      none: true
      nxos: true
      srlinux: true
      sros: true
      unknown: true
      vjunos-switch: true
      vyos: true
<<<<<<< HEAD
  sources:
    extra:
    - ../../wait_times.yml
    list: []
    user: []
    system: []
  workdir: /work/netlab_cicd
  device: srlinux
  groups:
    all:
      vars:
        netlab_show_config: true
      members: []
      _default_group: true
  plugin:
  - multilab
  _globals:
    _modlist:
    - bfd
    - bgp
    - dhcp
    - eigrp
    - evpn
    - gateway
    - isis
    - lag
    - mpls
    - ospf
    - ripv2
    - routing
    - sr
    - srv6
    - stp
    - vlan
    - vrf
    - vxlan
  module:
  - ospf
  name: ml_17
module:
- ospf
groups:
=======
    transform_after:
    - vlan
    - vrf
    use_v6_vtep: false
  warnings:
    duplicate_address: true
  workdir: /work/netlab_cicd
groups:
  all:
    _default_group: true
    members: []
    vars:
      netlab_show_config: true
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
  probes:
    device: frr
    members:
    - x1
    - x2
    - x3
    node_data:
      provider: clab
<<<<<<< HEAD
  all:
    vars:
      netlab_show_config: true
    members: []
    _default_group: true
nodes:
  dut:
    ospf:
      area: 0.0.0.2
      router_id: 10.0.0.1
      af:
        ipv6: true
    id: 1
    name: dut
    interfaces:
    - ipv6: 2001:db8:3::1/64
      ospf:
        area: 0.0.0.0
        passive: false
        network_type: point-to-point
      mtu: 1500
      linkindex: 1
      type: p2p
      name: dut -> x1
      ifindex: 1
      ifname: ethernet-1/1
      clab:
        name: e1-1
      neighbors:
      - ipv6: 2001:db8:3::2/64
        ifname: eth1
        node: x1
    - ipv6: 2001:db8:3:1::1/64
      ospf:
        area: 0.0.0.2
        passive: false
        network_type: point-to-point
      mtu: 1500
      linkindex: 2
      type: p2p
      name: dut -> x2
      ifindex: 2
      ifname: ethernet-1/2
      clab:
        name: e1-2
      neighbors:
      - ipv6: 2001:db8:3:1::2/64
        ifname: eth1
        node: x2
    - ipv6: 2001:db8:3:2::1/64
      ospf:
        area: 0.0.0.3
        passive: false
        network_type: point-to-point
      mtu: 1500
      linkindex: 3
      type: p2p
      name: dut -> x3
      ifindex: 3
      ifname: ethernet-1/3
      clab:
        name: e1-3
      neighbors:
      - ipv6: 2001:db8:3:2::2/64
        ifname: eth1
        node: x3
    - ipv6: 2001:db8:bad:cafe::1/64
      ospf:
        area: 0.0.0.2
        passive: true
      mtu: 1500
      linkindex: 4
      role: stub
      type: stub
      bridge: ml_17_4
      name: dut -> stub
      ifindex: 4
      ifname: ethernet-1/4
      clab:
        name: e1-4
      neighbors: []
    device: srlinux
    clab:
      kind: srl
      type: ixrd2
    box: ghcr.io/nokia/srlinux:25.3.2
    module:
    - ospf
    provider: clab
    af:
      ipv6: true
    mgmt:
      ifname: mgmt0
      mac: 08:4f:a9:01:00:00
      ipv4: 192.168.17.101
    hostname: clab-ml_17-dut
    loopback:
      type: loopback
      neighbors: []
      virtual_interface: true
      ifindex: 0
      ifname: lo0.0
      ipv6: 2001:db8:1:1::1/64
      ospf:
        area: 0.0.0.2
        passive: false
    router_id: 10.0.0.1
    _srl_version: 25.3
  x1:
    ospf:
      area: 0.0.0.0
      router_id: 10.0.0.2
      af:
        ipv6: true
    name: x1
    interfaces:
    - ipv6: 2001:db8:3::2/64
      ospf:
        area: 0.0.0.0
        passive: false
        network_type: point-to-point
      mtu: 1500
      linkindex: 1
      type: p2p
      name: x1 -> dut
      ifindex: 1
      ifname: eth1
      neighbors:
      - ipv6: 2001:db8:3::1/64
        ifname: ethernet-1/1
        node: dut
    device: frr
    clab:
      kind: linux
      config_templates:
      - daemons:/etc/frr/daemons
      - hosts:/etc/hosts
      binds:
      - clab_files/x1/daemons:/etc/frr/daemons
      - clab_files/x1/hosts:/etc/hosts
    box: quay.io/frrouting/frr:10.3.1
    module:
    - ospf
    id: 2
    role: router
    mtu: 1500
    af:
      ipv6: true
    mgmt:
      ifname: eth0
      mac: 08:4f:a9:02:00:00
      ipv4: 192.168.17.102
    hostname: clab-ml_17-x1
    loopback:
      type: loopback
      neighbors: []
      virtual_interface: true
      ifindex: 0
      ifname: lo
      ipv6: 2001:db8:1:2::1/64
      ospf:
        area: 0.0.0.0
        passive: false
    router_id: 10.0.0.2
  x2:
    ospf:
      area: 0.0.0.2
      router_id: 10.0.0.3
      af:
        ipv6: true
    name: x2
    interfaces:
    - ipv6: 2001:db8:3:1::2/64
      ospf:
        area: 0.0.0.2
        passive: false
        network_type: point-to-point
      mtu: 1500
      linkindex: 2
      type: p2p
      name: x2 -> dut
      ifindex: 1
      ifname: eth1
      neighbors:
      - ipv6: 2001:db8:3:1::1/64
        ifname: ethernet-1/2
        node: dut
    device: frr
    clab:
      kind: linux
      config_templates:
      - daemons:/etc/frr/daemons
      - hosts:/etc/hosts
      binds:
      - clab_files/x2/daemons:/etc/frr/daemons
      - clab_files/x2/hosts:/etc/hosts
    box: quay.io/frrouting/frr:10.3.1
    module:
    - ospf
    id: 3
    role: router
    mtu: 1500
    af:
      ipv6: true
    mgmt:
      ifname: eth0
      mac: 08:4f:a9:03:00:00
      ipv4: 192.168.17.103
    hostname: clab-ml_17-x2
    loopback:
      type: loopback
      neighbors: []
      virtual_interface: true
      ifindex: 0
      ifname: lo
      ipv6: 2001:db8:1:3::1/64
      ospf:
        area: 0.0.0.2
        passive: false
    router_id: 10.0.0.3
  x3:
    ospf:
      area: 0.0.0.3
      router_id: 10.0.0.4
      af:
        ipv6: true
    name: x3
    interfaces:
    - ipv6: 2001:db8:3:2::2/64
      ospf:
        area: 0.0.0.3
        passive: false
        network_type: point-to-point
      mtu: 1500
      linkindex: 3
      type: p2p
      name: x3 -> dut
      ifindex: 1
      ifname: eth1
      neighbors:
      - ipv6: 2001:db8:3:2::1/64
        ifname: ethernet-1/3
        node: dut
    device: frr
    clab:
      kind: linux
      config_templates:
      - daemons:/etc/frr/daemons
      - hosts:/etc/hosts
      binds:
      - clab_files/x3/daemons:/etc/frr/daemons
      - clab_files/x3/hosts:/etc/hosts
    box: quay.io/frrouting/frr:10.3.1
    module:
    - ospf
    id: 4
    role: router
    mtu: 1500
    af:
      ipv6: true
    mgmt:
      ifname: eth0
      mac: 08:4f:a9:04:00:00
      ipv4: 192.168.17.104
    hostname: clab-ml_17-x3
    loopback:
      type: loopback
      neighbors: []
      virtual_interface: true
      ifindex: 0
      ifname: lo
      ipv6: 2001:db8:1:4::1/64
      ospf:
        area: 0.0.0.3
        passive: false
    router_id: 10.0.0.4
links:
- _linkname: links[1]
  ospf:
    area: 0.0.0.0
  mtu: 1500
  interfaces:
  - node: dut
    ipv6: 2001:db8:3::1/64
    ifindex: 1
    ifname: ethernet-1/1
  - node: x1
    ipv6: 2001:db8:3::2/64
    ifindex: 1
    ifname: eth1
  linkindex: 1
  node_count: 2
  type: p2p
  prefix:
    ipv6: 2001:db8:3::/64
- _linkname: links[2]
  ospf:
    area: 0.0.0.2
  mtu: 1500
  interfaces:
  - node: dut
    ipv6: 2001:db8:3:1::1/64
    ifindex: 2
    ifname: ethernet-1/2
  - node: x2
    ipv6: 2001:db8:3:1::2/64
    ifindex: 1
    ifname: eth1
  linkindex: 2
  node_count: 2
  type: p2p
  prefix:
    ipv6: 2001:db8:3:1::/64
- _linkname: links[3]
  ospf:
    area: 0.0.0.3
  mtu: 1500
  interfaces:
  - node: dut
    ipv6: 2001:db8:3:2::1/64
    ifindex: 3
    ifname: ethernet-1/3
  - node: x3
    ipv6: 2001:db8:3:2::2/64
    ifindex: 1
    ifname: eth1
  linkindex: 3
  node_count: 2
  type: p2p
  prefix:
    ipv6: 2001:db8:3:2::/64
- _linkname: links[4]
  prefix:
    ipv6: 2001:db8:bad:cafe::/64
  ospf:
    area: 0.0.0.2
  mtu: 1500
  interfaces:
  - node: dut
    ipv6: 2001:db8:bad:cafe::1/64
    ifindex: 4
    ifname: ethernet-1/4
  linkindex: 4
  node_count: 1
  role: stub
  type: stub
  bridge: ml_17_4
validate:
- description: Check OSPFv3 adjacencies
  wait_msg: Waiting for OSPFv3 adjacencies to come up
  wait: 30
=======
input:
- /home/pipi/net101/tools/tests/integration/ospf/ospfv3/02-areas.yml
- /home/pipi/net101/tools/tests/integration/wait_times.yml
- /home/pipi/net101/tools/tests/integration/ospf/ospfv3/topology-defaults.yml
- /home/pipi/.netlab.yml
- package:topology-defaults.yml
links:
- _linkname: links[1]
  interfaces:
  - ifindex: 1
    ifname: ethernet-1/1
    ipv6: 2001:db8:3::1/64
    node: dut
  - ifindex: 1
    ifname: eth1
    ipv6: 2001:db8:3::2/64
    node: x1
  linkindex: 1
  mtu: 1500
  node_count: 2
  ospf:
    area: 0.0.0.0
  prefix:
    ipv6: 2001:db8:3::/64
  type: p2p
- _linkname: links[2]
  interfaces:
  - ifindex: 2
    ifname: ethernet-1/2
    ipv6: 2001:db8:3:1::1/64
    node: dut
  - ifindex: 1
    ifname: eth1
    ipv6: 2001:db8:3:1::2/64
    node: x2
  linkindex: 2
  mtu: 1500
  node_count: 2
  ospf:
    area: 0.0.0.2
  prefix:
    ipv6: 2001:db8:3:1::/64
  type: p2p
- _linkname: links[3]
  interfaces:
  - ifindex: 3
    ifname: ethernet-1/3
    ipv6: 2001:db8:3:2::1/64
    node: dut
  - ifindex: 1
    ifname: eth1
    ipv6: 2001:db8:3:2::2/64
    node: x3
  linkindex: 3
  mtu: 1500
  node_count: 2
  ospf:
    area: 0.0.0.3
  prefix:
    ipv6: 2001:db8:3:2::/64
  type: p2p
- _linkname: links[4]
  bridge: ml_17_4
  interfaces:
  - ifindex: 4
    ifname: ethernet-1/4
    ipv6: 2001:db8:bad:cafe::1/64
    node: dut
  linkindex: 4
  mtu: 1500
  node_count: 1
  ospf:
    area: 0.0.0.2
  prefix:
    ipv6: 2001:db8:bad:cafe::/64
  role: stub
  type: stub
message: 'This lab tests the OSPFv3 areas. The device under test has three interfaces

  in three different areas and the loopback interface in one of those areas.

  '
module:
- ospf
name: ml_17
nodes:
  dut:
    _srl_version: 25.3
    af:
      ipv6: true
    box: ghcr.io/nokia/srlinux:25.3.2
    clab:
      kind: srl
      type: ixrd2
    device: srlinux
    hostname: clab-ml_17-dut
    id: 1
    interfaces:
    - clab:
        name: e1-1
      ifindex: 1
      ifname: ethernet-1/1
      ipv6: 2001:db8:3::1/64
      linkindex: 1
      mtu: 1500
      name: dut -> x1
      neighbors:
      - ifname: eth1
        ipv6: 2001:db8:3::2/64
        node: x1
      ospf:
        area: 0.0.0.0
        network_type: point-to-point
        passive: false
      type: p2p
    - clab:
        name: e1-2
      ifindex: 2
      ifname: ethernet-1/2
      ipv6: 2001:db8:3:1::1/64
      linkindex: 2
      mtu: 1500
      name: dut -> x2
      neighbors:
      - ifname: eth1
        ipv6: 2001:db8:3:1::2/64
        node: x2
      ospf:
        area: 0.0.0.2
        network_type: point-to-point
        passive: false
      type: p2p
    - clab:
        name: e1-3
      ifindex: 3
      ifname: ethernet-1/3
      ipv6: 2001:db8:3:2::1/64
      linkindex: 3
      mtu: 1500
      name: dut -> x3
      neighbors:
      - ifname: eth1
        ipv6: 2001:db8:3:2::2/64
        node: x3
      ospf:
        area: 0.0.0.3
        network_type: point-to-point
        passive: false
      type: p2p
    - bridge: ml_17_4
      clab:
        name: e1-4
      ifindex: 4
      ifname: ethernet-1/4
      ipv6: 2001:db8:bad:cafe::1/64
      linkindex: 4
      mtu: 1500
      name: dut -> stub
      neighbors: []
      ospf:
        area: 0.0.0.2
        passive: true
      role: stub
      type: stub
    loopback:
      ifindex: 0
      ifname: lo0.0
      ipv6: 2001:db8:1:1::1/64
      neighbors: []
      ospf:
        area: 0.0.0.2
        passive: false
      type: loopback
      virtual_interface: true
    mgmt:
      ifname: mgmt0
      ipv4: 192.168.17.101
      mac: 08:4f:a9:01:00:00
    module:
    - ospf
    name: dut
    ospf:
      af:
        ipv6: true
      area: 0.0.0.2
      router_id: 10.0.0.1
    provider: clab
    router_id: 10.0.0.1
  x1:
    af:
      ipv6: true
    box: quay.io/frrouting/frr:10.3.1
    clab:
      binds:
      - clab_files/x1/daemons:/etc/frr/daemons
      - clab_files/x1/hosts:/etc/hosts
      config_templates:
      - daemons:/etc/frr/daemons
      - hosts:/etc/hosts
      kind: linux
    device: frr
    hostname: clab-ml_17-x1
    id: 2
    interfaces:
    - ifindex: 1
      ifname: eth1
      ipv6: 2001:db8:3::2/64
      linkindex: 1
      mtu: 1500
      name: x1 -> dut
      neighbors:
      - ifname: ethernet-1/1
        ipv6: 2001:db8:3::1/64
        node: dut
      ospf:
        area: 0.0.0.0
        network_type: point-to-point
        passive: false
      type: p2p
    loopback:
      ifindex: 0
      ifname: lo
      ipv6: 2001:db8:1:2::1/64
      neighbors: []
      ospf:
        area: 0.0.0.0
        passive: false
      type: loopback
      virtual_interface: true
    mgmt:
      ifname: eth0
      ipv4: 192.168.17.102
      mac: 08:4f:a9:02:00:00
    module:
    - ospf
    mtu: 1500
    name: x1
    ospf:
      af:
        ipv6: true
      area: 0.0.0.0
      router_id: 10.0.0.2
    provider: clab
    role: router
    router_id: 10.0.0.2
  x2:
    af:
      ipv6: true
    box: quay.io/frrouting/frr:10.3.1
    clab:
      binds:
      - clab_files/x2/daemons:/etc/frr/daemons
      - clab_files/x2/hosts:/etc/hosts
      config_templates:
      - daemons:/etc/frr/daemons
      - hosts:/etc/hosts
      kind: linux
    device: frr
    hostname: clab-ml_17-x2
    id: 3
    interfaces:
    - ifindex: 1
      ifname: eth1
      ipv6: 2001:db8:3:1::2/64
      linkindex: 2
      mtu: 1500
      name: x2 -> dut
      neighbors:
      - ifname: ethernet-1/2
        ipv6: 2001:db8:3:1::1/64
        node: dut
      ospf:
        area: 0.0.0.2
        network_type: point-to-point
        passive: false
      type: p2p
    loopback:
      ifindex: 0
      ifname: lo
      ipv6: 2001:db8:1:3::1/64
      neighbors: []
      ospf:
        area: 0.0.0.2
        passive: false
      type: loopback
      virtual_interface: true
    mgmt:
      ifname: eth0
      ipv4: 192.168.17.103
      mac: 08:4f:a9:03:00:00
    module:
    - ospf
    mtu: 1500
    name: x2
    ospf:
      af:
        ipv6: true
      area: 0.0.0.2
      router_id: 10.0.0.3
    provider: clab
    role: router
    router_id: 10.0.0.3
  x3:
    af:
      ipv6: true
    box: quay.io/frrouting/frr:10.3.1
    clab:
      binds:
      - clab_files/x3/daemons:/etc/frr/daemons
      - clab_files/x3/hosts:/etc/hosts
      config_templates:
      - daemons:/etc/frr/daemons
      - hosts:/etc/hosts
      kind: linux
    device: frr
    hostname: clab-ml_17-x3
    id: 4
    interfaces:
    - ifindex: 1
      ifname: eth1
      ipv6: 2001:db8:3:2::2/64
      linkindex: 3
      mtu: 1500
      name: x3 -> dut
      neighbors:
      - ifname: ethernet-1/3
        ipv6: 2001:db8:3:2::1/64
        node: dut
      ospf:
        area: 0.0.0.3
        network_type: point-to-point
        passive: false
      type: p2p
    loopback:
      ifindex: 0
      ifname: lo
      ipv6: 2001:db8:1:4::1/64
      neighbors: []
      ospf:
        area: 0.0.0.3
        passive: false
      type: loopback
      virtual_interface: true
    mgmt:
      ifname: eth0
      ipv4: 192.168.17.104
      mac: 08:4f:a9:04:00:00
    module:
    - ospf
    mtu: 1500
    name: x3
    ospf:
      af:
        ipv6: true
      area: 0.0.0.3
      router_id: 10.0.0.4
    provider: clab
    role: router
    router_id: 10.0.0.4
ospf:
  area: 0.0.0.0
plugin:
- multilab
provider: clab
validate:
- description: Check OSPFv3 adjacencies
  name: adj
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
  nodes:
  - x1
  - x2
  - x3
  plugin: ospf6_neighbor(nodes.dut.ospf.router_id)
<<<<<<< HEAD
  name: adj
- description: Check for DUT stub prefix being an intra-area route in area 2
  wait: 10
  wait_msg: Waiting for DUT and SPF to do their magic
  nodes:
  - x2
  plugin: ospf6_prefix('2001:db8:bad:cafe::/64',rt='Intra-Area')
  name: stub_ar
- description: Check for DUT stub prefix being an inter-area route in areas 0 
    and 3
  wait: 10
  wait_msg: Waiting for DUT and SPF to do their magic
=======
  wait: 30
  wait_msg: Waiting for OSPFv3 adjacencies to come up
- description: Check for DUT stub prefix being an intra-area route in area 2
  name: stub_ar
  nodes:
  - x2
  plugin: ospf6_prefix('2001:db8:bad:cafe::/64',rt='Intra-Area')
  wait: 10
  wait_msg: Waiting for DUT and SPF to do their magic
- description: Check for DUT stub prefix being an inter-area route in areas 0 and
    3
  name: stub_ia
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
  nodes:
  - x1
  - x3
  plugin: ospf6_prefix('2001:db8:bad:cafe::/64',rt='Inter-Area')
<<<<<<< HEAD
  name: stub_ia
input:
- /home/pipi/net101/tools/tests/integration/ospf/ospfv3/02-areas.yml
- /home/pipi/net101/tools/tests/integration/wait_times.yml
- /home/pipi/net101/tools/tests/integration/ospf/ospfv3/topology-defaults.yml
- package:topology-defaults.yml
name: ml_17
plugin:
- multilab
addressing:
  lan:
    prefix: 24
    ipv6: 2001:db8:2::/48
  loopback:
    prefix: 32
    ipv6: 2001:db8:1::/48
  p2p:
    prefix: 30
    ipv6: 2001:db8:3::/48
  router_id:
    ipv4: 10.0.0.0/24
    prefix: 32
  mgmt:
    ipv4: 192.168.17.0/24
    start: 100
    mac: 08-4F-A9-00-00-00
    _network: nl_mgmt_17
    _bridge: nl_mgmt_17
    prefix: 24
  l2only: {}
  vrf_loopback:
    ipv4: 10.2.0.0/24
    prefix: 32
provider: clab
ospf:
  area: 0.0.0.0
=======
  wait: 10
  wait_msg: Waiting for DUT and SPF to do their magic
>>>>>>> 1f306ff64 (Initial Aruba/Dell/EOS/FRR/IOL/vJunos-switch tests for 25.06)
