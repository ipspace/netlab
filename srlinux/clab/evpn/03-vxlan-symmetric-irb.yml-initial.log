[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s2]

TASK [Find device readiness script] ********************************************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s2]

TASK [Wait for device to become ready] *****************************************
skipping: [s1]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/eos-clab.yml for s2

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [s2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s2]

TASK [Find configuration template for normalize] *******************************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [s1]
ok: [h1]
ok: [h3]
ok: [h2]
ok: [h4]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s2] => 
  msg: |-
    normalize configuration for s2
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0601
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0602
    !
    interface Ethernet3
     shutdown
     mac-address 52dc.cafe.0603

TASK [Deploy normalize configuration] ******************************************
skipping: [s1]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [eos_config: deploying normalize from /home/pipi/netlab_gh/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [s2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s2]

TASK [Find configuration template for initial] *********************************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
  
    updates:
  
    - path: /interface[name=system0]/subinterface[index=0]
      value:
       description: "No description"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.0.0.5/32"
  
  
    - path: /interface[name=ethernet-1/1]
      value:
     # min 1500; max 9412 for 7220, 9500 for 7250 platforms
       mtu: 1614
       subinterface:
     # min 1500; max 9412 for 7220, 9500 for 7250 platforms
        ip-mtu: 1600
        index: 0
        description: "s1 ~ s2"
  
    - path: /interface[name=ethernet-1/1]/subinterface[index=0]
      value:
       description: "s1 ~ s2"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.1.0.1/30"
          primary: [null]
  
  
  
    - path: /network-instance[name=default]
      value:
       type: default
       interface:
       - name: system0.0
  
    - path: /network-instance[name=default]
      value:
       type: default
       interface:
       - name: ethernet-1/1.0
  
  
  
    # TODO: vdata.rd, vdata.import/export, vdata.af
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.254 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.254 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.254 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.254 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.254 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.254 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.254 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.254 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.3/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.254 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.254 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.254 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.254 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.2.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.2.4/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.2.254 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.2.254 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.2.254 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.2.254 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    hostname s2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    vrf instance customer
     rd 65000:1
    !
    ip routing vrf customer
    !
    !
    ip host h1 172.16.0.1
    ip host h2 172.16.0.2
    ip host h3 172.16.1.3
    ip host h4 172.16.2.4
    ip host s1 10.0.0.5 10.1.0.1
    ip host s1-customer 172.16.0.5 172.16.1.5
    ip host s2-customer 172.16.0.6 172.16.2.6
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.6/32
    !
    interface Ethernet1
     no switchport
     mtu 1600
     description s2 -> s1
     ip address 10.1.0.2/30
    !
     mac-address 52dc.cafe.0601
     no shutdown
    !
    interface Ethernet2
     no switchport
     description [Access VLAN red] s2 -> h2
    !
     mac-address 52dc.cafe.0602
     no shutdown
    !
    interface Ethernet3
     no switchport
     description [Access VLAN green] s2 -> h4
    !
     mac-address 52dc.cafe.0603
     no shutdown
    !
    interface Vlan1000
     vrf customer
     description VLAN red (1000) -> [h1,s1,h2] [external]
     ip address 172.16.0.6/24
    !
    interface Vlan1002
     vrf customer
     description VLAN green (1002) -> [h4] [external]
     ip address 172.16.2.6/24
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/srlinux.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [s1]

TASK [Update SRL initial node configuration (template=/home/pipi/netlab_gh/netsim/ansible/templates/initial/srlinux.j2)] ***
changed: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [eos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/eos.j2] ***
changed: [s2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h4 -> localhost]
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h4 -> localhost]
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-66jh8gd_.sh] ***********************
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vrf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vxlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=gateway)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=evpn)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
  
    updates:
    - path: /interface[name=ethernet-1/2]
      value:
       subinterface:
       - index: 1000
         type: bridged
         description: "Access VLAN red s1 ~ h1"
  
  
    - path: /network-instance[name=vlan1000]
      value:
       type: mac-vrf
       description: "Access VLAN red s1 ~ h1"
       interface:
       - name: ethernet-1/2.1000
  
  
    - path: /interface[name=ethernet-1/3]
      value:
       subinterface:
       - index: 1001
         type: bridged
         description: "Access VLAN blue s1 ~ h3"
  
  
    - path: /network-instance[name=vlan1001]
      value:
       type: mac-vrf
       description: "Access VLAN blue s1 ~ h3"
       interface:
       - name: ethernet-1/3.1001
  
  
    - path: /interface[name=irb0]
      value:
       subinterface:
       - index: 1000
  
    - path: /interface[name=irb0]/subinterface[index=1000]
      value:
       description: "VLAN red (1000) ~ h1,h2,s2"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "172.16.0.5/24"
          primary: [null]
  
  
    - path: /network-instance[name=vlan1000]
      value:
       type: mac-vrf
       description: "VLAN red (1000) ~ h1,h2,s2"
       interface:
       - name: irb0.1000
  
    - path: /network-instance[name=customer]
      value:
       type: ip-vrf
       interface:
       - name: irb0.1000
  
    - path: /interface[name=irb0]
      value:
       subinterface:
       - index: 1001
  
    - path: /interface[name=irb0]/subinterface[index=1001]
      value:
       description: "VLAN blue (1001) ~ h3"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "172.16.1.5/24"
          primary: [null]
  
  
    - path: /network-instance[name=vlan1001]
      value:
       type: mac-vrf
       description: "VLAN blue (1001) ~ h3"
       interface:
       - name: irb0.1001
  
    - path: /network-instance[name=customer]
      value:
       type: ip-vrf
       interface:
       - name: irb0.1001
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    vlan 1002
     name green
    !
    vlan 1000
     name red
    !
  
    !
    interface Ethernet2
     switchport
     switchport access vlan 1000
    !
    interface Ethernet3
     switchport
     switchport access vlan 1002
    !
    interface Vlan1000
    !
    interface Vlan1002

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/srlinux.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [s1]

TASK [Update SRL vlan node configuration (template=/home/pipi/netlab_gh/netsim/ansible/templates/vlan/srlinux.j2)] ***
changed: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [eos_config: deploying vlan from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [s1]
ok: [s2]

TASK [Find configuration template for routing] *********************************
skipping: [s1]
skipping: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]

TASK [Deploy routing configuration] ********************************************
skipping: [s1]
skipping: [s2]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [s1]
ok: [s2]

TASK [Find configuration template for bgp] *************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    bgp configuration for s1
    =========================================
    updates:
  
    - path: /routing-policy/policy[name=accept_all]
      value:
        default-action:
          policy-result: accept
  
    - path: /routing-policy/community-set[name=ibgp-mark]
      value:
        member: [ "65536:0:65536" ]
  
    - path: /routing-policy/policy[name=ibgp-mark]
      value:
        default-action:
          policy-result: reject
        statement:
        - name: mark-ibgp-routes
          action:
            bgp:
              communities:
                add: ibgp-mark
            policy-result: accept
  
    - path: /routing-policy/prefix-set[name=default_bgp_advertise]
      value:
        prefix: [] # Make sure it exists
  
    - path: /routing-policy/policy[name=default_bgp_export]
      value:
        default-action:
          policy-result: reject
        statement:
        - name: prefixes
          match:
            prefix-set: default_bgp_advertise
          action:
            policy-result: next-policy
        - name: bgp
          match:
            protocol: bgp
          action:
            policy-result: next-policy
            bgp:
              communities:
                remove:
                  ibgp-mark
  
  
    - path: /network-instance[name=default]/protocols/bgp
      value:
        admin-state: enable
        autonomous-system: 65000
        router-id: 10.0.0.5
        ebgp-default-policy:
          export-reject-all: False
          import-reject-all: False
  
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
  
    - path: /routing-policy/prefix-set[name=default_bgp_advertise]
      value:
        prefix:
        - ip-prefix: 10.0.0.5/32
          mask-length-range: exact
  
  
  
  
  
    - path: /network-instance[name=default]/protocols/bgp/group[group-name=ibgp-ipv4]
      value:
        admin-state: enable
    # neighbor: {'_source_intf': {'ifindex': 0, 'ifname': 'lo0.0', 'ipv4': '10.0.0.5/32', 'neighbors': [], 'type': 'loopback', 'virtual_interface': True}, 'activate': {'ipv4': True}, 'as': 65000, 'evpn': True, 'ipv4': '10.0.0.6', 'name': 's2', 'type': 'ibgp'}
    # ipv4: True
    # ipv6: True
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
          import-policy: ['accept_all']
          export-policy: ['default_bgp_export', 'accept_all']
        - afi-safi-name: ipv6-unicast
          admin-state: disable
          import-policy: ['accept_all']
          export-policy: ['default_bgp_export', 'accept_all']
        - afi-safi-name: evpn
          admin-state: enable
  
        timers:
          connect-retry: 10
          _annotate_connect-retry: "Reduce default 120s to 10s"
          minimum-advertisement-interval: 1
        send-community:
          standard: True
          large: True
          _annotate_large: "Assuming 'standard' implies 'large' here"
        peer-as: 65000
        transport:
          local-address: 10.0.0.5
        next-hop-self: True
  
  
    - path: /network-instance[name=default]/protocols/bgp
      value:
        neighbor:
        - peer-address: "10.0.0.6"
          description: s2
          peer-group: ibgp-ipv4
      # neighbor: {'_source_intf': {'ifindex': 0, 'ifname': 'lo0.0', 'ipv4': '10.0.0.5/32', 'neighbors': [], 'type': 'loopback', 'virtual_interface': True}, 'activate': {'ipv4': True}, 'as': 65000, 'evpn': True, 'ipv4': '10.0.0.6', 'name': 's2', 'type': 'ibgp'}
      # ipv4: True
      # ipv6: False
          afi-safi:
          - afi-safi-name: ipv4-unicast
            admin-state: enable
          - afi-safi-name: ipv6-unicast
            admin-state: disable
          - afi-safi-name: evpn
            admin-state: enable
ok: [s2] => 
  msg: |-
    bgp configuration for s2
    =========================================
    !
    route-map next-hop-self-ipv4 permit 10
       match route-type external
       set ip next-hop peer-address
    !
    route-map next-hop-self-ipv4 permit 20
    !
    !
    router bgp 65000
      bgp advertise-inactive
      bgp log-neighbor-changes
      no bgp default ipv4-unicast
      no bgp default ipv6-unicast
      router-id 10.0.0.6
    !
      neighbor 10.0.0.5 remote-as 65000
      neighbor 10.0.0.5 description s1
      neighbor 10.0.0.5 update-source Loopback0
      neighbor 10.0.0.5 send-community standard extended large
    !
    !
     address-family ipv4
  
      network 10.0.0.6/32
    !
    !
    !
      neighbor 10.0.0.5 activate
      neighbor 10.0.0.5 route-map next-hop-self-ipv4 out
    !

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/srlinux.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [s1]

TASK [Update SRL bgp node configuration (template=/home/pipi/netlab_gh/netsim/ansible/templates/bgp/srlinux.j2)] ***
changed: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [eos_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for ospf] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    updates:
  
  
    - path: /network-instance[name=default]
      value:
        router-id: 10.0.0.5
        protocols:
          ospf:
            instance:
            - name: "0"
              version: ospf-v2
              admin-state: enable
              max-ecmp-paths: 64
              area:
              - area-id: 0.0.0.0
                interface:
                - interface-name: system0.0
                  passive: True
              - area-id: 0.0.0.0
                interface:
                - interface-name: ethernet-1/1.0
                  interface-type: "point-to-point"
                  failure-detection:
                    enable-bfd: False
           # OSPF not configured on external interface ethernet-1/2
           # OSPF not configured on external interface ethernet-1/3
           # OSPF not configured on external interface irb0.1000
           # OSPF not configured on external interface irb0.1001
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.6
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! s2 -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/srlinux.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [s1]

TASK [Update SRL ospf node configuration (template=/home/pipi/netlab_gh/netsim/ansible/templates/ospf/srlinux.j2)] ***
changed: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [eos_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vrf] *************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vrf] *********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vrf configuration for s1
    =========================================
  
    updates:
  
    - path: /network-instance[name=customer]
      value:
       type: ip-vrf
  
  
    - path: /routing-policy/community-set[name=C65000_1]
      value:
       member:
       - "target:65000:1" # Single member, else matching is AND
  
    - path: /routing-policy/community-set[name=customer_export]
      value:
       member:
       - "target:65000:1"
  
  
    - path: /routing-policy/policy[name=customer_bgp_export]
      value:
        default-action:
          policy-result: reject
        statement:
        - name: bgp
          match:
            protocol: bgp
          action:
            policy-result: next-policy
            bgp:
              communities:
                remove:
                  ibgp-mark
        - name: bgp_evpn
          match:
            protocol: bgp-evpn
          action:
            policy-result: next-policy
        - name: export_local
          match:
            protocol: local
          action:
            policy-result: next-policy
  
  
    - path: /network-instance[name=customer]/protocols/bgp
      value:
        admin-state: enable
        autonomous-system: 65000
        router-id: 10.0.0.5
        ebgp-default-policy:
          export-reject-all: False
          import-reject-all: False
  
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
  
  
  
  
  
  
  
  
    - path: /network-instance[name=customer]/protocols/bgp-vpn
      value:
       bgp-instance:
       - id: 1
         route-distinguisher:
          rd: "65000:1"
  
    - path: /network-instance[name=customer]/inter-instance-policies
      value:
       apply-policy:
        export-policy: "customer_vpn_export"
        import-policy: "customer_vpn_import"
  
    - path: /routing-policy/policy[name=customer_vpn_export]
      value:
       default-action:
        policy-result: "accept"
        bgp:
         communities:
          add: "customer_export"
  
    - path: /routing-policy/policy[name=customer_vpn_import]
      value:
       default-action:
        policy-result: "reject"
       statement:
       - name: 11
         match:
          bgp:
           community-set: "C65000_1"
         action:
          policy-result: "accept"
ok: [s2] => 
  msg: |-
    vrf configuration for s2
    =========================================
    !
    mpls ip
    !
    router bgp 65000
    !
     vrf customer
      router-id 10.0.0.6
      rd 65000:1
    !
      address-family ipv4
        redistribute connected

TASK [Deploy vrf configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/srlinux.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [s1]

TASK [Update SRL vrf node configuration (template=/home/pipi/netlab_gh/netsim/ansible/templates/vrf/srlinux.j2)] ***
changed: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [eos_config: deploying vrf from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vxlan] ***********************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
  
    updates:
    - path: /tunnel-interface[name=vxlan0]/vxlan-interface[index=1000]
      value:
       type: bridged
       ingress:
        vni: 21000
       egress:
        source-ip: use-system-ipv4-address
  
    - path: /network-instance[name=vlan1000]
      value:
       type: mac-vrf
       vxlan-interface:
       - name: vxlan0.1000
       protocols:
        bgp-vpn:
         bgp-instance:
         - id: 1
           # route-distinguisher:
           # rd: "10.0.0.5:1000"
           _annotate: "RD left as <auto> for EVPN services and ECMP to work as expected, not '10.0.0.5:1000'"
           route-target:
            _annotate: "For compatibility with frr, override auto-derived RT based on EVI 1000 with VNI 21000"
            import-rt: "target:65000:1000"
            export-rt: "target:65000:1000"
        bgp-evpn:
         bgp-instance:
         - id: 1
           evi: 1000
           ecmp: 8
           vxlan-interface: vxlan0.1000
  
    - path: /tunnel-interface[name=vxlan0]/vxlan-interface[index=1001]
      value:
       type: bridged
       ingress:
        vni: 21001
       egress:
        source-ip: use-system-ipv4-address
  
    - path: /network-instance[name=vlan1001]
      value:
       type: mac-vrf
       vxlan-interface:
       - name: vxlan0.1001
       protocols:
        bgp-vpn:
         bgp-instance:
         - id: 1
           # route-distinguisher:
           # rd: "10.0.0.5:1001"
           _annotate: "RD left as <auto> for EVPN services and ECMP to work as expected, not '10.0.0.5:1001'"
           route-target:
            _annotate: "For compatibility with frr, override auto-derived RT based on EVI 1001 with VNI 21001"
            import-rt: "target:65000:1001"
            export-rt: "target:65000:1001"
        bgp-evpn:
         bgp-instance:
         - id: 1
           evi: 1001
           ecmp: 8
           vxlan-interface: vxlan0.1001
  
  
    - path: /tunnel-interface[name=vxlan0]/vxlan-interface[index=100]
      value:
       type: routed
       ingress:
        vni: 5042
       egress:
        source-ip: use-system-ipv4-address
  
    - path: /network-instance[name=customer]
      value:
       type: ip-vrf
       vxlan-interface:
       - name: vxlan0.100
       protocols:
        bgp-vpn:
         bgp-instance:
         - id: 1
           # route-distinguisher:
           # rd: "65000:1"
           _annotate: "RD left as <auto> for EVPN services and ECMP to work as expected, not '65000:1'"
           route-target:
            _annotate: "For compatibility with frr, override auto-derived RT based on EVI 100 with VNI 5042"
            import-rt: "target:65000:1"
            export-rt: "target:65000:1"
        bgp-evpn:
         bgp-instance:
         - id: 1
           evi: 100
           ecmp: 8
           vxlan-interface: vxlan0.100
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    interface vxlan 1
      vxlan source-interface Loopback0
      vxlan vlan 1000 vni 21000
      vxlan vlan 1002 vni 21002

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/srlinux.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [s1]

TASK [Update SRL vxlan node configuration (template=/home/pipi/netlab_gh/netsim/ansible/templates/vxlan/srlinux.j2)] ***
changed: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [eos_config: deploying vxlan from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module gateway on current device] *******
ok: [s1]
ok: [s2]

TASK [Find configuration template for gateway] *********************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for gateway] *****************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    gateway configuration for s1
    =========================================
    updates:
    - path: /interface[name=irb0]/subinterface[index=1000]
      value:
       anycast-gw:
        anycast-gw-mac: 02:00:ca:fe:00:ff
  
       ipv4:
        address:
        - ip-prefix: "172.16.0.254/24"
          anycast-gw: True
    - path: /interface[name=irb0]/subinterface[index=1001]
      value:
       anycast-gw:
        anycast-gw-mac: 02:00:ca:fe:00:ff
  
       ipv4:
        address:
        - ip-prefix: "172.16.1.254/24"
          anycast-gw: True
ok: [s2] => 
  msg: |-
    gateway configuration for s2
    =========================================
    no ip icmp redirect
    !
    ip virtual-router mac-address 0200.cafe.00ff
    !
    interface Vlan1000
      ip virtual-router address 172.16.0.254/24
    interface Vlan1002
      ip virtual-router address 172.16.2.254/24

TASK [Deploy gateway configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/srlinux.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [s1]

TASK [Update SRL gateway node configuration (template=/home/pipi/netlab_gh/netsim/ansible/templates/gateway/srlinux.j2)] ***
changed: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [eos_config: deploying gateway from /home/pipi/netlab_gh/netsim/ansible/templates/gateway/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module evpn on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for evpn] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for evpn] ********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    evpn configuration for s1
    =========================================
  
  
    updates:
    - path: /network-instance[name=default]/protocols/bgp
      value:
        group:
        - group-name: ibgp-ipv4 # Could create a dedicated group for EVPN only?
          afi-safi:
          - afi-safi-name: evpn
            admin-state: enable
        route-advertisement:
          rapid-withdrawal: True
        afi-safi:
        - afi-safi-name: evpn
          evpn:
            rapid-update: True
  
    - path: /interface[name=irb0]/subinterface[index=1000]
      value:
       ipv4:
         arp:
           learn-unsolicited: True
           evpn:
            advertise: # Type of ARP/ND entries to be advertised
            - route-type: dynamic
              _annotate: "Advertise dynamically learned IPs"
            - route-type: static
              _annotate: "Advertise local irb interface IPs"
           host-route:
            _annotate: "Create host routes of type 'arp-nd' in ip-vrf route table"
            populate:
            - route-type: dynamic
            # - route-type: static
            # - route-type: evpn # not for entries learned through EVPN
  
  
    - path: /interface[name=irb0]/subinterface[index=1001]
      value:
       ipv4:
         arp:
           learn-unsolicited: True
           evpn:
            advertise: # Type of ARP/ND entries to be advertised
            - route-type: dynamic
              _annotate: "Advertise dynamically learned IPs"
            - route-type: static
              _annotate: "Advertise local irb interface IPs"
           host-route:
            _annotate: "Create host routes of type 'arp-nd' in ip-vrf route table"
            populate:
            - route-type: dynamic
            # - route-type: static
            # - route-type: evpn # not for entries learned through EVPN
ok: [s2] => 
  msg: |-
    evpn configuration for s2
    =========================================
    !
    router bgp 65000
     address-family evpn
    !
      neighbor 10.0.0.5 activate
    !
     vlan 1002
      rd 10.0.0.6:1002
      route-target import 65000:1002
      route-target export 65000:1002
      redistribute learned
    !
     vlan 1000
      rd 10.0.0.6:1000
      route-target import 65000:1000
      route-target export 65000:1000
      redistribute learned
    !
     vrf customer
      rd 65000:1
      route-target import evpn 65000:1
      route-target export evpn 65000:1
      redistribute connected
    !
    interface vxlan 1
     vxlan vrf customer vni 5042

TASK [Deploy evpn configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/srlinux.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [s1]

TASK [Update SRL evpn node configuration (template=/home/pipi/netlab_gh/netsim/ansible/templates/evpn/srlinux.j2)] ***
changed: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [eos_config: deploying evpn from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/eos.j2] ***
changed: [s2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h3                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h4                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
s1                         : ok=73   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
s2                         : ok=70   changed=9    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   



The device under test is a VLAN-to-VXLAN layer-3 switch between two access
VLANs and two VXLAN VNIs. Both EVPN PE-devices perform inter-VLAN routing
using transit VNI (symmetrical IRB) when needed.

All hosts should be able to ping each other.

Please note it might take a while for the lab to work due to STP learning
phase.

