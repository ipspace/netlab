[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [vx1]
ok: [x1]
ok: [vx2]
ok: [x2]
ok: [vx3]
ok: [x3]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [vx1]
ok: [x1]
ok: [vx2]
ok: [x2]
ok: [vx3]
ok: [x3]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [vx1]
skipping: [x1]
skipping: [vx2]
skipping: [x2]
skipping: [vx3]
skipping: [x3]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, vx1, x1, vx2, x2, vx3, x3

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [vx1]
ok: [x1]
ok: [vx2]
ok: [x2]
ok: [vx3]
ok: [x3]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [vx1]
ok: [x1]
ok: [vx2]
ok: [x2]
ok: [vx3]
ok: [x3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [vx1]
skipping: [x1]
skipping: [vx2]
skipping: [x2]
skipping: [vx3]
skipping: [x3]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [vx1]
ok: [x1]
ok: [x2]
ok: [vx2]
ok: [vx3]
ok: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [vx1]
skipping: [x1]
skipping: [vx2]
skipping: [x2]
skipping: [vx3]
skipping: [x3]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [vx1]
skipping: [x1]
skipping: [vx2]
skipping: [x2]
skipping: [vx3]
skipping: [x3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, vx1, x1, vx2, x2, vx3, x3

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [vx1]
ok: [x1]
ok: [vx2]
ok: [x2]
ok: [vx3]
ok: [x3]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [vx1]
ok: [x1]
ok: [vx2]
ok: [x2]
ok: [vx3]
ok: [x3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [vx1]
skipping: [x1]
skipping: [vx2]
skipping: [x2]
skipping: [vx3]
skipping: [x3]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [vx1]
ok: [x1]
ok: [vx2]
ok: [vx3]
ok: [x2]
ok: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
    updates:
  
    - path: /interface[name=system0]/subinterface[index=0]
      value:
       description: "No description"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.0.0.1/32"
       ipv6:
        admin-state: enable
        address:
        - ip-prefix: "2001:db8:1:1::1/64"
          type: "global-unicast"
  
  
    - path: /interface[name=ethernet-1/1]
      value:
       description: "dut ~ x1"
       subinterface:
        index: 0
        description: "dut ~ x1"
  
    - path: /interface[name=ethernet-1/1]/subinterface[index=0]
      value:
       description: "dut ~ x1"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.1.0.1/30"
          primary: [null]
       ipv6:
        admin-state: enable
        address:
        - ip-prefix: "2001:db8:3::1/64"
          type: "global-unicast"
        neighbor-discovery:
         learn-unsolicited: link-local
        router-advertisement:
         router-role:
          admin-state: enable             # no ipv6 nd suppress-ra
          min-advertisement-interval: 4   # Leaving this at platform default 200..600 takes too long at startup
          _annotate_min-advertisement-interval: "Reduced from platform default 200s"
          max-advertisement-interval: 5
  
    - path: /interface[name=ethernet-1/2]
      value:
       description: "dut ~ x2"
       subinterface:
        index: 0
        description: "dut ~ x2"
  
    - path: /interface[name=ethernet-1/2]/subinterface[index=0]
      value:
       description: "dut ~ x2"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.1.0.5/30"
          primary: [null]
       ipv6:
        admin-state: enable
        address:
        - ip-prefix: "2001:db8:3:1::1/64"
          type: "global-unicast"
        neighbor-discovery:
         learn-unsolicited: link-local
        router-advertisement:
         router-role:
          admin-state: enable             # no ipv6 nd suppress-ra
          min-advertisement-interval: 4   # Leaving this at platform default 200..600 takes too long at startup
          _annotate_min-advertisement-interval: "Reduced from platform default 200s"
          max-advertisement-interval: 5
  
    - path: /interface[name=ethernet-1/3]
      value:
       description: "dut ~ x3"
       subinterface:
        index: 0
        description: "dut ~ x3"
  
    - path: /interface[name=ethernet-1/3]/subinterface[index=0]
      value:
       description: "dut ~ x3"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.1.0.9/30"
          primary: [null]
       ipv6:
        admin-state: enable
        address:
        - ip-prefix: "2001:db8:3:2::1/64"
          type: "global-unicast"
        neighbor-discovery:
         learn-unsolicited: link-local
        router-advertisement:
         router-role:
          admin-state: enable             # no ipv6 nd suppress-ra
          min-advertisement-interval: 4   # Leaving this at platform default 200..600 takes too long at startup
          _annotate_min-advertisement-interval: "Reduced from platform default 200s"
          max-advertisement-interval: 5
  
    - path: /interface[name=ethernet-1/4]
      value:
       description: "dut ~ vx1"
       subinterface:
        index: 0
        description: "dut ~ vx1"
  
    - path: /interface[name=ethernet-1/4]/subinterface[index=0]
      value:
       description: "dut ~ vx1"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.1.0.13/30"
          primary: [null]
       ipv6:
        admin-state: enable
        address:
        - ip-prefix: "2001:db8:3:3::1/64"
          type: "global-unicast"
        neighbor-discovery:
         learn-unsolicited: link-local
        router-advertisement:
         router-role:
          admin-state: enable             # no ipv6 nd suppress-ra
          min-advertisement-interval: 4   # Leaving this at platform default 200..600 takes too long at startup
          _annotate_min-advertisement-interval: "Reduced from platform default 200s"
          max-advertisement-interval: 5
  
    - path: /interface[name=ethernet-1/5]
      value:
       description: "dut ~ vx2"
       subinterface:
        index: 0
        description: "dut ~ vx2"
  
    - path: /interface[name=ethernet-1/5]/subinterface[index=0]
      value:
       description: "dut ~ vx2"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.1.0.17/30"
          primary: [null]
       ipv6:
        admin-state: enable
        address:
        - ip-prefix: "2001:db8:3:4::1/64"
          type: "global-unicast"
        neighbor-discovery:
         learn-unsolicited: link-local
        router-advertisement:
         router-role:
          admin-state: enable             # no ipv6 nd suppress-ra
          min-advertisement-interval: 4   # Leaving this at platform default 200..600 takes too long at startup
          _annotate_min-advertisement-interval: "Reduced from platform default 200s"
          max-advertisement-interval: 5
  
    - path: /interface[name=ethernet-1/6]
      value:
       description: "dut ~ vx3"
       subinterface:
        index: 0
        description: "dut ~ vx3"
  
    - path: /interface[name=ethernet-1/6]/subinterface[index=0]
      value:
       description: "dut ~ vx3"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.1.0.21/30"
          primary: [null]
       ipv6:
        admin-state: enable
        address:
        - ip-prefix: "2001:db8:3:5::1/64"
          type: "global-unicast"
        neighbor-discovery:
         learn-unsolicited: link-local
        router-advertisement:
         router-role:
          admin-state: enable             # no ipv6 nd suppress-ra
          min-advertisement-interval: 4   # Leaving this at platform default 200..600 takes too long at startup
          _annotate_min-advertisement-interval: "Reduced from platform default 200s"
          max-advertisement-interval: 5
  
  
  
    - path: /network-instance[name=default]
      value:
       type: default
       interface:
       - name: system0.0
  
    - path: /network-instance[name=default]
      value:
       type: default
       interface:
       - name: ethernet-1/1.0
    - path: /network-instance[name=default]
      value:
       type: default
       interface:
       - name: ethernet-1/2.0
    - path: /network-instance[name=default]
      value:
       type: default
       interface:
       - name: ethernet-1/3.0
  
  
  
    # TODO: vdata.rd, vdata.import/export, vdata.af
    - path: /network-instance[name=tenant]
      value:
       type: ip-vrf
       interface:
       - name: ethernet-1/4.0
    - path: /network-instance[name=tenant]
      value:
       type: ip-vrf
       interface:
       - name: ethernet-1/5.0
    - path: /network-instance[name=tenant]
      value:
       type: ip-vrf
       interface:
       - name: ethernet-1/6.0
ok: [vx1] => 
  msg: |-
    initial configuration for vx1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
    if [ ! -e /sys/class/net/eth2 ]; then
      if [ ! -e /sys/devices/virtual/net/eth2 ]; then
        ip link add eth2 type dummy
        ip link set dev eth2 up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname vx1
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.5/32
     ipv6 address 2001:db8:1:5::1/64
    !
    interface eth1
     no shutdown
     description vx1 -> dut [external]
     ip address 10.1.0.14/30
     ipv6 address 2001:db8:3:3::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description vx1 -> stub [stub]
     ! no ip address
     ipv6 address 2001:db8:dead:beef::5/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
    if [ ! -e /sys/class/net/eth2 ]; then
      if [ ! -e /sys/devices/virtual/net/eth2 ]; then
        ip link add eth2 type dummy
        ip link set dev eth2 up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description x1 -> dut [external]
     ip address 10.1.0.2/30
     ipv6 address 2001:db8:3::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description x1 -> stub [stub]
     ! no ip address
     ipv6 address 2001:db8:dead:beef::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [vx2] => 
  msg: |-
    initial configuration for vx2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname vx2
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.6/32
     ipv6 address 2001:db8:1:6::1/64
    !
    interface eth1
     no shutdown
     description vx2 -> dut [external]
     ip address 10.1.0.18/30
     ipv6 address 2001:db8:3:4::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x2
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description x2 -> dut [external]
     ip address 10.1.0.6/30
     ipv6 address 2001:db8:3:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [vx3] => 
  msg: |-
    initial configuration for vx3
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname vx3
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.7/32
     ipv6 address 2001:db8:1:7::1/64
    !
    interface eth1
     no shutdown
     description vx3 -> dut [external]
     ip address 10.1.0.22/30
     ipv6 address 2001:db8:3:5::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x3] => 
  msg: |-
    initial configuration for x3
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x3
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
     ipv6 address 2001:db8:1:4::1/64
    !
    interface eth1
     no shutdown
     description x3 -> dut [external]
     ip address 10.1.0.10/30
     ipv6 address 2001:db8:3:2::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for vx1, x1, vx2, x2, vx3, x3

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [dut]

TASK [Update SRL initial node configuration (template=/home/pipi/net101/tools/netsim/ansible/templates/initial/srlinux.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [vx1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [vx1]
skipping: [x1]
skipping: [vx2]
skipping: [x2]
skipping: [vx3]
skipping: [x3]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for vx1, x1, vx2, x2, vx3, x3

TASK [template] ****************************************************************
changed: [vx1]
changed: [x1]
changed: [x3]
changed: [vx2]
changed: [vx3]
changed: [x2]

TASK [set_fact] ****************************************************************
ok: [vx1]
ok: [x1]
ok: [vx2]
ok: [x3]
ok: [x2]
ok: [vx3]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [x1]
changed: [vx2]
changed: [x2]
changed: [x3]
changed: [vx1]
changed: [vx3]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [vx1]
skipping: [x1]
skipping: [vx2]
skipping: [x2]
skipping: [vx3]
skipping: [x3]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [vx1]
ok: [vx2]
ok: [vx3]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, vx1, vx2, vx3, x1, x2, x3 => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, vx1, vx2, vx3, x1, x2, x3 => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, vx1, vx2, vx3, x1, x2, x3 => (item=vrf)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [dut]
ok: [vx1]
ok: [vx2]
ok: [vx3]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Find configuration template for routing] *********************************
skipping: [vx1]
ok: [dut]
skipping: [vx2]
skipping: [vx3]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [vx1]
skipping: [vx2]
skipping: [vx3]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [vx1]
skipping: [vx2]
skipping: [vx3]
ok: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [vx1]
skipping: [vx2]
skipping: [vx3]
skipping: [x1]
skipping: [x2]
skipping: [x3]
ok: [dut] => 
  msg: |-
    routing configuration for dut
    =========================================
    updates:
    - path: /routing-policy/prefix-set[name=lb_only]
      value:
        prefix:
        - ip-prefix: 10.0.0.0/24
          mask-length-range: 32..32
        - ip-prefix: 2001:db8:1::/48
          mask-length-range: 64..64
    - path: /routing-policy/prefix-set[name=orig_1]
      value:
        prefix:
        - ip-prefix: 172.42.42.0/24
          mask-length-range: exact
  
    - path: /routing-policy/policy[name=in_x1]
      value:
        default-action:
          policy-result: reject
        statement:
        - name: rpe_10
          match:
           prefix:
            prefix-set: orig_1
          action:
            policy-result: reject
        - name: rpe_20
          action:
            policy-result: accept
    - path: /routing-policy/policy[name=out_x2]
      value:
        default-action:
          policy-result: reject
        statement:
        - name: rpe_10
          match:
           prefix:
            prefix-set: lb_only
          action:
            policy-result: accept

TASK [Deploy routing configuration] ********************************************
skipping: [vx1]
skipping: [vx2]
skipping: [vx3]
skipping: [x1]
skipping: [x2]
skipping: [x3]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for dut

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [dut]

TASK [Update SRL routing node configuration (template=/home/pipi/net101/tools/netsim/ansible/templates/routing/srlinux.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [vx1]
ok: [vx2]
ok: [vx3]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Find configuration template for bgp] *************************************
ok: [dut]
ok: [vx1]
ok: [vx2]
ok: [vx3]
ok: [x2]
ok: [x1]
ok: [x3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [vx1]
skipping: [vx2]
skipping: [vx3]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [dut]
ok: [vx1]
ok: [vx2]
ok: [x1]
ok: [vx3]
ok: [x2]
ok: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [vx1] => 
  msg: |-
    bgp configuration for vx1
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.5
    !
      neighbor 10.1.0.13 remote-as 65000
      neighbor 10.1.0.13 description dut
    !
      neighbor 2001:db8:3:3::1 remote-as 65000
      neighbor 2001:db8:3:3::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.5/32
    !
    !
      network 172.42.42.0/24
      network 172.42.43.0/24
    !
      neighbor 10.1.0.13 activate
      no neighbor 10.1.0.13 send-community all
      neighbor 10.1.0.13 send-community standard
      neighbor 10.1.0.13 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:5::/64
    !
      network 2001:db8:dead:beef::/64
    !
    !
      neighbor 2001:db8:3:3::1 activate
      no neighbor 2001:db8:3:3::1 send-community all
      neighbor 2001:db8:3:3::1 send-community standard
      neighbor 2001:db8:3:3::1 send-community large
    !
    !
    ip route 172.42.42.0/24 Null0
    ip route 172.42.43.0/24 Null0
    !
    do write
ok: [vx2] => 
  msg: |-
    bgp configuration for vx2
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.6
    !
      neighbor 10.1.0.17 remote-as 65000
      neighbor 10.1.0.17 description dut
    !
      neighbor 2001:db8:3:4::1 remote-as 65000
      neighbor 2001:db8:3:4::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.6/32
    !
    !
    !
      neighbor 10.1.0.17 activate
      no neighbor 10.1.0.17 send-community all
      neighbor 10.1.0.17 send-community standard
      neighbor 10.1.0.17 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:6::/64
    !
    !
    !
      neighbor 2001:db8:3:4::1 activate
      no neighbor 2001:db8:3:4::1 send-community all
      neighbor 2001:db8:3:4::1 send-community standard
      neighbor 2001:db8:3:4::1 send-community large
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    updates:
  
    - path: /routing-policy/policy[name=accept_all]
      value:
        default-action:
          policy-result: accept
  
    - path: /routing-policy/community-set[name=ibgp-mark]
      value:
        member: [ "65536:0:65536" ]
  
    - path: /routing-policy/policy[name=ibgp-mark]
      value:
        default-action:
          policy-result: reject
        statement:
        - name: mark-ibgp-routes
          action:
            bgp:
              communities:
                add: ibgp-mark
            policy-result: accept
  
    - path: /routing-policy/prefix-set[name=default_bgp_advertise]
      value:
        prefix: [] # Make sure it exists
  
    - path: /routing-policy/policy[name=default_bgp_export]
      value:
        default-action:
          policy-result: reject
        statement:
        - name: prefixes
          match:
           prefix:
            prefix-set: default_bgp_advertise
          action:
            policy-result: next-policy
        - name: bgp
          match:
            protocol: bgp
          action:
            policy-result: next-policy
            bgp:
              communities:
                remove:
                  ibgp-mark
  
  
    - path: /network-instance[name=default]/protocols/bgp
      value:
        admin-state: enable
        autonomous-system: 65000
        router-id: 10.0.0.1
        ebgp-default-policy:
          export-reject-all: False
          import-reject-all: False
  
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
        afi-safi:
        - afi-safi-name: ipv6-unicast
          admin-state: enable
  
    - path: /routing-policy/prefix-set[name=default_bgp_advertise]
      value:
        prefix:
        - ip-prefix: 10.0.0.1/32
          mask-length-range: exact
  
  
  
    - path: /routing-policy/prefix-set[name=default_bgp_advertise]
      value:
        prefix:
        - ip-prefix: 2001:db8:1:1::/64
          mask-length-range: exact
  
  
  
  
  
    - path: /network-instance[name=default]/protocols/bgp/group[group-name=ebgp]
      value:
        admin-state: enable
    # neighbor: {'activate': {'ipv4': True, 'ipv6': True}, 'as': 65100, 'ifindex': 1, 'ipv4': '10.1.0.2', 'ipv6': '2001:db8:3::2', 'name': 'x1', 'policy': {'in': 'in_x1'}, 'type': 'ebgp'}
    # ipv4: True
    # ipv6: True
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['default_bgp_export', 'accept_all']
        - afi-safi-name: ipv6-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['default_bgp_export', 'accept_all']
  
        timers:
          connect-retry: 10
          _annotate_connect-retry: "Reduce default 120s to 10s"
          minimum-advertisement-interval: 1
  
  
    - path: /network-instance[name=default]/protocols/bgp
      value:
        neighbor:
        - peer-address: "10.1.0.2"
          description: x1
          peer-group: ebgp
      # neighbor: {'activate': {'ipv4': True, 'ipv6': True}, 'as': 65100, 'ifindex': 1, 'ipv4': '10.1.0.2', 'ipv6': '2001:db8:3::2', 'name': 'x1', 'policy': {'in': 'in_x1'}, 'type': 'ebgp'}
      # ipv4: True
      # ipv6: False
          afi-safi:
          - afi-safi-name: ipv4-unicast
            admin-state: enable
            send-community-type: ['standard', 'large']
  
          - afi-safi-name: ipv6-unicast
            admin-state: disable
  
          peer-as: 65100
  
    - path: /network-instance[name=default]/protocols/bgp/group[group-name=ebgp]
      value:
        admin-state: enable
    # neighbor: {'activate': {'ipv4': True, 'ipv6': True}, 'as': 65100, 'ifindex': 1, 'ipv4': '10.1.0.2', 'ipv6': '2001:db8:3::2', 'name': 'x1', 'policy': {'in': 'in_x1'}, 'type': 'ebgp'}
    # ipv4: True
    # ipv6: True
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['default_bgp_export', 'accept_all']
        - afi-safi-name: ipv6-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['default_bgp_export', 'accept_all']
  
        timers:
          connect-retry: 10
          _annotate_connect-retry: "Reduce default 120s to 10s"
          minimum-advertisement-interval: 1
  
  
    - path: /network-instance[name=default]/protocols/bgp
      value:
        neighbor:
        - peer-address: "2001:db8:3::2"
          description: x1
          peer-group: ebgp
      # neighbor: {'activate': {'ipv4': True, 'ipv6': True}, 'as': 65100, 'ifindex': 1, 'ipv4': '10.1.0.2', 'ipv6': '2001:db8:3::2', 'name': 'x1', 'policy': {'in': 'in_x1'}, 'type': 'ebgp'}
      # ipv4: False
      # ipv6: True
          afi-safi:
          - afi-safi-name: ipv4-unicast
            admin-state: disable
          - afi-safi-name: ipv6-unicast
            admin-state: enable
            send-community-type: ['standard', 'large']
  
  
          peer-as: 65100
  
    - path: /network-instance[name=default]/protocols/bgp/group[group-name=ebgp]
      value:
        admin-state: enable
    # neighbor: {'activate': {'ipv4': True, 'ipv6': True}, 'as': 65101, 'ifindex': 2, 'ipv4': '10.1.0.6', 'ipv6': '2001:db8:3:1::2', 'name': 'x2', 'policy': {'out': 'out_x2'}, 'type': 'ebgp'}
    # ipv4: True
    # ipv6: True
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['default_bgp_export', 'accept_all']
        - afi-safi-name: ipv6-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['default_bgp_export', 'accept_all']
  
        timers:
          connect-retry: 10
          _annotate_connect-retry: "Reduce default 120s to 10s"
          minimum-advertisement-interval: 1
  
  
    - path: /network-instance[name=default]/protocols/bgp
      value:
        neighbor:
        - peer-address: "10.1.0.6"
          description: x2
          peer-group: ebgp
      # neighbor: {'activate': {'ipv4': True, 'ipv6': True}, 'as': 65101, 'ifindex': 2, 'ipv4': '10.1.0.6', 'ipv6': '2001:db8:3:1::2', 'name': 'x2', 'policy': {'out': 'out_x2'}, 'type': 'ebgp'}
      # ipv4: True
      # ipv6: False
          afi-safi:
          - afi-safi-name: ipv4-unicast
            admin-state: enable
            send-community-type: ['standard', 'large']
  
          - afi-safi-name: ipv6-unicast
            admin-state: disable
  
          peer-as: 65101
  
    - path: /network-instance[name=default]/protocols/bgp/group[group-name=ebgp]
      value:
        admin-state: enable
    # neighbor: {'activate': {'ipv4': True, 'ipv6': True}, 'as': 65101, 'ifindex': 2, 'ipv4': '10.1.0.6', 'ipv6': '2001:db8:3:1::2', 'name': 'x2', 'policy': {'out': 'out_x2'}, 'type': 'ebgp'}
    # ipv4: True
    # ipv6: True
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['default_bgp_export', 'accept_all']
        - afi-safi-name: ipv6-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['default_bgp_export', 'accept_all']
  
        timers:
          connect-retry: 10
          _annotate_connect-retry: "Reduce default 120s to 10s"
          minimum-advertisement-interval: 1
  
  
    - path: /network-instance[name=default]/protocols/bgp
      value:
        neighbor:
        - peer-address: "2001:db8:3:1::2"
          description: x2
          peer-group: ebgp
      # neighbor: {'activate': {'ipv4': True, 'ipv6': True}, 'as': 65101, 'ifindex': 2, 'ipv4': '10.1.0.6', 'ipv6': '2001:db8:3:1::2', 'name': 'x2', 'policy': {'out': 'out_x2'}, 'type': 'ebgp'}
      # ipv4: False
      # ipv6: True
          afi-safi:
          - afi-safi-name: ipv4-unicast
            admin-state: disable
          - afi-safi-name: ipv6-unicast
            admin-state: enable
            send-community-type: ['standard', 'large']
  
  
          peer-as: 65101
  
    - path: /network-instance[name=default]/protocols/bgp/group[group-name=ebgp]
      value:
        admin-state: enable
    # neighbor: {'activate': {'ipv4': True, 'ipv6': True}, 'as': 65102, 'ifindex': 3, 'ipv4': '10.1.0.10', 'ipv6': '2001:db8:3:2::2', 'name': 'x3', 'type': 'ebgp'}
    # ipv4: True
    # ipv6: True
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['default_bgp_export', 'accept_all']
        - afi-safi-name: ipv6-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['default_bgp_export', 'accept_all']
  
        timers:
          connect-retry: 10
          _annotate_connect-retry: "Reduce default 120s to 10s"
          minimum-advertisement-interval: 1
  
  
    - path: /network-instance[name=default]/protocols/bgp
      value:
        neighbor:
        - peer-address: "10.1.0.10"
          description: x3
          peer-group: ebgp
      # neighbor: {'activate': {'ipv4': True, 'ipv6': True}, 'as': 65102, 'ifindex': 3, 'ipv4': '10.1.0.10', 'ipv6': '2001:db8:3:2::2', 'name': 'x3', 'type': 'ebgp'}
      # ipv4: True
      # ipv6: False
          afi-safi:
          - afi-safi-name: ipv4-unicast
            admin-state: enable
            send-community-type: ['standard', 'large']
  
          - afi-safi-name: ipv6-unicast
            admin-state: disable
  
          peer-as: 65102
  
    - path: /network-instance[name=default]/protocols/bgp/group[group-name=ebgp]
      value:
        admin-state: enable
    # neighbor: {'activate': {'ipv4': True, 'ipv6': True}, 'as': 65102, 'ifindex': 3, 'ipv4': '10.1.0.10', 'ipv6': '2001:db8:3:2::2', 'name': 'x3', 'type': 'ebgp'}
    # ipv4: True
    # ipv6: True
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['default_bgp_export', 'accept_all']
        - afi-safi-name: ipv6-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['default_bgp_export', 'accept_all']
  
        timers:
          connect-retry: 10
          _annotate_connect-retry: "Reduce default 120s to 10s"
          minimum-advertisement-interval: 1
  
  
    - path: /network-instance[name=default]/protocols/bgp
      value:
        neighbor:
        - peer-address: "2001:db8:3:2::2"
          description: x3
          peer-group: ebgp
      # neighbor: {'activate': {'ipv4': True, 'ipv6': True}, 'as': 65102, 'ifindex': 3, 'ipv4': '10.1.0.10', 'ipv6': '2001:db8:3:2::2', 'name': 'x3', 'type': 'ebgp'}
      # ipv4: False
      # ipv6: True
          afi-safi:
          - afi-safi-name: ipv4-unicast
            admin-state: disable
          - afi-safi-name: ipv6-unicast
            admin-state: enable
            send-community-type: ['standard', 'large']
  
  
          peer-as: 65102
ok: [x2] => 
  msg: |-
    bgp configuration for x2
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 10.1.0.5 remote-as 65000
      neighbor 10.1.0.5 description dut
    !
      neighbor 2001:db8:3:1::1 remote-as 65000
      neighbor 2001:db8:3:1::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.3/32
    !
    !
    !
      neighbor 10.1.0.5 activate
      no neighbor 10.1.0.5 send-community all
      neighbor 10.1.0.5 send-community standard
      neighbor 10.1.0.5 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:3::/64
    !
    !
    !
      neighbor 2001:db8:3:1::1 activate
      no neighbor 2001:db8:3:1::1 send-community all
      neighbor 2001:db8:3:1::1 send-community standard
      neighbor 2001:db8:3:1::1 send-community large
    !
    !
    !
    do write
ok: [vx3] => 
  msg: |-
    bgp configuration for vx3
    =========================================
    !
    router bgp 65102
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.7
    !
      neighbor 10.1.0.21 remote-as 65000
      neighbor 10.1.0.21 description dut
    !
      neighbor 2001:db8:3:5::1 remote-as 65000
      neighbor 2001:db8:3:5::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.7/32
    !
    !
    !
      neighbor 10.1.0.21 activate
      no neighbor 10.1.0.21 send-community all
      neighbor 10.1.0.21 send-community standard
      neighbor 10.1.0.21 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:7::/64
    !
    !
    !
      neighbor 2001:db8:3:5::1 activate
      no neighbor 2001:db8:3:5::1 send-community all
      neighbor 2001:db8:3:5::1 send-community standard
      neighbor 2001:db8:3:5::1 send-community large
    !
    !
    !
    do write
ok: [x3] => 
  msg: |-
    bgp configuration for x3
    =========================================
    !
    router bgp 65102
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.1.0.9 remote-as 65000
      neighbor 10.1.0.9 description dut
    !
      neighbor 2001:db8:3:2::1 remote-as 65000
      neighbor 2001:db8:3:2::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.4/32
    !
    !
    !
      neighbor 10.1.0.9 activate
      no neighbor 10.1.0.9 send-community all
      neighbor 10.1.0.9 send-community standard
      neighbor 10.1.0.9 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:4::/64
    !
    !
    !
      neighbor 2001:db8:3:2::1 activate
      no neighbor 2001:db8:3:2::1 send-community all
      neighbor 2001:db8:3:2::1 send-community standard
      neighbor 2001:db8:3:2::1 send-community large
    !
    !
    !
    do write
ok: [x1] => 
  msg: |-
    bgp configuration for x1
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor 10.1.0.1 remote-as 65000
      neighbor 10.1.0.1 description dut
    !
      neighbor 2001:db8:3::1 remote-as 65000
      neighbor 2001:db8:3::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.2/32
    !
    !
      network 172.42.42.0/24
      network 172.42.43.0/24
    !
      neighbor 10.1.0.1 activate
      no neighbor 10.1.0.1 send-community all
      neighbor 10.1.0.1 send-community standard
      neighbor 10.1.0.1 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:2::/64
    !
      network 2001:db8:dead:beef::/64
    !
    !
      neighbor 2001:db8:3::1 activate
      no neighbor 2001:db8:3::1 send-community all
      neighbor 2001:db8:3::1 send-community standard
      neighbor 2001:db8:3::1 send-community large
    !
    !
    ip route 172.42.42.0/24 Null0
    ip route 172.42.43.0/24 Null0
    !
    do write

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for vx1, vx2, vx3, x1, x2, x3

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [dut]

TASK [Update SRL bgp node configuration (template=/home/pipi/net101/tools/netsim/ansible/templates/bgp/srlinux.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [template] ****************************************************************
changed: [x3]
changed: [vx3]
changed: [vx1]
changed: [vx2]
changed: [x1]
changed: [x2]

TASK [set_fact] ****************************************************************
ok: [vx1]
ok: [vx2]
ok: [vx3]
ok: [x3]
ok: [x1]
ok: [x2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [vx1]
skipping: [vx2]
skipping: [vx3]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [vx2]
changed: [vx1]
changed: [x3]
changed: [x1]
changed: [vx3]
changed: [x2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [dut]
ok: [vx1]
ok: [vx2]
ok: [vx3]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Find configuration template for vrf] *************************************
skipping: [vx1]
skipping: [vx2]
ok: [dut]
skipping: [vx3]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [vx1]
skipping: [vx2]
skipping: [vx3]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [vx1]
skipping: [vx2]
skipping: [vx3]
ok: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [vx1]
skipping: [vx2]
skipping: [vx3]
skipping: [x1]
skipping: [x2]
skipping: [x3]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
    updates:
  
    - path: /network-instance[name=tenant]
      value:
       type: ip-vrf
  
  
    - path: /routing-policy/community-set[name=C65000_1]
      value:
       member:
       - "target:65000:1" # Single member, else matching is AND
  
    - path: /routing-policy/community-set[name=tenant_export]
      value:
       member:
       - "target:65000:1"
  
  
    - path: /routing-policy/policy[name=tenant_bgp_export]
      value:
        default-action:
          policy-result: reject
        statement:
        - name: bgp
          match:
            protocol: bgp
          action:
            policy-result: next-policy
            bgp:
              communities:
                remove:
                  ibgp-mark
        - name: export_local
          match:
            protocol: local
          action:
            policy-result: next-policy
  
  
    - path: /network-instance[name=tenant]/protocols/bgp
      value:
        admin-state: enable
        autonomous-system: 65000
        router-id: 10.0.0.1
        ebgp-default-policy:
          export-reject-all: False
          import-reject-all: False
  
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
        afi-safi:
        - afi-safi-name: ipv6-unicast
          admin-state: enable
  
  
  
  
  
  
  
    - path: /network-instance[name=tenant]/protocols/bgp/group[group-name=ebgp]
      value:
        admin-state: enable
    # neighbor: {'_src_vrf': 'tenant', 'activate': {'ipv4': True, 'ipv6': True}, 'as': 65100, 'ifindex': 4, 'ipv4': '10.1.0.14', 'ipv6': '2001:db8:3:3::2', 'name': 'vx1', 'policy': {'in': 'in_x1'}, 'type': 'ebgp'}
    # ipv4: True
    # ipv6: True
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['tenant_bgp_export', 'accept_all']
        - afi-safi-name: ipv6-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['tenant_bgp_export', 'accept_all']
  
        timers:
          connect-retry: 10
          _annotate_connect-retry: "Reduce default 120s to 10s"
          minimum-advertisement-interval: 1
  
  
    - path: /network-instance[name=tenant]/protocols/bgp
      value:
        neighbor:
        - peer-address: "10.1.0.14"
          description: vx1
          peer-group: ebgp
      # neighbor: {'_src_vrf': 'tenant', 'activate': {'ipv4': True, 'ipv6': True}, 'as': 65100, 'ifindex': 4, 'ipv4': '10.1.0.14', 'ipv6': '2001:db8:3:3::2', 'name': 'vx1', 'policy': {'in': 'in_x1'}, 'type': 'ebgp'}
      # ipv4: True
      # ipv6: False
          afi-safi:
          - afi-safi-name: ipv4-unicast
            admin-state: enable
            send-community-type: ['standard', 'large']
  
          - afi-safi-name: ipv6-unicast
            admin-state: disable
  
          peer-as: 65100
  
    - path: /network-instance[name=tenant]/protocols/bgp/group[group-name=ebgp]
      value:
        admin-state: enable
    # neighbor: {'_src_vrf': 'tenant', 'activate': {'ipv4': True, 'ipv6': True}, 'as': 65100, 'ifindex': 4, 'ipv4': '10.1.0.14', 'ipv6': '2001:db8:3:3::2', 'name': 'vx1', 'policy': {'in': 'in_x1'}, 'type': 'ebgp'}
    # ipv4: True
    # ipv6: True
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['tenant_bgp_export', 'accept_all']
        - afi-safi-name: ipv6-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['tenant_bgp_export', 'accept_all']
  
        timers:
          connect-retry: 10
          _annotate_connect-retry: "Reduce default 120s to 10s"
          minimum-advertisement-interval: 1
  
  
    - path: /network-instance[name=tenant]/protocols/bgp
      value:
        neighbor:
        - peer-address: "2001:db8:3:3::2"
          description: vx1
          peer-group: ebgp
      # neighbor: {'_src_vrf': 'tenant', 'activate': {'ipv4': True, 'ipv6': True}, 'as': 65100, 'ifindex': 4, 'ipv4': '10.1.0.14', 'ipv6': '2001:db8:3:3::2', 'name': 'vx1', 'policy': {'in': 'in_x1'}, 'type': 'ebgp'}
      # ipv4: False
      # ipv6: True
          afi-safi:
          - afi-safi-name: ipv4-unicast
            admin-state: disable
          - afi-safi-name: ipv6-unicast
            admin-state: enable
            send-community-type: ['standard', 'large']
  
  
          peer-as: 65100
  
    - path: /network-instance[name=tenant]/protocols/bgp/group[group-name=ebgp]
      value:
        admin-state: enable
    # neighbor: {'_src_vrf': 'tenant', 'activate': {'ipv4': True, 'ipv6': True}, 'as': 65101, 'ifindex': 5, 'ipv4': '10.1.0.18', 'ipv6': '2001:db8:3:4::2', 'name': 'vx2', 'policy': {'out': 'out_x2'}, 'type': 'ebgp'}
    # ipv4: True
    # ipv6: True
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['tenant_bgp_export', 'accept_all']
        - afi-safi-name: ipv6-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['tenant_bgp_export', 'accept_all']
  
        timers:
          connect-retry: 10
          _annotate_connect-retry: "Reduce default 120s to 10s"
          minimum-advertisement-interval: 1
  
  
    - path: /network-instance[name=tenant]/protocols/bgp
      value:
        neighbor:
        - peer-address: "10.1.0.18"
          description: vx2
          peer-group: ebgp
      # neighbor: {'_src_vrf': 'tenant', 'activate': {'ipv4': True, 'ipv6': True}, 'as': 65101, 'ifindex': 5, 'ipv4': '10.1.0.18', 'ipv6': '2001:db8:3:4::2', 'name': 'vx2', 'policy': {'out': 'out_x2'}, 'type': 'ebgp'}
      # ipv4: True
      # ipv6: False
          afi-safi:
          - afi-safi-name: ipv4-unicast
            admin-state: enable
            send-community-type: ['standard', 'large']
  
          - afi-safi-name: ipv6-unicast
            admin-state: disable
  
          peer-as: 65101
  
    - path: /network-instance[name=tenant]/protocols/bgp/group[group-name=ebgp]
      value:
        admin-state: enable
    # neighbor: {'_src_vrf': 'tenant', 'activate': {'ipv4': True, 'ipv6': True}, 'as': 65101, 'ifindex': 5, 'ipv4': '10.1.0.18', 'ipv6': '2001:db8:3:4::2', 'name': 'vx2', 'policy': {'out': 'out_x2'}, 'type': 'ebgp'}
    # ipv4: True
    # ipv6: True
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['tenant_bgp_export', 'accept_all']
        - afi-safi-name: ipv6-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['tenant_bgp_export', 'accept_all']
  
        timers:
          connect-retry: 10
          _annotate_connect-retry: "Reduce default 120s to 10s"
          minimum-advertisement-interval: 1
  
  
    - path: /network-instance[name=tenant]/protocols/bgp
      value:
        neighbor:
        - peer-address: "2001:db8:3:4::2"
          description: vx2
          peer-group: ebgp
      # neighbor: {'_src_vrf': 'tenant', 'activate': {'ipv4': True, 'ipv6': True}, 'as': 65101, 'ifindex': 5, 'ipv4': '10.1.0.18', 'ipv6': '2001:db8:3:4::2', 'name': 'vx2', 'policy': {'out': 'out_x2'}, 'type': 'ebgp'}
      # ipv4: False
      # ipv6: True
          afi-safi:
          - afi-safi-name: ipv4-unicast
            admin-state: disable
          - afi-safi-name: ipv6-unicast
            admin-state: enable
            send-community-type: ['standard', 'large']
  
  
          peer-as: 65101
  
    - path: /network-instance[name=tenant]/protocols/bgp/group[group-name=ebgp]
      value:
        admin-state: enable
    # neighbor: {'_src_vrf': 'tenant', 'activate': {'ipv4': True, 'ipv6': True}, 'as': 65102, 'ifindex': 6, 'ipv4': '10.1.0.22', 'ipv6': '2001:db8:3:5::2', 'name': 'vx3', 'type': 'ebgp'}
    # ipv4: True
    # ipv6: True
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['tenant_bgp_export', 'accept_all']
        - afi-safi-name: ipv6-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['tenant_bgp_export', 'accept_all']
  
        timers:
          connect-retry: 10
          _annotate_connect-retry: "Reduce default 120s to 10s"
          minimum-advertisement-interval: 1
  
  
    - path: /network-instance[name=tenant]/protocols/bgp
      value:
        neighbor:
        - peer-address: "10.1.0.22"
          description: vx3
          peer-group: ebgp
      # neighbor: {'_src_vrf': 'tenant', 'activate': {'ipv4': True, 'ipv6': True}, 'as': 65102, 'ifindex': 6, 'ipv4': '10.1.0.22', 'ipv6': '2001:db8:3:5::2', 'name': 'vx3', 'type': 'ebgp'}
      # ipv4: True
      # ipv6: False
          afi-safi:
          - afi-safi-name: ipv4-unicast
            admin-state: enable
            send-community-type: ['standard', 'large']
  
          - afi-safi-name: ipv6-unicast
            admin-state: disable
  
          peer-as: 65102
  
    - path: /network-instance[name=tenant]/protocols/bgp/group[group-name=ebgp]
      value:
        admin-state: enable
    # neighbor: {'_src_vrf': 'tenant', 'activate': {'ipv4': True, 'ipv6': True}, 'as': 65102, 'ifindex': 6, 'ipv4': '10.1.0.22', 'ipv6': '2001:db8:3:5::2', 'name': 'vx3', 'type': 'ebgp'}
    # ipv4: True
    # ipv6: True
        afi-safi:
        - afi-safi-name: ipv4-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['tenant_bgp_export', 'accept_all']
        - afi-safi-name: ipv6-unicast
          admin-state: enable
          send-community-type: ['standard', 'large']
  
          import-policy: ['accept_all']
          export-policy: ['tenant_bgp_export', 'accept_all']
  
        timers:
          connect-retry: 10
          _annotate_connect-retry: "Reduce default 120s to 10s"
          minimum-advertisement-interval: 1
  
  
    - path: /network-instance[name=tenant]/protocols/bgp
      value:
        neighbor:
        - peer-address: "2001:db8:3:5::2"
          description: vx3
          peer-group: ebgp
      # neighbor: {'_src_vrf': 'tenant', 'activate': {'ipv4': True, 'ipv6': True}, 'as': 65102, 'ifindex': 6, 'ipv4': '10.1.0.22', 'ipv6': '2001:db8:3:5::2', 'name': 'vx3', 'type': 'ebgp'}
      # ipv4: False
      # ipv6: True
          afi-safi:
          - afi-safi-name: ipv4-unicast
            admin-state: disable
          - afi-safi-name: ipv6-unicast
            admin-state: enable
            send-community-type: ['standard', 'large']
  
  
          peer-as: 65102
  
  
  
  
    - path: /network-instance[name=tenant]/protocols/bgp-vpn
      value:
       bgp-instance:
       - id: 1
         route-distinguisher:
          rd: "65000:1"
  
    - path: /network-instance[name=tenant]/inter-instance-policies
      value:
       apply-policy:
        export-policy: "tenant_vpn_export"
        import-policy: "tenant_vpn_import"
  
    - path: /routing-policy/policy[name=tenant_vpn_export]
      value:
       default-action:
        policy-result: "accept"
        bgp:
         communities:
          add: "tenant_export"
  
    - path: /routing-policy/policy[name=tenant_vpn_import]
      value:
       default-action:
        policy-result: "reject"
       statement:
       - name: 11
         match:
          bgp:
           community-set: "C65000_1"
         action:
          policy-result: "accept"

TASK [Deploy vrf configuration] ************************************************
skipping: [vx1]
skipping: [vx2]
skipping: [vx3]
skipping: [x1]
skipping: [x2]
skipping: [x3]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for dut

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [dut]

TASK [Update SRL vrf node configuration (template=/home/pipi/net101/tools/netsim/ansible/templates/vrf/srlinux.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-custom-config.yml for dut => (item=bgp.policy)

TASK [Find configuration template] *********************************************
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Check is the configuration template is a file] ***************************
ok: [dut -> localhost]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Process template /home/pipi/net101/tools/netsim/extra/bgp.policy/srlinux.j2 for dut] ***
skipping: [dut]

TASK [Find custom configuration deployment script] *****************************
ok: [dut]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for dut

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [dut]

TASK [Update SRL bgp.policy node configuration (template=/home/pipi/net101/tools/netsim/extra/bgp.policy/srlinux.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

PLAY RECAP *********************************************************************
dut                        : ok=46   changed=5    unreachable=0    failed=0    skipped=16   rescued=0    ignored=0   
vx1                        : ok=31   changed=5    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
vx2                        : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
vx3                        : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
x1                         : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
x2                         : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
x3                         : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   



Use this topology to test route maps with prefix lists for IPv4 and IPv6

