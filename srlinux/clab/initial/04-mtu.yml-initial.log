[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [t_1300]
ok: [t_1400]
ok: [dut]
ok: [p1]

TASK [Find device readiness script] ********************************************
ok: [t_1300]
ok: [t_1400]
ok: [dut]
ok: [p1]

TASK [Wait for device to become ready] *****************************************
skipping: [t_1300]
skipping: [t_1400]
skipping: [dut]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for p1

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [p1]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for p1, t_1300, t_1400, dut

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [t_1300]
ok: [t_1400]
ok: [dut]
ok: [p1]

TASK [Find configuration template for normalize] *******************************
ok: [t_1300]
ok: [t_1400]
ok: [dut]
ok: [p1]

TASK [fail] ********************************************************************
skipping: [p1]
skipping: [t_1300]
skipping: [t_1400]
skipping: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [t_1300]
skipping: [t_1400]
skipping: [dut]
ok: [p1] => 
  msg: |-
    normalize configuration for p1
    =========================================
    !
    interface Ethernet1
     no switchport
     mac-address 52dc.cafe.0201

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [t_1300]
skipping: [t_1400]
skipping: [dut]
ok: [p1]

TASK [Deploy normalize configuration] ******************************************
skipping: [t_1300]
skipping: [t_1400]
skipping: [dut]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for p1

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [p1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for p1, t_1300, t_1400, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [t_1300]
ok: [t_1400]
ok: [dut]
ok: [p1]

TASK [Find configuration template for initial] *********************************
ok: [t_1300]
ok: [t_1400]
ok: [dut]
ok: [p1]

TASK [fail] ********************************************************************
skipping: [p1]
skipping: [t_1300]
skipping: [t_1400]
skipping: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [t_1300] => 
  msg: |-
    initial configuration for t_1300
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.2.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.2.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:1:2::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:1:2::3/64 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.2.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [t_1400] => 
  msg: |-
    initial configuration for t_1400
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:1:1::4/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:1:1::4/64 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
    updates:
    - path: /system/mtu
      value:
       default-port-mtu: 1500
       default-l2-mtu: 1500
       default-ip-mtu: 1300
       _annotate_default-ip-mtu: "Custom system wide setting, overrides default 1500"
  
    - path: /interface[name=system0]/subinterface[index=0]
      value:
       description: "No description"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.0.0.1/32"
       ipv6:
        admin-state: enable
        address:
        - ip-prefix: "2001:db8:0:1::1/64"
  
  
    - path: /interface[name=ethernet-1/1]
      value:
     # min 1500; max 9412 for 7220, 9500 for 7250 platforms
       mtu: 1514
       subinterface:
     # min 1500; max 9412 for 7220, 9500 for 7250 platforms
        ip-mtu: 1500
        index: 0
        description: "dut ~ p1"
  
    - path: /interface[name=ethernet-1/1]/subinterface[index=0]
      value:
       description: "dut ~ p1"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "172.16.0.1/24"
          primary: [null]
       ipv6:
        admin-state: enable
        address:
        - ip-prefix: "2001:db8:1::1/64"
        neighbor-discovery:
         learn-unsolicited: link-local
        router-advertisement:
         router-role:
          admin-state: enable             # no ipv6 nd suppress-ra
          min-advertisement-interval: 4   # Leaving this at platform default 200..600 takes too long at startup
          _annotate_min-advertisement-interval: "Reduced from platform default 200s"
          max-advertisement-interval: 5
  
    - path: /interface[name=ethernet-1/2]
      value:
     # min 1500; max 9412 for 7220, 9500 for 7250 platforms
       mtu: 1500
       subinterface:
     # min 1500; max 9412 for 7220, 9500 for 7250 platforms
        ip-mtu: 1400
        index: 0
        description: "dut ~ t_1400"
  
    - path: /interface[name=ethernet-1/2]/subinterface[index=0]
      value:
       description: "dut ~ t_1400"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "172.16.1.1/24"
          primary: [null]
       ipv6:
        admin-state: enable
        address:
        - ip-prefix: "2001:db8:1:1::1/64"
        neighbor-discovery:
         learn-unsolicited: link-local
        router-advertisement:
         router-role:
          admin-state: enable             # no ipv6 nd suppress-ra
          min-advertisement-interval: 4   # Leaving this at platform default 200..600 takes too long at startup
          _annotate_min-advertisement-interval: "Reduced from platform default 200s"
          max-advertisement-interval: 5
  
    - path: /interface[name=ethernet-1/3]
      value:
       subinterface:
        index: 0
        description: "dut ~ t_1300"
  
    - path: /interface[name=ethernet-1/3]/subinterface[index=0]
      value:
       description: "dut ~ t_1300"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "172.16.2.1/24"
          primary: [null]
       ipv6:
        admin-state: enable
        address:
        - ip-prefix: "2001:db8:1:2::1/64"
        neighbor-discovery:
         learn-unsolicited: link-local
        router-advertisement:
         router-role:
          admin-state: enable             # no ipv6 nd suppress-ra
          min-advertisement-interval: 4   # Leaving this at platform default 200..600 takes too long at startup
          _annotate_min-advertisement-interval: "Reduced from platform default 200s"
          max-advertisement-interval: 5
  
  
  
    - path: /network-instance[name=default]
      value:
       type: default
       interface:
       - name: system0.0
  
    - path: /network-instance[name=default]
      value:
       type: default
       interface:
       - name: ethernet-1/1.0
    - path: /network-instance[name=default]
      value:
       type: default
       interface:
       - name: ethernet-1/2.0
    - path: /network-instance[name=default]
      value:
       type: default
       interface:
       - name: ethernet-1/3.0
ok: [p1] => 
  msg: |-
    initial configuration for p1
    =========================================
    hostname p1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    ipv6 unicast-routing
    !
    !
    ip host dut 10.0.0.1 172.16.0.1 172.16.1.1 172.16.2.1
    ip host t1300 172.16.2.3
    ip host t1400 172.16.1.4
    ipv6 host dut 2001:db8:0:1::1
    ipv6 host t1300 2001:db8:1:2::3
    ipv6 host t1400 2001:db8:1:1::4
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.2/32
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:0:2::1/64
    !
    interface Ethernet1
     no switchport
     mtu 1500
     description p1 -> dut
     ip address 172.16.0.2/24
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:1::2/64
    !
     mac-address 52dc.cafe.0201
     no shutdown
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [t_1300]
ok: [t_1400]
ok: [dut]
ok: [p1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for p1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for t_1300, t_1400
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for dut

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [p1]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [t_1300]
ok: [t_1400]

TASK [Create a temporary file for the rendered script] *************************
changed: [t_1400 -> localhost]
changed: [t_1300 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [t_1400 -> localhost]
changed: [t_1300 -> localhost]

TASK [Copy script into running container at /tmp/config-t_1300_initial.sh] *****
skipping: [t_1300]
skipping: [t_1400]

TASK [Execute /tmp/config-t_1300_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [t_1300]
skipping: [t_1400]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [t_1400 -> localhost]
changed: [t_1300 -> localhost]

TASK [Remove temporary file /tmp/t_1300_initial-mf6c00tv.sh] *******************
changed: [t_1400 -> localhost]
changed: [t_1300 -> localhost]

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [dut]

TASK [Update SRL initial node configuration (template=/home/pipi/net101/tools/netsim/ansible/templates/initial/srlinux.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [p1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for p1 => (item=routing)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [p1]

TASK [Find configuration template for routing] *********************************
ok: [p1]

TASK [fail] ********************************************************************
skipping: [p1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p1] => 
  msg: |-
    routing configuration for p1
    =========================================
    !
    !
    ! AS-path access lists
    !
    !
    ! Static routes
    !
    ip route 0.0.0.0/0 Ethernet1 172.16.0.1
    ipv6 route ::/0 Ethernet1 2001:db8:1::1

TASK [Find configuration deployment deploy_script for routing] *****************
ok: [p1]

TASK [Deploy routing configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for p1

TASK [eos_config: deploying routing from /home/pipi/net101/tools/netsim/ansible/templates/routing/eos.j2] ***
changed: [p1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=13   changed=1    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
p1                         : ok=26   changed=3    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0   
t_1300                     : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
t_1400                     : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   



This scenario tests MTU configuration and path MTU discovery (generation of ICMP unreachables)
