[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [r]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [r]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [r]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, r

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [r]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [r]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r] => 
  msg: |-
    initial configuration for r
    =========================================
  
    updates:
  
    - path: /interface[name=system0]/subinterface[index=0]
      value:
       description: "No description"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.0.0.1/32"
       ipv6:
        admin-state: enable
        address:
        - ip-prefix: "2001:db8:0:1::1/64"
  
  
    - path: /interface[name=ethernet-1/1]
      value:
       subinterface:
        index: 0
        description: "r ~ h1"
  
    - path: /interface[name=ethernet-1/1]/subinterface[index=0]
      value:
       description: "r ~ h1"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "172.16.0.1/24"
          primary: [null]
       ipv6:
        admin-state: enable
        address:
        - ip-prefix: "2001:db8:1::1/64"
        neighbor-discovery:
         learn-unsolicited: link-local
        router-advertisement:
         router-role:
          admin-state: enable             # no ipv6 nd suppress-ra
          min-advertisement-interval: 4   # Leaving this at platform default 200..600 takes too long at startup
          _annotate_min-advertisement-interval: "Reduced from platform default 200s"
          max-advertisement-interval: 5
  
    - path: /interface[name=ethernet-1/2]
      value:
       subinterface:
        index: 0
        description: "r ~ h2"
  
    - path: /interface[name=ethernet-1/2]/subinterface[index=0]
      value:
       description: "r ~ h2"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "172.16.1.1/24"
          primary: [null]
       ipv6:
        admin-state: enable
        address:
        - ip-prefix: "2001:db8:1:1::1/64"
        neighbor-discovery:
         learn-unsolicited: link-local
        router-advertisement:
         router-role:
          admin-state: enable             # no ipv6 nd suppress-ra
          min-advertisement-interval: 4   # Leaving this at platform default 200..600 takes too long at startup
          _annotate_min-advertisement-interval: "Reduced from platform default 200s"
          max-advertisement-interval: 5
  
  
  
    - path: /network-instance[name=default]
      value:
       type: default
       interface:
       - name: system0.0
  
    - path: /network-instance[name=default]
      value:
       type: default
       interface:
       - name: ethernet-1/1.0
    - path: /network-instance[name=default]
      value:
       type: default
       interface:
       - name: ethernet-1/2.0
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:1::2/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:1::2/64 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    # lan prefix: 172.16.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 172.16.0.0/16 2>/dev/null
    set -e
    ip route add 172.16.0.0/16 via 172.16.0.1
    # loopback prefix: 10.0.0.0/24 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.0.0.0/24 2>/dev/null
    set -e
    ip route add 10.0.0.0/24 via 172.16.0.1
    # mgmt prefix: 192.168.17.0/24 local subnet: 172.16.0.0/24
    # p2p prefix: 10.1.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.1.0.0/16 2>/dev/null
    set -e
    ip route add 10.1.0.0/16 via 172.16.0.1
    # router_id prefix: 10.0.0.0/24 local subnet: 172.16.0.0/24
    # vrf_loopback prefix: 10.2.0.0/24 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.2.0.0/24 2>/dev/null
    set -e
    ip route add 10.2.0.0/24 via 172.16.0.1
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:1:1::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:1:1::3/64 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    # lan prefix: 172.16.0.0/16 local subnet: 172.16.1.0/24
    set +e
    ip route del 172.16.0.0/16 2>/dev/null
    set -e
    ip route add 172.16.0.0/16 via 172.16.1.1
    # loopback prefix: 10.0.0.0/24 local subnet: 172.16.1.0/24
    set +e
    ip route del 10.0.0.0/24 2>/dev/null
    set -e
    ip route add 10.0.0.0/24 via 172.16.1.1
    # mgmt prefix: 192.168.17.0/24 local subnet: 172.16.1.0/24
    # p2p prefix: 10.1.0.0/16 local subnet: 172.16.1.0/24
    set +e
    ip route del 10.1.0.0/16 2>/dev/null
    set -e
    ip route add 10.1.0.0/16 via 172.16.1.1
    # router_id prefix: 10.0.0.0/24 local subnet: 172.16.1.0/24
    # vrf_loopback prefix: 10.2.0.0/24 local subnet: 172.16.1.0/24
    set +e
    ip route del 10.2.0.0/24 2>/dev/null
    set -e
    ip route add 10.2.0.0/24 via 172.16.1.1
    #
    # Print the final routing table
    ip route

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [r]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/linux/initial-clab.yml for h1, h2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for r

TASK [set_fact] ****************************************************************
ok: [h1]
ok: [h2]

TASK [Create initial container setup from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Initial container configuration via /tmp/config-nczJRjxS-h1.sh] **********
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [file] ********************************************************************
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Generate JSON-RPC YAML configuration] ************************************
ok: [r]

TASK [Update SRL initial node configuration (template=/home/pipi/net101/tools/netsim/ansible/templates/initial/srlinux.j2)] ***
changed: [r]

TASK [debug] *******************************************************************
skipping: [r]

PLAY [Deploy module-specific configurations] ***********************************
skipping: no hosts matched

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h2                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
r                          : ok=10   changed=1    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0   



This scenario tests basic interface, IPv4, and IPv6 configuration, including generation of IPv6 Router Advertisements
