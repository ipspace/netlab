/home/pipi/.local/lib/python3.10/site-packages/paramiko/pkey.py:100: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "cipher": algorithms.TripleDES,
/home/pipi/.local/lib/python3.10/site-packages/paramiko/transport.py:259: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "class": algorithms.TripleDES,
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Wait for device to become ready] *****************************************
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/srsim.yml for dut

TASK [Common SR-OS checks] *****************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/sros.yml for dut

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Update SR-SIM hardware configuration] ************************************
changed: [dut]

TASK [Get port 1/1/c1 status] **************************************************
FAILED - RETRYING: [dut]: Get port 1/1/c1 status (10 retries left).
FAILED - RETRYING: [dut]: Get port 1/1/c1 status (9 retries left).
ok: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, r3, r4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [r1]
ok: [r3]
ok: [r2]
ok: [r4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, r3, r4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r1
    !
    log file /tmp/logging
  
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description r1 -> dut
     ip address 10.1.0.2/30
     ipv6 address 2001:db8:3::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    !
    exit 0
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    log file /tmp/logging
  
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description r2 -> dut
     ip address 10.1.0.6/30
     ipv6 address 2001:db8:3:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    !
    exit 0
ok: [r4] => 
  msg: |-
    initial configuration for r4
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r4
    !
    log file /tmp/logging
  
    !
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:cafe:2000::5/128
    !
    interface eth1
     no shutdown
     description r4 -> dut
     ! no ip address
     ipv6 address 2001:db8:13:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    !
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
  
  
  
  
    updates:
    - path: configure/card[slot-number=1]
      val:
        card-type: iom-1
        mda:
        - mda-slot: 1
          mda-type: me12-100gb-qsfp28
        - mda-slot: 2
          mda-type: me12-100gb-qsfp28
        slot-number: 1
  
    - path: configure/router[router-name=Base]
      val:
       ecmp: 64
  
  
  
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=system]
  
      val:
       admin-state: enable
       description: "System interface"
       ipv4:
        primary:
         address: "10.0.0.1"
         prefix-length: 32
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:1:1::1"
          prefix-length: 128
  
  
  
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=red]
      val:
       customer: "1"
       admin-state: enable
       service-id: 100
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=red]/interface[interface-name=eth-1/1/c1]
  
      val:
       admin-state: enable
       description: "dut ~ r1 ()"
       ip-mtu: 1500
       sap:
       - sap-id: "1/1/c1/1"
       ipv4:
        primary:
         address: "10.1.0.1"
         prefix-length: 30
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:3::1"
          prefix-length: 64
  
  
    - path: configure/service/vprn[service-name=red]
      val:
       customer: "1"
       admin-state: enable
       service-id: 100
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=red]
      val:
        ipv6:
          router-advertisement:
            interface:
            - ip-int-name: eth-1/1/c1
              admin-state: enable
              min-advertisement-interval: 3
              max-advertisement-interval: 5
  
  
  
  
    - path: configure/port[port-id=1/1/c2]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c2/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=red]
      val:
       customer: "1"
       admin-state: enable
       service-id: 100
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=red]/interface[interface-name=eth-1/1/c2]
  
      val:
       admin-state: enable
       description: "dut ~ r2 ()"
       ip-mtu: 1500
       sap:
       - sap-id: "1/1/c2/1"
       ipv4:
        primary:
         address: "10.1.0.5"
         prefix-length: 30
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:3:1::1"
          prefix-length: 64
  
  
    - path: configure/service/vprn[service-name=red]
      val:
       customer: "1"
       admin-state: enable
       service-id: 100
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=red]
      val:
        ipv6:
          router-advertisement:
            interface:
            - ip-int-name: eth-1/1/c2
              admin-state: enable
              min-advertisement-interval: 3
              max-advertisement-interval: 5
  
  
  
  
    - path: configure/port[port-id=1/1/c3]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c3/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=blue]
      val:
       customer: "1"
       admin-state: enable
       service-id: 101
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=blue]/interface[interface-name=eth-1/1/c3]
  
      val:
       admin-state: enable
       description: "dut ~ r3 ()"
       ip-mtu: 1500
       sap:
       - sap-id: "1/1/c3/1"
       ipv6:
        address:
        - ipv6-address: "2001:db8:13::1"
          prefix-length: 64
  
  
    - path: configure/service/vprn[service-name=blue]
      val:
       customer: "1"
       admin-state: enable
       service-id: 101
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=blue]
      val:
        ipv6:
          router-advertisement:
            interface:
            - ip-int-name: eth-1/1/c3
              admin-state: enable
              min-advertisement-interval: 3
              max-advertisement-interval: 5
  
  
  
  
    - path: configure/port[port-id=1/1/c4]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c4/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=blue]
      val:
       customer: "1"
       admin-state: enable
       service-id: 101
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=blue]/interface[interface-name=eth-1/1/c4]
  
      val:
       admin-state: enable
       description: "dut ~ r4 ()"
       ip-mtu: 1500
       sap:
       - sap-id: "1/1/c4/1"
       ipv6:
        address:
        - ipv6-address: "2001:db8:13:1::1"
          prefix-length: 64
  
  
    - path: configure/service/vprn[service-name=blue]
      val:
       customer: "1"
       admin-state: enable
       service-id: 101
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=blue]
      val:
        ipv6:
          router-advertisement:
            interface:
            - ip-int-name: eth-1/1/c4
              admin-state: enable
              min-advertisement-interval: 3
              max-advertisement-interval: 5
  
  
  
  
  
  
    - path: configure/service/vprn[service-name=blue]
      val:
       customer: "1"
       admin-state: enable
       service-id: 101
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=blue]/interface[interface-name=loopback.1]
  
      val:
       admin-state: enable
       description: "Loopback"
       loopback: True
       ipv6:
        address:
        - ipv6-address: "2001:db8:cafe:2001::1"
          prefix-length: 64
  
  
  
  
  
  
  
    - path: configure/service/vprn[service-name=red]
      val:
       customer: "1"
       admin-state: enable
       service-id: 100
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=red]/interface[interface-name=loopback.2]
  
      val:
       admin-state: enable
       description: "Loopback"
       loopback: True
       ipv4:
        primary:
         address: "10.2.0.1"
         prefix-length: 32
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:cafe::1"
          prefix-length: 64
ok: [r3] => 
  msg: |-
    initial configuration for r3
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r3
    !
    log file /tmp/logging
  
    !
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:cafe:2000::4/128
    !
    interface eth1
     no shutdown
     description r3 -> dut
     ! no ip address
     ipv6 address 2001:db8:13::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    !
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for r1, r2, r3, r4

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update initial node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for r1, r2, r3, r4

TASK [template] ****************************************************************
changed: [r4]
changed: [r2]
changed: [r3]
changed: [r1]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [r1]
changed: [r2]
changed: [r4]
changed: [r3]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, r3, r4 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, r3, r4 => (item=vrf)

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Find configuration template for ospf] ************************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [dut]
ok: [r1]
ok: [r3]
ok: [r2]
ok: [r4]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r1] => 
  msg: |-
    ospf configuration for r1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.2
    !
    interface eth1
    ! r1 -> dut
     ip ospf area 0.0.0.2
     ip ospf network point-to-point
    !
  
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.2
    !
    interface eth1
    ! r1 -> dut
     ipv6 ospf6 area 0.0.0.2
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.2
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [r2] => 
  msg: |-
    ospf configuration for r2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.2
    !
    interface eth1
    ! r2 -> dut
     ip ospf area 0.0.0.2
     ip ospf network point-to-point
    !
  
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.2
    !
    interface eth1
    ! r2 -> dut
     ipv6 ospf6 area 0.0.0.2
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.3
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [r4] => 
  msg: |-
    ospf configuration for r4
    =========================================
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.4
    !
    interface eth1
    ! r4 -> dut
     ipv6 ospf6 area 0.0.0.4
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.5
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [r3] => 
  msg: |-
    ospf configuration for r3
    =========================================
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.3
    !
    interface eth1
    ! r3 -> dut
     ipv6 ospf6 area 0.0.0.3
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.4
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
  
  
  
  
    updates:

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for r1, r2, r3, r4

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update ospf node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/ospf/sros.j2] ***
skipping: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [template] ****************************************************************
changed: [r1]
changed: [r2]
changed: [r4]
changed: [r3]

TASK [set_fact] ****************************************************************
ok: [r2]
ok: [r1]
ok: [r3]
ok: [r4]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [r3]
changed: [r2]
changed: [r1]
changed: [r4]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Find configuration template for vrf] *************************************
skipping: [r1]
skipping: [r2]
ok: [dut]
skipping: [r3]
skipping: [r4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
    updates:
    - path: configure/service/vprn[service-name=blue]
      val:
        service-id: 101
        customer: "1"
        autonomous-system: 65000
        router-id: 10.0.0.1
        ecmp: 64
        admin-state: enable
  
    - path: configure/policy-options/policy-statement[name=ospf_blue_export]
      val:
        default-action:
          action-type: reject
        entry:
        - entry-id: 100
          from:
            protocol:
              name: [ direct ]
          action:
            action-type: accept
  
  
  
    - path: configure/service/vprn[service-name=blue]
      val:
       customer: "1"
       admin-state: enable
       service-id: 101
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=blue]/ospf3[ospf-instance=0]
  
      val:
        export-policy: [ ospf_blue_export ]
        admin-state: enable
        router-id: 10.0.0.1
        area:
        - area-id: "0.0.0.0"
          interface:
          - interface-name: "loopback.1"
        - area-id: "0.0.0.3"
          interface:
          - interface-name: "eth-1/1/c3"
            interface-type: "point-to-point"
        - area-id: "0.0.0.4"
          interface:
          - interface-name: "eth-1/1/c4"
            interface-type: "point-to-point"
  
    - path: configure/service/vprn[service-name=red]
      val:
        service-id: 100
        customer: "1"
        autonomous-system: 65000
        router-id: 10.0.0.1
        ecmp: 64
        admin-state: enable
  
    - path: configure/policy-options/policy-statement[name=ospf_red_export]
      val:
        default-action:
          action-type: reject
        entry:
        - entry-id: 100
          from:
            protocol:
              name: [ direct ]
          action:
            action-type: accept
  
  
  
    - path: configure/service/vprn[service-name=red]
      val:
       customer: "1"
       admin-state: enable
       service-id: 100
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=red]/ospf[ospf-instance=0]
  
      val:
        export-policy: [ ospf_red_export ]
        admin-state: enable
        router-id: 10.0.0.1
        area:
        - area-id: "0.0.0.2"
          interface:
          - interface-name: "eth-1/1/c1"
            interface-type: "point-to-point"
          - interface-name: "eth-1/1/c2"
            interface-type: "point-to-point"
          - interface-name: "loopback.2"
  
    - path: configure/policy-options/policy-statement[name=ospf_red_export]
      val:
        default-action:
          action-type: reject
        entry:
        - entry-id: 100
          from:
            protocol:
              name: [ direct ]
          action:
            action-type: accept
  
  
  
    - path: configure/service/vprn[service-name=red]
      val:
       customer: "1"
       admin-state: enable
       service-id: 100
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=red]/ospf3[ospf-instance=0]
  
      val:
        export-policy: [ ospf_red_export ]
        admin-state: enable
        router-id: 10.0.0.1
        area:
        - area-id: "0.0.0.2"
          interface:
          - interface-name: "eth-1/1/c1"
            interface-type: "point-to-point"
          - interface-name: "eth-1/1/c2"
            interface-type: "point-to-point"
          - interface-name: "loopback.2"

TASK [Deploy vrf configuration] ************************************************
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update vrf node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/vrf/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=36   changed=3    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   
r1                         : ok=29   changed=5    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
r2                         : ok=28   changed=4    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
r3                         : ok=28   changed=4    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
r4                         : ok=28   changed=4    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   



The device under test has two VRFs with two interfaces in each VRF.
Routers are attached to those interfaces and run OSPF with device under test.
Assuming the multi-vrf test case succeeded, this one adds OSPF routing with
CE routers.

* r1 and r2 should be able to ping each other
* r3 and r4 should be able to ping each other
* r1 should not be able to reach r3

