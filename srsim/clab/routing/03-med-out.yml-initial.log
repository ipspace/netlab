/home/pipi/.local/lib/python3.10/site-packages/paramiko/pkey.py:100: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "cipher": algorithms.TripleDES,
/home/pipi/.local/lib/python3.10/site-packages/paramiko/transport.py:259: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "class": algorithms.TripleDES,
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Wait for device to become ready] *****************************************
skipping: [p_global]
skipping: [p_vrf]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/srsim.yml for dut

TASK [Common SR-OS checks] *****************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/sros.yml for dut

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Update SR-SIM hardware configuration] ************************************
changed: [dut]

TASK [Get port 1/1/c1 status] **************************************************
FAILED - RETRYING: [dut]: Get port 1/1/c1 status (10 retries left).
FAILED - RETRYING: [dut]: Get port 1/1/c1 status (9 retries left).
ok: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p_global] => 
  msg: |-
    initial configuration for p_global
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p_global
    !
    log file /tmp/logging
  
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description p_global -> dut [external]
     ip address 10.1.0.2/30
     ipv6 address 2001:db8:3::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    !
    exit 0
ok: [p_vrf] => 
  msg: |-
    initial configuration for p_vrf
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p_vrf
    !
    log file /tmp/logging
  
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description p_vrf -> dut [external]
     ip address 10.1.0.6/30
     ipv6 address 2001:db8:3:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    !
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
  
  
  
  
    updates:
    - path: configure/card[slot-number=1]
      val:
        card-type: iom-1
        mda:
        - mda-slot: 1
          mda-type: me12-100gb-qsfp28
        - mda-slot: 2
          mda-type: me12-100gb-qsfp28
        slot-number: 1
  
    - path: configure/router[router-name=Base]
      val:
       ecmp: 64
  
  
  
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=system]
  
      val:
       admin-state: enable
       description: "System interface"
       ipv4:
        primary:
         address: "10.0.0.42"
         prefix-length: 32
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:42:1::1"
          prefix-length: 128
  
  
  
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=eth-1/1/c1]
  
      val:
       admin-state: enable
       description: "dut ~ p_global (external)"
       ip-mtu: 1500
       port: "1/1/c1/1"
       ipv4:
        primary:
         address: "10.1.0.1"
         prefix-length: 30
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:3::1"
          prefix-length: 64
  
  
  
    - path: configure/router[router-name=Base]
      val:
        ipv6:
          router-advertisement:
            interface:
            - ip-int-name: eth-1/1/c1
              admin-state: enable
              min-advertisement-interval: 3
              max-advertisement-interval: 5
  
  
  
  
    - path: configure/port[port-id=1/1/c2]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c2/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=customer]
      val:
       customer: "1"
       admin-state: enable
       service-id: 100
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=customer]/interface[interface-name=eth-1/1/c2]
  
      val:
       admin-state: enable
       description: "dut ~ p_vrf (external)"
       ip-mtu: 1500
       sap:
       - sap-id: "1/1/c2/1"
       ipv4:
        primary:
         address: "10.1.0.5"
         prefix-length: 30
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:3:1::1"
          prefix-length: 64
  
  
    - path: configure/service/vprn[service-name=customer]
      val:
       customer: "1"
       admin-state: enable
       service-id: 100
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=customer]
      val:
        ipv6:
          router-advertisement:
            interface:
            - ip-int-name: eth-1/1/c2
              admin-state: enable
              min-advertisement-interval: 3
              max-advertisement-interval: 5
  
  
  
  
  
  
    - path: configure/service/vprn[service-name=customer]
      val:
       customer: "1"
       admin-state: enable
       service-id: 100
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=customer]/interface[interface-name=loopback.1]
  
      val:
       admin-state: enable
       description: "Loopback"
       loopback: True
       ipv4:
        primary:
         address: "10.2.0.1"
         prefix-length: 32
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:4::1"
          prefix-length: 64

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for p_global, p_vrf

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update initial node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [p_global -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [p_global]
skipping: [p_vrf]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for p_global, p_vrf

TASK [template] ****************************************************************
changed: [p_vrf]
changed: [p_global]

TASK [set_fact] ****************************************************************
ok: [p_global]
ok: [p_vrf]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [p_global]
changed: [p_vrf]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [p_global]
skipping: [p_vrf]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf => (item=vrf)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Find configuration template for routing] *********************************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut] => 
  msg: |-
    routing configuration for dut
    =========================================
    updates:
    - path: /configure/policy-options/policy-statement[name=med_42]
      val:
        entry:
        - entry-id: 10
          action:
            action-type: accept
            bgp-med:
              set: "42"
    - path: /configure/policy-options/policy-statement[name=med_17]
      val:
        entry:
        - entry-id: 10
          action:
            action-type: accept
            bgp-med:
              set: "17"

TASK [Deploy routing configuration] ********************************************
skipping: [p_global]
skipping: [p_vrf]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update routing node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/routing/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Find configuration template for bgp] *************************************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
  
    updates:
  
    - path: configure/policy-options/policy-statement[name=accept_all]
      val:
        default-action:
          action-type: accept
  
    - path: configure/policy-options/policy-statement[name=next-hop-self-ebgp-routes-only]
      val:
        entry:
        - entry-id: 10
          from:
            path-type: ebgp
          action:
            action-type: accept
            next-hop: self
        default-action:
          action-type: next-policy
  
  
    - path: configure/policy-options/prefix-list[name=bgp_default_advertise]
      val:
        prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=bgp_default_export]
      val:
        default-action:
          action-type: reject
        entry:
        - entry-id: 10
          from:
            prefix-list: [ "bgp_default_advertise" ]
          action:
            action-type: accept
        - entry-id: 20
          from:
            protocol:
              name: [ bgp ]
          action:
            action-type: accept
  
  
    - path: configure/policy-options/prefix-list[name=bgp_default_advertise]
      val:
        prefix:
        - ip-prefix: 10.0.0.42/32
          type: exact
  
  
  
    - path: configure/policy-options/prefix-list[name=bgp_default_advertise]
      val:
        prefix:
        - ip-prefix: 2001:db8:42:1::1/128
          type: exact
  
  
  
  
    - path: configure/router[router-name=Base]
      val:
        router-id: "10.0.0.42"
        autonomous-system: 65000
        bgp:
          ebgp-default-reject-policy:
            import: False
            export: False
          multipath:
            ibgp: 64
            ebgp: 64
          min-route-advertisement: 1 # Be aggressive about sending updates
          connect-retry: 5           # Retry frequently, suitable in DC context
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ebgp]
      val:
        admin-state: enable
        family:
          ipv4: True
          ipv6: True
  
        import:
          policy: ["accept_all"]
        export:
          policy:
          - bgp_default_export
        send-communities:
          extended: False  # True value not allowed, on by default
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
        neighbor:
        - ip-address: "10.1.0.2"
          description: "p_global"
          peer-as: 65100
          group: "ebgp"
          admin-state: enable
          family:
            ipv4: True
            ipv6: False
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ebgp]
      val:
        admin-state: enable
        family:
          ipv4: True
          ipv6: True
  
        import:
          policy: ["accept_all"]
        export:
          policy:
          - bgp_default_export
        send-communities:
          extended: False  # True value not allowed, on by default
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
        neighbor:
        - ip-address: "2001:db8:3::2"
          description: "p_global"
          peer-as: 65100
          group: "ebgp"
          admin-state: enable
          family:
            ipv4: False
            ipv6: True
ok: [p_global] => 
  msg: |-
    bgp configuration for p_global
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor 10.1.0.1 remote-as 65000
      neighbor 10.1.0.1 description dut
    !
      neighbor 2001:db8:3::1 remote-as 65000
      neighbor 2001:db8:3::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.2/32
    !
    !
    !
      neighbor 10.1.0.1 activate
      no neighbor 10.1.0.1 send-community all
      neighbor 10.1.0.1 send-community standard
      neighbor 10.1.0.1 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:2::/64
    !
    !
    !
      neighbor 2001:db8:3::1 activate
      no neighbor 2001:db8:3::1 send-community all
      neighbor 2001:db8:3::1 send-community standard
      neighbor 2001:db8:3::1 send-community large
    !
    !
    !
    do write
ok: [p_vrf] => 
  msg: |-
    bgp configuration for p_vrf
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 10.1.0.5 remote-as 65000
      neighbor 10.1.0.5 description dut
    !
      neighbor 2001:db8:3:1::1 remote-as 65000
      neighbor 2001:db8:3:1::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.3/32
    !
    !
    !
      neighbor 10.1.0.5 activate
      no neighbor 10.1.0.5 send-community all
      neighbor 10.1.0.5 send-community standard
      neighbor 10.1.0.5 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:3::/64
    !
    !
    !
      neighbor 2001:db8:3:1::1 activate
      no neighbor 2001:db8:3:1::1 send-community all
      neighbor 2001:db8:3:1::1 send-community standard
      neighbor 2001:db8:3:1::1 send-community large
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for p_global, p_vrf

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update bgp node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/bgp/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [template] ****************************************************************
changed: [p_global]
changed: [p_vrf]

TASK [set_fact] ****************************************************************
ok: [p_global]
ok: [p_vrf]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [p_global]
skipping: [p_vrf]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [p_global]
changed: [p_vrf]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [dut]
ok: [p_global]
ok: [p_vrf]

TASK [Find configuration template for vrf] *************************************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
    updates:
    - path: configure/service/vprn[service-name=customer]
      val:
        service-id: 100
        customer: "1"
        autonomous-system: 65000
        router-id: 10.0.0.42
        ecmp: 64
        admin-state: enable
  
    - path: configure/policy-options/prefix-list[name=bgp_customer_advertise]
      val:
        prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=bgp_customer_export]
      val:
        default-action:
          action-type: reject
        entry:
        - entry-id: 10
          from:
            prefix-list: [ "bgp_customer_advertise" ]
          action:
            action-type: accept
        - entry-id: 20
          from:
            protocol:
              name: [ bgp ]
          action:
            action-type: accept
        - entry-id: 100
          from:
            protocol:
              name: [ direct ]
          action:
            action-type: accept
  
  
  
    - path: configure/policy-options/prefix-list[name=bgp_customer_advertise]
      val:
        prefix:
        - ip-prefix: 10.2.0.1/32
          type: exact
  
  
  
    - path: configure/policy-options/prefix-list[name=bgp_customer_advertise]
      val:
        prefix:
        - ip-prefix: 2001:db8:4::/64
          type: exact
  
  
  
    - path: configure/service/vprn[service-name=customer]
      val:
        router-id: "10.0.0.42"
        autonomous-system: 65000
        bgp:
          ebgp-default-reject-policy:
            import: False
            export: False
          multipath:
            ibgp: 64
            ebgp: 64
          min-route-advertisement: 1 # Be aggressive about sending updates
          connect-retry: 5           # Retry frequently, suitable in DC context
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group
  
  
  
  
    - path: configure/service/vprn[service-name=customer]/bgp/group[group-name=ebgp]
      val:
        admin-state: enable
        family:
          ipv4: True
          ipv6: True
  
        import:
          policy: ["accept_all"]
        export:
          policy:
          - bgp_customer_export
        send-communities:
          extended: False  # True value not allowed, on by default
  
  
    - path: configure/service/vprn[service-name=customer]/bgp
      val:
        neighbor:
        - ip-address: "10.1.0.6"
          description: "p_vrf"
          peer-as: 65101
          group: "ebgp"
          admin-state: enable
          family:
            ipv4: True
            ipv6: False
  
  
    - path: configure/service/vprn[service-name=customer]/bgp/group[group-name=ebgp]
      val:
        admin-state: enable
        family:
          ipv4: True
          ipv6: True
  
        import:
          policy: ["accept_all"]
        export:
          policy:
          - bgp_customer_export
        send-communities:
          extended: False  # True value not allowed, on by default
  
  
    - path: configure/service/vprn[service-name=customer]/bgp
      val:
        neighbor:
        - ip-address: "2001:db8:3:1::2"
          description: "p_vrf"
          peer-as: 65101
          group: "ebgp"
          admin-state: enable
          family:
            ipv4: False
            ipv6: True

TASK [Deploy vrf configuration] ************************************************
skipping: [p_global]
skipping: [p_vrf]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update vrf node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/vrf/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-custom-config.yml for dut => (item=bgp.policy)

TASK [Find configuration template] *********************************************
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Check is the configuration template is a file] ***************************
ok: [dut -> localhost]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Process template /home/pipi/netlab_gh/netsim/extra/bgp.policy/sros.j2 for dut] ***
skipping: [dut]

TASK [Find custom configuration deployment script] *****************************
ok: [dut]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update bgp.policy node configuration from gNMI template /home/pipi/netlab_gh/netsim/extra/bgp.policy/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

PLAY RECAP *********************************************************************
dut                        : ok=52   changed=6    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
p_global                   : ok=31   changed=5    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
p_vrf                      : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   



Use this topology to test BGP MED on IPv4 and IPv6 prefixes. DUT
has to set MED on outgoing EBGP updates.

