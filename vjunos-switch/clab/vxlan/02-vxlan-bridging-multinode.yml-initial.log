[WARNING]: Invalid characters were found in group names but not replaced, use
-vvvv to see details
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h6]
ok: [h5]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vjunos-switch-clab.yml for s1, s2, s3

TASK [Wait for SSH server] *****************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vm-clab-ssh-check.yml for s1, s2, s3

TASK [Check if 'sshpass' is installed] *****************************************
ok: [s1 -> localhost]

TASK [Check for 'timeout' command] *********************************************
ok: [s1 -> localhost]
ok: [s2 -> localhost]
ok: [s3 -> localhost]

TASK [Execute local ssh command to check vjunos-switch readiness] **************
FAILED - RETRYING: [s2 -> localhost]: Execute local ssh command to check vjunos-switch readiness (40 retries left).
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-switch readiness (40 retries left).
FAILED - RETRYING: [s3 -> localhost]: Execute local ssh command to check vjunos-switch readiness (40 retries left).
FAILED - RETRYING: [s3 -> localhost]: Execute local ssh command to check vjunos-switch readiness (39 retries left).
FAILED - RETRYING: [s2 -> localhost]: Execute local ssh command to check vjunos-switch readiness (39 retries left).
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-switch readiness (39 retries left).
FAILED - RETRYING: [s3 -> localhost]: Execute local ssh command to check vjunos-switch readiness (38 retries left).
FAILED - RETRYING: [s2 -> localhost]: Execute local ssh command to check vjunos-switch readiness (38 retries left).
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-switch readiness (38 retries left).
FAILED - RETRYING: [s3 -> localhost]: Execute local ssh command to check vjunos-switch readiness (37 retries left).
FAILED - RETRYING: [s2 -> localhost]: Execute local ssh command to check vjunos-switch readiness (37 retries left).
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-switch readiness (37 retries left).
FAILED - RETRYING: [s3 -> localhost]: Execute local ssh command to check vjunos-switch readiness (36 retries left).
FAILED - RETRYING: [s2 -> localhost]: Execute local ssh command to check vjunos-switch readiness (36 retries left).
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-switch readiness (36 retries left).
FAILED - RETRYING: [s3 -> localhost]: Execute local ssh command to check vjunos-switch readiness (35 retries left).
FAILED - RETRYING: [s2 -> localhost]: Execute local ssh command to check vjunos-switch readiness (35 retries left).
ok: [s1 -> localhost]
ok: [s3 -> localhost]
ok: [s2 -> localhost]

TASK [Confirm s1 SSH server works] *********************************************
ok: [s1] => 
  msg: Node s1 is ready.
ok: [s2] => 
  msg: Node s2 is ready.
ok: [s3] => 
  msg: Node s3 is ready.

TASK [Wait for ge-0/0/0 interface] *********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vjunos-switch.yml for s1, s2, s3

TASK [Wait for ge-0/0/0 to appear] *********************************************
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, h6, s1, s2, s3

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h5]
ok: [h4]
ok: [h6]
ok: [s3]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [h6]
ok: [h5]
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, h6, s1, s2, s3

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h5]
ok: [h4]
ok: [h6]
ok: [s3]
ok: [s2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]
ok: [s2]
ok: [s1]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h5] => 
  msg: |-
    initial configuration for h5
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.5/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h6] => 
  msg: |-
    initial configuration for h6
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.6/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    system {
      host-name s1;
      static-host-mapping {
        h1 inet 172.16.0.1;
        h2 inet 172.16.0.2;
        h3 inet 172.16.0.3;
        h4 inet 172.16.1.4;
        h5 inet 172.16.1.5;
        h6 inet 172.16.1.6;
        s2 inet 10.0.0.8;
        s3 inet 10.0.0.9;
      }
    }
  
  
    interfaces {
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    }
    interfaces {
      ge-0/0/0 {
        mtu 1614;
      }
      ge-0/0/1 {
        mtu 1614;
      }
      ge-0/0/2 {
        mtu 1514;
      }
      ge-0/0/3 {
        mtu 1514;
      }
  
      lo0.0 {
  
          family inet {
            address 10.0.0.7/32;
          }
  
      }
      ge-0/0/0.0 {
        description "s1 -> s2";
  
          family inet {
            address 10.1.0.1/30;
          }
  
      }
      ge-0/0/1.0 {
        description "s1 -> s3";
  
          family inet {
            address 10.1.0.9/30;
          }
  
      }
      ge-0/0/2.0 {
        description "[Access VLAN red] s1 -> h1";
  
  
      }
      ge-0/0/3.0 {
        description "[Access VLAN blue] s1 -> h4";
  
  
      }
      irb.1000 {
        description "VLAN red (1000) -> [h1,h2,s2,h3,s3]";
  
  
      }
      irb.1001 {
        description "VLAN blue (1001) -> [h4,h5,s2,h6,s3]";
  
  
      }
    }
    protocols {
      lldp {
        interface fxp0 {
          disable;
        }
        interface all;
      }
    }
ok: [s3] => 
  msg: |-
    initial configuration for s3
    =========================================
    system {
      host-name s3;
      static-host-mapping {
        h1 inet 172.16.0.1;
        h2 inet 172.16.0.2;
        h3 inet 172.16.0.3;
        h4 inet 172.16.1.4;
        h5 inet 172.16.1.5;
        h6 inet 172.16.1.6;
        s1 inet 10.0.0.7;
        s2 inet 10.0.0.8;
      }
    }
  
  
    interfaces {
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    }
    interfaces {
      ge-0/0/0 {
        mtu 1614;
      }
      ge-0/0/1 {
        mtu 1614;
      }
      ge-0/0/2 {
        mtu 1514;
      }
      ge-0/0/3 {
        mtu 1514;
      }
  
      lo0.0 {
  
          family inet {
            address 10.0.0.9/32;
          }
  
      }
      ge-0/0/0.0 {
        description "s3 -> s2";
  
          family inet {
            address 10.1.0.6/30;
          }
  
      }
      ge-0/0/1.0 {
        description "s3 -> s1";
  
          family inet {
            address 10.1.0.10/30;
          }
  
      }
      ge-0/0/2.0 {
        description "[Access VLAN red] s3 -> h3";
  
  
      }
      ge-0/0/3.0 {
        description "[Access VLAN blue] s3 -> h6";
  
  
      }
      irb.1000 {
        description "VLAN red (1000) -> [h1,s1,h2,s2,h3]";
  
  
      }
      irb.1001 {
        description "VLAN blue (1001) -> [h4,s1,h5,s2,h6]";
  
  
      }
    }
    protocols {
      lldp {
        interface fxp0 {
          disable;
        }
        interface all;
      }
    }
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    system {
      host-name s2;
      static-host-mapping {
        h1 inet 172.16.0.1;
        h2 inet 172.16.0.2;
        h3 inet 172.16.0.3;
        h4 inet 172.16.1.4;
        h5 inet 172.16.1.5;
        h6 inet 172.16.1.6;
        s1 inet 10.0.0.7;
        s3 inet 10.0.0.9;
      }
    }
  
  
    interfaces {
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    }
    interfaces {
      ge-0/0/0 {
        mtu 1614;
      }
      ge-0/0/1 {
        mtu 1614;
      }
      ge-0/0/2 {
        mtu 1514;
      }
      ge-0/0/3 {
        mtu 1514;
      }
  
      lo0.0 {
  
          family inet {
            address 10.0.0.8/32;
          }
  
      }
      ge-0/0/0.0 {
        description "s2 -> s1";
  
          family inet {
            address 10.1.0.2/30;
          }
  
      }
      ge-0/0/1.0 {
        description "s2 -> s3";
  
          family inet {
            address 10.1.0.5/30;
          }
  
      }
      ge-0/0/2.0 {
        description "[Access VLAN red] s2 -> h2";
  
  
      }
      ge-0/0/3.0 {
        description "[Access VLAN blue] s2 -> h5";
  
  
      }
      irb.1000 {
        description "VLAN red (1000) -> [h1,s1,h2,h3,s3]";
  
  
      }
      irb.1001 {
        description "VLAN blue (1001) -> [h4,s1,h5,h6,s3]";
  
  
      }
    }
    protocols {
      lldp {
        interface fxp0 {
          disable;
        }
        interface all;
      }
    }

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4, h5, h6
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for s1, s2, s3

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Create a temporary file for the rendered script] *************************
changed: [h2 -> localhost]
changed: [h6 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]
changed: [h5 -> localhost]
changed: [h1 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h6 -> localhost]
changed: [h5 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h6 -> localhost]
changed: [h5 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-r84yvclh.sh] ***********************
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h5 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h6 -> localhost]

TASK [junos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/junos.j2] ***
[WARNING]: mgd: statement has no contents; ignored
changed: [s2]
changed: [s1]
changed: [s3]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=vxlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s2]
ok: [s1]
ok: [s3]

TASK [Find configuration template for vlan] ************************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
  
    vlans {
      blue {
        vlan-id 1001;
  
  
      }
      red {
        vlan-id 1000;
  
  
      }
    }
  
    interfaces {
  
  
      ge-0/0/2.0 {
        family ethernet-switching {
  
          vlan {
            members red;
          }
  
        }
      }
  
  
  
      ge-0/0/3.0 {
        family ethernet-switching {
  
          vlan {
            members blue;
          }
  
        }
      }
  
  
    }
ok: [s3] => 
  msg: |-
    vlan configuration for s3
    =========================================
  
    vlans {
      blue {
        vlan-id 1001;
  
  
      }
      red {
        vlan-id 1000;
  
  
      }
    }
  
    interfaces {
  
  
      ge-0/0/2.0 {
        family ethernet-switching {
  
          vlan {
            members red;
          }
  
        }
      }
  
  
  
      ge-0/0/3.0 {
        family ethernet-switching {
  
          vlan {
            members blue;
          }
  
        }
      }
  
  
    }
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
  
    vlans {
      blue {
        vlan-id 1001;
  
  
      }
      red {
        vlan-id 1000;
  
  
      }
    }
  
    interfaces {
  
  
      ge-0/0/2.0 {
        family ethernet-switching {
  
          vlan {
            members red;
          }
  
        }
      }
  
  
  
      ge-0/0/3.0 {
        family ethernet-switching {
  
          vlan {
            members blue;
          }
  
        }
      }
  
  
    }

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for s1, s2, s3

TASK [junos_config: deploying vlan from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/vjunos-switch.j2] ***
changed: [s2]
changed: [s3]
changed: [s1]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [s2]
ok: [s1]
ok: [s3]

TASK [Find configuration template for routing] *********************************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Deploy routing configuration] ********************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for ospf] ************************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    routing-options {
      router-id 10.0.0.8
    }
    protocols {
      delete: ospf;
    }
  
    protocols {
      ospf {
        area 0.0.0.0 {
          interface lo0.0 {
          }
        }
        area 0.0.0.0 {
          interface ge-0/0/0.0 {
            interface-type p2p;
          }
        }
        area 0.0.0.0 {
          interface ge-0/0/1.0 {
            interface-type p2p;
          }
        }
      }
    }
ok: [s3] => 
  msg: |-
    ospf configuration for s3
    =========================================
    routing-options {
      router-id 10.0.0.9
    }
    protocols {
      delete: ospf;
    }
  
    protocols {
      ospf {
        area 0.0.0.0 {
          interface lo0.0 {
          }
        }
        area 0.0.0.0 {
          interface ge-0/0/0.0 {
            interface-type p2p;
          }
        }
        area 0.0.0.0 {
          interface ge-0/0/1.0 {
            interface-type p2p;
          }
        }
      }
    }
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    routing-options {
      router-id 10.0.0.7
    }
    protocols {
      delete: ospf;
    }
  
    protocols {
      ospf {
        area 0.0.0.0 {
          interface lo0.0 {
          }
        }
        area 0.0.0.0 {
          interface ge-0/0/0.0 {
            interface-type p2p;
          }
        }
        area 0.0.0.0 {
          interface ge-0/0/1.0 {
            interface-type p2p;
          }
        }
      }
    }

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for s1, s2, s3

TASK [junos_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/junos.j2] ***
[WARNING]:  statement not found
changed: [s1]
changed: [s2]
changed: [s3]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for vxlan] ***********************************
ok: [s1]
ok: [s3]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [s2]
ok: [s1]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
  
    policy-options {
        policy-statement ecmp {
            then {
                load-balance per-flow;
            }
        }
    }
    routing-options {
        forwarding-table {
            export ecmp;
        }
    }
  
    switch-options {
        vtep-source-interface lo0.0;
    }
  
    vlans {
        red {
            vxlan {
                vni 101000;
            }
        }
        blue {
            vxlan {
                vni 101001;
            }
        }
    }
  
  
  
    switch-options {
        remote-vtep-list 10.0.0.8;
        remote-vtep-list 10.0.0.9;
    }
  
    vlans {
        red {
            vxlan {
                ingress-node-replication;
                static-remote-vtep-list 10.0.0.8;
                static-remote-vtep-list 10.0.0.9;
            }
        }
        blue {
            vxlan {
                ingress-node-replication;
                static-remote-vtep-list 10.0.0.8;
                static-remote-vtep-list 10.0.0.9;
            }
        }
    }
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
  
    policy-options {
        policy-statement ecmp {
            then {
                load-balance per-flow;
            }
        }
    }
    routing-options {
        forwarding-table {
            export ecmp;
        }
    }
  
    switch-options {
        vtep-source-interface lo0.0;
    }
  
    vlans {
        red {
            vxlan {
                vni 101000;
            }
        }
        blue {
            vxlan {
                vni 101001;
            }
        }
    }
  
  
  
    switch-options {
        remote-vtep-list 10.0.0.7;
        remote-vtep-list 10.0.0.9;
    }
  
    vlans {
        red {
            vxlan {
                ingress-node-replication;
                static-remote-vtep-list 10.0.0.7;
                static-remote-vtep-list 10.0.0.9;
            }
        }
        blue {
            vxlan {
                ingress-node-replication;
                static-remote-vtep-list 10.0.0.7;
                static-remote-vtep-list 10.0.0.9;
            }
        }
    }
ok: [s3] => 
  msg: |-
    vxlan configuration for s3
    =========================================
  
    policy-options {
        policy-statement ecmp {
            then {
                load-balance per-flow;
            }
        }
    }
    routing-options {
        forwarding-table {
            export ecmp;
        }
    }
  
    switch-options {
        vtep-source-interface lo0.0;
    }
  
    vlans {
        red {
            vxlan {
                vni 101000;
            }
        }
        blue {
            vxlan {
                vni 101001;
            }
        }
    }
  
  
  
    switch-options {
        remote-vtep-list 10.0.0.7;
        remote-vtep-list 10.0.0.8;
    }
  
    vlans {
        red {
            vxlan {
                ingress-node-replication;
                static-remote-vtep-list 10.0.0.7;
                static-remote-vtep-list 10.0.0.8;
            }
        }
        blue {
            vxlan {
                ingress-node-replication;
                static-remote-vtep-list 10.0.0.7;
                static-remote-vtep-list 10.0.0.8;
            }
        }
    }

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for s1, s2, s3

TASK [junos_config: deploying vxlan from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/vjunos-switch.j2] ***
changed: [s3]
changed: [s2]
changed: [s1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h3                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h4                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h5                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h6                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
s1                         : ok=45   changed=4    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
s2                         : ok=44   changed=4    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
s3                         : ok=44   changed=4    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   



This is the multi-node version of the vxlan-bridging lab.
Use it to check that you don't have spanning tree problems
in VXLAN overlay

* h1, h2 and h3 should be able to ping each other
* h4, h5 and h6 should be able to ping each other

Please note it might take a while for the lab to work due to
OSPF adjacency establishment and STP learning phase

