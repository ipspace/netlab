[WARNING]: Invalid characters were found in group names but not replaced, use
-vvvv to see details
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r11]
ok: [r12]
ok: [r21]
ok: [dut]
ok: [r22]
ok: [v1]
ok: [v2]
ok: [rb]

TASK [Find device readiness script] ********************************************
ok: [r11]
ok: [r12]
ok: [r21]
ok: [dut]
ok: [r22]
ok: [v2]
ok: [v1]
ok: [rb]

TASK [Wait for device to become ready] *****************************************
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [v1]
skipping: [v2]
skipping: [rb]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/vjunos-switch-clab.yml for dut

TASK [Wait for SSH server] *****************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/vm-clab-ssh-check.yml for dut

TASK [Check if 'sshpass' is installed] *****************************************
ok: [dut -> localhost]

TASK [Check for 'timeout' command] *********************************************
ok: [dut -> localhost]

TASK [Execute local ssh command to check vjunos-switch readiness] **************
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (40 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (39 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (38 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (37 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (36 retries left).
ok: [dut -> localhost]

TASK [Confirm dut SSH server works] ********************************************
ok: [dut] => 
  msg: Node dut is ready.

TASK [Wait for ge-0/0/0 interface] *********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/vjunos-switch.yml for dut

TASK [Wait for ge-0/0/0 to appear] *********************************************
ok: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r11, r12, r21, r22, v1, v2, rb

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [r11]
ok: [r12]
ok: [dut]
ok: [r21]
ok: [v1]
ok: [r22]
ok: [v2]
ok: [rb]

TASK [Find configuration template for normalize] *******************************
ok: [r11]
ok: [dut]
ok: [r12]
ok: [r21]
ok: [v1]
ok: [r22]
ok: [v2]
ok: [rb]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [v1]
skipping: [v2]
skipping: [rb]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [r11]
ok: [r12]
ok: [r21]
ok: [r22]
ok: [v1]
ok: [rb]
ok: [v2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [v1]
skipping: [v2]
skipping: [rb]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [v1]
skipping: [v2]
skipping: [rb]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r11, r12, r21, r22, v1, v2, rb

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [r11]
ok: [r12]
ok: [r21]
ok: [v1]
ok: [r22]
ok: [v2]
ok: [dut]
ok: [rb]

TASK [Find configuration template for initial] *********************************
ok: [r11]
ok: [r12]
ok: [r21]
ok: [r22]
ok: [dut]
ok: [v1]
ok: [v2]
ok: [rb]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [v1]
skipping: [v2]
skipping: [rb]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [r11]
ok: [r21]
ok: [dut]
ok: [r12]
ok: [r22]
ok: [v1]
ok: [v2]
ok: [rb]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    system {
      host-name dut;
      static-host-mapping {
        r11 inet 10.0.0.3;
        r12 inet 10.0.0.4;
        r21 inet 10.0.0.5;
        r22 inet 10.0.0.6;
        v1 inet 10.0.0.7;
        v2 inet 10.0.0.8;
        rb inet 10.0.0.2;
      }
    }
  
  
  
  
  
  
    policy-options {
      community tg_65000_1 members target:65000:1;
    }
  
  
  
    policy-options {
      policy-statement vrf-tenant-rt-export {
        term 1 {
          then {
            community add tg_65000_1;
            accept;
          }
        }
      }
  
  
  
      policy-statement vrf-tenant-rt-import {
        term 1 {
          from community [ tg_65000_1 ];
          then accept;
        }
        term default {
          then reject;
        }
      }
    }
  
    routing-instances {
  
      tenant {
        instance-type vrf;
        route-distinguisher 65000:1;
  
        vrf-import vrf-tenant-rt-import;
        vrf-export vrf-tenant-rt-export;
  
        routing-options {
          auto-export;
        }
  
        interface ge-0/0/5.0;
        interface ge-0/0/6.0;
  
      }
  
    }
    interfaces {
      ge-0/0/0 {
        mtu 1514;
      }
      ge-0/0/1 {
        mtu 1514;
      }
      ge-0/0/2 {
        mtu 1514;
      }
      ge-0/0/3 {
        mtu 1514;
      }
      ge-0/0/4 {
        mtu 1514;
      }
      ge-0/0/5 {
        mtu 1514;
      }
      ge-0/0/6 {
        mtu 1514;
      }
  
      lo0.0 {
  
          family inet {
            address 10.0.0.1/32;
          }
  
      }
      ge-0/0/0.0 {
        description "dut -> r11";
  
          family inet {
            address 10.1.0.1/30;
          }
  
      }
      ge-0/0/1.0 {
        description "dut -> r12";
  
          family inet {
            address 10.1.0.5/30;
          }
  
      }
      ge-0/0/2.0 {
        description "dut -> r21";
  
          family inet {
            address 10.1.0.9/30;
          }
  
      }
      ge-0/0/3.0 {
        description "dut -> r22";
  
          family inet {
            address 10.1.0.13/30;
          }
  
      }
      ge-0/0/4.0 {
        description "dut -> rb";
  
          family inet {
            address 10.1.0.17/30;
          }
  
      }
      ge-0/0/5.0 {
        description "dut -> v1";
  
          family inet {
            address 10.1.0.21/30;
          }
  
      }
      ge-0/0/6.0 {
        description "dut -> v2";
  
          family inet {
            address 10.1.0.25/30;
          }
  
      }
    }
    protocols {
      lldp {
        interface fxp0 {
          disable;
        }
        interface all;
      }
    }
ok: [r11] => 
  msg: |-
    initial configuration for r11
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
    if [ ! -e /sys/class/net/eth2 ]; then
      if [ ! -e /sys/devices/virtual/net/eth2 ]; then
        ip link add eth2 type dummy
        ip link set dev eth2 up
      fi
    fi
    if [ ! -e /sys/class/net/eth3 ]; then
      if [ ! -e /sys/devices/virtual/net/eth3 ]; then
        ip link add eth3 type dummy
        ip link set dev eth3 up
      fi
    fi
    if [ ! -e /sys/class/net/eth4 ]; then
      if [ ! -e /sys/devices/virtual/net/eth4 ]; then
        ip link add eth4 type dummy
        ip link set dev eth4 up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
    ip link set eth3 down
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
    ip link set eth3 up
    ip link set eth4 down
    sysctl -qw net.ipv6.conf.eth4.disable_ipv6=1
    ip link set dev eth4 mtu 1500
    ip link set eth4 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r11
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description r11 -> dut
     ip address 10.1.0.2/30
    !
    interface eth2
     no shutdown
     description r11 -> stub [stub]
     ip address 10.17.1.1/24
    !
    interface eth3
     no shutdown
     description r11 -> stub [stub]
     ip address 10.18.1.1/24
    !
    interface eth4
     no shutdown
     description r11 -> stub [stub]
     ip address 10.19.1.1/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r12] => 
  msg: |-
    initial configuration for r12
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r12
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description r12 -> dut
     ip address 10.1.0.6/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r21] => 
  msg: |-
    initial configuration for r21
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r21
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.5/32
    !
    interface eth1
     no shutdown
     description r21 -> dut
     ip address 10.1.0.10/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r22] => 
  msg: |-
    initial configuration for r22
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r22
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.6/32
    !
    interface eth1
     no shutdown
     description r22 -> dut
     ip address 10.1.0.14/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [v1] => 
  msg: |-
    initial configuration for v1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname v1
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.7/32
    !
    interface eth1
     no shutdown
     description v1 -> dut
     ip address 10.1.0.22/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [v2] => 
  msg: |-
    initial configuration for v2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname v2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.8/32
    !
    interface eth1
     no shutdown
     description v2 -> dut
     ip address 10.1.0.26/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [rb] => 
  msg: |-
    initial configuration for rb
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname rb
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description rb -> dut
     ip address 10.1.0.18/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for r11, r12, r21, r22, v1, v2, rb

TASK [junos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/junos.j2] ***
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r11 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [v1]
skipping: [v2]
skipping: [rb]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for r11, r12, r21, r22, v1, v2, rb

TASK [template] ****************************************************************
changed: [v2]
changed: [r22]
changed: [rb]
changed: [r12]
changed: [v1]
changed: [r21]
changed: [r11]

TASK [set_fact] ****************************************************************
ok: [r11]
ok: [r12]
ok: [v2]
ok: [r21]
ok: [v1]
ok: [r22]
ok: [rb]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [r11]
changed: [r12]
changed: [v2]
changed: [r22]
changed: [r21]
changed: [rb]
changed: [v1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [v1]
skipping: [v2]
skipping: [rb]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r11]
ok: [r12]
ok: [dut]
ok: [r21]
ok: [r22]
ok: [rb]
ok: [v1]
ok: [v2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r11, r12, r21, r22, rb, v1, v2 => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r11, r12, r21, r22, rb, v1, v2 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r11, r12, r21, r22, rb, v1, v2 => (item=vrf)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [r11]
ok: [r12]
ok: [dut]
ok: [r21]
ok: [r22]
ok: [rb]
ok: [v1]
ok: [v2]

TASK [Find configuration template for routing] *********************************
skipping: [dut]
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [rb]
skipping: [v1]
ok: [r22]
skipping: [v2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [rb]
skipping: [v1]
skipping: [v2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [dut]
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [rb]
skipping: [v1]
skipping: [v2]
ok: [r22]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [rb]
skipping: [v1]
skipping: [v2]
ok: [r22] => 
  msg: |-
    routing configuration for r22
    =========================================
    !
    !
    !
    !
    ! Global static routes
    !
    ip route 10.19.1.1/32 Null0
    ip route 10.19.2.1/32 Null0
    ip route 10.19.3.1/32 Null0
    ip route 10.19.4.1/32 Null0

TASK [Deploy routing configuration] ********************************************
skipping: [dut]
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [rb]
skipping: [v1]
skipping: [v2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for r22

TASK [template] ****************************************************************
changed: [r22]

TASK [set_fact] ****************************************************************
ok: [r22]

TASK [run /tmp/config.sh to deploy routing config from /home/pipi/net101/tools/netsim/ansible/templates/routing/frr.j2] ***
skipping: [r22]

TASK [run vtysh to import routing config from /home/pipi/net101/tools/netsim/ansible/templates/routing/frr.j2] ***
changed: [r22]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [r11]
ok: [r12]
ok: [r21]
ok: [r22]
ok: [dut]
ok: [rb]
ok: [v1]
ok: [v2]

TASK [Find configuration template for ospf] ************************************
ok: [r11]
ok: [r12]
ok: [dut]
ok: [r21]
ok: [r22]
ok: [rb]
ok: [v1]
ok: [v2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [rb]
skipping: [v1]
skipping: [v2]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [r11]
ok: [dut]
ok: [r12]
ok: [r21]
ok: [rb]
ok: [r22]
ok: [v1]
ok: [v2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
    routing-options {
      router-id 10.0.0.1
    }
    protocols {
      delete: ospf;
    }
  
    protocols {
      ospf {
        area 0.0.0.0 {
          interface lo0.0 {
          }
        }
        area 0.0.0.11 {
          interface ge-0/0/0.0 {
            interface-type p2p;
          }
        }
        area 0.0.0.12 {
          interface ge-0/0/1.0 {
            interface-type p2p;
            metric 10;
          }
        }
        area 0.0.0.21 {
          interface ge-0/0/2.0 {
            interface-type p2p;
          }
        }
        area 0.0.0.22 {
          interface ge-0/0/3.0 {
            interface-type p2p;
            metric 10;
          }
        }
        area 0.0.0.0 {
          interface ge-0/0/4.0 {
            interface-type p2p;
          }
        }
      }
    }
ok: [r11] => 
  msg: |-
    ospf configuration for r11
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.11
    !
    interface eth1
    ! r11 -> dut
     ip ospf area 0.0.0.11
     ip ospf network point-to-point
    !
    interface eth2
    ! r11 -> stub
     ip ospf area 0.0.0.11
     ip ospf passive
    !
    interface eth3
    ! r11 -> stub
     ip ospf area 0.0.0.11
     ip ospf passive
    !
    interface eth4
    ! r11 -> stub
     ip ospf area 0.0.0.11
     ip ospf passive
    !
  
    !
    do write
ok: [r12] => 
  msg: |-
    ospf configuration for r12
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.4
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.12
    !
    interface eth1
    ! r12 -> dut
     ip ospf area 0.0.0.12
     ip ospf network point-to-point
     ip ospf cost 10
    !
  
    !
    do write
ok: [r22] => 
  msg: |-
    ospf configuration for r22
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.6
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
     redistribute static
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.22
    !
    interface eth1
    ! r22 -> dut
     ip ospf area 0.0.0.22
     ip ospf network point-to-point
     ip ospf cost 10
    !
  
    !
    do write
ok: [r21] => 
  msg: |-
    ospf configuration for r21
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.5
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.21
    !
    interface eth1
    ! r21 -> dut
     ip ospf area 0.0.0.21
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [rb] => 
  msg: |-
    ospf configuration for rb
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! rb -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [v1] => 
  msg: |-
    ospf configuration for v1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.7
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.11
    !
    interface eth1
    ! v1 -> dut
     ip ospf area 0.0.0.11
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [v2] => 
  msg: |-
    ospf configuration for v2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.8
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.21
    !
    interface eth1
    ! v2 -> dut
     ip ospf area 0.0.0.21
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for r11, r12, r21, r22, rb, v1, v2

TASK [junos_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/junos.j2] ***
[WARNING]:  statement not found
changed: [dut]

TASK [template] ****************************************************************
changed: [r11]
changed: [v1]
changed: [r12]
changed: [r21]
changed: [rb]
changed: [r22]
changed: [v2]

TASK [set_fact] ****************************************************************
ok: [r11]
ok: [r12]
ok: [v2]
ok: [r21]
ok: [r22]
ok: [rb]
ok: [v1]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [rb]
skipping: [v1]
skipping: [v2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [v1]
changed: [r12]
changed: [r11]
changed: [rb]
changed: [r22]
changed: [v2]
changed: [r21]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [r11]
ok: [r12]
ok: [r22]
ok: [dut]
ok: [r21]
ok: [rb]
ok: [v1]
ok: [v2]

TASK [Find configuration template for vrf] *************************************
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [rb]
skipping: [v1]
ok: [dut]
skipping: [v2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [rb]
skipping: [v1]
skipping: [v2]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [rb]
skipping: [v1]
ok: [dut]
skipping: [v2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [rb]
skipping: [v1]
skipping: [v2]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
    routing-instances {
      tenant {
        routing-options {
          router-id 10.1.0.1
        }
      }
    }
  
  
    policy-options {
      policy-statement vrf-tenant-ospf-export {
        term redis_direct {
          from {
            protocol direct;
          }
          then accept;
        }
        term redis_bgp {
          from protocol bgp;
          then {
            accept;
          }
        }
        term redis_local_target {
          from community [ tg_65000_1 ];
          then accept;
        }
      }
    }
    routing-instances {
      tenant {
    protocols {
      delete: ospf;
    }
  
    protocols {
      ospf {
        export vrf-tenant-ospf-export;
        area 0.0.0.11 {
          interface ge-0/0/5.0 {
            interface-type p2p;
          }
        }
        area 0.0.0.21 {
          interface ge-0/0/6.0 {
            interface-type p2p;
          }
        }
      }
    }
    } }

TASK [Deploy vrf configuration] ************************************************
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [rb]
skipping: [v1]
skipping: [v2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for dut

TASK [junos_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/junos.j2] ***
changed: [dut]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-custom-config.yml for dut, r11, r12, r21, r22, v1, v2 => (item=ospf.areas)

TASK [Find configuration template] *********************************************
ok: [dut]
ok: [r11]
ok: [r12]
ok: [r21]
ok: [r22]
ok: [v2]
ok: [v1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [v1]
skipping: [v2]

TASK [Check is the configuration template is a file] ***************************
ok: [dut -> localhost]
ok: [r12 -> localhost]
ok: [r22 -> localhost]
ok: [r11 -> localhost]
ok: [r21 -> localhost]
ok: [v2 -> localhost]
ok: [v1 -> localhost]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [v1]
skipping: [v2]

TASK [Process template /home/pipi/net101/tools/netsim/extra/ospf.areas/junos.j2 for dut] ***
skipping: [dut]
skipping: [r11]
skipping: [r12]
skipping: [v1]
skipping: [r21]
skipping: [r22]
skipping: [v2]

TASK [Find custom configuration deployment script] *****************************
ok: [r11]
ok: [dut]
ok: [r21]
ok: [r12]
ok: [r22]
ok: [v2]
ok: [v1]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for r11, r12, r21, r22, v1, v2

TASK [junos_config: deploying ospf.areas from /home/pipi/net101/tools/netsim/extra/ospf.areas/junos.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [r11]
changed: [v1]
changed: [r12]
changed: [r22]
changed: [r21]
changed: [v2]

TASK [set_fact] ****************************************************************
ok: [r11]
ok: [r12]
ok: [r21]
ok: [r22]
ok: [v1]
ok: [v2]

TASK [run /tmp/config.sh to deploy ospf.areas config from /home/pipi/net101/tools/netsim/extra/ospf.areas/frr.j2] ***
skipping: [r11]
skipping: [r12]
skipping: [r21]
skipping: [r22]
skipping: [v1]
skipping: [v2]

TASK [run vtysh to import ospf.areas config from /home/pipi/net101/tools/netsim/extra/ospf.areas/frr.j2] ***
changed: [r11]
changed: [r22]
changed: [r21]
changed: [r12]
changed: [v2]
changed: [v1]

PLAY RECAP *********************************************************************
dut                        : ok=44   changed=4    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
r11                        : ok=39   changed=7    unreachable=0    failed=0    skipped=23   rescued=0    ignored=0   
r12                        : ok=38   changed=6    unreachable=0    failed=0    skipped=23   rescued=0    ignored=0   
r21                        : ok=38   changed=6    unreachable=0    failed=0    skipped=23   rescued=0    ignored=0   
r22                        : ok=45   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
rb                         : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
v1                         : ok=38   changed=6    unreachable=0    failed=0    skipped=23   rescued=0    ignored=0   
v2                         : ok=38   changed=6    unreachable=0    failed=0    skipped=23   rescued=0    ignored=0   



This lab tests numerous combinations of OSPF area parameters. It tests:

* Stub and NSSA areas
* Insertion of default route into stub/NSSA areas
* Default route cost in stub/NSSA area
* Suppression of inter-area routes in stub/NSSA area
* Area ranges (including explicit range cost) and suppressed ranges
* Summarization and suppression of NSSA routes
* Configuration of VRF instances

