[WARNING]: Invalid characters were found in group names but not replaced, use
-vvvv to see details
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s2]
ok: [h1]
ok: [h2]
ok: [s1]
ok: [h3]
ok: [h4]

TASK [Find device readiness script] ********************************************
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [s1]
ok: [h4]

TASK [Wait for device to become ready] *****************************************
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vjunos-switch-clab.yml for s1

TASK [Wait for SSH server] *****************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vm-clab-ssh-check.yml for s1

TASK [Check if 'sshpass' is installed] *****************************************
ok: [s1 -> localhost]

TASK [Check for 'timeout' command] *********************************************
ok: [s1 -> localhost]

TASK [Execute local ssh command to check vjunos-switch readiness] **************
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-switch readiness (40 retries left).
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-switch readiness (39 retries left).
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-switch readiness (38 retries left).
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-switch readiness (37 retries left).
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-switch readiness (36 retries left).
ok: [s1 -> localhost]

TASK [Confirm s1 SSH server works] *********************************************
ok: [s1] => 
  msg: Node s1 is ready.

TASK [Wait for ge-0/0/0 interface] *********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vjunos-switch.yml for s1

TASK [Wait for ge-0/0/0 to appear] *********************************************
ok: [s1]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [s2]
ok: [h1]
ok: [s1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Find configuration template for normalize] *******************************
ok: [s2]
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [s2]
ok: [s1]
ok: [h3]
ok: [h1]
ok: [h2]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Deploy normalize configuration] ******************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [s1]

TASK [Find configuration template for initial] *********************************
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s2]
ok: [h3]
ok: [h1]
ok: [h2]
ok: [h4]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.6 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.6 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.6 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.6 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.5 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1600
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.6/32
    !
    interface eth1
     no shutdown
     description s2 -> s1
     ip address 10.1.0.2/30
    !
    interface eth2
     no shutdown
     description [Access VLAN red] s2 -> h2
     ! no ip address
    !
    interface eth3
     no shutdown
     description [Access VLAN blue] s2 -> h4
     ! no ip address
    !
    interface vlan1000
     no shutdown
     description VLAN red (1000) -> [h1,s1,h2] [external]
     ip address 172.16.0.6/24
    !
    interface vlan1001
     no shutdown
     description VLAN blue (1001) -> [h3,s1,h4] [external]
     ip address 172.16.1.6/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.6 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.6 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.6 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.6 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.3/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.5 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.5 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.5 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.5 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    system {
      host-name s1;
      static-host-mapping {
        s2 inet 10.0.0.6;
        h1 inet 172.16.0.1;
        h2 inet 172.16.0.2;
        h3 inet 172.16.1.3;
        h4 inet 172.16.1.4;
      }
    }
  
  
    interfaces {
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    }
    interfaces {
      ge-0/0/0 {
        mtu 1614;
      }
      ge-0/0/1 {
        mtu 1514;
      }
      ge-0/0/2 {
        mtu 1514;
      }
  
      lo0.0 {
  
          family inet {
            address 10.0.0.5/32;
          }
  
      }
      ge-0/0/0.0 {
        description "s1 -> s2";
  
          family inet {
            address 10.1.0.1/30;
          }
  
      }
      ge-0/0/1.0 {
        description "[Access VLAN red] s1 -> h1";
  
  
      }
      ge-0/0/2.0 {
        description "[Access VLAN blue] s1 -> h3";
  
  
      }
      irb.1000 {
        description "VLAN red (1000) -> [h1,h2,s2] [external]";
  
          family inet {
            address 172.16.0.5/24;
            mtu 1500;
          }
  
      }
      irb.1001 {
        description "VLAN blue (1001) -> [h3,h4,s2] [external]";
  
          family inet {
            address 172.16.1.5/24;
            mtu 1500;
          }
  
      }
    }
    protocols {
      lldp {
        interface fxp0 {
          disable;
        }
        interface all;
      }
    }

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for s2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4

TASK [junos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/junos.j2] ***
[WARNING]: mgd: statement has no contents; ignored
changed: [s1]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [s2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [s2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for s2

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [s2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [s2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-y14r9bvf.sh] ***********************
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s2]
ok: [s1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vxlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=evpn)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s2]
ok: [s1]

TASK [Find configuration template for vlan] ************************************
ok: [s2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s2]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
      brctl addbr vlan1000
      ip link set dev vlan1000 address 52:dc:ca:fd:06:00
  
      ip link set dev vlan1000 mtu 1500
      ip addr flush dev vlan1000
      ip addr add 172.16.0.6/24 dev vlan1000
    fi
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
      brctl addbr vlan1001
      ip link set dev vlan1001 address 52:dc:ca:fd:06:01
  
      ip link set dev vlan1001 mtu 1500
      ip addr flush dev vlan1001
      ip addr add 172.16.1.6/24 dev vlan1001
    fi
  
    brctl addif vlan1000 eth2
    brctl addif vlan1001 eth3
  
    ip link set dev vlan1000 up
    ip link set dev vlan1001 up
    exit 0
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
  
    vlans {
      blue {
        vlan-id 1001;
  
        l3-interface irb.1001;
  
      }
      red {
        vlan-id 1000;
  
        l3-interface irb.1000;
  
      }
    }
  
    interfaces {
  
  
      ge-0/0/1.0 {
        family ethernet-switching {
  
          vlan {
            members red;
          }
  
        }
      }
  
  
  
      ge-0/0/2.0 {
        family ethernet-switching {
  
          vlan {
            members blue;
          }
  
        }
      }
  
  
    }

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [junos_config: deploying vlan from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/vjunos-switch.j2] ***
changed: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
changed: [s2]

TASK [run vtysh to import vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [s2]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [s2]
ok: [s1]

TASK [Find configuration template for bgp] *************************************
ok: [s2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [s2]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    bgp configuration for s1
    =========================================
    routing-options {
      autonomous-system 65000;
      router-id 10.0.0.5
    }
    policy-options {
      delete: policy-statement ibgp-export;
      delete: policy-statement ebgp-export;
    }
    policy-options {
      policy-statement ibgp-export {
        term advertise {
          from {
            protocol direct;
            interface [
               lo0.0  ];
          }
          then accept;
        }
        term next-hop-self {
          from {
            route-type external;
          }
          then {
            next-hop self;
          }
        }
      }
      policy-statement ebgp-export {
        term advertise {
          from {
            protocol direct;
            interface [ lo0.0 ];
          }
          then accept;
        }
      }
    }
    protocols {
      delete: bgp;
    }
    protocols {
      bgp {
        group ibgp-peers-ipv4 {
          type internal;
          export ibgp-export;
          advertise-inactive;
          local-address 10.0.0.5;
          neighbor 10.0.0.6 {
            description s2;
            family inet {
              unicast;
            }
          }
        }
        group ebgp-peers {
          export ebgp-export;
          advertise-inactive;
        }
      }
    }
ok: [s2] => 
  msg: |-
    bgp configuration for s2
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.6
    !
      neighbor 10.0.0.5 remote-as 65000
      neighbor 10.0.0.5 description s1
      neighbor 10.0.0.5 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.6/32
    !
    !
    !
      neighbor 10.0.0.5 activate
      neighbor 10.0.0.5 next-hop-self
      no neighbor 10.0.0.5 send-community all
      neighbor 10.0.0.5 send-community standard
      neighbor 10.0.0.5 send-community large
      neighbor 10.0.0.5 send-community extended
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [junos_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/junos.j2] ***
[WARNING]:  statement not found
changed: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [s2]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [s2]
ok: [s1]

TASK [Find configuration template for ospf] ************************************
ok: [s2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [s2]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    routing-options {
      router-id 10.0.0.5
    }
    protocols {
      delete: ospf;
    }
  
    protocols {
      ospf {
        area 0.0.0.0 {
          interface lo0.0 {
          }
        }
        area 0.0.0.0 {
          interface ge-0/0/0.0 {
            interface-type p2p;
          }
        }
      }
    }
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.6
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! s2 -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [junos_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/junos.j2] ***
changed: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [s2]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [s2]
ok: [s1]

TASK [Find configuration template for vxlan] ***********************************
ok: [s2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [s2]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
  
  
    # Create L3 VNIs with bridges and add to correct vrf table
  
    # Create VXLAN L2 interface per vni
    ip link add vxlan1000 type vxlan \
      id 1000 \
      dstport 4789 \
      local 10.0.0.6 nolearning
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
    brctl addbr vlan1000
    ip link set up dev vlan1000
    fi
    brctl addif vlan1000 vxlan1000
    brctl stp vlan1000 off
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan1000
    # Disable dynamic MAC learning for evpn, see https://docs.frrouting.org/en/latest/evpn.html
    bridge link set dev vxlan1000 learning off
    ip link set up dev vxlan1000
  
    # Create VXLAN L2 interface per vni
    ip link add vxlan1001 type vxlan \
      id 1001 \
      dstport 4789 \
      local 10.0.0.6 nolearning
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
    brctl addbr vlan1001
    ip link set up dev vlan1001
    fi
    brctl addif vlan1001 vxlan1001
    brctl stp vlan1001 off
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan1001
    # Disable dynamic MAC learning for evpn, see https://docs.frrouting.org/en/latest/evpn.html
    bridge link set dev vxlan1001 learning off
    ip link set up dev vxlan1001
  
  
    exit $?
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
  
    policy-options {
        policy-statement ecmp {
            then {
                load-balance per-flow;
            }
        }
    }
    routing-options {
        forwarding-table {
            export ecmp;
        }
    }
  
    switch-options {
        vtep-source-interface lo0.0;
    }
  
    vlans {
        red {
            vxlan {
                vni 1000;
            }
        }
        blue {
            vxlan {
                vni 1001;
            }
        }
    }
  
  
  
  
    switch-options {
        route-distinguisher 10.0.0.5:65535;
        vrf-target target:65000:65535;
    }
  
    protocols evpn encapsulation vxlan;

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [junos_config: deploying vxlan from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/vjunos-switch.j2] ***
changed: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/frr.j2] ***
changed: [s2]

TASK [run vtysh to import vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/frr.j2] ***
skipping: [s2]

TASK [Figure out whether to deploy the module evpn on current device] **********
ok: [s2]
ok: [s1]

TASK [Find configuration template for evpn] ************************************
ok: [s2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for evpn] ********************
ok: [s2]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s2] => 
  msg: |-
    evpn configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e
    cat >/tmp/evpn_config <<CONFIG
    router bgp 65000
     address-family l2vpn evpn
      advertise-all-vni
      advertise-svi-ip
      advertise ipv4 unicast
  
    ! Configure explicit Route Targets and RD per L2 VNI; auto-derived differs
      vni 1001
       rd 10.0.0.6:1001
       route-target export 65000:1001
       route-target import 65000:1001
      exit-vni
      vni 1000
       rd 10.0.0.6:1000
       route-target export 65000:1000
       route-target import 65000:1000
      exit-vni
  
      neighbor 10.0.0.5 activate
      neighbor 10.0.0.5 soft-reconfiguration inbound
  
     exit-address-family
    !
  
    exit
  
    ! L3 VRF EVPN handling
    !
    do write
    CONFIG
    vtysh -f /tmp/evpn_config
    vtysh -c 'clear bgp *'
ok: [s1] => 
  msg: |-
    evpn configuration for s1
    =========================================
  
    protocols {
      bgp {
        group ibgp-peers-ipv4 {
          neighbor 10.0.0.6 {
            family evpn {
              signaling;
            }
          }
        }
        group ebgp-peers {
        }
      }
    }
  
    protocols {
      evpn {
        encapsulation vxlan;
        default-gateway no-gateway-community;
        extended-vni-list all;
        vni-options {
            vni 1000 {
                vrf-target target:65000:1000;
            }
            vni 1001 {
                vrf-target target:65000:1001;
            }
        }
      }
    }

TASK [Deploy evpn configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [junos_config: deploying evpn from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/vjunos-switch.j2] ***
changed: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy evpn config from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/frr.j2] ***
changed: [s2]

TASK [run vtysh to import evpn config from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/frr.j2] ***
skipping: [s2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h3                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h4                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
s1                         : ok=57   changed=6    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
s2                         : ok=63   changed=13   unreachable=0    failed=0    skipped=17   rescued=0    ignored=0   



The device under test is a VLAN-to-VXLAN layer-3 switch between two access
VLANs and two VXLAN VNIs. Both PE-devices perform inter-VLAN routing,
resulting in asymmetrical IRB.

All hosts should be able to ping each other and all switch loopback IPs

Please note it might take a while for the lab to work due to STP learning
phase.

