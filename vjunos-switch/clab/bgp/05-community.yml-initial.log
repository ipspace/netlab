[WARNING]: Invalid characters were found in group names but not replaced, use
-vvvv to see details
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r2]
ok: [rc]
ok: [x1]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [r2]
ok: [rc]
ok: [x1]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [r2]
skipping: [rc]
skipping: [x1]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vjunos-switch-clab.yml for dut

TASK [Wait for SSH server] *****************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vm-clab-ssh-check.yml for dut

TASK [Check if 'sshpass' is installed] *****************************************
ok: [dut -> localhost]

TASK [Check for 'timeout' command] *********************************************
ok: [dut -> localhost]

TASK [Execute local ssh command to check vjunos-switch readiness] **************
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (40 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (39 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (38 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (37 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (36 retries left).
ok: [dut -> localhost]

TASK [Confirm dut SSH server works] ********************************************
ok: [dut] => 
  msg: Node dut is ready.

TASK [Wait for ge-0/0/0 interface] *********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vjunos-switch.yml for dut

TASK [Wait for ge-0/0/0 to appear] *********************************************
ok: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r2, rc, x1

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [r2]
ok: [rc]
ok: [x1]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [r2]
ok: [dut]
ok: [rc]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r2]
skipping: [rc]
skipping: [x1]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [rc]
ok: [r2]
ok: [x1]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [r2]
skipping: [rc]
skipping: [x1]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [r2]
skipping: [rc]
skipping: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r2, rc, x1

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [r2]
ok: [rc]
ok: [x1]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [r2]
ok: [dut]
ok: [rc]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r2]
skipping: [rc]
skipping: [x1]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [r2]
ok: [dut]
ok: [rc]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description r2 -> dut
     ip address 10.1.0.2/30
    !
    interface eth2
     no shutdown
     description r2 -> rc
     ip address 10.1.0.5/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [rc] => 
  msg: |-
    initial configuration for rc
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname rc
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.10/32
    !
    interface eth1
     no shutdown
     description rc -> r2
     ip address 10.1.0.6/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    system {
      host-name dut;
      static-host-mapping {
        r2 inet 10.0.0.2;
        rc inet 10.0.0.10;
        x1 inet 10.0.0.3;
      }
    }
  
  
    interfaces {
      ge-0/0/0 {
        mtu 1514;
      }
      ge-0/0/1 {
        mtu 1514;
      }
  
      lo0.0 {
  
          family inet {
            address 10.0.0.1/32;
          }
  
      }
      ge-0/0/0.0 {
        description "dut -> r2";
  
          family inet {
            address 10.1.0.1/30;
          }
  
      }
      ge-0/0/1.0 {
        description "dut -> x1 [external]";
  
          family inet {
            address 10.1.0.9/30;
          }
  
      }
    }
    protocols {
      lldp {
        interface fxp0 {
          disable;
        }
        interface all;
      }
    }
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description x1 -> dut [external]
     ip address 10.1.0.10/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for r2, rc, x1

TASK [junos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/junos.j2] ***
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [r2]
skipping: [rc]
skipping: [x1]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for r2, rc, x1

TASK [template] ****************************************************************
changed: [x1]
changed: [r2]
changed: [rc]

TASK [set_fact] ****************************************************************
ok: [r2]
ok: [rc]
ok: [x1]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [rc]
changed: [x1]
changed: [r2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [r2]
skipping: [rc]
skipping: [x1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r2]
ok: [rc]
ok: [x1]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r2, rc, x1 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r2, rc, x1 => (item=ospf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [r2]
ok: [rc]
ok: [x1]
ok: [dut]

TASK [Find configuration template for bgp] *************************************
ok: [r2]
ok: [rc]
ok: [x1]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r2]
skipping: [rc]
skipping: [x1]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [x1]
ok: [r2]
ok: [rc]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    routing-options {
      autonomous-system 65000;
      router-id 10.0.0.1
    }
    policy-options {
      delete: policy-statement ibgp-export;
      delete: policy-statement ebgp-export;
    }
    policy-options {
      policy-statement ibgp-export {
        term advertise {
          from {
            protocol direct;
            interface [
               lo0.0  ];
          }
          then accept;
        }
        term next-hop-self {
          from {
            route-type external;
          }
          then {
            next-hop self;
          }
        }
      }
      policy-statement ebgp-export {
        term advertise {
          from {
            protocol direct;
            interface [ lo0.0 ];
          }
          then accept;
        }
      }
    }
    protocols {
      delete: bgp;
    }
    protocols {
      bgp {
        group ibgp-peers-ipv4 {
          type internal;
          export ibgp-export;
          advertise-inactive;
          cluster 10.0.0.1;
          neighbor 10.0.0.10 {
            local-address 10.0.0.1;
            description rc;
            family inet {
              unicast;
            }
          }
          neighbor 10.0.0.2 {
            local-address 10.0.0.1;
            description r2;
            family inet {
              unicast;
            }
          }
        }
        group ebgp-peers {
          export ebgp-export;
          advertise-inactive;
          neighbor 10.1.0.10 {
            peer-as 65101;
            description x1;
            family inet {
              unicast;
            }
          }
        }
      }
    }
ok: [r2] => 
  msg: |-
    bgp configuration for r2
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor 10.0.0.1 remote-as 65000
      neighbor 10.0.0.1 description dut
      neighbor 10.0.0.1 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.2/32
    !
    !
    !
      neighbor 10.0.0.1 activate
      neighbor 10.0.0.1 next-hop-self
      no neighbor 10.0.0.1 send-community all
      neighbor 10.0.0.1 send-community standard
      neighbor 10.0.0.1 send-community large
      neighbor 10.0.0.1 send-community extended
    !
    !
    !
    do write
ok: [rc] => 
  msg: |-
    bgp configuration for rc
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.10
    !
      neighbor 10.0.0.1 remote-as 65000
      neighbor 10.0.0.1 description dut
      neighbor 10.0.0.1 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.10/32
    !
    !
      network 172.0.42.0/24
    !
      neighbor 10.0.0.1 activate
      neighbor 10.0.0.1 next-hop-self
      no neighbor 10.0.0.1 send-community all
      neighbor 10.0.0.1 send-community standard
      neighbor 10.0.0.1 send-community large
      neighbor 10.0.0.1 send-community extended
    !
    !
    ip route 172.0.42.0/24 Null0
    !
    do write
ok: [x1] => 
  msg: |-
    bgp configuration for x1
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 10.1.0.9 remote-as 65000
      neighbor 10.1.0.9 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.3/32
    !
    !
    !
      neighbor 10.1.0.9 activate
      no neighbor 10.1.0.9 send-community all
      neighbor 10.1.0.9 send-community standard
      neighbor 10.1.0.9 send-community large
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for r2, rc, x1

TASK [junos_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/junos.j2] ***
[WARNING]:  statement not found
changed: [dut]

TASK [template] ****************************************************************
changed: [rc]
changed: [x1]
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r2]
ok: [x1]
ok: [rc]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [r2]
skipping: [rc]
skipping: [x1]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [r2]
changed: [rc]
changed: [x1]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [r2]
ok: [rc]
ok: [x1]
ok: [dut]

TASK [Find configuration template for ospf] ************************************
skipping: [x1]
ok: [r2]
ok: [rc]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r2]
skipping: [rc]
skipping: [x1]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [x1]
ok: [r2]
ok: [dut]
ok: [rc]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [x1]
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
    routing-options {
      router-id 10.0.0.1
    }
    protocols {
      delete: ospf;
    }
  
    protocols {
      ospf {
        area 0.0.0.0 {
          interface lo0.0 {
          }
        }
        area 0.0.0.0 {
          interface ge-0/0/0.0 {
            interface-type p2p;
          }
        }
      }
    }
ok: [rc] => 
  msg: |-
    ospf configuration for rc
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.10
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! rc -> r2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [r2] => 
  msg: |-
    ospf configuration for r2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r2 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! r2 -> rc
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
skipping: [x1]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for r2, rc

TASK [junos_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/junos.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [rc]
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r2]
ok: [rc]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [r2]
skipping: [rc]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [r2]
changed: [rc]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-custom-config.yml for rc => (item=frr-community)

TASK [Find configuration template] *********************************************
ok: [rc]

TASK [fail] ********************************************************************
skipping: [rc]

TASK [Check is the configuration template is a file] ***************************
ok: [rc -> localhost]

TASK [fail] ********************************************************************
skipping: [rc]

TASK [Process template /home/pipi/net101/tools/tests/integration/bgp/frr-community.j2 for rc] ***
skipping: [rc]

TASK [Find custom configuration deployment script] *****************************
ok: [rc]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for rc

TASK [template] ****************************************************************
changed: [rc]

TASK [set_fact] ****************************************************************
ok: [rc]

TASK [run /tmp/config.sh to deploy frr-community config from /home/pipi/net101/tools/tests/integration/bgp/frr-community.j2] ***
skipping: [rc]

TASK [run vtysh to import frr-community config from /home/pipi/net101/tools/tests/integration/bgp/frr-community.j2] ***
changed: [rc]

PLAY RECAP *********************************************************************
dut                        : ok=36   changed=3    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
r2                         : ok=36   changed=7    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
rc                         : ok=43   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
x1                         : ok=28   changed=4    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   



Use this topology to test the BGP community propagation. The device under test
is a BGP route reflector that should propagate standard and extended
communities to IBGP neighbors but only extended communities to EBGP neighbors
(the default setting).

Three BGP communities are attached to the prefix advertised by RC: a standard
one, an extended one, and a long one (standard communitiy using 4-octet AS)

