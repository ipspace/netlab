[WARNING]: Invalid characters were found in group names but not replaced, use
-vvvv to see details
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [p_global]
skipping: [p_vrf]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/vjunos-switch-clab.yml for dut

TASK [Wait for SSH server] *****************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/vm-clab-ssh-check.yml for dut

TASK [Check if 'sshpass' is installed] *****************************************
ok: [dut -> localhost]

TASK [Check for 'timeout' command] *********************************************
ok: [dut -> localhost]

TASK [Execute local ssh command to check vjunos-switch readiness] **************
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (40 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (39 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (38 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (37 retries left).
ok: [dut -> localhost]

TASK [Confirm dut SSH server works] ********************************************
ok: [dut] => 
  msg: Node dut is ready.

TASK [Wait for ge-0/0/0 interface] *********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/vjunos-switch.yml for dut

TASK [Wait for ge-0/0/0 to appear] *********************************************
ok: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [p_vrf]
ok: [p_global]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [p_vrf]
ok: [p_global]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p_vrf] => 
  msg: |-
    initial configuration for p_vrf
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p_vrf
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description p_vrf -> dut [external]
     ip address 10.1.0.6/30
     ipv6 address 2001:db8:3:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p_global] => 
  msg: |-
    initial configuration for p_global
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p_global
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description p_global -> dut [external]
     ip address 10.1.0.2/30
     ipv6 address 2001:db8:3::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    system {
      host-name dut;
      static-host-mapping {
        pglobal inet 10.0.0.2;
        pvrf inet 10.0.0.3;
      }
    }
  
  
  
  
  
  
    policy-options {
      community tg_65000_1 members target:65000:1;
    }
  
  
  
    policy-options {
      policy-statement vrf-customer-rt-export {
        term 1 {
          then {
            community add tg_65000_1;
            accept;
          }
        }
      }
  
  
  
      policy-statement vrf-customer-rt-import {
        term 1 {
          from community [ tg_65000_1 ];
          then accept;
        }
        term default {
          then reject;
        }
      }
    }
  
    routing-instances {
  
      customer {
        instance-type vrf;
        route-distinguisher 65000:1;
  
        vrf-import vrf-customer-rt-import;
        vrf-export vrf-customer-rt-export;
  
        routing-options {
          auto-export;
        }
  
        interface ge-0/0/1.0;
        interface lo0.1;
  
      }
  
    }
    interfaces {
      ge-0/0/0 {
        mtu 1514;
      }
      ge-0/0/1 {
        mtu 1514;
      }
  
      lo0.0 {
  
          family inet {
            address 10.0.0.42/32;
          }
          family inet6 {
            address 2001:db8:42:1::1/128;
          }
  
      }
      ge-0/0/0.0 {
        description "dut -> p_global [external]";
  
          family inet {
            address 10.1.0.1/30;
          }
          family inet6 {
            address 2001:db8:3::1/64;
          }
  
      }
      ge-0/0/1.0 {
        description "dut -> p_vrf [external]";
  
          family inet {
            address 10.1.0.5/30;
          }
          family inet6 {
            address 2001:db8:3:1::1/64;
          }
  
      }
      lo0.1 {
        description "VRF Loopback customer";
  
          family inet {
            address 10.2.0.1/32;
          }
          family inet6 {
            address 2001:db8:4::1/64;
          }
  
      }
    }
    protocols {
      lldp {
        interface fxp0 {
          disable;
        }
        interface all;
      }
      router-advertisement {
        interface ge-0/0/0.0;
        interface ge-0/0/1.0;
      }
    }

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for p_global, p_vrf

TASK [junos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/junos.j2] ***
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [p_global -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [p_global]
skipping: [p_vrf]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for p_global, p_vrf

TASK [template] ****************************************************************
changed: [p_global]
changed: [p_vrf]

TASK [set_fact] ****************************************************************
ok: [p_global]
ok: [p_vrf]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [p_vrf]
changed: [p_global]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [p_global]
skipping: [p_vrf]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf => (item=vrf)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Find configuration template for routing] *********************************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut] => 
  msg: |-
    routing configuration for dut
    =========================================
    policy-options community x-route-permit-mark members large:65535:0:65536;
  
  
  
  
    policy-options {
      delete: policy-statement med_17;
    }
  
    policy-options {
      policy-statement med_17 {
        term seq10 {
          then metric 17;
  
  
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
  
  
        term default-reject {
          then {
            reject;
          }
        }
  
      }
    }
    policy-options {
      delete: policy-statement med_42;
    }
  
    policy-options {
      policy-statement med_42 {
        term seq10 {
          then metric 42;
  
  
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
  
  
        term default-reject {
          then {
            reject;
          }
        }
  
      }
    }

TASK [Deploy routing configuration] ********************************************
skipping: [p_global]
skipping: [p_vrf]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for dut

TASK [junos_config: deploying routing from /home/pipi/net101/tools/netsim/ansible/templates/routing/junos.j2] ***
[WARNING]:  statement not found
changed: [dut]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Find configuration template for bgp] *************************************
ok: [p_vrf]
ok: [p_global]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [p_vrf]
ok: [p_global]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p_global] => 
  msg: |-
    bgp configuration for p_global
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor 10.1.0.1 remote-as 65000
      neighbor 10.1.0.1 description dut
    !
      neighbor 2001:db8:3::1 remote-as 65000
      neighbor 2001:db8:3::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.2/32
    !
    !
    !
      neighbor 10.1.0.1 activate
      no neighbor 10.1.0.1 send-community all
      neighbor 10.1.0.1 send-community standard
      neighbor 10.1.0.1 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:2::/64
    !
    !
    !
      neighbor 2001:db8:3::1 activate
      no neighbor 2001:db8:3::1 send-community all
      neighbor 2001:db8:3::1 send-community standard
      neighbor 2001:db8:3::1 send-community large
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
  
    routing-options {
      autonomous-system 65000;
      router-id 10.0.0.42
    }
  
  
    policy-options community x-route-permit-mark members large:65535:0:65536;
  
    policy-options {
      delete: policy-statement bgp-advertise;
      delete: policy-statement bgp-redistribute;
      delete: route-filter-list bgp-announce;
    }
  
    policy-options {
  
      route-filter-list bgp-announce {
      }
  
      policy-statement next-hop-self {
        term next-hop-self {
          from {
            route-type external;
          }
          then {
            next-hop self;
          }
        }
      }
  
      policy-statement bgp-advertise {
        term advertise {
          from {
            protocol direct;
            interface [
               lo0.0  ];
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
  
        term originate {
          from {
            protocol static;
            route-filter-list bgp-announce;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
  
      }
  
      policy-statement bgp-redistribute {
        term redis_bgp {
          from protocol bgp;
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
      }
  
      policy-statement bgp-final {
        term final-option {
          from community x-route-permit-mark;
          then {
            community delete x-route-permit-mark;
            accept;
          }
        }
        term default-reject {
          then reject;
        }
      }
  
      policy-statement bgp-initial {
        term initial-cleanup {
          from community x-route-permit-mark;
          then {
            community delete x-route-permit-mark;
            next policy;
          }
        }
      }
  
    }
    protocols {
      delete: bgp;
    }
    protocols {
      bgp {
        group ibgp-peers-ipv4 {
          type internal;
          export [
              next-hop-self
              bgp-advertise bgp-redistribute bgp-final
            ];
          advertise-inactive;
        }
        group ibgp-peers-ipv6 {
          type internal;
          export [
              next-hop-self
              bgp-advertise bgp-redistribute bgp-final
            ];
          advertise-inactive;
        }
        group ebgp-peers {
          export [
              bgp-advertise bgp-redistribute bgp-final
            ];
          advertise-inactive;
          neighbor 10.1.0.2 {
            export [ bgp-advertise bgp-redistribute med_42 bgp-final ];
  
            peer-as 65100;
            description p_global;
            family inet {
              unicast;
            }
          }
          neighbor 2001:db8:3::2 {
            export [ bgp-advertise bgp-redistribute med_42 bgp-final ];
  
            peer-as 65100;
            description p_global;
            family inet6 {
              unicast;
            }
          }
        }
      }
    }
ok: [p_vrf] => 
  msg: |-
    bgp configuration for p_vrf
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 10.1.0.5 remote-as 65000
      neighbor 10.1.0.5 description dut
    !
      neighbor 2001:db8:3:1::1 remote-as 65000
      neighbor 2001:db8:3:1::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.3/32
    !
    !
    !
      neighbor 10.1.0.5 activate
      no neighbor 10.1.0.5 send-community all
      neighbor 10.1.0.5 send-community standard
      neighbor 10.1.0.5 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:3::/64
    !
    !
    !
      neighbor 2001:db8:3:1::1 activate
      no neighbor 2001:db8:3:1::1 send-community all
      neighbor 2001:db8:3:1::1 send-community standard
      neighbor 2001:db8:3:1::1 send-community large
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for p_global, p_vrf

TASK [junos_config: deploying bgp from /home/pipi/net101/tools/netsim/ansible/templates/bgp/junos.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [p_vrf]
changed: [p_global]

TASK [set_fact] ****************************************************************
ok: [p_global]
ok: [p_vrf]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [p_global]
skipping: [p_vrf]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [p_vrf]
changed: [p_global]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Find configuration template for vrf] *************************************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
  
    policy-options {
      community x-route-permit-mark members large:65535:0:65536;
  
      policy-statement vrf-customer-bgp-export {
        term redis_bgp {
          from {
            protocol bgp;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
        term redis_direct {
          from {
            protocol direct;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
        term redis_ospf {
          from {
            protocol ospf;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
        term redis_ospf3 {
          from {
            protocol ospf3;
          }
          then {
            community add x-route-permit-mark;
            next policy;
          }
        }
      }
  
    }
  
  
    routing-instances {
  
      customer {
        routing-options {
          autonomous-system 65000;
          router-id 10.0.0.42
        }
  
        protocols {
          bgp {
            group ibgp-peers-ipv4 {
              type internal;
              export [
                next-hop-self
                vrf-customer-bgp-export bgp-final
              ];
              advertise-inactive;
              local-address 10.2.0.1;
            }
            group ibgp-peers-ipv6 {
              type internal;
              export [
                next-hop-self
                vrf-customer-bgp-export bgp-final
              ];
              advertise-inactive;
              local-address 2001:db8:4::1;
            }
  
            group ebgp-peers {
              export [ vrf-customer-bgp-export bgp-final ];
              advertise-inactive;
              neighbor 10.1.0.6 {
            export [ vrf-customer-bgp-export med_17 bgp-final ];
  
                peer-as 65101;
                description p_vrf;
              }
              neighbor 2001:db8:3:1::2 {
            export [ vrf-customer-bgp-export med_17 bgp-final ];
  
                peer-as 65101;
                description p_vrf;
              }
            }
          }
        }
      }
  
    }

TASK [Deploy vrf configuration] ************************************************
skipping: [p_global]
skipping: [p_vrf]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for dut

TASK [junos_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/junos.j2] ***
changed: [dut]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-custom-config.yml for dut => (item=bgp.policy)

TASK [Find configuration template] *********************************************
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Check is the configuration template is a file] ***************************
ok: [dut -> localhost]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Process template /home/pipi/net101/tools/netsim/extra/bgp.policy/junos.j2 for dut] ***
skipping: [dut]

TASK [Find custom configuration deployment script] *****************************
ok: [dut]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for dut

TASK [junos_config: deploying bgp.policy from /home/pipi/net101/tools/netsim/extra/bgp.policy/junos.j2] ***
ok: [dut]

PLAY RECAP *********************************************************************
dut                        : ok=49   changed=4    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   
p_global                   : ok=31   changed=5    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
p_vrf                      : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   



Use this topology to test BGP MED on IPv4 and IPv6 prefixes. DUT
has to set MED on outgoing EBGP updates.

