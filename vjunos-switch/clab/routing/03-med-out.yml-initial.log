[WARNING]: Invalid characters were found in group names but not replaced, use
-vvvv to see details
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [probe]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [probe]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [probe]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vjunos-switch-clab.yml for dut

TASK [Wait for SSH server] *****************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vm-clab-ssh-check.yml for dut

TASK [Check if 'sshpass' is installed] *****************************************
ok: [dut -> localhost]

TASK [Check for 'timeout' command] *********************************************
ok: [dut -> localhost]

TASK [Execute local ssh command to check vjunos-switch readiness] **************
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (40 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (39 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (38 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-switch readiness (37 retries left).
ok: [dut -> localhost]

TASK [Confirm dut SSH server works] ********************************************
ok: [dut] => 
  msg: Node dut is ready.

TASK [Wait for ge-0/0/0 interface] *********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vjunos-switch.yml for dut

TASK [Wait for ge-0/0/0 to appear] *********************************************
ok: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, probe

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [probe]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [probe]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [probe]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [probe]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [probe]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [probe]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, probe

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [probe]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [probe]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [probe]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [probe]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [probe] => 
  msg: |-
    initial configuration for probe
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname probe
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description probe -> dut [external]
     ip address 10.1.0.2/30
     ipv6 address 2001:db8:3::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    system {
      host-name dut;
      static-host-mapping {
        probe inet 10.0.0.2;
      }
    }
  
  
    interfaces {
      ge-0/0/0 {
        mtu 1514;
      }
  
      lo0.0 {
  
          family inet {
            address 10.0.0.1/32;
          }
          family inet6 {
            address 2001:db8:1:1::1/64;
          }
  
      }
      ge-0/0/0.0 {
        description "dut -> probe [external]";
  
          family inet {
            address 10.1.0.1/30;
          }
          family inet6 {
            address 2001:db8:3::1/64;
          }
  
      }
    }
    protocols {
      lldp {
        interface fxp0 {
          disable;
        }
        interface all;
      }
      router-advertisement {
        interface ge-0/0/0.0;
      }
    }

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for probe

TASK [junos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/junos.j2] ***
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [probe -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [probe]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for probe

TASK [template] ****************************************************************
changed: [probe]

TASK [set_fact] ****************************************************************
ok: [probe]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [probe]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [probe]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [probe]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, probe => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, probe => (item=bgp)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [probe]
ok: [dut]

TASK [Find configuration template for routing] *********************************
ok: [probe]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [probe]

TASK [Find configuration deployment deploy_script for routing] *****************
ok: [probe]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [probe] => 
  msg: |-
    routing configuration for probe
    =========================================
    !
    !
ok: [dut] => 
  msg: |-
    routing configuration for dut
    =========================================
  
  
  
  
    policy-options {
      delete: policy-statement med_42-ipv4;
    }
  
    policy-options {
      policy-statement med_42-ipv4 {
        term seq10 {
          then {
            accept;
          }
        }
        term seq10 {
          then metric 42;
  
        }
  
        term default-reject {
          then {
            reject;
          }
        }
  
      }
    }
  
    policy-options {
      delete: policy-statement med_42-ipv6;
    }
  
    policy-options {
      policy-statement med_42-ipv6 {
        term seq10 {
          then {
            accept;
          }
        }
        term seq10 {
          then metric 42;
  
        }
  
        term default-reject {
          then {
            reject;
          }
        }
  
      }
    }

TASK [Deploy routing configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for probe

TASK [junos_config: deploying routing from /home/pipi/netlab_gh/netsim/ansible/templates/routing/junos.j2] ***
[WARNING]:  statement not found
changed: [dut]

TASK [template] ****************************************************************
changed: [probe]

TASK [set_fact] ****************************************************************
ok: [probe]

TASK [run /tmp/config.sh to deploy routing config from /home/pipi/netlab_gh/netsim/ansible/templates/routing/frr.j2] ***
skipping: [probe]

TASK [run vtysh to import routing config from /home/pipi/netlab_gh/netsim/ansible/templates/routing/frr.j2] ***
changed: [probe]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [probe]
ok: [dut]

TASK [Find configuration template for bgp] *************************************
ok: [probe]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [probe]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [probe]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [probe] => 
  msg: |-
    bgp configuration for probe
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor 10.1.0.1 remote-as 65000
      neighbor 10.1.0.1 description dut
    !
      neighbor 2001:db8:3::1 remote-as 65000
      neighbor 2001:db8:3::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.2/32
    !
    !
    !
      neighbor 10.1.0.1 activate
      no neighbor 10.1.0.1 send-community all
      neighbor 10.1.0.1 send-community standard
      neighbor 10.1.0.1 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:2::/64
    !
    !
    !
      neighbor 2001:db8:3::1 activate
      no neighbor 2001:db8:3::1 send-community all
      neighbor 2001:db8:3::1 send-community standard
      neighbor 2001:db8:3::1 send-community large
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    routing-options {
      autonomous-system 65000;
      router-id 10.0.0.1
    }
    policy-options {
      delete: policy-statement ibgp-export;
      delete: policy-statement ebgp-export;
    }
    policy-options {
      policy-statement ibgp-export {
        term advertise {
          from {
            protocol direct;
            interface [
               lo0.0  ];
          }
          then accept;
        }
        term next-hop-self {
          from {
            route-type external;
          }
          then {
            next-hop self;
          }
        }
      }
      policy-statement ebgp-export {
        term advertise {
          from {
            protocol direct;
            interface [ lo0.0 ];
          }
          then accept;
        }
      }
    }
    protocols {
      delete: bgp;
    }
    protocols {
      bgp {
        group ibgp-peers-ipv4 {
          type internal;
          export ibgp-export;
          advertise-inactive;
        }
        group ibgp-peers-ipv6 {
          type internal;
          export ibgp-export;
          advertise-inactive;
        }
        group ebgp-peers {
          export ebgp-export;
          advertise-inactive;
          neighbor 10.1.0.2 {
            peer-as 65100;
            description probe;
            family inet {
              unicast;
            }
          }
          neighbor 2001:db8:3::2 {
            peer-as 65100;
            description probe;
            family inet6 {
              unicast;
            }
          }
        }
      }
    }

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for probe

TASK [junos_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/junos.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [probe]

TASK [set_fact] ****************************************************************
ok: [probe]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [probe]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [probe]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-custom-config.yml for dut => (item=bgp.policy)

TASK [Find configuration template] *********************************************
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Check is the configuration template is a file] ***************************
ok: [dut -> localhost]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Process template /home/pipi/netlab_gh/netsim/extra/bgp.policy/junos.j2 for dut] ***
skipping: [dut]

TASK [Find custom configuration deployment script] *****************************
ok: [dut]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for dut

TASK [junos_config: deploying bgp.policy from /home/pipi/netlab_gh/netsim/extra/bgp.policy/junos.j2] ***
[WARNING]: mgd: statement has no contents; ignored
changed: [dut]

PLAY RECAP *********************************************************************
dut                        : ok=42   changed=4    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
probe                      : ok=36   changed=7    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   



Use this topology to test BGP MED on IPv4 and IPv6 prefixes. DUT
has to set MED on outgoing EBGP updates.

