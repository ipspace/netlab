[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r]

TASK [Find device readiness script] ********************************************
ok: [r]

TASK [Wait for device to become ready] *****************************************
skipping: [r]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for r

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [r]

TASK [Find configuration template for normalize] *******************************
ok: [r]

TASK [fail] ********************************************************************
skipping: [r]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [r]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r]

TASK [Deploy normalize configuration] ******************************************
skipping: [r]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for r

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [r]

TASK [Find configuration template for initial] *********************************
ok: [r]

TASK [fail] ********************************************************************
skipping: [r]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [r]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r] => 
  msg: |-
    initial configuration for r
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    cat <<SCRIPT >.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    echo "Use sudo vtysh to connect to FRR daemon"
    echo
    SCRIPT
  
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 r
    2001:db8:0:1::1 r
    2001:db8:1:3::1 Ethernet12.r
    172.16.4.1 Ethernet16.r
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    config interface ipv6 disable use-link-local-only Ethernet4
    #
    # Configure interfaces
    #
    config hostname r
    if ip link|grep Loopback0; then
      echo Loopback0 already exists
    else
      config loopback add Loopback0
    fi
    if show ip interface|grep Loopback0|grep 10.0.0.1/32; then
      echo 10.0.0.1/32 already configured on Loopback0
    else
      config interface ip add Loopback0 10.0.0.1/32
    fi
    if show ipv6 interface|grep Loopback0|grep 2001:db8:0:1::1/64; then
      echo 2001:db8:0:1::1/64 already configured on Loopback0
    else
      config interface ip add Loopback0 2001:db8:0:1::1/64
    fi
    !
    if show ip interface|grep Ethernet0|grep 10.0.0.1/32; then
      echo 10.0.0.1/32 already configured on Ethernet0
    else
      config interface ip add Ethernet0 10.0.0.1/32
    fi
    config interface ipv6 enable use-link-local-only Ethernet0
    config interface mtu Ethernet0 1548
    !
    if show ip interface|grep Ethernet4|grep 10.0.0.1/32; then
      echo 10.0.0.1/32 already configured on Ethernet4
    else
      config interface ip add Ethernet4 10.0.0.1/32
    fi
    config interface mtu Ethernet4 1548
    !
    config interface ipv6 enable use-link-local-only Ethernet8
    config interface mtu Ethernet8 1548
    !
    if show ip interface|grep Ethernet12|grep 10.0.0.1/32; then
      echo 10.0.0.1/32 already configured on Ethernet12
    else
      config interface ip add Ethernet12 10.0.0.1/32
    fi
    config interface ipv6 enable use-link-local-only Ethernet12
    if show ipv6 interface|grep Ethernet12|grep 2001:db8:1:3::1/64; then
      echo 2001:db8:1:3::1/64 already configured on Ethernet12
    else
      config interface ip add Ethernet12 2001:db8:1:3::1/64
    fi
    config interface mtu Ethernet12 1548
    !
    if show ip interface|grep Ethernet16|grep 172.16.4.1/24; then
      echo 172.16.4.1/24 already configured on Ethernet16
    else
      config interface ip add Ethernet16 172.16.4.1/24
    fi
    config interface ipv6 enable use-link-local-only Ethernet16
    config interface mtu Ethernet16 1548
    !
    #
    # Rest of initial configuration done through VTYSH
    # Make sure it's ready
    #
    if vtysh -c 'show running' >/dev/null; then
      echo vtysh is ready
    else
      echo 'giving vtysh some more time :('
      sleep 5
    fi
    #
    # And now let's configure the interfaces
    #
    cat >/etc/sonic/frr/do_config <<CONFIG
    hostname r
    !
    ipv6 forwarding
    !
    interface Loopback0
     no shutdown
    !
    interface Ethernet0
     no shutdown
     description r -> stub [stub]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface Ethernet4
     no shutdown
     description r -> stub [stub]
    !
    interface Ethernet8
     no shutdown
     description r -> stub [stub]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface Ethernet12
     no shutdown
     description r -> stub [stub]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface Ethernet16
     no shutdown
     description r -> stub [stub]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    docker exec bgp vtysh -f /etc/frr/do_config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sonic.yml for r

TASK [template] ****************************************************************
changed: [r]

TASK [set_fact] ****************************************************************
ok: [r]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/sonic.j2] ***
changed: [r]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/sonic.j2] ***
skipping: [r]

PLAY [Deploy module-specific configurations] ***********************************
skipping: no hosts matched

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
r                          : ok=15   changed=2    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   



This test checks that the initial configuration doesn't crash when dealing
with the all possible combinations of unnumbered interfaces. Use OSPFv2/OSPFv3
integration tests to validate the unnumbered interface functionality.

