[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [srv]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [srv]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, srv

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [h1]
ok: [h2]
ok: [srv]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [srv]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [srv]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, srv

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [h1]
ok: [h2]
ok: [srv]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [srv]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [srv]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.4 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.4 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.4 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.4 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.2/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.4 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [srv] => 
  msg: |-
    initial configuration for srv
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.2.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.2.3/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.2.4 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.2.4 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.2.4 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.2.4 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
    - set:
        system:
          hostname: dut
          config:
            snippet:
              system-mtu:
                file: /etc/network/ifupdown2/policy.d/mtu.json
                content: |
                  { "address": { "defaults": { "mtu": "1500" } } }
  
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              state:
                up : {}
            description: "dut -> h1 [stub]"
            ip:
              address:
                172.16.0.4/24: {}
              ipv6:
                enable: off
  
          swp2:
            type: swp
            link:
              state:
                up : {}
            description: "dut -> h2 [stub]"
            ip:
              address:
                172.16.1.4/24: {}
              ipv6:
                enable: off
  
          swp3:
            type: swp
            link:
              state:
                up : {}
            description: "dut -> srv [stub]"
            ip:
              address:
                172.16.2.4/24: {}
              ipv6:
                enable: off
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.4/32: {}
              ipv6:
                enable: off

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, srv

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [copy the cumulus nvue YAML initial config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/initial/cumulus_nvue.j2)] ***
changed: [dut]

TASK [Wait for nvued to start] *************************************************
ok: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [execute on cumulus: 'nv config patch' for initial config] ****************
changed: [dut]

TASK [execute on cumulus: 'nv config apply -y' for initial config] *************
changed: [dut]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [srv]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [srv -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [srv -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [srv -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-ng1_wnye.sh] ***********************
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [srv -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut => (item=vrf)

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [dut]

TASK [Find configuration template for vrf] *************************************
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Find configuration deployment deploy_script for vrf] *********************
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
    ---
    - set:
        vrf:
          blue:
            table: auto
          common:
            table: auto
          red:
            table: auto
  
  
    - set:
        router:
          bgp:
            enable: on
            autonomous-system: 65000
            router-id: 10.0.0.4
    - set:
        vrf:
          default:
            router:
              bgp:
                enable: on
                autonomous-system: 65000
                router-id: 10.0.0.4
                address-family:
                  ipv4-unicast:
                    enable: on
  
                    network:
                      10.0.0.4/32: {}
    - set:
        vrf:
          blue:
            router:
              bgp:
                enable: on
                autonomous-system: 65000
                router-id: 10.0.0.4
                rd: 65000:2
                address-family:
                  ipv4-unicast:
                    enable: on
                    redistribute:
                      connected:
                        enable: on
  
  
    - set:
        vrf:
          common:
            router:
              bgp:
                enable: on
                autonomous-system: 65000
                router-id: 10.0.0.4
                rd: 65000:3
                address-family:
                  ipv4-unicast:
                    enable: on
                    redistribute:
                      connected:
                        enable: on
  
  
    - set:
        vrf:
          red:
            router:
              bgp:
                enable: on
                autonomous-system: 65000
                router-id: 10.0.0.4
                rd: 65000:1
                address-family:
                  ipv4-unicast:
                    enable: on
                    redistribute:
                      connected:
                        enable: on
  
  
  
    - set:
        system:
          config:
            snippet:
              frr.conf: |
                router bgp 65000 vrf blue
                  address-family ipv4 unicast
                    label vpn export auto
                    export vpn
                    import vpn
                    rd vpn export 65000:2
                    rt vpn import 65000:2 65000:3
                    rt vpn export 65000:2
                    exit-address-family
                !
                router bgp 65000 vrf common
                  address-family ipv4 unicast
                    label vpn export auto
                    export vpn
                    import vpn
                    rd vpn export 65000:3
                    rt vpn import 65000:1 65000:2 65000:3
                    rt vpn export 65000:3
                    exit-address-family
                !
                router bgp 65000 vrf red
                  address-family ipv4 unicast
                    label vpn export auto
                    export vpn
                    import vpn
                    rd vpn export 65000:1
                    rt vpn import 65000:1 65000:3
                    rt vpn export 65000:1
                    exit-address-family
                !
  
    - set:
        interface:
          swp1:
            ip:
              vrf: red
    - set:
        interface:
          swp2:
            ip:
              vrf: blue
    - set:
        interface:
          swp3:
            ip:
              vrf: common

TASK [Deploy vrf configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for dut

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [copy the cumulus nvue YAML vrf config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/cumulus_nvue.j2)] ***
changed: [dut]

TASK [Wait for nvued to start] *************************************************
skipping: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [execute on cumulus: 'nv config patch' for vrf config] ********************
changed: [dut]

TASK [execute on cumulus: 'nv config apply -y' for vrf config] *****************
changed: [dut]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=30   changed=6    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
srv                        : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   



The device under test has two user VRFs and a common services VRF. The
lab tests inter-VRF route leaking between common VRF and other VRFs

* h1 and h2 should be able to ping srv but not each other

