[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [ros]
ok: [r1]
ok: [r2]
ok: [s1]
ok: [s2]

TASK [Find device readiness script] ********************************************
ok: [ros]
ok: [r1]
ok: [r2]
ok: [s1]
ok: [s2]

TASK [Wait for device to become ready] *****************************************
skipping: [ros]
skipping: [r1]
skipping: [r2]
skipping: [s1]
skipping: [s2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ros, r1, r2, s1, s2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [ros]
ok: [r1]
ok: [r2]
ok: [s1]
ok: [s2]

TASK [Find configuration template for normalize] *******************************
ok: [ros]
ok: [r1]
ok: [r2]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [r1]
skipping: [r2]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [ros]
ok: [r1]
ok: [r2]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ros]
skipping: [r1]
skipping: [r2]
skipping: [s1]
skipping: [s2]

TASK [Deploy normalize configuration] ******************************************
skipping: [ros]
skipping: [r1]
skipping: [r2]
skipping: [s1]
skipping: [s2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ros, r1, r2, s1, s2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [ros]
ok: [r1]
ok: [r2]
ok: [s1]
ok: [s2]

TASK [Find configuration template for initial] *********************************
ok: [ros]
ok: [r1]
ok: [r2]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [r1]
skipping: [r2]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [ros]
ok: [r1]
ok: [r2]
ok: [s2]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ros] => 
  msg: |-
    initial configuration for ros
    =========================================
  
    - set:
        system:
          hostname: ros
          config:
            snippet:
              system-mtu:
                file: /etc/network/ifupdown2/policy.d/mtu.json
                content: |
                  { "address": { "defaults": { "mtu": "1500" } } }
  
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              state:
                up : {}
            description: "ros -> [r1,s1,s2]"
            ip:
              address:
                172.16.0.1/24: {}
              ipv6:
                enable: off
  
          swp1.701:
            type: sub
            link:
              state:
                up : {}
            description: "ros -> [r2,s1,s2]"
            ip:
              address:
                172.16.1.1/24: {}
              ipv6:
                enable: off
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.1/32: {}
              ipv6:
                enable: off
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description r1 -> [s1,s2,ros]
     ip address 172.16.0.4/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.5/32
    !
    interface eth1
     no shutdown
     description r2 -> [ros,s1,s2]
     ip address 172.16.1.5/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description s2 -> s1
     ! no ip address
    !
    interface eth2
     no shutdown
     description s2 -> ros
     ! no ip address
    !
    interface eth1.701
     no shutdown
     description [SubIf VLAN blue] s2 -> s1
     ! no ip address
    !
    interface eth1.700
     no shutdown
     description [SubIf VLAN red] s2 -> s1
     ! no ip address
    !
    interface eth2.701
     no shutdown
     description [SubIf VLAN blue] s2 -> ros
     ! no ip address
    !
    interface vlan700
     no shutdown
     description VLAN red (700) -> [r1,s1,ros]
     ip address 172.16.0.3/24
    !
    interface vlan701
     no shutdown
     description VLAN blue (701) -> [ros,r2,s1]
     ip address 172.16.1.3/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description s1 -> s2
     ! no ip address
    !
    interface eth2
     no shutdown
     description [Access VLAN red] s1 -> r1
     ! no ip address
    !
    interface eth3
     no shutdown
     description [Access VLAN blue] s1 -> r2
     ! no ip address
    !
    interface eth1.701
     no shutdown
     description [SubIf VLAN blue] s1 -> s2
     ! no ip address
    !
    interface eth1.700
     no shutdown
     description [SubIf VLAN red] s1 -> s2
     ! no ip address
    !
    interface vlan700
     no shutdown
     description VLAN red (700) -> [r1,s2,ros]
     ip address 172.16.0.2/24
    !
    interface vlan701
     no shutdown
     description VLAN blue (701) -> [ros,r2,s2]
     ip address 172.16.1.2/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for ros
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for r1, r2, s1, s2

TASK [set_fact] ****************************************************************
ok: [ros]

TASK [copy the cumulus nvue YAML initial config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/initial/cumulus_nvue.j2)] ***
changed: [ros]

TASK [Wait for nvued to start] *************************************************
ok: [ros]

TASK [set_fact] ****************************************************************
ok: [ros]

TASK [execute on cumulus: 'nv config patch' for initial config] ****************
changed: [ros]

TASK [execute on cumulus: 'nv config apply -y' for initial config] *************
changed: [ros]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [r1]
skipping: [r2]
skipping: [s1]
skipping: [s2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for r1, r2, s1, s2

TASK [template] ****************************************************************
changed: [r1]
changed: [r2]
changed: [s2]
changed: [s1]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]
ok: [s1]
ok: [s2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [r2]
changed: [r1]
changed: [s1]
changed: [s2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [r1]
skipping: [r2]
skipping: [s1]
skipping: [s2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r1]
ok: [r2]
ok: [ros]
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for r1, r2, ros, s1, s2 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for r1, r2, ros, s1, s2 => (item=ospf)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [r1]
ok: [r2]
ok: [ros]
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
skipping: [r1]
skipping: [r2]
ok: [ros]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [r1]
skipping: [r2]
skipping: [ros]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [r1]
skipping: [r2]
ok: [ros]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r1]
skipping: [r2]
ok: [ros] => 
  msg: |-
    vlan configuration for ros
    =========================================
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/eth1.701 ]; then
      ip link add link eth1 name eth1.701 type vlan id 701
      ip link set dev eth1.701 up
    fi
    if [ ! -e /sys/devices/virtual/net/eth1.700 ]; then
      ip link add link eth1 name eth1.700 type vlan id 700
      ip link set dev eth1.700 up
    fi
    if [ ! -e /sys/devices/virtual/net/vlan700 ]; then
      brctl addbr vlan700
      ip link set dev vlan700 address 52:dc:ca:fd:02:00
  
      ip link set dev vlan700 mtu 1500
      ip addr flush dev vlan700
      ip addr add 172.16.0.2/24 dev vlan700
    fi
    if [ ! -e /sys/devices/virtual/net/vlan701 ]; then
      brctl addbr vlan701
      ip link set dev vlan701 address 52:dc:ca:fd:02:01
  
      ip link set dev vlan701 mtu 1500
      ip addr flush dev vlan701
      ip addr add 172.16.1.2/24 dev vlan701
    fi
  
    brctl addif vlan700 eth2
    brctl addif vlan701 eth3
    brctl addif vlan701 eth1.701
    brctl addif vlan700 eth1.700
  
    ip link set dev vlan700 up
    ip link set dev vlan701 up
    exit 0
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/eth1.701 ]; then
      ip link add link eth1 name eth1.701 type vlan id 701
      ip link set dev eth1.701 up
    fi
    if [ ! -e /sys/devices/virtual/net/eth1.700 ]; then
      ip link add link eth1 name eth1.700 type vlan id 700
      ip link set dev eth1.700 up
    fi
    if [ ! -e /sys/devices/virtual/net/eth2.701 ]; then
      ip link add link eth2 name eth2.701 type vlan id 701
      ip link set dev eth2.701 up
    fi
    if [ ! -e /sys/devices/virtual/net/vlan700 ]; then
      brctl addbr vlan700
      ip link set dev vlan700 address 52:dc:ca:fd:03:00
  
      ip link set dev vlan700 mtu 1500
      ip addr flush dev vlan700
      ip addr add 172.16.0.3/24 dev vlan700
    fi
    if [ ! -e /sys/devices/virtual/net/vlan701 ]; then
      brctl addbr vlan701
      ip link set dev vlan701 address 52:dc:ca:fd:03:01
  
      ip link set dev vlan701 mtu 1500
      ip addr flush dev vlan701
      ip addr add 172.16.1.3/24 dev vlan701
    fi
  
    brctl addif vlan700 eth2
    brctl addif vlan701 eth1.701
    brctl addif vlan700 eth1.700
    brctl addif vlan701 eth2.701
  
    ip link set dev vlan700 up
    ip link set dev vlan701 up
    exit 0

TASK [Deploy vlan configuration] ***********************************************
skipping: [r1]
skipping: [r2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for ros
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s1, s2

TASK [set_fact] ****************************************************************
ok: [ros]

TASK [copy the cumulus nvue YAML vlan config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/cumulus_nvue.j2)] ***
changed: [ros]

TASK [Wait for nvued to start] *************************************************
skipping: [ros]

TASK [set_fact] ****************************************************************
ok: [ros]

TASK [execute on cumulus: 'nv config patch' for vlan config] *******************
changed: [ros]

TASK [execute on cumulus: 'nv config apply -y' for vlan config] ****************
changed: [ros]

TASK [template] ****************************************************************
changed: [s2]
changed: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
changed: [s1]
changed: [s2]

TASK [run vtysh to import vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [s1]
skipping: [s2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [r1]
ok: [r2]
ok: [ros]
ok: [s1]
ok: [s2]

TASK [Find configuration template for ospf] ************************************
ok: [r1]
skipping: [s1]
ok: [r2]
skipping: [s2]
ok: [ros]

TASK [fail] ********************************************************************
skipping: [r1]
skipping: [r2]
skipping: [ros]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [s1]
ok: [r1]
skipping: [s2]
ok: [r2]
ok: [ros]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]
ok: [ros] => 
  msg: |-
    ospf configuration for ros
    =========================================
    - set:
        router:
          ospf:
            enable: on
  
  
    - set:
        vrf:
          default:
            router:
              ospf:
                enable: on
  
                router-id: 10.0.0.1
  
        interface:
          lo:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
          swp1:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
          swp1.701:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
ok: [r1] => 
  msg: |-
    ospf configuration for r1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.4
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r1 -> [s1,s2,ros]
     ip ospf area 0.0.0.0
    !
  
    !
    do write
ok: [r2] => 
  msg: |-
    ospf configuration for r2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.5
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r2 -> [ros,s1,s2]
     ip ospf area 0.0.0.0
    !
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
skipping: [s1]
skipping: [s2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for r1, r2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for ros

TASK [template] ****************************************************************
changed: [r2]
changed: [r1]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [r1]
skipping: [r2]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [r2]
changed: [r1]

TASK [set_fact] ****************************************************************
ok: [ros]

TASK [copy the cumulus nvue YAML ospf config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/cumulus_nvue.j2)] ***
changed: [ros]

TASK [Wait for nvued to start] *************************************************
skipping: [ros]

TASK [set_fact] ****************************************************************
ok: [ros]

TASK [execute on cumulus: 'nv config patch' for ospf config] *******************
changed: [ros]

TASK [execute on cumulus: 'nv config apply -y' for ospf config] ****************
changed: [ros]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
r1                         : ok=29   changed=5    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
r2                         : ok=28   changed=4    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
ros                        : ok=41   changed=9    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
s1                         : ok=28   changed=4    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
s2                         : ok=28   changed=4    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   



A router-on-a-stick is attached to a VLAN trunk and runs OSPF on all attached
VLANs. One of the VLANs is a native VLAN between router-on-stick and switch.

* r1, r2, and ros should be able to ping each other

Please note it might take a while for the lab to work due to
STP and OSPF setup phase

