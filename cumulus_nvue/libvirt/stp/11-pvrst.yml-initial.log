[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Find device readiness script] ********************************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Wait for device to become ready] *****************************************
skipping: [dut_a]
skipping: [dut_b]
skipping: [x1]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut_a, dut_b, x1

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Find configuration template for normalize] *******************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut_a]
skipping: [dut_b]
skipping: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut_a]
skipping: [dut_b]
ok: [x1] => 
  msg: |-
    normalize configuration for x1
    =========================================
    !
    interface Ethernet1
     no switchport
     mac-address 52dc.cafe.0301
    !
    interface Ethernet2
     no switchport
     mac-address 52dc.cafe.0302

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [dut_a]
skipping: [dut_b]
ok: [x1]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut_a]
skipping: [dut_b]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut_a, dut_b, x1

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Find configuration template for initial] *********************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut_a]
skipping: [dut_b]
skipping: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut_a] => 
  msg: |-
    initial configuration for dut_a
    =========================================
  
    - set:
        system:
          hostname: dut-a
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              mtu: 1500
              state:
                up : {}
            description: "dut_a -> x1"
  
          swp2:
            type: swp
            link:
              mtu: 1500
              state:
                up : {}
            description: "dut_a -> dut_b"
  
          vlan76:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN blue (76) -> [x1,dut_b]"
  
          vlan42:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN red (42) -> [x1,dut_b]"
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.1/32: {}
              ipv6:
                enable: off
ok: [dut_b] => 
  msg: |-
    initial configuration for dut_b
    =========================================
  
    - set:
        system:
          hostname: dut-b
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              mtu: 1500
              state:
                up : {}
            description: "dut_b -> x1"
  
          swp2:
            type: swp
            link:
              mtu: 1500
              state:
                up : {}
            description: "dut_b -> dut_a"
  
          vlan76:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN blue (76) -> [x1,dut_a]"
  
          vlan42:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN red (42) -> [x1,dut_a]"
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.2/32: {}
              ipv6:
                enable: off
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    hostname x1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    !
    ip host duta 10.0.0.1
    ip host dutb 10.0.0.2
    !
    interface Management1
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.3/32
    !
    interface Ethernet1
     no switchport
     description x1 -> dut_a
    !
     mac-address 52dc.cafe.0301
     no shutdown
    !
    interface Ethernet2
     no switchport
     description x1 -> dut_b
    !
     mac-address 52dc.cafe.0302
     no shutdown
    !
    interface Vlan76
     description VLAN blue (76) -> [dut_a,dut_b]
    !
    interface Vlan42
     description VLAN red (42) -> [dut_a,dut_b]
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for dut_a, dut_b
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [set_fact] ****************************************************************
ok: [dut_a]
ok: [dut_b]

TASK [copy the cumulus nvue YAML initial config file to switch (generated from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus_nvue.j2)] ***
changed: [dut_b]
changed: [dut_a]

TASK [Wait for nvued to start] *************************************************
ok: [dut_b]
ok: [dut_a]

TASK [set_fact] ****************************************************************
ok: [dut_a]
ok: [dut_b]

TASK [execute on cumulus: 'nv config patch' for initial config] ****************
changed: [dut_a]
changed: [dut_b]

TASK [execute on cumulus: 'nv config apply -y' for initial config] *************
changed: [dut_a]
changed: [dut_b]

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [x1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut_a, dut_b, x1 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut_a, dut_b, x1 => (item=stp)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Find configuration template for vlan] ************************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut_a]
skipping: [dut_b]
skipping: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut_a] => 
  msg: |-
    vlan configuration for dut_a
    =========================================
    - set:
        bridge:
          domain:
            br_default:
              mac-address: "08:4f:c2:a9:00:01" # The default 'auto' setting picks the same MAC for multiple instances!
              untagged: 1
              vlan:
                '76': {}
                '42': {}
  
  
        interface:
         swp1:
           bridge:
             domain:
               br_default:
                 vlan:
                   '42': {}
                   '76': {}
         swp2:
           bridge:
             domain:
               br_default:
                 vlan:
                   '42': {}
                   '76': {}
ok: [dut_b] => 
  msg: |-
    vlan configuration for dut_b
    =========================================
    - set:
        bridge:
          domain:
            br_default:
              mac-address: "08:4f:c2:a9:00:02" # The default 'auto' setting picks the same MAC for multiple instances!
              untagged: 1
              vlan:
                '76': {}
                '42': {}
  
  
        interface:
         swp1:
           bridge:
             domain:
               br_default:
                 vlan:
                   '42': {}
                   '76': {}
         swp2:
           bridge:
             domain:
               br_default:
                 vlan:
                   '42': {}
                   '76': {}
ok: [x1] => 
  msg: |-
    vlan configuration for x1
    =========================================
    vlan 76
     name blue
    !
    vlan 42
     name red
    !
  
    !
    interface Ethernet1
     switchport
     switchport mode trunk
     switchport trunk allowed vlan 42,76
    !
    interface Ethernet2
     switchport
     switchport mode trunk
     switchport trunk allowed vlan 42,76
    !
    interface Vlan76
    !
    interface Vlan42

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for dut_a, dut_b
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [set_fact] ****************************************************************
ok: [dut_a]
ok: [dut_b]

TASK [copy the cumulus nvue YAML vlan config file to switch (generated from /home/pipi/net101/tools/netsim/ansible/templates/vlan/cumulus_nvue.j2)] ***
changed: [dut_b]
changed: [dut_a]

TASK [Wait for nvued to start] *************************************************
skipping: [dut_a]
skipping: [dut_b]

TASK [set_fact] ****************************************************************
ok: [dut_a]
ok: [dut_b]

TASK [execute on cumulus: 'nv config patch' for vlan config] *******************
changed: [dut_a]
changed: [dut_b]

TASK [execute on cumulus: 'nv config apply -y' for vlan config] ****************
changed: [dut_a]
changed: [dut_b]

TASK [eos_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/eos.j2] ***
changed: [x1]

TASK [Figure out whether to deploy the module stp on current device] ***********
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Find configuration template for stp] *************************************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut_a]
skipping: [dut_b]
skipping: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut_a] => 
  msg: |-
    stp configuration for dut_a
    =========================================
    - set:
        bridge:
          domain:
            br_default:
              stp:
                mode: pvrst
                state:
                  up: {}
                vlan:
                 '76':
                   bridge-priority: 32768
                 '42':
                   bridge-priority: 4096
  
    # When using PVRST, NVidia recommends to increase from default 2000 pps
        system:
          control-plane:
            policer:
              rpvst:
                burst: 7200
                rate: 7200
ok: [dut_b] => 
  msg: |-
    stp configuration for dut_b
    =========================================
    - set:
        bridge:
          domain:
            br_default:
              stp:
                mode: pvrst
                state:
                  up: {}
                priority: 12288
                vlan:
                 '76':
                   bridge-priority: 12288
                 '42':
                   bridge-priority: 12288
  
    # When using PVRST, NVidia recommends to increase from default 2000 pps
        system:
          control-plane:
            policer:
              rpvst:
                burst: 7200
                rate: 7200
ok: [x1] => 
  msg: |-
    stp configuration for x1
    =========================================
    spanning-tree mode rapid-pvst
  
    spanning-tree priority 16384
  
    spanning-tree vlan-id 76 priority 16384
    spanning-tree vlan-id 42 priority 16384

TASK [Find configuration deployment deploy_script for stp] *********************
ok: [dut_a]
ok: [dut_b]
ok: [x1]

TASK [Deploy stp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for dut_a, dut_b
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [set_fact] ****************************************************************
ok: [dut_a]
ok: [dut_b]

TASK [copy the cumulus nvue YAML stp config file to switch (generated from /home/pipi/net101/tools/netsim/ansible/templates/stp/cumulus_nvue.j2)] ***
changed: [dut_a]
changed: [dut_b]

TASK [Wait for nvued to start] *************************************************
skipping: [dut_a]
skipping: [dut_b]

TASK [set_fact] ****************************************************************
ok: [dut_a]
ok: [dut_b]

TASK [execute on cumulus: 'nv config patch' for stp config] ********************
changed: [dut_b]
changed: [dut_a]

TASK [execute on cumulus: 'nv config apply -y' for stp config] *****************
changed: [dut_a]
changed: [dut_b]

TASK [eos_config: deploying stp from /home/pipi/net101/tools/netsim/ansible/templates/stp/eos.j2] ***
changed: [x1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut_a                      : ok=40   changed=9    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   
dut_b                      : ok=40   changed=9    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   
x1                         : ok=31   changed=4    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   



The devices under test form a layer-2 triangle of VLAN trunks. The devices
are running PVRST and have different per-VLAN root priorities.

If DUT_A and DUT_B run PVRST and has correct per-VLAN root priorities, DUT_A becomes the
root bridge for red VLAN and DUT_B becomes the root bridge for the blue VLAN.

