[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r]

TASK [Find device readiness script] ********************************************
ok: [r]

TASK [Wait for device to become ready] *****************************************
skipping: [r]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for r

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [r]

TASK [Find configuration template for normalize] *******************************
ok: [r]

TASK [fail] ********************************************************************
skipping: [r]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [r]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r]

TASK [Deploy normalize configuration] ******************************************
skipping: [r]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for r

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [r]

TASK [Find configuration template for initial] *********************************
ok: [r]

TASK [fail] ********************************************************************
skipping: [r]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [r]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r] => 
  msg: |-
    initial configuration for r
    =========================================
  
    - set:
        system:
          hostname: r
          config:
            snippet:
              system-mtu:
                file: /etc/network/ifupdown2/policy.d/mtu.json
                content: |
                  { "address": { "defaults": { "mtu": "1500" } } }
        bridge:
          domain:
            br_default:
              type: vlan-aware
              # The default 'auto' setting reads the EEPROM to pick the same MAC for all instances!
              mac-address: "08:4f:c2:a9:00:01"
              untagged: 1
  
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              state:
                up : {}
            description: "r -> stub [stub]"
            ip:
              address:
                10.0.0.1/32: {}
              ipv6:
                forward: on
              neighbor-discovery:
                enable: on
                router-advertisement:
                  enable: on
                  interval: 5000
  
          swp2:
            type: swp
            link:
              state:
                up : {}
            description: "r -> stub [stub]"
            ip:
              address:
                10.0.0.1/32: {}
              ipv6:
                enable: off
  
          swp3:
            type: swp
            link:
              state:
                up : {}
            description: "r -> stub [stub]"
            ip:
              ipv6:
                forward: on
              neighbor-discovery:
                enable: on
                router-advertisement:
                  enable: on
                  interval: 5000
  
          swp4:
            type: swp
            link:
              state:
                up : {}
            description: "r -> stub [stub]"
            ip:
              address:
                10.0.0.1/32: {}
                2001:db8:1:3::1/64: {}
              ipv6:
                forward: on
              neighbor-discovery:
                enable: on
                router-advertisement:
                  enable: on
                  interval: 5000
  
          swp5:
            type: swp
            link:
              state:
                up : {}
            description: "r -> stub [stub]"
            ip:
              address:
                172.16.4.1/24: {}
              ipv6:
                forward: on
              neighbor-discovery:
                enable: on
                router-advertisement:
                  enable: on
                  interval: 5000
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.1/32: {}
                2001:db8:0:1::1/64: {}

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for r

TASK [set_fact] ****************************************************************
ok: [r]

TASK [copy the cumulus nvue YAML initial config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/initial/cumulus_nvue.j2)] ***
changed: [r]

TASK [Wait for nvued to start] *************************************************
ok: [r]

TASK [set_fact] ****************************************************************
ok: [r]

TASK [execute on cumulus: 'nv config patch' for initial config] ****************
changed: [r]

TASK [execute on cumulus: 'nv config apply -y' for initial config] *************
changed: [r]

PLAY [Deploy module-specific configurations] ***********************************
skipping: no hosts matched

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
r                          : ok=18   changed=3    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   



This test checks that the initial configuration doesn't crash when dealing
with the all possible combinations of unnumbered interfaces. Use OSPFv2/OSPFv3
integration tests to validate the unnumbered interface functionality.

