[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [x1]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [x1]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [rr2]
skipping: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, rr2, x1

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [x1]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
    - set:
        system:
          hostname: dut
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              mtu: 1500
              state:
                up: {}
            description: "dut -> r1"
            ip:
              address:
                172.16.0.1/24: {}
              ipv6:
                enable: off
  
  
          swp2:
            type: swp
            link:
              mtu: 1500
              state:
                up: {}
            description: "dut -> x1 [external]"
            ip:
              address:
                172.16.3.1/24: {}
              ipv6:
                enable: off
  
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.1/32: {}
              ipv6:
                enable: off
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    ip link set eth2 mtu 1500
    ip link set eth3 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.10/32
    !
    interface eth1
     no shutdown
     description r1 -> dut
     ip address 172.16.0.10/24
    !
    interface eth2
     no shutdown
     description r1 -> rr2
     ip address 172.16.1.10/24
    !
    interface eth3
     no shutdown
     description r1 -> r2
     ip address 172.16.2.10/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description r2 -> r1
     ip address 172.16.2.3/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [rr2] => 
  msg: |-
    initial configuration for rr2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname rr2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description rr2 -> r1
     ip address 172.16.1.2/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 172.42.42.1/24
    !
    interface eth1
     no shutdown
     description x1 -> dut [external]
     ip address 172.16.3.4/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [x1]
ok: [rr2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for r1, r2, rr2, x1

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [copy the cumulus nvue YAML initial config file to switch (generated from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus_nvue.j2)] ***
changed: [dut]

TASK [Wait for nvued to start] *************************************************
ok: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [execute on cumulus: 'nv config patch' for initial config] ****************
changed: [dut]

TASK [execute on cumulus: 'nv config apply -y' for initial config] *************
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [r1]
skipping: [r2]
skipping: [rr2]
skipping: [x1]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for r1, r2, rr2, x1

TASK [template] ****************************************************************
changed: [r2]
changed: [r1]
changed: [rr2]
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [x1]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [r1]
changed: [r2]
changed: [rr2]
changed: [x1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [r1]
skipping: [r2]
skipping: [rr2]
skipping: [x1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [x1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, rr2, x1 => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, rr2, x1 => (item=ospf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [x1]

TASK [Find configuration template for bgp] *************************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [x1]
ok: [rr2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    - set:
        router:
          bgp:
            enable: on
        vrf:
          default:
            router:
              bgp:
                address-family:
                  ipv4-unicast:
                    enable: on
                    network:
                      10.0.0.1/32: {}
                autonomous-system: 65000
                neighbor:
                  10.0.0.2:
                    remote-as: 65000
                    address-family:
                      ipv4-unicast:
                        enable: on
                        nexthop-setting: self
                        community-advertise:
                          regular: on
                          extended: on
                  10.0.0.10:
                    remote-as: 65000
                    address-family:
                      ipv4-unicast:
                        enable: on
                        nexthop-setting: self
                        route-reflector-client: on
                        community-advertise:
                          regular: on
                          extended: on
                  10.0.0.3:
                    remote-as: 65000
                    address-family:
                      ipv4-unicast:
                        enable: on
                        nexthop-setting: self
                        route-reflector-client: on
                        community-advertise:
                          regular: on
                          extended: on
                  172.16.3.4:
                    remote-as: 65101
                    address-family:
                      ipv4-unicast:
                        enable: on
                        community-advertise:
                          regular: on
                router-id: 10.0.0.1
ok: [r1] => 
  msg: |-
    bgp configuration for r1
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.10
    !
      neighbor 10.0.0.1 remote-as 65000
      neighbor 10.0.0.1 description dut
      neighbor 10.0.0.1 update-source lo
    !
      neighbor 10.0.0.2 remote-as 65000
      neighbor 10.0.0.2 description rr2
      neighbor 10.0.0.2 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.10/32
    !
    !
      network 172.0.42.0/24
    !
      neighbor 10.0.0.1 activate
      neighbor 10.0.0.1 next-hop-self
      no neighbor 10.0.0.1 send-community all
      neighbor 10.0.0.1 send-community standard
      neighbor 10.0.0.1 send-community large
      neighbor 10.0.0.1 send-community extended
    !
      neighbor 10.0.0.2 activate
      neighbor 10.0.0.2 next-hop-self
      no neighbor 10.0.0.2 send-community all
      neighbor 10.0.0.2 send-community standard
      neighbor 10.0.0.2 send-community large
      neighbor 10.0.0.2 send-community extended
    !
    !
    ip route 172.0.42.0/24 Null0
    !
    do write
ok: [r2] => 
  msg: |-
    bgp configuration for r2
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 10.0.0.1 remote-as 65000
      neighbor 10.0.0.1 description dut
      neighbor 10.0.0.1 update-source lo
    !
      neighbor 10.0.0.2 remote-as 65000
      neighbor 10.0.0.2 description rr2
      neighbor 10.0.0.2 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.3/32
    !
    !
    !
      neighbor 10.0.0.1 activate
      neighbor 10.0.0.1 next-hop-self
      no neighbor 10.0.0.1 send-community all
      neighbor 10.0.0.1 send-community standard
      neighbor 10.0.0.1 send-community large
      neighbor 10.0.0.1 send-community extended
    !
      neighbor 10.0.0.2 activate
      neighbor 10.0.0.2 next-hop-self
      no neighbor 10.0.0.2 send-community all
      neighbor 10.0.0.2 send-community standard
      neighbor 10.0.0.2 send-community large
      neighbor 10.0.0.2 send-community extended
    !
    !
    !
    do write
ok: [rr2] => 
  msg: |-
    bgp configuration for rr2
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
      bgp cluster-id 10.0.0.43
    !
      neighbor 10.0.0.1 remote-as 65000
      neighbor 10.0.0.1 description dut
      neighbor 10.0.0.1 update-source lo
    !
      neighbor 10.0.0.10 remote-as 65000
      neighbor 10.0.0.10 description r1
      neighbor 10.0.0.10 update-source lo
    !
      neighbor 10.0.0.3 remote-as 65000
      neighbor 10.0.0.3 description r2
      neighbor 10.0.0.3 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.2/32
    !
    !
    !
      neighbor 10.0.0.1 activate
      neighbor 10.0.0.1 next-hop-self
      no neighbor 10.0.0.1 send-community all
      neighbor 10.0.0.1 send-community standard
      neighbor 10.0.0.1 send-community large
      neighbor 10.0.0.1 send-community extended
    !
      neighbor 10.0.0.10 activate
      neighbor 10.0.0.10 next-hop-self
      neighbor 10.0.0.10 route-reflector-client
      no neighbor 10.0.0.10 send-community all
      neighbor 10.0.0.10 send-community standard
      neighbor 10.0.0.10 send-community large
      neighbor 10.0.0.10 send-community extended
    !
      neighbor 10.0.0.3 activate
      neighbor 10.0.0.3 next-hop-self
      neighbor 10.0.0.3 route-reflector-client
      no neighbor 10.0.0.3 send-community all
      neighbor 10.0.0.3 send-community standard
      neighbor 10.0.0.3 send-community large
      neighbor 10.0.0.3 send-community extended
    !
    !
    !
    do write
ok: [x1] => 
  msg: |-
    bgp configuration for x1
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 172.42.42.1
    !
      neighbor 172.16.3.1 remote-as 65000
      neighbor 172.16.3.1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 172.42.42.0/24
    !
    !
    !
      neighbor 172.16.3.1 activate
      no neighbor 172.16.3.1 send-community all
      neighbor 172.16.3.1 send-community standard
      neighbor 172.16.3.1 send-community large
    !
    !
    !
    do write

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [x1]

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for r1, r2, rr2, x1

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [copy the cumulus nvue YAML bgp config file to switch (generated from /home/pipi/net101/tools/netsim/ansible/templates/bgp/cumulus_nvue.j2)] ***
changed: [dut]

TASK [Wait for nvued to start] *************************************************
skipping: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [execute on cumulus: 'nv config patch' for bgp config] ********************
changed: [dut]

TASK [execute on cumulus: 'nv config apply -y' for bgp config] *****************
fatal: [dut]: FAILED! => changed=true 
  cmd:
  - nv
  - config
  - apply
  - -y
  delta: '0:00:00.279974'
  end: '2024-11-30 08:53:01.321340'
  msg: non-zero return code
  rc: 1
  start: '2024-11-30 08:53:01.041366'
  stderr: |-
    Invalid config [rev_id: 11]
      Config invalid at vrf.default.router.bgp.neighbor.10.0.0.3.address-family.ipv4-unicast.route-reflector-client: If the `route-reflector-client` is enabled, the neighbor remote-as must be internal
  stderr_lines: <omitted>
  stdout: "verifying\e[1000D\e[J"
  stdout_lines: <omitted>

TASK [template] ****************************************************************
changed: [r1]
changed: [x1]
changed: [rr2]
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [x1]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [r1]
skipping: [r2]
skipping: [rr2]
skipping: [x1]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [r1]
changed: [r2]
changed: [rr2]
changed: [x1]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [r1]
ok: [r2]
ok: [rr2]
ok: [x1]

TASK [Find configuration template for ospf] ************************************
skipping: [x1]
ok: [r1]
ok: [r2]
ok: [rr2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [x1]
ok: [r1] => 
  msg: |-
    ospf configuration for r1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.10
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! r1 -> rr2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth3
    ! r1 -> r2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [r2] => 
  msg: |-
    ospf configuration for r2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r2 -> r1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [rr2] => 
  msg: |-
    ospf configuration for rr2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! rr2 -> r1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [x1]
ok: [r1]
ok: [r2]
ok: [rr2]

TASK [Deploy ospf configuration] ***********************************************
skipping: [x1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for r1, r2, rr2

TASK [template] ****************************************************************
changed: [r1]
changed: [rr2]
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]
ok: [rr2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [r1]
skipping: [r2]
skipping: [rr2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [rr2]
changed: [r2]
changed: [r1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=26   changed=5    unreachable=0    failed=1    skipped=2    rescued=0    ignored=0   
r1                         : ok=32   changed=7    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
r2                         : ok=31   changed=6    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
rr2                        : ok=31   changed=6    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
x1                         : ok=24   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   

Fatal error in netlab: Executing Ansible playbook /home/pipi/net101/tools/netsim/ansible/initial-config.ansible failed
Error executing ansible-playbook /home/pipi/net101/tools/netsim/ansible/initial-config.ansible:
  Command '['ansible-playbook', '/home/pipi/net101/tools/netsim/ansible/initial-config.ansible']' returned non-zero exit status 2.
