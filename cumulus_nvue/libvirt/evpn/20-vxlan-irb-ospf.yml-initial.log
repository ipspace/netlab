[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Find device readiness script] ********************************************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h3]
ok: [h2]
ok: [h4]

TASK [Wait for device to become ready] *****************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Find configuration template for normalize] *******************************
ok: [s1]
ok: [s2]
ok: [h2]
ok: [h1]
ok: [h3]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Deploy normalize configuration] ******************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Find configuration template for initial] *********************************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h3]
ok: [h2]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h3]
ok: [h4]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.2.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.2.5/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.2.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.3.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.3.6/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.3.2 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.3.2 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.3.2 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.3.2 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
  
    - set:
        system:
          hostname: s1
          config:
            snippet:
              system-mtu:
                file: /etc/network/ifupdown2/policy.d/mtu.json
                content: |
                  { "address": { "defaults": { "mtu": "1500" } } }
  
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              mtu: 1600
              state:
                up : {}
            description: "s1 -> s2"
            ip:
              address:
                10.1.0.1/30: {}
              ipv6:
                enable: off
  
          swp2:
            type: swp
            link:
              state:
                up : {}
            description: "[Access VLAN red] s1 -> h1"
            ip:
              ipv6:
                enable: off
  
          swp3:
            type: swp
            link:
              state:
                up : {}
            description: "[Access VLAN green] s1 -> h3"
            ip:
              ipv6:
                enable: off
  
          vlan1000:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN red (1000) -> [h1,s2]"
            ip:
              address:
                172.16.0.1/24: {}
              ipv6:
                enable: off
  
          vlan1002:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN green (1002) -> [h3] [stub]"
            ip:
              address:
                172.16.2.1/24: {}
              ipv6:
                enable: off
  
          vlan1001:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN blue (1001) -> [h2,s2]"
            ip:
              address:
                172.16.1.1/24: {}
              ipv6:
                enable: off
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.1/32: {}
              ipv6:
                enable: off
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
  
    - set:
        system:
          hostname: s2
          config:
            snippet:
              system-mtu:
                file: /etc/network/ifupdown2/policy.d/mtu.json
                content: |
                  { "address": { "defaults": { "mtu": "1500" } } }
  
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              mtu: 1600
              state:
                up : {}
            description: "s2 -> s1"
            ip:
              address:
                10.1.0.2/30: {}
              ipv6:
                enable: off
  
          swp2:
            type: swp
            link:
              state:
                up : {}
            description: "[Access VLAN blue] s2 -> h2"
            ip:
              ipv6:
                enable: off
  
          swp3:
            type: swp
            link:
              state:
                up : {}
            description: "[Access VLAN purple] s2 -> h4"
            ip:
              ipv6:
                enable: off
  
          vlan1001:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN blue (1001) -> [s1,h2]"
            ip:
              address:
                172.16.1.2/24: {}
              ipv6:
                enable: off
  
          vlan1003:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN purple (1003) -> [h4] [stub]"
            ip:
              address:
                172.16.3.2/24: {}
              ipv6:
                enable: off
  
          vlan1000:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN red (1000) -> [h1,s1]"
            ip:
              address:
                172.16.0.2/24: {}
              ipv6:
                enable: off
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.2/32: {}
              ipv6:
                enable: off

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for s1, s2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [copy the cumulus nvue YAML initial config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/initial/cumulus_nvue.j2)] ***
changed: [s2]
changed: [s1]

TASK [Wait for nvued to start] *************************************************
ok: [s1]
ok: [s2]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [execute on cumulus: 'nv config patch' for initial config] ****************
changed: [s2]
changed: [s1]

TASK [execute on cumulus: 'nv config apply -y' for initial config] *************
changed: [s2]
changed: [s1]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-4ejrw488.sh] ***********************
changed: [h4 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vrf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vxlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=evpn)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    - set:
        bridge:
          domain:
            br_default:
              type: vlan-aware
              vlan:
                '1001': {}
                '1002': {}
                '1000': {}
  
  
    - set:
        interface:
         swp2:
           bridge:
             domain:
               br_default:
                 access: 1000
    - set:
        interface:
         swp3:
           bridge:
             domain:
               br_default:
                 access: 1002
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    - set:
        bridge:
          domain:
            br_default:
              type: vlan-aware
              vlan:
                '1001': {}
                '1003': {}
                '1000': {}
  
  
    - set:
        interface:
         swp2:
           bridge:
             domain:
               br_default:
                 access: 1001
    - set:
        interface:
         swp3:
           bridge:
             domain:
               br_default:
                 access: 1003

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for s1, s2

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [copy the cumulus nvue YAML vlan config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/cumulus_nvue.j2)] ***
changed: [s1]
changed: [s2]

TASK [Wait for nvued to start] *************************************************
skipping: [s1]
skipping: [s2]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [execute on cumulus: 'nv config patch' for vlan config] *******************
changed: [s1]
changed: [s2]

TASK [execute on cumulus: 'nv config apply -y' for vlan config] ****************
changed: [s1]
changed: [s2]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [s1]
ok: [s2]

TASK [Find configuration template for routing] *********************************
skipping: [s1]
skipping: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]

TASK [Deploy routing configuration] ********************************************
skipping: [s1]
skipping: [s2]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [s1]
ok: [s2]

TASK [Find configuration template for bgp] *************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    bgp configuration for s1
    =========================================
    - set:
        router:
          bgp:
            enable: on
            autonomous-system: 65000
            router-id: 10.0.0.1
    - set:
        vrf:
          default:
            router:
              bgp:
                enable: on
                autonomous-system: 65000
                router-id: 10.0.0.1
                address-family:
                  ipv4-unicast:
                    enable: on
  
                    network:
                      10.0.0.1/32: {}
                neighbor:
                  10.0.0.2:
                    description: "s2"
                    update-source: lo
                    remote-as: internal
                    address-family:
                      ipv4-unicast:
                        enable: on
                        nexthop-setting: self
                        community-advertise:
                          regular: on
                          extended: on
                          large: off
ok: [s2] => 
  msg: |-
    bgp configuration for s2
    =========================================
    - set:
        router:
          bgp:
            enable: on
            autonomous-system: 65000
            router-id: 10.0.0.2
    - set:
        vrf:
          default:
            router:
              bgp:
                enable: on
                autonomous-system: 65000
                router-id: 10.0.0.2
                address-family:
                  ipv4-unicast:
                    enable: on
  
                    network:
                      10.0.0.2/32: {}
                neighbor:
                  10.0.0.1:
                    description: "s1"
                    update-source: lo
                    remote-as: internal
                    address-family:
                      ipv4-unicast:
                        enable: on
                        nexthop-setting: self
                        community-advertise:
                          regular: on
                          extended: on
                          large: off

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for s1, s2

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [copy the cumulus nvue YAML bgp config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/cumulus_nvue.j2)] ***
changed: [s2]
changed: [s1]

TASK [Wait for nvued to start] *************************************************
skipping: [s1]
skipping: [s2]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [execute on cumulus: 'nv config patch' for bgp config] ********************
changed: [s2]
changed: [s1]

TASK [execute on cumulus: 'nv config apply -y' for bgp config] *****************
changed: [s1]
changed: [s2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for ospf] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    - set:
        router:
          ospf:
            enable: on
  
  
    - set:
        vrf:
          default:
            router:
              ospf:
                enable: on
  
                router-id: 10.0.0.1
  
        interface:
          lo:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
          swp1:
            router:
              ospf:
                area: 0.0.0.0
                network-type: point-to-point
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    - set:
        router:
          ospf:
            enable: on
  
  
    - set:
        vrf:
          default:
            router:
              ospf:
                enable: on
  
                router-id: 10.0.0.2
  
        interface:
          lo:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
          swp1:
            router:
              ospf:
                area: 0.0.0.0
                network-type: point-to-point

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for s1, s2

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [copy the cumulus nvue YAML ospf config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/cumulus_nvue.j2)] ***
changed: [s2]
changed: [s1]

TASK [Wait for nvued to start] *************************************************
skipping: [s1]
skipping: [s2]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [execute on cumulus: 'nv config patch' for ospf config] *******************
changed: [s1]
changed: [s2]

TASK [execute on cumulus: 'nv config apply -y' for ospf config] ****************
changed: [s1]
changed: [s2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vrf] *************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vrf] *********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vrf configuration for s1
    =========================================
    ---
    - set:
        vrf:
          tenant:
            table: auto
  
    - set:
        vrf:
          tenant:
            router:
              ospf:
                enable: on
                redistribute:
                  bgp:
                    enable: on
                  connected:
                    enable: on
  
                router-id: 10.0.0.1
  
        interface:
          vlan1000:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
          vlan1002:
            router:
              ospf:
                area: 0.0.0.0
                network-type: point-to-point
          vlan1001:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
  
  
  
  
    - set:
        vrf:
          tenant:
            router:
              bgp:
                enable: on
                autonomous-system: 65000
                router-id: 10.0.0.1
                rd: 65000:1
                address-family:
                  ipv4-unicast:
                    enable: on
                    redistribute:
                      connected:
                        enable: on
                      ospf:
                        enable: on
  
                    network:
                      172.16.2.0/24: {}
  
  
  
    - set:
        interface:
          vlan1000:
            ip:
              vrf: tenant
    - set:
        interface:
          vlan1002:
            ip:
              vrf: tenant
    - set:
        interface:
          vlan1001:
            ip:
              vrf: tenant
ok: [s2] => 
  msg: |-
    vrf configuration for s2
    =========================================
    ---
    - set:
        vrf:
          tenant:
            table: auto
  
    - set:
        vrf:
          tenant:
            router:
              ospf:
                enable: on
                redistribute:
                  bgp:
                    enable: on
                  connected:
                    enable: on
  
                router-id: 10.0.0.2
  
        interface:
          vlan1001:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
          vlan1003:
            router:
              ospf:
                area: 0.0.0.0
                network-type: point-to-point
          vlan1000:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
  
  
  
  
    - set:
        vrf:
          tenant:
            router:
              bgp:
                enable: on
                autonomous-system: 65000
                router-id: 10.0.0.2
                rd: 65000:1
                address-family:
                  ipv4-unicast:
                    enable: on
                    redistribute:
                      connected:
                        enable: on
                      ospf:
                        enable: on
  
                    network:
                      172.16.3.0/24: {}
  
  
  
    - set:
        interface:
          vlan1001:
            ip:
              vrf: tenant
    - set:
        interface:
          vlan1003:
            ip:
              vrf: tenant
    - set:
        interface:
          vlan1000:
            ip:
              vrf: tenant

TASK [Deploy vrf configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for s1, s2

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [copy the cumulus nvue YAML vrf config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/cumulus_nvue.j2)] ***
changed: [s1]
changed: [s2]

TASK [Wait for nvued to start] *************************************************
skipping: [s1]
skipping: [s2]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [execute on cumulus: 'nv config patch' for vrf config] ********************
changed: [s1]
changed: [s2]

TASK [execute on cumulus: 'nv config apply -y' for vrf config] *****************
changed: [s2]
changed: [s1]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vxlan] ***********************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    - set:
        nve:
          vxlan:
            enable: on
            mac-learning: off
            source:
              address: 10.0.0.1
  
    - set:
        bridge:
          domain:
            br_default:
              vlan:
                '1000':
                  vni:
                    '21000': {}
                '1001':
                  vni:
                    '21001': {}
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    - set:
        nve:
          vxlan:
            enable: on
            mac-learning: off
            source:
              address: 10.0.0.2
  
    - set:
        bridge:
          domain:
            br_default:
              vlan:
                '1000':
                  vni:
                    '21000': {}
                '1001':
                  vni:
                    '21001': {}

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for s1, s2

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [copy the cumulus nvue YAML vxlan config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/cumulus_nvue.j2)] ***
changed: [s2]
changed: [s1]

TASK [Wait for nvued to start] *************************************************
skipping: [s1]
skipping: [s2]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [execute on cumulus: 'nv config patch' for vxlan config] ******************
changed: [s2]
changed: [s1]

TASK [execute on cumulus: 'nv config apply -y' for vxlan config] ***************
changed: [s2]
changed: [s1]

TASK [Figure out whether to deploy the module evpn on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for evpn] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for evpn] ********************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    evpn configuration for s1
    =========================================
    ---
    - set:
        vrf:
          default:
            router:
              bgp:
                address-family:
                  l2vpn-evpn:
                    enable: on
                  ipv4-unicast:
                    route-export:
                      to-evpn:
                        enable: on
                neighbor:
                  10.0.0.2:
                    address-family:
                      l2vpn-evpn:
                        enable: on
                        soft-reconfiguration: on
  
    - set:
        system:
          config:
            snippet:
              frr.conf: |
                router bgp 65000
                  address-family l2vpn evpn
                    advertise ipv4 unicast
  
    - set:
        evpn:
          enable: on
          # dad                    Duplicate Address Detection (DAD) configuration parameters
          # mac-vrf-soo            EVPN MAC VRF Site-of-Origin VPN extended community in ASN:NN or IP-ADDRESS:NN format.
          # multihoming            Multihoming global configuration parameters
          # route-advertise        Route advertising
          route-advertise:
            nexthop-setting: system-ip-mac
            svi-ip: on
          # vni                    VNI
  
          vni:
            '21001':
              rd: 10.0.0.1:1001 # not 'auto'
              route-target:
                export:
                  '65000:1001': {}
                import:
                  '65000:1001': {}
            '21000':
              rd: 10.0.0.1:1000 # not 'auto'
              route-target:
                export:
                  '65000:1000': {}
                import:
                  '65000:1000': {}
  
    - set:
        nve:
          vxlan:
            mac-learning: off
            flooding:
              enable: on
              head-end-replication:
                evpn: {}
  
    - set:
       vrf:
         tenant:
           evpn:
             enable: on
             vlan: auto
           router:
             bgp:
               rd: 65000:1
               route-export:
                 to-evpn:
                   route-target:
                     65000:1: {}
               route-import:
                 from-evpn:
                   route-target:
                     65000:1: {}
               address-family:
                 ipv4-unicast:
                   route-export:
                     to-evpn:
                       enable: on
ok: [s2] => 
  msg: |-
    evpn configuration for s2
    =========================================
    ---
    - set:
        vrf:
          default:
            router:
              bgp:
                address-family:
                  l2vpn-evpn:
                    enable: on
                  ipv4-unicast:
                    route-export:
                      to-evpn:
                        enable: on
                neighbor:
                  10.0.0.1:
                    address-family:
                      l2vpn-evpn:
                        enable: on
                        soft-reconfiguration: on
  
    - set:
        system:
          config:
            snippet:
              frr.conf: |
                router bgp 65000
                  address-family l2vpn evpn
                    advertise ipv4 unicast
  
    - set:
        evpn:
          enable: on
          # dad                    Duplicate Address Detection (DAD) configuration parameters
          # mac-vrf-soo            EVPN MAC VRF Site-of-Origin VPN extended community in ASN:NN or IP-ADDRESS:NN format.
          # multihoming            Multihoming global configuration parameters
          # route-advertise        Route advertising
          route-advertise:
            nexthop-setting: system-ip-mac
            svi-ip: on
          # vni                    VNI
  
          vni:
            '21001':
              rd: 10.0.0.2:1001 # not 'auto'
              route-target:
                export:
                  '65000:1001': {}
                import:
                  '65000:1001': {}
            '21000':
              rd: 10.0.0.2:1000 # not 'auto'
              route-target:
                export:
                  '65000:1000': {}
                import:
                  '65000:1000': {}
  
    - set:
        nve:
          vxlan:
            mac-learning: off
            flooding:
              enable: on
              head-end-replication:
                evpn: {}
  
    - set:
       vrf:
         tenant:
           evpn:
             enable: on
             vlan: auto
           router:
             bgp:
               rd: 65000:1
               route-export:
                 to-evpn:
                   route-target:
                     65000:1: {}
               route-import:
                 from-evpn:
                   route-target:
                     65000:1: {}
               address-family:
                 ipv4-unicast:
                   route-export:
                     to-evpn:
                       enable: on

TASK [Deploy evpn configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for s1, s2

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [copy the cumulus nvue YAML evpn config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/cumulus_nvue.j2)] ***
changed: [s1]
changed: [s2]

TASK [Wait for nvued to start] *************************************************
skipping: [s1]
skipping: [s2]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [execute on cumulus: 'nv config patch' for evpn config] *******************
changed: [s1]
changed: [s2]

TASK [execute on cumulus: 'nv config apply -y' for evpn config] ****************
changed: [s1]
changed: [s2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h3                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h4                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
s1                         : ok=87   changed=21   unreachable=0    failed=0    skipped=22   rescued=0    ignored=0   
s2                         : ok=87   changed=21   unreachable=0    failed=0    skipped=22   rescued=0    ignored=0   



The devices under test are VLAN-to-VXLAN routers using asymmetric IRB with
EVPN control plane and running OSPF within the VRF (across VXLAN segments) to
exchange information about non-EVPN subnets.

All hosts should be able to ping each other

