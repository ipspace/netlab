[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut_c]
ok: [xf]
ok: [dut_a]
ok: [probe]

TASK [Find device readiness script] ********************************************
ok: [dut_c]
ok: [xf]
ok: [dut_a]
ok: [probe]

TASK [Wait for device to become ready] *****************************************
skipping: [dut_c]
skipping: [xf]
skipping: [dut_a]
skipping: [probe]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut_c, xf, dut_a, probe

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut_c]
ok: [dut_a]
ok: [xf]
ok: [probe]

TASK [Find configuration template for normalize] *******************************
ok: [dut_c]
ok: [xf]
ok: [dut_a]
ok: [probe]

TASK [fail] ********************************************************************
skipping: [dut_c]
skipping: [xf]
skipping: [dut_a]
skipping: [probe]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut_c]
ok: [dut_a]
ok: [xf]
ok: [probe]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut_c]
skipping: [xf]
skipping: [dut_a]
skipping: [probe]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut_c]
skipping: [xf]
skipping: [dut_a]
skipping: [probe]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut_c, xf, dut_a, probe

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut_c]
ok: [dut_a]
ok: [xf]
ok: [probe]

TASK [Find configuration template for initial] *********************************
ok: [dut_c]
ok: [xf]
ok: [dut_a]
ok: [probe]

TASK [fail] ********************************************************************
skipping: [dut_c]
skipping: [xf]
skipping: [dut_a]
skipping: [probe]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut_c]
ok: [xf]
ok: [probe]
ok: [dut_a]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut_c] => 
  msg: |-
    initial configuration for dut_c
    =========================================
  
    - set:
        system:
          hostname: dut-c
          config:
            snippet:
              system-mtu:
                file: /etc/network/ifupdown2/policy.d/mtu.json
                content: |
                  { "address": { "defaults": { "mtu": "1500" } } }
  
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              state:
                up : {}
            description: "dut_c -> probe"
            ip:
              address:
                10.1.0.6/30: {}
              ipv6:
                enable: off
  
          swp2:
            type: swp
            link:
              state:
                up : {}
            description: "dut_c -> xf [external]"
            ip:
              address:
                10.1.0.9/30: {}
              ipv6:
                enable: off
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.2/32: {}
              ipv6:
                enable: off
ok: [dut_a] => 
  msg: |-
    initial configuration for dut_a
    =========================================
  
    - set:
        system:
          hostname: dut-a
          config:
            snippet:
              system-mtu:
                file: /etc/network/ifupdown2/policy.d/mtu.json
                content: |
                  { "address": { "defaults": { "mtu": "1500" } } }
  
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              state:
                up : {}
            description: "dut_a -> probe"
            ip:
              address:
                10.1.0.2/30: {}
              ipv6:
                enable: off
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.1/32: {}
              ipv6:
                enable: off
ok: [xf] => 
  msg: |-
    initial configuration for xf
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname xf
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description xf -> dut_c [external]
     ip address 10.1.0.10/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [probe] => 
  msg: |-
    initial configuration for probe
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname probe
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description probe -> dut_a
     ip address 10.1.0.1/30
    !
    interface eth2
     no shutdown
     description probe -> dut_c
     ip address 10.1.0.5/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for dut_c, dut_a
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for xf, probe

TASK [set_fact] ****************************************************************
ok: [dut_c]
ok: [dut_a]

TASK [copy the cumulus nvue YAML initial config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/initial/cumulus_nvue.j2)] ***
changed: [dut_c]
changed: [dut_a]

TASK [Wait for nvued to start] *************************************************
ok: [dut_c]
ok: [dut_a]

TASK [set_fact] ****************************************************************
ok: [dut_c]
ok: [dut_a]

TASK [execute on cumulus: 'nv config patch' for initial config] ****************
changed: [dut_a]
changed: [dut_c]

TASK [execute on cumulus: 'nv config apply -y' for initial config] *************
changed: [dut_a]
changed: [dut_c]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [xf -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [xf]
skipping: [probe]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for xf, probe

TASK [template] ****************************************************************
changed: [probe]
changed: [xf]

TASK [set_fact] ****************************************************************
ok: [xf]
ok: [probe]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [xf]
changed: [probe]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [xf]
skipping: [probe]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut_a]
ok: [dut_c]
ok: [probe]
ok: [xf]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut_a, dut_c, probe, xf => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut_a, dut_c, probe, xf => (item=bgp)

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [dut_a]
ok: [dut_c]
ok: [probe]
ok: [xf]

TASK [Find configuration template for ospf] ************************************
ok: [dut_a]
skipping: [xf]
ok: [dut_c]
ok: [probe]

TASK [fail] ********************************************************************
skipping: [dut_a]
skipping: [dut_c]
skipping: [probe]
skipping: [xf]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [xf]
ok: [dut_a]
ok: [dut_c]
ok: [probe]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [xf]
ok: [dut_a] => 
  msg: |-
    ospf configuration for dut_a
    =========================================
    - set:
        router:
          ospf:
            enable: on
  
  
    - set:
        vrf:
          default:
            router:
              ospf:
                enable: on
                area:
                  0.0.0.0: {}
  
                router-id: 10.0.0.1
                default-originate:
                  enable: on
                  always: on
                  metric: 40
                  metric-type: 2
  
        interface:
          lo:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
          swp1:
            router:
              ospf:
                area: 0.0.0.0
                network-type: point-to-point
ok: [dut_c] => 
  msg: |-
    ospf configuration for dut_c
    =========================================
    - set:
        router:
          ospf:
            enable: on
  
  
    - set:
        vrf:
          default:
            router:
              ospf:
                enable: on
                area:
                  0.0.0.0: {}
  
                router-id: 10.0.0.2
                default-originate:
                  enable: on
                  always: off
                  metric: 20
                  metric-type: 1
  
        interface:
          lo:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
          swp1:
            router:
              ospf:
                area: 0.0.0.0
                cost: 10
                network-type: point-to-point
ok: [probe] => 
  msg: |-
    ospf configuration for probe
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! probe -> dut_a
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! probe -> dut_c
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
     ip ospf cost 10
    !
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
skipping: [xf]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for dut_a, dut_c
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for probe

TASK [set_fact] ****************************************************************
ok: [dut_a]
ok: [dut_c]

TASK [copy the cumulus nvue YAML ospf config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/cumulus_nvue.j2)] ***
changed: [dut_a]
changed: [dut_c]

TASK [Wait for nvued to start] *************************************************
skipping: [dut_a]
skipping: [dut_c]

TASK [set_fact] ****************************************************************
ok: [dut_a]
ok: [dut_c]

TASK [execute on cumulus: 'nv config patch' for ospf config] *******************
changed: [dut_a]
changed: [dut_c]

TASK [execute on cumulus: 'nv config apply -y' for ospf config] ****************
changed: [dut_c]
changed: [dut_a]

TASK [template] ****************************************************************
changed: [probe]

TASK [set_fact] ****************************************************************
ok: [probe]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [probe]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [probe]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut_a]
ok: [dut_c]
ok: [probe]
ok: [xf]

TASK [Find configuration template for bgp] *************************************
skipping: [dut_a]
skipping: [probe]
ok: [dut_c]
ok: [xf]

TASK [fail] ********************************************************************
skipping: [dut_a]
skipping: [dut_c]
skipping: [probe]
skipping: [xf]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [dut_a]
skipping: [probe]
ok: [dut_c]
ok: [xf]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut_a]
skipping: [probe]
ok: [xf] => 
  msg: |-
    bgp configuration for xf
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.1.0.9 remote-as 65000
      neighbor 10.1.0.9 description dut_c
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.4/32
    !
    !
    !
      neighbor 10.1.0.9 activate
      no neighbor 10.1.0.9 send-community all
      neighbor 10.1.0.9 send-community standard
      neighbor 10.1.0.9 send-community large
    !
    !
    !
    do write
ok: [dut_c] => 
  msg: |-
    bgp configuration for dut_c
    =========================================
    - set:
        router:
          bgp:
            enable: on
            autonomous-system: 65000
            router-id: 10.0.0.2
    - set:
        vrf:
          default:
            router:
              bgp:
                enable: on
                autonomous-system: 65000
                router-id: 10.0.0.2
                address-family:
                  ipv4-unicast:
                    enable: on
  
                    network:
                      10.0.0.2/32: {}
                neighbor:
                  10.1.0.10:
                    description: "xf"
                    remote-as: 65100
                    address-family:
                      ipv4-unicast:
                        enable: on
                        community-advertise:
                          regular: on
                          extended: off
                          large: off

TASK [Deploy bgp configuration] ************************************************
skipping: [dut_a]
skipping: [probe]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for dut_c
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for xf

TASK [set_fact] ****************************************************************
ok: [dut_c]

TASK [copy the cumulus nvue YAML bgp config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/cumulus_nvue.j2)] ***
changed: [dut_c]

TASK [Wait for nvued to start] *************************************************
skipping: [dut_c]

TASK [set_fact] ****************************************************************
ok: [dut_c]

TASK [execute on cumulus: 'nv config patch' for bgp config] ********************
changed: [dut_c]

TASK [execute on cumulus: 'nv config apply -y' for bgp config] *****************
changed: [dut_c]

TASK [template] ****************************************************************
changed: [xf]

TASK [set_fact] ****************************************************************
ok: [xf]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [xf]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [xf]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut_a                      : ok=32   changed=6    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
dut_c                      : ok=41   changed=9    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
probe                      : ok=28   changed=4    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
xf                         : ok=29   changed=5    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   



This lab tests the OSPF default route origination. The devices under test
should originate the default route, one always, the other one based one
BGP default route.

