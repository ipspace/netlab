[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [x1]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [x1]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
    - set:
        system:
          hostname: dut
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              mtu: 1500
              state:
                up: {}
            description: "dut -> x1"
            ip:
              address:
                10.0.0.1/32: {}
              ipv6:
                enable: off
  
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.1/32: {}
              ipv6:
                enable: off
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description x1 -> dut
     ip address 10.0.0.2/32
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for x1

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [copy the cumulus nvue YAML initial config file to switch (generated from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus_nvue.j2)] ***
changed: [dut]

TASK [Wait for nvued to start] *************************************************
ok: [dut]

TASK [set_fact] ****************************************************************
ok: [dut]

TASK [execute on cumulus: 'nv config patch' for initial config] ****************
changed: [dut]

TASK [execute on cumulus: 'nv config apply -y' for initial config] *************
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [x1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [x1]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for x1

TASK [template] ****************************************************************
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [x1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [x1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1 => (item=ospf)

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [dut]
ok: [x1]

TASK [Find configuration template for ospf] ************************************
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
fatal: [dut]: FAILED! => 
  msg: |-
    An unhandled exception occurred while running the lookup plugin 'template'. Error was a <class 'ansible.errors.AnsibleError'>, original message: Unexpected templating type error occurred on (- set:
        router:
          ospf:
            enable: on
  
    {% macro vrf_ospf(vrfname,vrf) %}
    {%   set _ospf = vrf.ospf %}
    {%   set _intfs = _ospf.interfaces|default([]) %}
    {%   if _intfs!=[] %}
    - set:
        vrf:
          {{ vrfname }}:
            router:
              ospf:
                enable: on
                redistribute:
                  connected:
                    enable: on
    {%     if _ospf.reference_bandwidth is defined %}
                reference-bandwidth: {{ _ospf.reference_bandwidth }}
    {%     endif %}
    {%     if 'router_id' in _ospf %}
                router-id: {{ _ospf.router_id }}
    {%     endif %}
  
    {%     for l in _intfs %}
    {%       if loop.first %}
        interface:
    {%       endif %}
          {{ l.ifname }}:
            router:
              ospf:
                area: {{ l.ospf.area|default(ospf.area) }}
    {%       if l.ospf.cost is defined %}
                cost: {{ l.ospf.cost }}
    {%       endif %}
                network-type: {{ l.ospf.network_type|default('broadcast') }}
    {%       if l.ospf.passive | default(False) %}
                passive: on
    {%       endif %}
    {%     endfor %}
  
    {%   else %}
    # No OSPF interfaces in VRF {{ vrfname }}
    {%   endif %}
    {% endmacro %}
  
    {% if ospf is defined %}
    {% set _lo = (loopback + { 'ospf': { 'area': ospf.area|default('0.0.0.0') } }) if 'ipv4' in loopback else {} %}
    {% set _ospf_intfs = [_lo] + interfaces|default([])|selectattr('ospf','defined')|list %}
    {{ vrf_ospf("default", { 'ospf': ospf + { 'interfaces': _ospf_intfs } } ) }}
    {% endif %}
    ): unsupported operand type(s) for +: 'dict' and 'dict'. unsupported operand type(s) for +: 'dict' and 'dict'. Unexpected templating type error occurred on (- set:
        router:
          ospf:
            enable: on
  
    {% macro vrf_ospf(vrfname,vrf) %}
    {%   set _ospf = vrf.ospf %}
    {%   set _intfs = _ospf.interfaces|default([]) %}
    {%   if _intfs!=[] %}
    - set:
        vrf:
          {{ vrfname }}:
            router:
              ospf:
                enable: on
                redistribute:
                  connected:
                    enable: on
    {%     if _ospf.reference_bandwidth is defined %}
                reference-bandwidth: {{ _ospf.reference_bandwidth }}
    {%     endif %}
    {%     if 'router_id' in _ospf %}
                router-id: {{ _ospf.router_id }}
    {%     endif %}
  
    {%     for l in _intfs %}
    {%       if loop.first %}
        interface:
    {%       endif %}
          {{ l.ifname }}:
            router:
              ospf:
                area: {{ l.ospf.area|default(ospf.area) }}
    {%       if l.ospf.cost is defined %}
                cost: {{ l.ospf.cost }}
    {%       endif %}
                network-type: {{ l.ospf.network_type|default('broadcast') }}
    {%       if l.ospf.passive | default(False) %}
                passive: on
    {%       endif %}
    {%     endfor %}
  
    {%   else %}
    # No OSPF interfaces in VRF {{ vrfname }}
    {%   endif %}
    {% endmacro %}
  
    {% if ospf is defined %}
    {% set _lo = (loopback + { 'ospf': { 'area': ospf.area|default('0.0.0.0') } }) if 'ipv4' in loopback else {} %}
    {% set _ospf_intfs = [_lo] + interfaces|default([])|selectattr('ospf','defined')|list %}
    {{ vrf_ospf("default", { 'ospf': ospf + { 'interfaces': _ospf_intfs } } ) }}
    {% endif %}
    ): unsupported operand type(s) for +: 'dict' and 'dict'. unsupported operand type(s) for +: 'dict' and 'dict'
ok: [x1] => 
  msg: |-
    ospf configuration for x1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! x1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [x1]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for x1

TASK [template] ****************************************************************
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [x1]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [x1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=18   changed=3    unreachable=0    failed=1    skipped=1    rescued=0    ignored=0   
x1                         : ok=23   changed=5    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   

Fatal error in netlab: Executing Ansible playbook /home/pipi/net101/tools/netsim/ansible/initial-config.ansible failed
Error executing ansible-playbook /home/pipi/net101/tools/netsim/ansible/initial-config.ansible:
  Command '['ansible-playbook', '/home/pipi/net101/tools/netsim/ansible/initial-config.ansible']' returned non-zero exit status 2.
