[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [Find device readiness script] ********************************************
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [Wait for device to become ready] *****************************************
skipping: [ros]
skipping: [s1]
skipping: [h1]
skipping: [h2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1, h1, h2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [Find configuration template for normalize] *******************************
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [s1]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ros]
skipping: [s1]
skipping: [h1]
skipping: [h2]

TASK [Deploy normalize configuration] ******************************************
skipping: [ros]
skipping: [s1]
skipping: [h1]
skipping: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [Find configuration template for initial] *********************************
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [ros]
skipping: [s1]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [ros]
ok: [s1]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [ros] => 
  msg: |-
    initial configuration for ros
    =========================================
  
    - set:
        system:
          hostname: ros
          config:
            snippet:
              system-mtu:
                file: /etc/network/ifupdown2/policy.d/mtu.json
                content: |
                  { "address": { "defaults": { "mtu": "1500" } } }
  
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              mtu: 1600
              state:
                up : {}
            description: "ros -> s1"
            ip:
              address:
                10.1.0.1/30: {}
              ipv6:
                enable: off
  
          vlan1000:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN red (1000) -> [h1,s1]"
            ip:
              address:
                172.16.0.2/24: {}
              ipv6:
                enable: off
  
          vlan1001:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN blue (1001) -> [h2,s1]"
            ip:
              address:
                172.16.1.2/24: {}
              ipv6:
                enable: off
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.2/32: {}
              ipv6:
                enable: off
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
  
    - set:
        system:
          hostname: s1
          config:
            snippet:
              system-mtu:
                file: /etc/network/ifupdown2/policy.d/mtu.json
                content: |
                  { "address": { "defaults": { "mtu": "1500" } } }
  
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              mtu: 1600
              state:
                up : {}
            description: "s1 -> ros"
            ip:
              address:
                10.1.0.2/30: {}
              ipv6:
                enable: off
  
          swp2:
            type: swp
            link:
              state:
                up : {}
            description: "[Access VLAN red] s1 -> h1"
            ip:
              ipv6:
                enable: off
  
          swp3:
            type: swp
            link:
              state:
                up : {}
            description: "[Access VLAN blue] s1 -> h2"
            ip:
              ipv6:
                enable: off
  
          vlan1000:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN red (1000) -> [h1,ros]"
            ip:
              ipv6:
                enable: off
  
          vlan1001:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN blue (1001) -> [h2,ros]"
            ip:
              ipv6:
                enable: off
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.1/32: {}
              ipv6:
                enable: off

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for ros, s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [copy the cumulus nvue YAML initial config file to switch (generated from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus_nvue.j2)] ***
changed: [s1]
changed: [ros]

TASK [Wait for nvued to start] *************************************************
ok: [s1]
ok: [ros]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [execute on cumulus: 'nv config patch' for initial config] ****************
changed: [s1]
changed: [ros]

TASK [execute on cumulus: 'nv config apply -y' for initial config] *************
changed: [s1]
changed: [ros]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-29tuf6x6.sh] ***********************
changed: [h2 -> localhost]
changed: [h1 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, ros, s1 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, ros, s1 => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, ros, s1 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, ros, s1 => (item=vrf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, ros, s1 => (item=vxlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h2]
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [ros] => 
  msg: |-
    vlan configuration for ros
    =========================================
    - set:
        bridge:
          domain:
            br_default:
              type: vlan-aware
              vlan:
                '1001': {}
                '1000': {}
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    - set:
        bridge:
          domain:
            br_default:
              type: vlan-aware
              vlan:
                '1001': {}
                '1000': {}
  
  
    - set:
        interface:
         swp2:
           bridge:
             domain:
               br_default:
                 access: 1000
    - set:
        interface:
         swp3:
           bridge:
             domain:
               br_default:
                 access: 1001

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for ros, s1

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [copy the cumulus nvue YAML vlan config file to switch (generated from /home/pipi/net101/tools/netsim/ansible/templates/vlan/cumulus_nvue.j2)] ***
changed: [s1]
changed: [ros]

TASK [Wait for nvued to start] *************************************************
skipping: [ros]
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [execute on cumulus: 'nv config patch' for vlan config] *******************
changed: [ros]
changed: [s1]

TASK [execute on cumulus: 'nv config apply -y' for vlan config] ****************
changed: [ros]
changed: [s1]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for routing] *********************************
skipping: [ros]
ok: [h1]
ok: [h2]
skipping: [s1]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [ros]
skipping: [s1]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ros]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.2 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
skipping: [s1]
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.2 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [ros]
skipping: [s1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for routing based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-rgfah54n.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for ospf] ************************************
skipping: [h1]
skipping: [h2]
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [h1]
skipping: [h2]
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [ros] => 
  msg: |-
    ospf configuration for ros
    =========================================
    - set:
        router:
          ospf:
            enable: on
  
  
    - set:
        vrf:
          default:
            router:
              ospf:
                enable: on
  
                router-id: 10.0.0.2
  
        interface:
          lo:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
          swp1:
            router:
              ospf:
                area: 0.0.0.0
                network-type: point-to-point
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    - set:
        router:
          ospf:
            enable: on
  
  
    - set:
        vrf:
          default:
            router:
              ospf:
                enable: on
  
                router-id: 10.0.0.1
  
        interface:
          lo:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
          swp1:
            router:
              ospf:
                area: 0.0.0.0
                network-type: point-to-point

TASK [Deploy ospf configuration] ***********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for ros, s1

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [copy the cumulus nvue YAML ospf config file to switch (generated from /home/pipi/net101/tools/netsim/ansible/templates/ospf/cumulus_nvue.j2)] ***
changed: [ros]
changed: [s1]

TASK [Wait for nvued to start] *************************************************
skipping: [ros]
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [execute on cumulus: 'nv config patch' for ospf config] *******************
changed: [s1]
changed: [ros]

TASK [execute on cumulus: 'nv config apply -y' for ospf config] ****************
changed: [ros]
changed: [s1]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for vrf] *************************************
skipping: [h1]
skipping: [h2]
skipping: [s1]
ok: [ros]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [h1]
skipping: [h2]
skipping: [s1]
ok: [ros]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [s1]
ok: [ros] => 
  msg: |-
    vrf configuration for ros
    =========================================
    ---
    - set:
        vrf:
          tenant:
            table: auto
  
    - set:
        vrf:
          tenant:
            router:
              ospf:
                enable: on
                redistribute:
                  connected:
                    enable: on
  
                router-id: 10.0.0.2
  
        interface:
          vlan1000:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
          vlan1001:
            router:
              ospf:
                area: 0.0.0.0
                network-type: broadcast
  
  
  
  
  
  
    - set:
        interface:
          vlan1000:
            ip:
              vrf: tenant
    - set:
        interface:
          vlan1001:
            ip:
              vrf: tenant

TASK [Deploy vrf configuration] ************************************************
skipping: [h1]
skipping: [h2]
skipping: [s1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for ros

TASK [set_fact] ****************************************************************
ok: [ros]

TASK [copy the cumulus nvue YAML vrf config file to switch (generated from /home/pipi/net101/tools/netsim/ansible/templates/vrf/cumulus_nvue.j2)] ***
changed: [ros]

TASK [Wait for nvued to start] *************************************************
skipping: [ros]

TASK [set_fact] ****************************************************************
ok: [ros]

TASK [execute on cumulus: 'nv config patch' for vrf config] ********************
changed: [ros]

TASK [execute on cumulus: 'nv config apply -y' for vrf config] *****************
changed: [ros]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for vxlan] ***********************************
skipping: [h1]
skipping: [h2]
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for vxlan] *******************
skipping: [h1]
skipping: [h2]
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [ros] => 
  msg: |-
    vxlan configuration for ros
    =========================================
    - set:
        nve:
          vxlan:
            enable: on
            mac-learning: on
            source:
              address: 10.0.0.2
  
    - set:
        bridge:
          domain:
            br_default:
              vlan:
                '1000':
                  vni:
                    '101000':
                      flooding:
                        enable: on
                        head-end-replication:
                          10.0.0.1: {}
                '1001':
                  vni:
                    '101001':
                      flooding:
                        enable: on
                        head-end-replication:
                          10.0.0.1: {}
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    - set:
        nve:
          vxlan:
            enable: on
            mac-learning: on
            source:
              address: 10.0.0.1
  
    - set:
        bridge:
          domain:
            br_default:
              vlan:
                '1000':
                  vni:
                    '101000':
                      flooding:
                        enable: on
                        head-end-replication:
                          10.0.0.2: {}
                '1001':
                  vni:
                    '101001':
                      flooding:
                        enable: on
                        head-end-replication:
                          10.0.0.2: {}

TASK [Deploy vxlan configuration] **********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for ros, s1

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [copy the cumulus nvue YAML vxlan config file to switch (generated from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/cumulus_nvue.j2)] ***
changed: [ros]
changed: [s1]

TASK [Wait for nvued to start] *************************************************
skipping: [ros]
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [execute on cumulus: 'nv config patch' for vxlan config] ******************
changed: [ros]
changed: [s1]

TASK [execute on cumulus: 'nv config apply -y' for vxlan config] ***************
changed: [s1]
changed: [ros]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
h2                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
ros                        : ok=65   changed=15   unreachable=0    failed=0    skipped=18   rescued=0    ignored=0   
s1                         : ok=56   changed=12   unreachable=0    failed=0    skipped=21   rescued=0    ignored=0   



The devices under test are VLAN-to-VXLAN bridge and VXLAN router-on-a-stick.
Assuming 'vxlan-bridging' test case succeeded, this one tests VXLAN-to-VXLAN
routing

* h1 and h2 should be able to ping each other

