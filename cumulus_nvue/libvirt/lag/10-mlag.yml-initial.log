[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [x1]

TASK [Find device readiness script] ********************************************
ok: [s1]
ok: [s2]
ok: [h3]
ok: [h1]
ok: [h2]
ok: [x1]

TASK [Wait for device to become ready] *****************************************
skipping: [s1]
skipping: [s2]
skipping: [x1]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, x1, h1, h2, h3

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [x1]

TASK [Find configuration template for normalize] *******************************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [x1]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h3]
ok: [h2]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [x1] => 
  msg: |-
    normalize configuration for x1
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0301
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0302
    !
    interface Ethernet3
     shutdown
     mac-address 52dc.cafe.0303

TASK [Deploy normalize configuration] ******************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [eos_config: deploying normalize from /home/pipi/netlab_gh/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, x1, h1, h2, h3

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [x1]

TASK [Find configuration template for initial] *********************************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [x1]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.5/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.6/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
  
    - set:
        system:
          hostname: s1
          config:
            snippet:
              system-mtu:
                file: /etc/network/ifupdown2/policy.d/mtu.json
                content: |
                  { "address": { "defaults": { "mtu": "1500" } } }
  
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              state:
                up : {}
            description: "s1 -> s2"
            ip:
              ipv6:
                enable: off
  
          bond1:
            type: bond
            link:
              state:
                up : {}
            description: "[Access VLAN red] s1 -> [x1,s2]"
            ip:
              ipv6:
                enable: off
  
          swp2:
            type: swp
            link:
              state:
                down : {}
            description: "s1 -> x1"
            ip:
              ipv6:
                enable: off
  
          swp3:
            type: swp
            link:
              state:
                up : {}
            description: "[Access VLAN red] s1 -> h2"
            ip:
              ipv6:
                enable: off
  
          vlan1000:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN red (1000) -> [x1,s2,h2,h3,h1]"
            ip:
              address:
                172.16.0.1/24: {}
              ipv6:
                enable: off
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.1/32: {}
              ipv6:
                enable: off
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
  
    - set:
        system:
          hostname: s2
          config:
            snippet:
              system-mtu:
                file: /etc/network/ifupdown2/policy.d/mtu.json
                content: |
                  { "address": { "defaults": { "mtu": "1500" } } }
  
        interface:
          eth0:
            ip:
              vrf: mgmt
              address:
                dhcp: {}
            type: eth
          swp1:
            type: swp
            link:
              state:
                up : {}
            description: "s2 -> s1"
            ip:
              ipv6:
                enable: off
  
          bond1:
            type: bond
            link:
              state:
                up : {}
            description: "[Access VLAN red] s2 -> [x1,s1]"
            ip:
              ipv6:
                enable: off
  
          swp2:
            type: swp
            link:
              state:
                down : {}
            description: "s2 -> x1"
            ip:
              ipv6:
                enable: off
  
          swp3:
            type: swp
            link:
              state:
                up : {}
            description: "[Access VLAN red] s2 -> h3"
            ip:
              ipv6:
                enable: off
  
          vlan1000:
            type: svi
            link:
              state:
                up : {}
            description: "VLAN red (1000) -> [x1,s1,h2,h3,h1]"
            ip:
              address:
                172.16.0.2/24: {}
              ipv6:
                enable: off
  
  
    - set:
        interface:
          lo:
            type: loopback
            ip:
              address:
                10.0.0.2/32: {}
              ipv6:
                enable: off
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    hostname x1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    no ipv6 unicast-routing
    !
    !
    ip host h1 172.16.0.4
    ip host h2 172.16.0.5
    ip host h3 172.16.0.6
    ip host s1 10.0.0.1 172.16.0.1
    ip host s2 10.0.0.2 172.16.0.2
    !
    interface Management1
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.3/32
    !
    interface port-channel1
     no switchport
     description [Access VLAN red] x1 -> [s1,s2]
    !
    interface Ethernet1
     no switchport
     description x1 -> s1
    !
     mac-address 52dc.cafe.0301
     no shutdown
    !
    interface Ethernet2
     no switchport
     description x1 -> s2
    !
     mac-address 52dc.cafe.0302
     no shutdown
    !
    interface Ethernet3
     no switchport
     description [Access VLAN red] x1 -> h1
    !
     mac-address 52dc.cafe.0303
     no shutdown
    !
    interface Vlan1000
     description VLAN red (1000) -> [s2,s1,h2,h3,h1]
     ip address 172.16.0.3/24
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for s1, s2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for x1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [copy the cumulus nvue YAML initial config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/initial/cumulus_nvue.j2)] ***
changed: [s2]
changed: [s1]

TASK [Wait for nvued to start] *************************************************
ok: [s2]
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [execute on cumulus: 'nv config patch' for initial config] ****************
changed: [s2]
changed: [s1]

TASK [execute on cumulus: 'nv config apply -y' for initial config] *************
changed: [s2]
changed: [s1]

TASK [eos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/eos.j2] ***
changed: [x1]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Create a temporary file for the rendered script] *************************
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-rkyd6491.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [s1]
ok: [s2]
ok: [x1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, s1, s2, x1 => (item=lag)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, s1, s2, x1 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, s1, s2, x1 => (item=routing)

TASK [Figure out whether to deploy the module lag on current device] ***********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [s1]
ok: [s2]
ok: [x1]

TASK [Find configuration template for lag] *************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [s1]
ok: [s2]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [s1]
skipping: [s2]
skipping: [x1]

TASK [Find configuration deployment deploy_script for lag] *********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [s1]
ok: [s2]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [s1] => 
  msg: |-
    lag configuration for s1
    =========================================
    - set:
        interface:
          peerlink:
            bridge:
              domain:
                br_default:
                  learning: off # As recommended by NVidia
            bond:
              member:
                swp1: {}
            type: peerlink
          peerlink.4094:
            base-interface: peerlink
            type: sub
            vlan: 4094
        mlag:
          init-delay: 10
          backup:
            10.0.0.2: {}
          enable: on
          mac-address: 44:38:39:ff:00:01
          peer-ip: linklocal
  
    - set:
        interface:
          swp2:
            link:
              state:
                up: {}
          bond1:
            bridge:
              domain:
                br_default: {}
            bond:
              mlag:
                enable: on
                id: 1
              member:
                swp2: {}
ok: [x1] => 
  msg: |-
    lag configuration for x1
    =========================================
  
    interface port-channel1
     description [Access VLAN red] x1 -> [s1,s2]
    !
    !
    interface Ethernet1
     description x1 -> s1 in channel-group 1
     channel-group 1 mode active
     lacp timer fast
    !
    interface Ethernet2
     description x1 -> s2 in channel-group 1
     channel-group 1 mode active
     lacp timer fast
ok: [s2] => 
  msg: |-
    lag configuration for s2
    =========================================
    - set:
        interface:
          peerlink:
            bridge:
              domain:
                br_default:
                  learning: off # As recommended by NVidia
            bond:
              member:
                swp1: {}
            type: peerlink
          peerlink.4094:
            base-interface: peerlink
            type: sub
            vlan: 4094
        mlag:
          init-delay: 10
          backup:
            10.0.0.1: {}
          enable: on
          mac-address: 44:38:39:ff:00:01
          peer-ip: linklocal
  
    - set:
        interface:
          swp2:
            link:
              state:
                up: {}
          bond1:
            bridge:
              domain:
                br_default: {}
            bond:
              mlag:
                enable: on
                id: 1
              member:
                swp2: {}

TASK [Deploy lag configuration] ************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for s1, s2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [copy the cumulus nvue YAML lag config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/lag/cumulus_nvue.j2)] ***
changed: [s1]
changed: [s2]

TASK [Wait for nvued to start] *************************************************
skipping: [s1]
skipping: [s2]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [execute on cumulus: 'nv config patch' for lag config] ********************
changed: [s1]
changed: [s2]

TASK [execute on cumulus: 'nv config apply -y' for lag config] *****************
changed: [s1]
changed: [s2]

TASK [eos_config: deploying lag from /home/pipi/netlab_gh/netsim/ansible/templates/lag/eos.j2] ***
changed: [x1]

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [s1]
ok: [s2]
ok: [x1]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [s1]
ok: [s2]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [s1]
skipping: [s2]
skipping: [x1]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [s1]
ok: [s2]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    - set:
        bridge:
          domain:
            br_default:
              type: vlan-aware
              vlan:
                '1000': {}
  
  
    - set:
        interface:
         bond1:
           bridge:
             domain:
               br_default:
                 access: 1000
    - set:
        interface:
         swp3:
           bridge:
             domain:
               br_default:
                 access: 1000
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    - set:
        bridge:
          domain:
            br_default:
              type: vlan-aware
              vlan:
                '1000': {}
  
  
    - set:
        interface:
         bond1:
           bridge:
             domain:
               br_default:
                 access: 1000
    - set:
        interface:
         swp3:
           bridge:
             domain:
               br_default:
                 access: 1000
ok: [x1] => 
  msg: |-
    vlan configuration for x1
    =========================================
    vlan 1000
     name red
    !
  
    !
    interface port-channel1
     switchport
     switchport access vlan 1000
    !
    interface Ethernet3
     switchport
     switchport access vlan 1000
    !
    interface Vlan1000

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/cumulus_nvue.yml for s1, s2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [copy the cumulus nvue YAML vlan config file to switch (generated from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/cumulus_nvue.j2)] ***
changed: [s2]
changed: [s1]

TASK [Wait for nvued to start] *************************************************
skipping: [s1]
skipping: [s2]

TASK [set_fact] ****************************************************************
ok: [s1]
ok: [s2]

TASK [execute on cumulus: 'nv config patch' for vlan config] *******************
changed: [s1]
changed: [s2]

TASK [execute on cumulus: 'nv config apply -y' for vlan config] ****************
changed: [s2]
changed: [s1]

TASK [eos_config: deploying vlan from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/eos.j2] ***
changed: [x1]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [s1]
ok: [s2]
ok: [x1]

TASK [Find configuration template for routing] *********************************
ok: [h1]
skipping: [s1]
ok: [h2]
ok: [h3]
skipping: [s2]
skipping: [x1]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [s1]
skipping: [s2]
skipping: [x1]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [s1]
ok: [h1]
ok: [h2]
skipping: [s2]
ok: [h3]
skipping: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.3 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.3 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
skipping: [s2]
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.3 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
skipping: [x1]

TASK [Deploy routing configuration] ********************************************
skipping: [s1]
skipping: [s2]
skipping: [x1]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-o_e40emh.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=33   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
h2                         : ok=33   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
h3                         : ok=33   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
s1                         : ok=43   changed=9    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
s2                         : ok=43   changed=9    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
x1                         : ok=33   changed=4    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   



The devices under test are an MLAG pair connected to an Arista EOS switch. The
Arista EOS switch should have a working LAG, and the attached hosts should be
able to ping each other.

