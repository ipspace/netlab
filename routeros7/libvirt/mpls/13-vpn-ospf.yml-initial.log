[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [pe2]
ok: [ce1]
ok: [dut]
ok: [ce2]
ok: [p1]
ok: [p2]

TASK [Find device readiness script] ********************************************
ok: [pe2]
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [p2]
ok: [p1]

TASK [Wait for device to become ready] *****************************************
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/routeros7.yml for dut

TASK [Execute local ssh command to check router readiness] *********************
skipping: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, pe2, ce1, ce2, p1, p2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [pe2]
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [p2]
ok: [p1]

TASK [Find configuration template for normalize] *******************************
ok: [pe2]
ok: [ce1]
ok: [dut]
ok: [ce2]
ok: [p1]
ok: [p2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [pe2]
ok: [ce1]
ok: [p1]
ok: [dut]
ok: [ce2]
ok: [p2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, pe2, ce1, ce2, p1, p2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [pe2]
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [p1]
ok: [p2]

TASK [Find configuration template for initial] *********************************
ok: [pe2]
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [p1]
ok: [p2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [pe2]
ok: [ce1]
ok: [p2]
ok: [ce2]
ok: [p1]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
    /system identity set name="dut"
  
    /interface bridge add name=loopback protocol-mode=none
  
  
    /ip address add interface=loopback address=10.0.0.3/32
  
  
  
  
  
    /ip/vrf/add place-before=0 name=tenant interfaces=ether3
  
  
  
    /interface ethernet set comment="dut -> p1" ether2
  
  
    /ip address add interface=ether2 address=10.1.0.1/30
    /ip address set [find where interface=ether2] comment="dut -> p1"
  
  
    /interface ethernet set comment="dut -> ce1" ether3
  
  
    /ip address add interface=ether3 address=10.1.0.14/30
    /ip address set [find where interface=ether3] comment="dut -> ce1"
  
  
    /ip neighbor discovery-settings set discover-interface-list=all
ok: [pe2] => 
  msg: |-
    initial configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname pe2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description pe2 -> p2
     ip address 10.1.0.10/30
    !
    interface eth2
     no shutdown
     description pe2 -> ce2
     ip address 10.1.0.18/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [ce1] => 
  msg: |-
    initial configuration for ce1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname ce1
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.1/32
    !
    interface eth1
     no shutdown
     description ce1 -> dut
     ip address 10.1.0.13/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p2] => 
  msg: |-
    initial configuration for p2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.6/32
    !
    interface eth1
     no shutdown
     description p2 -> p1
     ip address 10.1.0.6/30
    !
    interface eth2
     no shutdown
     description p2 -> pe2
     ip address 10.1.0.9/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p1] => 
  msg: |-
    initial configuration for p1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p1
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.5/32
    !
    interface eth1
     no shutdown
     description p1 -> dut
     ip address 10.1.0.2/30
    !
    interface eth2
     no shutdown
     description p1 -> p2
     ip address 10.1.0.5/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [ce2] => 
  msg: |-
    initial configuration for ce2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname ce2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description ce2 -> pe2
     ip address 10.1.0.17/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for pe2, ce1, ce2, p1, p2

TASK [load initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [pe2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for pe2, ce1, ce2, p1, p2

TASK [template] ****************************************************************
changed: [ce2]
changed: [pe2]
changed: [p2]
changed: [p1]
changed: [ce1]

TASK [set_fact] ****************************************************************
ok: [pe2]
ok: [ce1]
ok: [p1]
ok: [p2]
ok: [ce2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [ce1]
changed: [pe2]
changed: [p2]
changed: [p1]
changed: [ce2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [ce1]
ok: [ce2]
ok: [p1]
ok: [p2]
ok: [pe2]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ce1, ce2, dut, p1, p2, pe2 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ce1, ce2, dut, p1, p2, pe2 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ce1, ce2, dut, p1, p2, pe2 => (item=mpls)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ce1, ce2, dut, p1, p2, pe2 => (item=vrf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [ce1]
ok: [ce2]
ok: [p2]
ok: [p1]
ok: [pe2]
ok: [dut]

TASK [Find configuration template for bgp] *************************************
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
ok: [pe2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
ok: [pe2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
  
    /routing/bgp/template add name=main as=65001 output.network=bgp-networks
  
    /routing/bgp/template set main router-id=10.0.0.3
  
  
  
  
  
    /routing/bgp/connection add template=main name=10_0_0_4 remote.address=10.0.0.4 remote.as=65001 comment="pe2" address-families=ip local.role=ebgp
  
    /routing/bgp/connection set [/routing/bgp/connection find name=10_0_0_4] local.role=ibgp local.address=loopback
  
  
  
  
    /routing/bgp/connection set [/routing/bgp/connection find name=10_0_0_4] nexthop-choice=force-self
  
  
  
    # BGP Network now is controlled by simple ACL
    /ip/firewall/address-list/ add list=bgp-networks address=10.0.0.3/32
ok: [pe2] => 
  msg: |-
    bgp configuration for pe2
    =========================================
    !
    router bgp 65001
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.0.0.3 remote-as 65001
      neighbor 10.0.0.3 description dut
      neighbor 10.0.0.3 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.4/32
    !
    !
    !
      neighbor 10.0.0.3 activate
      neighbor 10.0.0.3 next-hop-self
      no neighbor 10.0.0.3 send-community all
      neighbor 10.0.0.3 send-community standard
      neighbor 10.0.0.3 send-community large
      neighbor 10.0.0.3 send-community extended
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for pe2

TASK [load bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [template] ****************************************************************
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [pe2]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [pe2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [ce1]
ok: [ce2]
ok: [p1]
ok: [p2]
ok: [pe2]
ok: [dut]

TASK [Find configuration template for ospf] ************************************
ok: [ce1]
ok: [ce2]
ok: [p2]
ok: [p1]
ok: [pe2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [ce1]
ok: [ce2]
ok: [p2]
ok: [p1]
ok: [pe2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ce1] => 
  msg: |-
    ospf configuration for ce1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.1
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! ce1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [ce2] => 
  msg: |-
    ospf configuration for ce2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! ce2 -> pe2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [p1] => 
  msg: |-
    ospf configuration for p1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.5
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! p1 -> p2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [p2] => 
  msg: |-
    ospf configuration for p2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.6
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p2 -> p1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! p2 -> pe2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [pe2] => 
  msg: |-
    ospf configuration for pe2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.4
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! pe2 -> p2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
  
  
  
    /routing/ospf/instance add name=default4 version=2 router-id=10.0.0.3 vrf=main
  
  
  
    /routing/ospf/area add instance=default4 name="main_2_0.0.0.0" area-id=0.0.0.0
  
    /routing/ospf/interface-template add area=[/routing ospf area find area-id=0.0.0.0 and instance=default4] interface=loopback passive
  
  
  
  
  
  
  
  
  
    /routing/ospf/interface-template add area=[/routing ospf area find area-id=0.0.0.0 and instance=default4] interface=ether2 type=ptp

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for ce1, ce2, p1, p2, pe2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/routeros7.yml for dut

TASK [template] ****************************************************************
changed: [p2]
changed: [ce2]
changed: [p1]
changed: [ce1]
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [ce1]
ok: [ce2]
ok: [pe2]
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [ce2]
changed: [p1]
changed: [pe2]
changed: [p2]
changed: [ce1]

TASK [load ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [Figure out whether to deploy the module mpls on current device] **********
ok: [ce1]
ok: [ce2]
ok: [p1]
ok: [p2]
ok: [pe2]
ok: [dut]

TASK [Find configuration template for mpls] ************************************
skipping: [ce1]
skipping: [ce2]
ok: [p2]
ok: [p1]
ok: [pe2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for mpls] ********************
skipping: [ce1]
skipping: [ce2]
ok: [p1]
ok: [p2]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ce1]
skipping: [ce2]
ok: [p1] => 
  msg: |-
    mpls configuration for p1
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.5
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.5
        interface eth1
        exit
        interface eth2
        exit
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0
ok: [p2] => 
  msg: |-
    mpls configuration for p2
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.6
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.6
        interface eth1
        exit
        interface eth2
        exit
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0
ok: [dut] => 
  msg: |-
    mpls configuration for dut
    =========================================
    /mpls/interface/add interface=all input=yes
  
  
    /mpls/ldp add lsr-id=10.0.0.3 afi=ip
  
    /mpls/ldp set 0 transport-address=10.0.0.3
  
  
    /mpls/ldp/interface add interface=ether2
  
  
    /routing/bgp/connection set [find remote.address=10.0.0.4] address-families=ip,vpnv4
ok: [pe2] => 
  msg: |-
    mpls configuration for pe2
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.4
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.4
        interface eth1
        exit
      exit
    !
    !
    router bgp 65001
     address-family ipv4 vpn
    !
      neighbor 10.0.0.3 activate
      neighbor 10.0.0.3 send-community both
      neighbor 10.0.0.3 next-hop-self
  
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0

TASK [Deploy mpls configuration] ***********************************************
skipping: [ce1]
skipping: [ce2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for p1, p2, pe2

TASK [load mpls from /home/pipi/netlab_gh/netsim/ansible/templates/mpls/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [template] ****************************************************************
changed: [p1]
changed: [p2]
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [pe2]
ok: [p2]

TASK [run /tmp/config.sh to deploy mpls config from /home/pipi/netlab_gh/netsim/ansible/templates/mpls/frr.j2] ***
changed: [p1]
changed: [p2]
changed: [pe2]

TASK [run vtysh to import mpls config from /home/pipi/netlab_gh/netsim/ansible/templates/mpls/frr.j2] ***
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [ce1]
ok: [ce2]
ok: [p2]
ok: [p1]
ok: [pe2]
ok: [dut]

TASK [Find configuration template for vrf] *************************************
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
ok: [pe2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
    /routing/bgp/vpn add label-allocation-policy=per-vrf vrf=tenant route-distinguisher=65000:1 import.route-targets=65000:1 export.route-targets=65000:1 export.redistribute=bgp,connected,ospf,static,vpn
  
    /routing/bgp/template add name=vrf_tenant as=65001 output.network=bgp-networks-tenant vrf=tenant routing-table=tenant output.redistribute=connected,bgp,bgp-mpls-vpn,vpn
  
    /routing/bgp/template set vrf_tenant router-id=10.0.0.3
  
    /routing/bgp/template set vrf_tenant output.redistribute=([get vrf_tenant output.redistribute],"ospf")
  
  
  
  
  
  
  
    /routing/ospf/instance add name=default4_tenant version=2 router-id=10.0.0.3 vrf=tenant
  
  
  
    /routing/ospf/area add instance=default4_tenant name="tenant_2_0.0.0.0" area-id=0.0.0.0
  
  
  
  
  
  
  
  
  
  
    /routing/ospf/interface-template add area=[/routing ospf area find area-id=0.0.0.0 and instance=default4_tenant] interface=ether3 type=ptp
  
  
  
    /routing/ospf/instance set [/routing/ospf/instance find name=default4_tenant] redistribute=bgp,bgp-mpls-vpn,vpn,connected,static routing-table=tenant
ok: [pe2] => 
  msg: |-
    vrf configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
    # Create VRF tables
    if [ ! -e /sys/devices/virtual/net/tenant ]; then
    ip link add tenant type vrf table 100
    fi
    ip link set tenant up
  
    # Move interfaces and loopbacks to vrfs
    sysctl -qw net.ipv6.conf.eth2.keep_addr_on_down=1
    ip link set eth2 master tenant
  
    cat >/tmp/vrf_config <<CONFIG
    vrf tenant
     exit-vrf
    !
    router bgp 65001
    !
    !
    router bgp 65001 vrf tenant
     no bgp ebgp-requires-policy
     no bgp default ipv4-unicast
     bgp router-id 10.0.0.4
     address-family ipv4 unicast
      redistribute connected
      redistribute ospf
  
      label vpn export auto
      export vpn
      import vpn
      rd vpn export 65000:1
      rt vpn import 65000:1
      rt vpn export 65000:1
     exit-address-family
    !
    !
    !
    ! OSPFv2 FRR configuration
    !
    router ospf vrf tenant
     ospf router-id 10.0.0.4
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
     redistribute bgp
     redistribute connected
  
    exit
    !
    interface eth2
    ! pe2 -> ce2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?

TASK [Deploy vrf configuration] ************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for pe2

TASK [load vrf from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [template] ****************************************************************
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe2]

TASK [run /tmp/config.sh to deploy vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
changed: [pe2]

TASK [run vtysh to import vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
skipping: [pe2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
ce1                        : ok=32   changed=4    unreachable=0    failed=0    skipped=24   rescued=0    ignored=0   
ce2                        : ok=32   changed=4    unreachable=0    failed=0    skipped=24   rescued=0    ignored=0   
dut                        : ok=48   changed=5    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
p1                         : ok=39   changed=6    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0   
p2                         : ok=39   changed=6    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0   
pe2                        : ok=54   changed=11   unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   



The tested device (DUT) is a PE-router running MPLS/VPN with a simple VRF. Two OSPF-speaking CE-routers are attached to the VRF (one per PE-router)
The PE-router has to run OSPF and LDP with a P-router, exchange IPv4 routes via OSPF with the CE-router, do two-way redistribution of OSPF and VPNv4 routes, and pass VPNv4 routes to another PE-router.
The validation tests check OSPF prefixes on the CE-routers and perform end-to-end connectivity tests between CE-router loopbacks.
