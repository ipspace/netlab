[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [pe2]
ok: [p1]
ok: [dut]
ok: [p2]
ok: [ch]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Find device readiness script] ********************************************
ok: [pe2]
ok: [p1]
ok: [p2]
ok: [dut]
ok: [ch]
ok: [h2]
ok: [h1]
ok: [h3]

TASK [Wait for device to become ready] *****************************************
skipping: [pe2]
skipping: [p1]
skipping: [p2]
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/routeros7.yml for dut

TASK [Execute local ssh command to check router readiness] *********************
skipping: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, pe2, p1, p2, ch, h1, h2, h3

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [pe2]
ok: [p1]
ok: [p2]
ok: [ch]
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Find configuration template for normalize] *******************************
ok: [pe2]
ok: [p1]
ok: [p2]
ok: [dut]
ok: [ch]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [p1]
skipping: [p2]
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [pe2]
ok: [p1]
ok: [dut]
ok: [p2]
ok: [ch]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [pe2]
skipping: [p1]
skipping: [p2]
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [pe2]
skipping: [p1]
skipping: [p2]
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, pe2, p1, p2, ch, h1, h2, h3

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [pe2]
ok: [p1]
ok: [p2]
ok: [ch]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [pe2]
ok: [p1]
ok: [p2]
ok: [h1]
ok: [ch]
ok: [h2]
ok: [h3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [p1]
skipping: [p2]
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [pe2]
ok: [p1]
ok: [p2]
ok: [dut]
ok: [ch]
ok: [h3]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
    /system identity set name="dut"
  
    /interface bridge add name=loopback protocol-mode=none
  
  
    /ip address add interface=loopback address=10.0.0.5/32
  
  
  
  
  
    /ip/vrf/add place-before=0 name=common interfaces=ether4
  
  
  
  
    /ip/vrf/add place-before=0 name=t1 interfaces=ether3
  
  
  
    /interface ethernet set comment="dut -> p1" ether2
  
  
    /ip address add interface=ether2 address=10.1.0.1/30
    /ip address set [find where interface=ether2] comment="dut -> p1"
  
  
    /interface ethernet set comment="dut -> h1 [stub]" ether3
  
  
    /ip address add interface=ether3 address=172.16.0.5/24
    /ip address set [find where interface=ether3] comment="dut -> h1 [stub]"
  
  
    /interface ethernet set comment="dut -> ch [stub]" ether4
  
  
    /ip address add interface=ether4 address=172.16.3.5/24
    /ip address set [find where interface=ether4] comment="dut -> ch [stub]"
  
  
    /ip neighbor discovery-settings set discover-interface-list=all
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.2.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.2.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [ch] => 
  msg: |-
    initial configuration for ch
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.3.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.3.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [pe2] => 
  msg: |-
    initial configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
    ip link set eth3 down
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
    ip link set eth3 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname pe2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.6/32
    !
    interface eth1
     no shutdown
     description pe2 -> p2
     ip address 10.1.0.10/30
    !
    interface eth2
     no shutdown
     description pe2 -> h2 [stub]
     ip address 172.16.1.6/24
    !
    interface eth3
     no shutdown
     description pe2 -> h3 [stub]
     ip address 172.16.2.6/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p1] => 
  msg: |-
    initial configuration for p1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p1
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.7/32
    !
    interface eth1
     no shutdown
     description p1 -> dut
     ip address 10.1.0.2/30
    !
    interface eth2
     no shutdown
     description p1 -> p2
     ip address 10.1.0.5/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [p2] => 
  msg: |-
    initial configuration for p2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.8/32
    !
    interface eth1
     no shutdown
     description p2 -> p1
     ip address 10.1.0.6/30
    !
    interface eth2
     no shutdown
     description p2 -> pe2
     ip address 10.1.0.9/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for pe2, p1, p2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for ch, h1, h2, h3

TASK [load initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [pe2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [pe2]
skipping: [p1]
skipping: [p2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for pe2, p1, p2

TASK [template] ****************************************************************
changed: [pe2]
changed: [p1]
changed: [p2]

TASK [set_fact] ****************************************************************
ok: [pe2]
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [p2]
changed: [p1]
changed: [pe2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [pe2]
skipping: [p1]
skipping: [p2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [ch]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [ch -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [ch -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Copy script into running container at /tmp/config-ch_initial.sh] *********
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Execute /tmp/config-ch_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [ch -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Remove temporary file /tmp/ch_initial-wpceh2v_.sh] ***********************
changed: [ch -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [ch]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ch, dut, h1, h2, h3, p1, p2, pe2 => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ch, dut, h1, h2, h3, p1, p2, pe2 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ch, dut, h1, h2, h3, p1, p2, pe2 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ch, dut, h1, h2, h3, p1, p2, pe2 => (item=mpls)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for ch, dut, h1, h2, h3, p1, p2, pe2 => (item=vrf)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [ch]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for routing] *********************************
skipping: [dut]
ok: [ch]
ok: [h1]
skipping: [p1]
ok: [h2]
skipping: [p2]
ok: [h3]
skipping: [pe2]

TASK [fail] ********************************************************************
skipping: [ch]
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [dut]
ok: [ch]
skipping: [p1]
ok: [h1]
skipping: [p2]
ok: [h2]
skipping: [pe2]
ok: [h3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [ch] => 
  msg: |-
    routing configuration for ch
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.3.5 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.3.5 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.3.5 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.3.5 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
skipping: [p1]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.5 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.5 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
skipping: [p2]
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.6 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.6 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.6 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.6 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
skipping: [pe2]
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.2.6 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.2.6 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.2.6 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.2.6 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for ch, h1, h2, h3

TASK [Define script filename and determine whether to execute in netns] ********
ok: [ch]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Create a temporary file for the rendered script] *************************
changed: [ch -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [ch -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Copy script into running container at /tmp/config-ch_routing.sh] *********
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Execute /tmp/config-ch_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [ch -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Remove temporary file /tmp/ch_routing-39a0wunw.sh] ***********************
changed: [ch -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [ch]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for bgp] *************************************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [ch]
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [p1]
skipping: [p2]
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
  
    /routing/bgp/template add name=main as=65001 output.network=bgp-networks
  
    /routing/bgp/template set main router-id=10.0.0.5
  
  
  
  
  
    /routing/bgp/connection add template=main name=10_0_0_6 remote.address=10.0.0.6 remote.as=65001 comment="pe2" address-families=ip local.role=ebgp
  
    /routing/bgp/connection set [/routing/bgp/connection find name=10_0_0_6] local.role=ibgp local.address=loopback
  
  
  
  
    /routing/bgp/connection set [/routing/bgp/connection find name=10_0_0_6] nexthop-choice=force-self
  
  
  
    # BGP Network now is controlled by simple ACL
    /ip/firewall/address-list/ add list=bgp-networks address=10.0.0.5/32
ok: [pe2] => 
  msg: |-
    bgp configuration for pe2
    =========================================
    !
    router bgp 65001
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.6
    !
      neighbor 10.0.0.5 remote-as 65001
      neighbor 10.0.0.5 description dut
      neighbor 10.0.0.5 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.6/32
    !
    !
    !
      neighbor 10.0.0.5 activate
      neighbor 10.0.0.5 next-hop-self
      no neighbor 10.0.0.5 send-community all
      neighbor 10.0.0.5 send-community standard
      neighbor 10.0.0.5 send-community large
      neighbor 10.0.0.5 send-community extended
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [p1]
skipping: [p2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for pe2

TASK [load bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [template] ****************************************************************
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [pe2]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [pe2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [ch]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for ospf] ************************************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [ch]
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [p1]
ok: [dut]
ok: [p2]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
  
  
  
    /routing/ospf/instance add name=default4 version=2 router-id=10.0.0.5 vrf=main
  
  
  
    /routing/ospf/area add instance=default4 name="main_2_0.0.0.0" area-id=0.0.0.0
  
    /routing/ospf/interface-template add area=[/routing ospf area find area-id=0.0.0.0 and instance=default4] interface=loopback passive
  
  
  
  
  
  
  
  
  
    /routing/ospf/interface-template add area=[/routing ospf area find area-id=0.0.0.0 and instance=default4] interface=ether2 type=ptp
ok: [p1] => 
  msg: |-
    ospf configuration for p1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.7
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! p1 -> p2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [p2] => 
  msg: |-
    ospf configuration for p2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.8
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p2 -> p1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! p2 -> pe2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [pe2] => 
  msg: |-
    ospf configuration for pe2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.6
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! pe2 -> p2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for p1, p2, pe2

TASK [load ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [template] ****************************************************************
changed: [p2]
changed: [p1]
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [p2]
changed: [pe2]
changed: [p1]

TASK [Figure out whether to deploy the module mpls on current device] **********
ok: [ch]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [p1]
ok: [dut]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for mpls] ************************************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [ch]
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for mpls] ********************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [dut] => 
  msg: |-
    mpls configuration for dut
    =========================================
    /mpls/interface/add interface=all input=yes
  
  
    /mpls/ldp add lsr-id=10.0.0.5 afi=ip
  
    /mpls/ldp set 0 transport-address=10.0.0.5
  
  
    /mpls/ldp/interface add interface=ether2
  
  
    /routing/bgp/connection set [find remote.address=10.0.0.6] address-families=ip,vpnv4
ok: [p1] => 
  msg: |-
    mpls configuration for p1
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.7
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.7
        interface eth1
        exit
        interface eth2
        exit
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0
ok: [p2] => 
  msg: |-
    mpls configuration for p2
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.8
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.8
        interface eth1
        exit
        interface eth2
        exit
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0
ok: [pe2] => 
  msg: |-
    mpls configuration for pe2
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.6
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.6
        interface eth1
        exit
      exit
    !
    !
    router bgp 65001
     address-family ipv4 vpn
    !
      neighbor 10.0.0.5 activate
      neighbor 10.0.0.5 send-community both
      neighbor 10.0.0.5 next-hop-self
  
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0

TASK [Deploy mpls configuration] ***********************************************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for p1, p2, pe2

TASK [load mpls from /home/pipi/netlab_gh/netsim/ansible/templates/mpls/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [template] ****************************************************************
changed: [p1]
changed: [p2]
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [run /tmp/config.sh to deploy mpls config from /home/pipi/netlab_gh/netsim/ansible/templates/mpls/frr.j2] ***
changed: [p1]
changed: [p2]
changed: [pe2]

TASK [run vtysh to import mpls config from /home/pipi/netlab_gh/netsim/ansible/templates/mpls/frr.j2] ***
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [ch]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for vrf] *************************************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [ch]
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [p1]
skipping: [p2]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
    /routing/bgp/vpn add label-allocation-policy=per-vrf vrf=common route-distinguisher=65000:4 import.route-targets=65000:1,65000:2,65000:3,65000:4 export.route-targets=65000:4 export.redistribute=bgp,connected,ospf,static,vpn
  
    /routing/bgp/template add name=vrf_common as=65001 output.network=bgp-networks-common vrf=common routing-table=common output.redistribute=connected,bgp,bgp-mpls-vpn,vpn
  
    /routing/bgp/template set vrf_common router-id=10.0.0.5
  
  
  
    /routing/bgp/vpn add label-allocation-policy=per-vrf vrf=t1 route-distinguisher=65000:1 import.route-targets=65000:1,65000:4 export.route-targets=65000:1 export.redistribute=bgp,connected,ospf,static,vpn
  
    /routing/bgp/template add name=vrf_t1 as=65001 output.network=bgp-networks-t1 vrf=t1 routing-table=t1 output.redistribute=connected,bgp,bgp-mpls-vpn,vpn
  
    /routing/bgp/template set vrf_t1 router-id=10.0.0.5
ok: [pe2] => 
  msg: |-
    vrf configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
    # Create VRF tables
    if [ ! -e /sys/devices/virtual/net/t2 ]; then
    ip link add t2 type vrf table 100
    fi
    ip link set t2 up
    if [ ! -e /sys/devices/virtual/net/t3 ]; then
    ip link add t3 type vrf table 101
    fi
    ip link set t3 up
  
    # Move interfaces and loopbacks to vrfs
    sysctl -qw net.ipv6.conf.eth2.keep_addr_on_down=1
    ip link set eth2 master t2
    sysctl -qw net.ipv6.conf.eth3.keep_addr_on_down=1
    ip link set eth3 master t3
  
    cat >/tmp/vrf_config <<CONFIG
    vrf t2
     exit-vrf
    vrf t3
     exit-vrf
    !
    router bgp 65001
    !
    !
    router bgp 65001 vrf t2
     no bgp ebgp-requires-policy
     no bgp default ipv4-unicast
     bgp router-id 10.0.0.6
     address-family ipv4 unicast
      redistribute connected
  
      label vpn export auto
      export vpn
      import vpn
      rd vpn export 65000:2
      rt vpn import 65000:2 65000:4
      rt vpn export 65000:2
     exit-address-family
    !
    !
    router bgp 65001 vrf t3
     no bgp ebgp-requires-policy
     no bgp default ipv4-unicast
     bgp router-id 10.0.0.6
     address-family ipv4 unicast
      redistribute connected
  
      label vpn export auto
      export vpn
      import vpn
      rd vpn export 65000:3
      rt vpn import 65000:3 65000:4
      rt vpn export 65000:3
     exit-address-family
    !
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?

TASK [Deploy vrf configuration] ************************************************
skipping: [ch]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [p1]
skipping: [p2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for pe2

TASK [load vrf from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [template] ****************************************************************
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe2]

TASK [run /tmp/config.sh to deploy vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
changed: [pe2]

TASK [run vtysh to import vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
skipping: [pe2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
ch                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
dut                        : ok=50   changed=5    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
h1                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
h2                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
h3                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
p1                         : ok=41   changed=6    unreachable=0    failed=0    skipped=26   rescued=0    ignored=0   
p2                         : ok=41   changed=6    unreachable=0    failed=0    skipped=26   rescued=0    ignored=0   
pe2                        : ok=56   changed=11   unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   



The tested device (DUT) is a PE-router running MPLS/VPN and implementing
common services VRF.

The test checks the MPLS/VPN route import/export functionality. It should
succeed if the simple MPLS/VPN test and the VRF Common Services test succeded
unless you have to configure some weird nerd knobs to make it work.

