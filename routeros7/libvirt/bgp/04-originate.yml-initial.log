[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r1]
ok: [x1]
ok: [dut]
ok: [x2]
ok: [dut2]

TASK [Find device readiness script] ********************************************
ok: [r1]
ok: [x2]
ok: [x1]
ok: [dut]
ok: [dut2]

TASK [Wait for device to become ready] *****************************************
skipping: [r1]
skipping: [x1]
skipping: [x2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/routeros7.yml for dut, dut2

TASK [Execute local ssh command to check router readiness] *********************
skipping: [dut]
skipping: [dut2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, dut2, x1, x2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [r1]
ok: [x1]
ok: [dut]
ok: [x2]
ok: [dut2]

TASK [Find configuration template for normalize] *******************************
ok: [r1]
ok: [x1]
ok: [x2]
ok: [dut]
ok: [dut2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [dut2]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [r1]
ok: [x1]
ok: [x2]
ok: [dut]
ok: [dut2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [r1]
skipping: [dut2]
skipping: [x1]
skipping: [x2]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [r1]
skipping: [dut2]
skipping: [x1]
skipping: [x2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, dut2, x1, x2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [r1]
ok: [x1]
ok: [x2]
ok: [dut]
ok: [dut2]

TASK [Find configuration template for initial] *********************************
ok: [r1]
ok: [x1]
ok: [x2]
ok: [dut]
ok: [dut2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [dut2]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [r1]
ok: [x2]
ok: [dut]
ok: [x1]
ok: [dut2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.5/32
    !
    interface eth1
     no shutdown
     description r1 -> dut
     ip address 10.1.0.2/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
    /system identity set name="dut"
  
    /interface bridge add name=loopback protocol-mode=none
  
  
    /ip address add interface=loopback address=10.0.0.1/32
  
  
  
  
    /interface ethernet set comment="dut -> r1" ether2
  
    /interface ethernet set mtu=1500 ether2
  
    /ip address add interface=ether2 address=10.1.0.1/30
    /ip address set [find where interface=ether2] comment="dut -> r1"
  
  
    /interface ethernet set comment="dut -> x1 [external]" ether3
  
    /interface ethernet set mtu=1500 ether3
  
    /ip address add interface=ether3 address=10.1.0.5/30
    /ip address set [find where interface=ether3] comment="dut -> x1 [external]"
  
  
    /interface ethernet set comment="dut -> x2 [external]" ether4
  
    /interface ethernet set mtu=1500 ether4
  
    /ip address add interface=ether4 address=10.1.0.9/30
    /ip address set [find where interface=ether4] comment="dut -> x2 [external]"
  
  
    /interface ethernet set comment="dut -> dut2 [external]" ether5
  
    /interface ethernet set mtu=1500 ether5
  
    /ip address add interface=ether5 address=172.0.66.1/24
    /ip address set [find where interface=ether5] comment="dut -> dut2 [external]"
  
  
    /interface ethernet set comment="dut -> stub [stub]" ether6
  
    /interface ethernet set mtu=1500 ether6
  
    /ip address add interface=ether6 address=172.0.42.1/24
    /ip address set [find where interface=ether6] comment="dut -> stub [stub]"
  
  
    /ip neighbor discovery-settings set discover-interface-list=all
ok: [dut2] => 
  msg: |-
    initial configuration for dut2
    =========================================
  
    /system identity set name="dut2"
  
    /interface bridge add name=loopback protocol-mode=none
  
  
    /ip address add interface=loopback address=10.0.0.2/32
  
  
  
  
    /interface ethernet set comment="dut2 -> dut [external]" ether2
  
    /interface ethernet set mtu=1500 ether2
  
    /ip address add interface=ether2 address=172.0.66.2/24
    /ip address set [find where interface=ether2] comment="dut2 -> dut [external]"
  
  
    /ip neighbor discovery-settings set discover-interface-list=all
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description x2 -> dut [external]
     ip address 10.1.0.10/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description x1 -> dut [external]
     ip address 10.1.0.6/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/routeros7.yml for dut, dut2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for r1, x1, x2

TASK [load initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/routeros7.j2] ***
ok: [dut]
ok: [dut2]

TASK [Run commands on CHR] *****************************************************
changed: [dut2]
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [r1]
skipping: [x1]
skipping: [x2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for r1, x1, x2

TASK [template] ****************************************************************
changed: [x1]
changed: [r1]
changed: [x2]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [x1]
ok: [x2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [r1]
changed: [x2]
changed: [x1]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [r1]
skipping: [x1]
skipping: [x2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r1]
ok: [x1]
ok: [x2]
ok: [dut]
ok: [dut2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, dut2, r1, x1, x2 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, dut2, r1, x1, x2 => (item=ospf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [r1]
ok: [x1]
ok: [dut]
ok: [x2]
ok: [dut2]

TASK [Find configuration template for bgp] *************************************
ok: [r1]
ok: [x1]
ok: [dut]
ok: [x2]
ok: [dut2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [dut2]
skipping: [r1]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [r1]
ok: [x2]
ok: [dut]
ok: [dut2]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r1] => 
  msg: |-
    bgp configuration for r1
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.5
    !
      neighbor 10.0.0.1 remote-as 65000
      neighbor 10.0.0.1 description dut
      neighbor 10.0.0.1 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.5/32
    !
    !
    !
      neighbor 10.0.0.1 activate
      neighbor 10.0.0.1 next-hop-self
      no neighbor 10.0.0.1 send-community all
      neighbor 10.0.0.1 send-community standard
      neighbor 10.0.0.1 send-community large
      neighbor 10.0.0.1 send-community extended
    !
    !
    !
    do write
ok: [dut2] => 
  msg: |-
    bgp configuration for dut2
    =========================================
  
    /routing/bgp/template add name=main as=65001 output.network=bgp-networks
  
    /routing/bgp/template set main router-id=10.0.0.2
  
  
  
  
  
    /routing/bgp/connection add template=main name=172_0_66_1 remote.address=172.0.66.1 remote.as=65000 comment="dut" address-families=ip local.role=ebgp
  
  
    /routing/bgp/connection set [/routing/bgp/connection find name=172_0_66_1] nexthop-choice=force-self
  
  
  
    # BGP Network now is controlled by simple ACL
    /ip/firewall/address-list/ add list=bgp-networks address=10.0.0.2/32
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
  
    /routing/bgp/template add name=main as=65000 output.network=bgp-networks
  
    /routing/bgp/template set main router-id=10.0.0.1
  
  
  
  
  
    /routing/bgp/connection add template=main name=10_0_0_5 remote.address=10.0.0.5 remote.as=65000 comment="r1" address-families=ip local.role=ebgp
  
    /routing/bgp/connection set [/routing/bgp/connection find name=10_0_0_5] local.role=ibgp local.address=loopback
  
  
  
  
    /routing/bgp/connection set [/routing/bgp/connection find name=10_0_0_5] nexthop-choice=force-self
  
  
  
  
  
    /routing/bgp/connection add template=main name=10_1_0_6 remote.address=10.1.0.6 remote.as=65100 comment="x1" address-families=ip local.role=ebgp
  
  
    /routing/bgp/connection set [/routing/bgp/connection find name=10_1_0_6] nexthop-choice=force-self
  
  
  
  
  
    /routing/bgp/connection add template=main name=10_1_0_10 remote.address=10.1.0.10 remote.as=65101 comment="x2" address-families=ip local.role=ebgp
  
  
    /routing/bgp/connection set [/routing/bgp/connection find name=10_1_0_10] nexthop-choice=force-self
  
  
  
  
  
    /routing/bgp/connection add template=main name=172_0_66_2 remote.address=172.0.66.2 remote.as=65001 comment="dut2" address-families=ip local.role=ebgp
  
  
    /routing/bgp/connection set [/routing/bgp/connection find name=172_0_66_2] nexthop-choice=force-self
  
  
  
  
    # BGP Network now is controlled by simple ACL
    /ip/firewall/address-list/ add list=bgp-networks address=172.0.42.0/24
  
    # BGP Network now is controlled by simple ACL
    /ip/firewall/address-list/ add list=bgp-networks address=172.42.42.0/24
  
  
    /ip route add blackhole dst-address=172.42.42.0/24
ok: [x1] => 
  msg: |-
    bgp configuration for x1
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 10.1.0.5 remote-as 65000
      neighbor 10.1.0.5 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.3/32
    !
    !
    !
      neighbor 10.1.0.5 activate
      no neighbor 10.1.0.5 send-community all
      neighbor 10.1.0.5 send-community standard
      neighbor 10.1.0.5 send-community large
    !
    !
    !
    do write
ok: [x2] => 
  msg: |-
    bgp configuration for x2
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.1.0.9 remote-as 65000
      neighbor 10.1.0.9 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.4/32
    !
    !
    !
      neighbor 10.1.0.9 activate
      no neighbor 10.1.0.9 send-community all
      neighbor 10.1.0.9 send-community standard
      neighbor 10.1.0.9 send-community large
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/routeros7.yml for dut, dut2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for r1, x1, x2

TASK [load bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/routeros7.j2] ***
ok: [dut]
ok: [dut2]

TASK [Run commands on CHR] *****************************************************
changed: [dut2]
changed: [dut]

TASK [template] ****************************************************************
changed: [r1]
changed: [x1]
changed: [x2]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [x1]
ok: [x2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [r1]
skipping: [x1]
skipping: [x2]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [r1]
changed: [x1]
changed: [x2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [r1]
ok: [x1]
ok: [x2]
ok: [dut]
ok: [dut2]

TASK [Find configuration template for ospf] ************************************
skipping: [dut2]
skipping: [x1]
skipping: [x2]
ok: [r1]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [dut2]
skipping: [r1]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [dut2]
skipping: [x1]
skipping: [x2]
ok: [r1]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut2]
skipping: [x1]
skipping: [x2]
ok: [r1] => 
  msg: |-
    ospf configuration for r1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.5
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
  
  
  
    /routing/ospf/instance add name=default4 version=2 router-id=10.0.0.1 vrf=main
  
  
  
  
    /routing/ospf/area add instance=default4 name="main_2_0.0.0.0" area-id=0.0.0.0
  
    /routing/ospf/interface-template add area=[/routing ospf area find area-id=0.0.0.0 and instance=default4] interface=loopback passive
  
  
  
  
  
  
  
  
  
    /routing/ospf/interface-template add area=[/routing ospf area find area-id=0.0.0.0 and instance=default4] interface=ether2 type=ptp
  
  
  
  
  
  
  
  
  
  
    /routing/ospf/interface-template add area=[/routing ospf area find area-id=0.0.0.0 and instance=default4] interface=ether6 passive

TASK [Deploy ospf configuration] ***********************************************
skipping: [dut2]
skipping: [x1]
skipping: [x2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for r1

TASK [load ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [template] ****************************************************************
changed: [r1]

TASK [set_fact] ****************************************************************
ok: [r1]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [r1]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [r1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=32   changed=3    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
dut2                       : ok=26   changed=2    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
r1                         : ok=36   changed=7    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
x1                         : ok=28   changed=4    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
x2                         : ok=28   changed=4    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   



Use this topology to test the origination and propagation
of IPv4 prefixes.

