[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [srv]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/routeros7.yml for dut

TASK [Execute local ssh command to check router readiness] *********************
skipping: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, srv, dut

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [srv]
skipping: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [srv]
skipping: [dut]

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [h1]
skipping: [h2]
skipping: [srv]
skipping: [dut]

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
skipping: [srv]
skipping: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, srv, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [srv]
skipping: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.4 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.4 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.4 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.4 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.2/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.4 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [srv] => 
  msg: |-
    initial configuration for srv
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.2.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.2.3/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.2.4 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.2.4 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.2.4 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.2.4 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
    /system identity set name="dut"
  
    /interface bridge add name=loopback protocol-mode=none
  
  
    /ip address add interface=loopback address=10.0.0.4/32
  
  
  
  
  
    /ip/vrf/add place-before=0 name=blue interfaces=ether3
  
  
  
  
    /ip/vrf/add place-before=0 name=common interfaces=ether4
  
  
  
  
    /ip/vrf/add place-before=0 name=red interfaces=ether2
  
  
  
    /interface ethernet set comment="dut -> h1 [stub]" ether2
  
  
    /ip address add interface=ether2 address=172.16.0.4/24
    /ip address set [find where interface=ether2] comment="dut -> h1 [stub]"
  
  
    /interface ethernet set comment="dut -> h2 [stub]" ether3
  
  
    /ip address add interface=ether3 address=172.16.1.4/24
    /ip address set [find where interface=ether3] comment="dut -> h2 [stub]"
  
  
    /interface ethernet set comment="dut -> srv [stub]" ether4
  
  
    /ip address add interface=ether4 address=172.16.2.4/24
    /ip address set [find where interface=ether4] comment="dut -> srv [stub]"
  
  
    /ip neighbor discovery-settings set discover-interface-list=all

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [srv]
ok: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, srv
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/routeros7.yml for dut

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [srv]

TASK [Create a temporary file for the rendered script] *************************
changed: [srv -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [srv -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [srv]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [srv -> localhost]

TASK [Remove temporary file /tmp/h1_initial-gejuezlx.sh] ***********************
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [srv -> localhost]

TASK [load initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut => (item=vrf)

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [dut]

TASK [Find configuration template for vrf] *************************************
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
    /routing/bgp/vpn add label-allocation-policy=per-vrf vrf=blue route-distinguisher=65000:2 import.route-targets=65000:2,65000:3 export.route-targets=65000:2 export.redistribute=bgp,connected,ospf,static,vpn
  
    /routing/bgp/template add name=vrf_blue as=65000 output.network=bgp-networks-blue vrf=blue routing-table=blue output.redistribute=connected,bgp,bgp-mpls-vpn,vpn
  
    /routing/bgp/template set vrf_blue router-id=10.0.0.4
  
  
  
    /routing/bgp/vpn add label-allocation-policy=per-vrf vrf=common route-distinguisher=65000:3 import.route-targets=65000:1,65000:2,65000:3 export.route-targets=65000:3 export.redistribute=bgp,connected,ospf,static,vpn
  
    /routing/bgp/template add name=vrf_common as=65000 output.network=bgp-networks-common vrf=common routing-table=common output.redistribute=connected,bgp,bgp-mpls-vpn,vpn
  
    /routing/bgp/template set vrf_common router-id=10.0.0.4
  
  
  
    /routing/bgp/vpn add label-allocation-policy=per-vrf vrf=red route-distinguisher=65000:1 import.route-targets=65000:1,65000:3 export.route-targets=65000:1 export.redistribute=bgp,connected,ospf,static,vpn
  
    /routing/bgp/template add name=vrf_red as=65000 output.network=bgp-networks-red vrf=red routing-table=red output.redistribute=connected,bgp,bgp-mpls-vpn,vpn
  
    /routing/bgp/template set vrf_red router-id=10.0.0.4

TASK [Find configuration deployment deploy_script for vrf] *********************
ok: [dut]

TASK [Deploy vrf configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/routeros7.yml for dut

TASK [load vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=23   changed=2    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h1                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h2                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
srv                        : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   



The device under test has two user VRFs and a common services VRF. The
lab tests inter-VRF route leaking between common VRF and other VRFs

* h1 and h2 should be able to ping srv but not each other

