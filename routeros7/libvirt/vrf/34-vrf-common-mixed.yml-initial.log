[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [srv]
skipping: [r1]
skipping: [r2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/routeros7.yml for dut

TASK [Execute local ssh command to check router readiness] *********************
skipping: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, srv, r1, r2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [srv]
skipping: [r1]
skipping: [r2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [srv]
skipping: [r1]
skipping: [r2]

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [dut]
skipping: [srv]
skipping: [r1]
skipping: [r2]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [srv]
skipping: [r1]
skipping: [r2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, srv, r1, r2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [srv]
skipping: [r1]
skipping: [r2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
    /system identity set name="dut"
  
    /interface bridge add name=loopback protocol-mode=none
  
  
    /ip address add interface=loopback address=10.0.0.1/32
  
  
  
  
  
    /ip/vrf/add place-before=0 name=blue interfaces=ether3
  
  
  
  
    /ip/vrf/add place-before=0 name=common interfaces=ether4
  
  
  
  
    /ip/vrf/add place-before=0 name=red interfaces=ether2
  
  
  
    /interface ethernet set comment="dut -> r1" ether2
  
    /interface ethernet set mtu=1500 ether2
  
    /ip address add interface=ether2 address=10.1.0.1/30
    /ip address set [find where interface=ether2] comment="dut -> r1"
  
  
    /interface ethernet set comment="dut -> r2" ether3
  
    /interface ethernet set mtu=1500 ether3
  
    /ip address add interface=ether3 address=10.1.0.5/30
    /ip address set [find where interface=ether3] comment="dut -> r2"
  
  
    /interface ethernet set comment="dut -> srv [external]" ether4
  
    /interface ethernet set mtu=1500 ether4
  
    /ip address add interface=ether4 address=10.1.0.9/30
    /ip address set [find where interface=ether4] comment="dut -> srv [external]"
  
  
    /ip neighbor discovery-settings set discover-interface-list=all
ok: [srv] => 
  msg: |-
    initial configuration for srv
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set dev eth1 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname srv
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description srv -> dut [external]
     ip address 10.1.0.10/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set dev eth1 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description r1 -> dut
     ip address 10.1.0.2/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set dev eth1 mtu 1500
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description r2 -> dut
     ip address 10.1.0.6/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for srv, r1, r2

TASK [load initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [srv -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [srv]
skipping: [r1]
skipping: [r2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for srv, r1, r2

TASK [template] ****************************************************************
changed: [r1]
changed: [r2]
changed: [srv]

TASK [set_fact] ****************************************************************
ok: [srv]
ok: [r1]
ok: [r2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [srv]
changed: [r1]
changed: [r2]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [srv]
skipping: [r1]
skipping: [r2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, srv => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, srv => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, srv => (item=vrf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for bgp] *************************************
skipping: [r1]
skipping: [r2]
ok: [srv]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r1]
skipping: [r2]
ok: [srv] => 
  msg: |-
    bgp configuration for srv
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.1.0.9 remote-as 65000
      neighbor 10.1.0.9 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.4/32
    !
    !
    !
      neighbor 10.1.0.9 activate
      no neighbor 10.1.0.9 send-community all
      neighbor 10.1.0.9 send-community standard
      neighbor 10.1.0.9 send-community large
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
  
    /routing/bgp/template add name=main as=65000 output.network=bgp-networks
  
    /routing/bgp/template set main router-id=10.0.0.1
  
  
  
    # BGP Network now is controlled by simple ACL
    /ip/firewall/address-list/ add list=bgp-networks address=10.0.0.1/32

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [r1]
skipping: [r2]
ok: [srv]
ok: [dut]

TASK [Deploy bgp configuration] ************************************************
skipping: [r1]
skipping: [r2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for srv

TASK [load bgp from /home/pipi/net101/tools/netsim/ansible/templates/bgp/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [template] ****************************************************************
changed: [srv]

TASK [set_fact] ****************************************************************
ok: [srv]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [srv]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [srv]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for ospf] ************************************
skipping: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [srv]
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
ok: [r1] => 
  msg: |-
    ospf configuration for r1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [r2] => 
  msg: |-
    ospf configuration for r2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r2 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [Deploy ospf configuration] ***********************************************
skipping: [srv]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for r1, r2

TASK [load ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [template] ****************************************************************
changed: [r1]
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [r1]
skipping: [r2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [r1]
changed: [r2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for vrf] *************************************
skipping: [r1]
skipping: [r2]
skipping: [srv]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [srv]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r1]
skipping: [r2]
skipping: [srv]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
    /routing/bgp/vpn add label-allocation-policy=per-vrf vrf=blue route-distinguisher=65000:2 import.route-targets=65000:2,65000:3 export.route-targets=65000:2 export.redistribute=bgp,connected,ospf,static,vpn
  
    /routing/bgp/template add name=vrf_blue as=65000 output.network=bgp-networks-blue vrf=blue routing-table=blue output.redistribute=connected,bgp,bgp-mpls-vpn,vpn
  
    /routing/bgp/template set vrf_blue router-id=10.0.0.1
  
    /routing/bgp/template set vrf_blue output.redistribute=([get vrf_blue output.redistribute],"ospf")
  
  
    /routing/bgp/vpn add label-allocation-policy=per-vrf vrf=common route-distinguisher=65000:3 import.route-targets=65000:1,65000:2,65000:3 export.route-targets=65000:3 export.redistribute=bgp,connected,ospf,static,vpn
  
    /routing/bgp/template add name=vrf_common as=65000 output.network=bgp-networks-common vrf=common routing-table=common output.redistribute=connected,bgp,bgp-mpls-vpn,vpn
  
    /routing/bgp/template set vrf_common router-id=10.0.0.1
  
  
  
  
  
  
    /routing/bgp/connection add template=vrf_common name=10_1_0_10 remote.address=10.1.0.10 remote.as=65100 comment="srv" address-families=ip local.role=ebgp
  
  
  
  
    /routing/bgp/vpn add label-allocation-policy=per-vrf vrf=red route-distinguisher=65000:1 import.route-targets=65000:1,65000:3 export.route-targets=65000:1 export.redistribute=bgp,connected,ospf,static,vpn
  
    /routing/bgp/template add name=vrf_red as=65000 output.network=bgp-networks-red vrf=red routing-table=red output.redistribute=connected,bgp,bgp-mpls-vpn,vpn
  
    /routing/bgp/template set vrf_red router-id=10.0.0.1
  
    /routing/bgp/template set vrf_red output.redistribute=([get vrf_red output.redistribute],"ospf")
  
  
  
  
  
  
  
    /routing/ospf/instance add name=default4_blue version=2 router-id=10.100.0.101 vrf=blue
  
  
  
    /routing/ospf/area add instance=default4_blue name="blue_2_0.0.0.0" area-id=0.0.0.0
  
  
  
  
  
  
  
  
  
  
    /routing/ospf/interface-template add area=[/routing ospf area find area-id=0.0.0.0 and instance=default4_blue] interface=ether3 type=ptp
  
  
  
    /routing/ospf/instance set [/routing/ospf/instance find name=default4_blue] redistribute=bgp,bgp-mpls-vpn,vpn,connected,static routing-table=blue
  
  
  
    /routing/ospf/instance add name=default4_red version=2 router-id=10.100.0.100 vrf=red
  
  
  
    /routing/ospf/area add instance=default4_red name="red_2_0.0.0.0" area-id=0.0.0.0
  
  
  
  
  
  
  
  
  
  
    /routing/ospf/interface-template add area=[/routing ospf area find area-id=0.0.0.0 and instance=default4_red] interface=ether2 type=ptp
  
  
  
    /routing/ospf/instance set [/routing/ospf/instance find name=default4_red] redistribute=bgp,bgp-mpls-vpn,vpn,connected,static routing-table=red

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [r1]
skipping: [r2]
skipping: [srv]
ok: [dut]

TASK [Deploy vrf configuration] ************************************************
skipping: [r1]
skipping: [r2]
skipping: [srv]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/routeros7.yml for dut

TASK [load vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=39   changed=4    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
r1                         : ok=29   changed=4    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
r2                         : ok=29   changed=4    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
srv                        : ok=30   changed=5    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   



The device under test has two user VRFs and a common services VRF.
Routers are attached to those interfaces and run OSPF or BGP with device under test.

* r1 and r2 should be able to ping srv but not each other

