[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [x1]
skipping: [x2]
skipping: [x3]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/routeros7.yml for dut

TASK [Execute local ssh command to check router readiness] *********************
skipping: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for x1, x2, x3, dut

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [x1]
skipping: [x2]
skipping: [x3]
skipping: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [x1]
skipping: [x2]
skipping: [x3]
skipping: [dut]

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [x1]
skipping: [x2]
skipping: [x3]
skipping: [dut]

TASK [Deploy normalize configuration] ******************************************
skipping: [x1]
skipping: [x2]
skipping: [x3]
skipping: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for x1, x2, x3, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [x1]
skipping: [x2]
skipping: [x3]
skipping: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
    /system identity set name="dut"
  
    /interface bridge add name=loopback protocol-mode=none
  
  
    /ip address add interface=loopback address=10.0.0.1/32
  
  
    /interface/bridge/add name=switch vlan-filtering=yes comment="Global Switch Bridge"
  
    /interface/vlan/add name=vlan500 vlan-id=500 interface=switch
    /interface/vlan/add name=vlan501 vlan-id=501 interface=switch
    /interface/vlan/add name=vlan502 vlan-id=502 interface=switch
  
  
  
  
  
    /interface ethernet set comment="dut -> x3" ether2
  
    /interface ethernet set mtu=1400 ether2
  
  
  
    /interface ethernet set comment="[Access VLAN ospf_1] dut -> x1" ether3
  
    /interface ethernet set mtu=1400 ether3
  
  
  
    /interface ethernet set comment="[Access VLAN ospf_2] dut -> x2" ether4
  
    /interface ethernet set mtu=1280 ether4
  
  
  
    /interface ethernet set comment="VLAN ospf_1 (500) -> [x1]" vlan500
  
    /interface ethernet set mtu=1400 vlan500
  
    /ip address add interface=vlan500 address=172.16.0.1/24
    /ip address set [find where interface=vlan500] comment="VLAN ospf_1 (500) -> [x1]"
  
  
    /interface ethernet set comment="VLAN ospf_2 (501) -> [x2]" vlan501
  
    /interface ethernet set mtu=1280 vlan501
  
    /ip address add interface=vlan501 address=172.16.1.1/24
    /ip address set [find where interface=vlan501] comment="VLAN ospf_2 (501) -> [x2]"
  
  
    /interface ethernet set comment="VLAN ospf_3 (502) -> [x3]" vlan502
  
    /interface ethernet set mtu=1320 vlan502
  
    /ip address add interface=vlan502 address=172.16.2.1/24
    /ip address set [find where interface=vlan502] comment="VLAN ospf_3 (502) -> [x3]"
  
  
    /ip neighbor discovery-settings set discover-interface-list=all
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1400
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description [Access VLAN ospf_1] x1 -> dut
     ! no ip address
    !
    interface vlan500
     no shutdown
     description VLAN ospf_1 (500) -> [dut]
     ip address 172.16.0.2/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1280
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description [Access VLAN ospf_2] x2 -> dut
     ! no ip address
    !
    interface vlan501
     no shutdown
     description VLAN ospf_2 (501) -> [dut]
     ip address 172.16.1.3/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x3] => 
  msg: |-
    initial configuration for x3
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x3
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description x3 -> dut
     ! no ip address
    !
    interface eth1.502
     no shutdown
     description [SubIf VLAN ospf_3] x3 -> dut
     ! no ip address
    !
    interface vlan502
     no shutdown
     description VLAN ospf_3 (502) -> [dut]
     ip address 172.16.2.4/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for x1, x2, x3
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/routeros7.yml for dut

TASK [Attempt to load VRF kernel module] ***************************************
changed: [x1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for x1, x2, x3

TASK [template] ****************************************************************
changed: [x3]
changed: [x1]
changed: [x2]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [x2]
ok: [x3]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [x2]
changed: [x1]
changed: [x3]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [load initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3 => (item=ospf)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Find configuration template for vlan] ************************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    vlan configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan500 ]; then
      brctl addbr vlan500
      ip link set dev vlan500 address 52:dc:ca:fd:02:00
  
      ip link set dev vlan500 mtu 1400
      ip addr flush dev vlan500
      ip addr add 172.16.0.2/24 dev vlan500
    fi
  
    brctl addif vlan500 eth1
  
    ip link set dev vlan500 up
    exit 0
ok: [x2] => 
  msg: |-
    vlan configuration for x2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan501 ]; then
      brctl addbr vlan501
      ip link set dev vlan501 address 52:dc:ca:fd:03:00
  
      ip link set dev vlan501 mtu 1280
      ip addr flush dev vlan501
      ip addr add 172.16.1.3/24 dev vlan501
    fi
  
    brctl addif vlan501 eth1
  
    ip link set dev vlan501 up
    exit 0
ok: [x3] => 
  msg: |-
    vlan configuration for x3
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/eth1.502 ]; then
      ip link add link eth1 name eth1.502 type vlan id 502
      ip link set dev eth1.502 up
    fi
    if [ ! -e /sys/devices/virtual/net/vlan502 ]; then
      brctl addbr vlan502
      ip link set dev vlan502 address 52:dc:ca:fd:04:00
  
      ip link set dev vlan502 mtu 1320
      ip addr flush dev vlan502
      ip addr add 172.16.2.4/24 dev vlan502
    fi
  
    brctl addif vlan502 eth1.502
  
    ip link set dev vlan502 up
    exit 0
ok: [dut] => 
  msg: |-
    vlan configuration for dut
    =========================================
  
  
    /interface/bridge/vlan add bridge=switch vlan-ids=500 tagged=switch
    /interface/bridge/vlan add bridge=switch vlan-ids=501 tagged=switch
    /interface/bridge/vlan add bridge=switch vlan-ids=502 tagged=switch
  
  
    /interface/bridge/port add bridge=switch interface=ether2
  
    /interface/bridge/vlan set tagged=([get value-name=tagged [find vlan-ids=502]],"ether2") [find vlan-ids=502]
  
  
    /interface/bridge/port add bridge=switch interface=ether3 pvid=500
  
    /interface/bridge/vlan set untagged=([get value-name=untagged [find vlan-ids=500]],"ether3") [find vlan-ids=500]
  
  
  
  
    /interface/bridge/port add bridge=switch interface=ether4 pvid=501
  
    /interface/bridge/vlan set untagged=([get value-name=untagged [find vlan-ids=501]],"ether4") [find vlan-ids=501]

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for x1, x2, x3

TASK [load vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [template] ****************************************************************
changed: [x3]
changed: [x2]
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [x2]
ok: [x3]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
changed: [x3]
changed: [x1]
changed: [x2]

TASK [run vtysh to import vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Find configuration template for ospf] ************************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    ospf configuration for x1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface vlan500
    ! VLAN ospf_1 (500) -> [dut]
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [x2] => 
  msg: |-
    ospf configuration for x2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface vlan501
    ! VLAN ospf_2 (501) -> [dut]
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
  
  
  
    /routing/ospf/instance add name=default4 version=2 router-id=10.0.0.1 vrf=main
  
  
  
  
  
    /routing/ospf/area add instance=default4 name="main_2_0.0.0.0" area-id=0.0.0.0
  
    /routing/ospf/interface-template add area=[/routing ospf area find area-id=0.0.0.0 and instance=default4] interface=loopback passive
  
  
  
  
  
  
  
  
  
    /routing/ospf/interface-template add area=[/routing ospf area find area-id=0.0.0.0 and instance=default4] interface=vlan500 type=ptp
  
  
  
  
  
  
  
  
  
  
    /routing/ospf/interface-template add area=[/routing ospf area find area-id=0.0.0.0 and instance=default4] interface=vlan501 type=ptp
  
  
  
  
  
  
  
  
  
  
    /routing/ospf/interface-template add area=[/routing ospf area find area-id=0.0.0.0 and instance=default4] interface=vlan502 type=ptp
ok: [x3] => 
  msg: |-
    ospf configuration for x3
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.4
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface vlan502
    ! VLAN ospf_3 (502) -> [dut]
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/routeros7.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for x1, x2, x3

TASK [load ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/routeros7.j2] ***
ok: [dut]

TASK [Run commands on CHR] *****************************************************
changed: [dut]

TASK [template] ****************************************************************
changed: [x2]
changed: [x3]
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [x2]
ok: [x3]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [x3]
changed: [x2]
changed: [x1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=31   changed=3    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
x1                         : ok=35   changed=7    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
x2                         : ok=34   changed=6    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
x3                         : ok=34   changed=6    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   



This lab tests OSPF adjacencies on VLAN interfaces and trunks with non-default
MTU settings. The adjacency establishment could fail due to MTU mismatch.

Failure to establish X2-DUT adjacency means that the VLAN interface does not
get the correct MTU. Failure to establish X1-DUT adjacency indicates a
potential problem with system MTU. Failure to establish X3-DUT adjacency
indicates the MTU is not set correctly on VLAN/SVI interface.

