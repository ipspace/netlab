[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Wait for device to become ready] *****************************************
skipping: [x1]
skipping: [x2]
skipping: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for x1, x2, dut

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [x1]
skipping: [x2]
skipping: [dut]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [x1] => 
  msg: |-
    normalize configuration for x1
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0201
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0202
ok: [x2] => 
  msg: |-
    normalize configuration for x2
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0301
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0302

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [x2]
changed: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for x1, x2, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [x1]
skipping: [x2]
skipping: [dut]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    hostname dut
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.16.0.2 x1 port-channel1.x1
    172.16.1.3 x2 port-channel1.x2
    10.0.0.1 dut
    172.16.0.1 bond1.dut
    172.16.1.1 bond2.dut
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname dut
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=1
    net.ipv6.conf.all.forwarding=1
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
    cat <<SCRIPT > /etc/netplan/02-loopback.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        lo:
          addresses:
            - 10.0.0.1/32
    SCRIPT
  
    # Interface addressing and bonds, including any static routes
    cat <<SCRIPT > /etc/netplan/03-eth-bond1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          dhcp4: no
        eth2:
          dhcp4: no
      bonds:
        bond1:
          interfaces:
            - eth1
            - eth2
          parameters:
            mode: 802.3ad
            lacp-rate: fast
            mii-monitor-interval: 100
            transmit-hash-policy: encap3+4
          mtu: 1500
          addresses:
            - 172.16.0.1/24
    SCRIPT
    cat <<SCRIPT > /etc/netplan/03-eth-bond2.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth3:
          dhcp4: no
        eth4:
          dhcp4: no
      bonds:
        bond2:
          interfaces:
            - eth3
            - eth4
          parameters:
            mode: 802.3ad
            lacp-rate: fast
            mii-monitor-interval: 100
            transmit-hash-policy: encap3+4
          mtu: 1400
          addresses:
            - 172.16.1.1/24
    SCRIPT
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    hostname x1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    !
    ip host dut 10.0.0.1 172.16.0.1 172.16.1.1
    ip host x2 172.16.1.3
    !
    interface Management1
     no lldp transmit
     no lldp receive
    !
    interface port-channel1
     no switchport
     mtu 1500
     description x1 -> dut [stub]
     ip address 172.16.0.2/24
    !
    interface Ethernet1
     no switchport
     mtu 1500
     description x1 -> dut [stub]
    !
     mac-address 52dc.cafe.0201
     no shutdown
    !
    interface Ethernet2
     no switchport
     mtu 1500
     description x1 -> dut [stub]
    !
     mac-address 52dc.cafe.0202
     no shutdown
    !
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    hostname x2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    !
    !
    ip host dut 10.0.0.1 172.16.0.1 172.16.1.1
    ip host x1 172.16.0.2
    !
    interface Management1
     no lldp transmit
     no lldp receive
    !
    interface port-channel1
     no switchport
     mtu 1400
     description x2 -> dut [stub]
     ip address 172.16.1.3/24
    !
    interface Ethernet1
     no switchport
     mtu 1400
     description x2 -> dut [stub]
    !
     mac-address 52dc.cafe.0301
     no shutdown
    !
    interface Ethernet2
     no switchport
     mtu 1400
     description x2 -> dut [stub]
    !
     mac-address 52dc.cafe.0302
     no shutdown
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux.yml for dut

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [x1]
changed: [x2]

TASK [template] ****************************************************************
changed: [dut]

TASK [Execute /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux.j2] ***
changed: [dut]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2 => (item=lag)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2 => (item=routing)

TASK [Figure out whether to deploy the module lag on current device] ***********
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for lag] *************************************
ok: [dut]
ok: [x2]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for lag] *********************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    lag configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    # Bond devices are created by 'initial' module - add members
    #
    ethtool -s eth1 autoneg off speed 1000 duplex full
    ethtool -s eth2 autoneg off speed 1000 duplex full
    ethtool -s eth3 autoneg off speed 1000 duplex full
    ethtool -s eth4 autoneg off speed 1000 duplex full
    ip link del bond1
    ip link del bond2
    netplan generate
    netplan apply
    exit 0
ok: [x1] => 
  msg: |-
    lag configuration for x1
    =========================================
  
    interface port-channel1
     description x1 -> dut
    !
    !
    interface Ethernet1
     description x1 -> dut in channel-group 1
     channel-group 1 mode active
     lacp timer fast
    !
    interface Ethernet2
     description x1 -> dut in channel-group 1
     channel-group 1 mode active
     lacp timer fast
ok: [x2] => 
  msg: |-
    lag configuration for x2
    =========================================
  
    interface port-channel1
     description x2 -> dut
    !
    !
    interface Ethernet1
     description x2 -> dut in channel-group 1
     channel-group 1 mode active
     lacp timer fast
    !
    interface Ethernet2
     description x2 -> dut in channel-group 1
     channel-group 1 mode active
     lacp timer fast

TASK [Deploy lag configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2

TASK [template] ****************************************************************
changed: [dut]

TASK [Execute /tmp/config.sh to deploy lag config from /home/pipi/net101/tools/netsim/ansible/templates/lag/linux.j2] ***
changed: [dut]

TASK [eos_config: deploying lag from /home/pipi/net101/tools/netsim/ansible/templates/lag/eos.j2] ***
changed: [x2]
changed: [x1]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for routing] *********************************
skipping: [dut]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [dut]
ok: [x1]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [x1] => 
  msg: |-
    routing configuration for x1
    =========================================
    !
    !
    ! AS-path access lists
    !
    !
    ! Static routes
    !
    ip route 0.0.0.0/0 port-channel1 172.16.0.1
ok: [x2] => 
  msg: |-
    routing configuration for x2
    =========================================
    !
    !
    ! AS-path access lists
    !
    !
    ! Static routes
    !
    ip route 0.0.0.0/0 port-channel1 172.16.1.1

TASK [Deploy routing configuration] ********************************************
skipping: [dut]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for x1, x2

TASK [eos_config: deploying routing from /home/pipi/net101/tools/netsim/ansible/templates/routing/eos.j2] ***
changed: [x1]
changed: [x2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=25   changed=4    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
x1                         : ok=31   changed=4    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   
x2                         : ok=31   changed=4    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   



The device under is a router with a L3 LAG link connected to a FRR device. The
FRR device should be able to ping the loopback interface of DUT.

