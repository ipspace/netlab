[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, dut

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [dut]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [dut]

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [dut]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.4/24 dev eth1
    ip link set dev eth1 mtu 1500
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    ip link set dev eth1 mtu 1500
  
    ip link set dev eth2 up
    ip link set dev eth2 mtu 1500
  
    ip link set dev eth3 up
    ip link set dev eth3 mtu 1500

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, dut

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]

TASK [Create a temporary file for the rendered script] *************************
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [dut -> localhost]
changed: [h1 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [dut -> localhost]
changed: [h1 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [dut]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [dut]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [dut -> localhost]

TASK [Remove temporary file /tmp/h1_initial-00uljkq8.sh] ***********************
changed: [h1 -> localhost]
changed: [dut -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3 => (item=routing)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
ok: [dut] => 
  msg: |-
    vlan configuration for dut
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan1 ]; then
      ip link add vlan1 type bridge
      ip link set dev vlan1 address 52:dc:ca:fd:01:00
  
      ip addr flush dev vlan1
    fi
  
    ip link set dev eth1 master vlan1
    ip link set dev eth2 master vlan1
    ip link set dev eth3 master vlan1
  
    ip link set dev vlan1 up

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for dut

TASK [Define script filename and determine whether to execute in netns] ********
ok: [dut]

TASK [Create a temporary file for the rendered script] *************************
changed: [dut -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/linux.j2] ***
changed: [dut -> localhost]

TASK [Copy script into running container at /tmp/config-dut_vlan.sh] ***********
changed: [dut -> localhost]

TASK [Execute /tmp/config-dut_vlan.sh to deploy vlan config based on /home/pipi/netlab_gh/netsim/ansible/templates/vlan/linux.j2] ***
changed: [dut]

TASK [Container configuration for vlan based on /home/pipi/netlab_gh/netsim/ansible/templates/vlan/linux.j2 executed in netns] ***
skipping: [dut]

TASK [Remove temporary file /tmp/dut_vlan-kt72qu7o.sh] *************************
changed: [dut -> localhost]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Find configuration template for routing] *********************************
skipping: [dut]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [dut]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [dut]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux.j2] ***
changed: [h1]
changed: [h2]
changed: [h3]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux.j2 executed in netns] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Remove temporary file /tmp/h1_routing-qppedvvv.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=32   changed=9    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
h1                         : ok=32   changed=9    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
h2                         : ok=32   changed=9    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
h3                         : ok=32   changed=9    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   



This scenario tests the basic "bridge" functionality. As a "bridge" is nothing
more than a VLAN-capable node having all interfaces in VLAN 1, this test
effectively:

* Tests whether the device can take the role 'bridge'
* Whether the interfaces are all configured in the same VLAN
* Whether the device configuration template handles VLAN 1, or the device
  quirks take extra efforts to work around that

