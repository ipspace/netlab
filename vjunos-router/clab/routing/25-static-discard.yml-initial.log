/home/pipi/.local/lib/python3.10/site-packages/paramiko/pkey.py:100: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "cipher": algorithms.TripleDES,
/home/pipi/.local/lib/python3.10/site-packages/paramiko/transport.py:259: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "class": algorithms.TripleDES,
[WARNING]: Invalid characters were found in group names but not replaced, use
-vvvv to see details
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/vjunos-router-clab.yml for dut

TASK [Wait for SSH server] *****************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/vm-clab-ssh-check.yml for dut

TASK [Check if 'sshpass' is installed] *****************************************
ok: [dut -> localhost]

TASK [Check for 'timeout' command] *********************************************
ok: [dut -> localhost]

TASK [Execute local ssh command to check vjunos-router readiness] **************
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-router readiness (60 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-router readiness (59 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-router readiness (58 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-router readiness (57 retries left).
FAILED - RETRYING: [dut -> localhost]: Execute local ssh command to check vjunos-router readiness (56 retries left).
ok: [dut -> localhost]

TASK [Confirm dut SSH server works] ********************************************
ok: [dut] => 
  msg: Node dut is ready.

TASK [Wait for ge-0/0/0 interface] *********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/vjunos-switch.yml for dut

TASK [Wait for ge-0/0/0 to appear] *********************************************
ok: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, v1, v2, v3

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [v2]
ok: [v1]
ok: [v3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, v1, v2, v3

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v3]
ok: [v2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v3]
ok: [v2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2::2/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2::2/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.42.42/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.42.42/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:42::2a/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:42::2a/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.42.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.42.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:42::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:42::3/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [v3] => 
  msg: |-
    initial configuration for v3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.42.64/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.42.64/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:42::40/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:42::40/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [v1] => 
  msg: |-
    initial configuration for v1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:1::4/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:1::4/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [v2] => 
  msg: |-
    initial configuration for v2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.42.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.42.5/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:42::5/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:42::5/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    system {
      host-name dut;
      static-host-mapping {
        h1 inet 172.16.0.2;
        h2 inet 172.16.42.3;
        h3 inet 172.16.42.42;
        v1 inet 172.16.1.4;
        v2 inet 172.16.42.5;
        v3 inet 172.16.42.64;
      }
    }
  
  
  
  
  
  
    policy-options {
      community tg_65000_1 members target:65000:1;
    }
  
  
  
    policy-options {
      policy-statement vrf-tenant-rt-export {
        term 1 {
          then {
            community add tg_65000_1;
            accept;
          }
        }
      }
  
  
  
      policy-statement vrf-tenant-rt-import {
        term 1 {
          from community [ tg_65000_1 ];
          then accept;
        }
        term default {
          then reject;
        }
      }
    }
  
    routing-instances {
  
      tenant {
        instance-type vrf;
        route-distinguisher 65000:1;
  
        vrf-import vrf-tenant-rt-import;
        vrf-export vrf-tenant-rt-export;
  
        routing-options {
          auto-export;
        }
  
        interface ge-0/0/2.0;
        interface ge-0/0/3.0;
  
      }
  
    }
    interfaces {
      ge-0/0/0 {
        mtu 1514;
      }
      ge-0/0/1 {
        mtu 1514;
      }
      ge-0/0/2 {
        mtu 1514;
      }
      ge-0/0/3 {
        mtu 1514;
      }
  
      lo0.0 {
  
          family inet {
            address 10.0.0.1/32;
          }
          family inet6 {
            address 2001:db8:1:1::1/64;
          }
  
      }
      ge-0/0/0.0 {
        description "dut -> h1 [stub]";
  
          family inet {
            address 172.16.0.1/24;
          }
          family inet6 {
            address 2001:db8:2::1/64;
          }
  
      }
      ge-0/0/1.0 {
        description "dut -> [h2,h3] [stub]";
  
          family inet {
            address 172.16.42.1/24;
          }
          family inet6 {
            address 2001:db8:cafe:42::1/64;
          }
  
      }
      ge-0/0/2.0 {
        description "dut -> v1 [stub]";
  
          family inet {
            address 172.16.1.1/24;
          }
          family inet6 {
            address 2001:db8:2:1::1/64;
          }
  
      }
      ge-0/0/3.0 {
        description "dut -> [v2,v3] [stub]";
  
          family inet {
            address 172.16.42.1/24;
          }
          family inet6 {
            address 2001:db8:cafe:42::1/64;
          }
  
      }
    }
    protocols {
      lldp {
        interface fxp0 {
          disable;
        }
        interface all;
      }
      router-advertisement {
        interface ge-0/0/0.0;
        interface ge-0/0/1.0;
        interface ge-0/0/2.0;
        interface ge-0/0/3.0;
      }
    }

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, v1, v2, v3

TASK [junos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/junos.j2] ***
changed: [dut]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Create a temporary file for the rendered script] *************************
changed: [v1 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [v3 -> localhost]
changed: [v2 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [v2 -> localhost]
changed: [h1 -> localhost]
changed: [v1 -> localhost]
changed: [h3 -> localhost]
changed: [v3 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [v1 -> localhost]
changed: [h2 -> localhost]
changed: [v2 -> localhost]
changed: [v3 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-feb37a8t.sh] ***********************
changed: [h1 -> localhost]
changed: [v1 -> localhost]
changed: [v3 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [v2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, v1, v2, v3 => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, v1, v2, v3 => (item=vrf)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [dut]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Find configuration template for routing] *********************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [v2]
ok: [v1]
ok: [v3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Find configuration deployment deploy_script for routing] *****************
ok: [h1]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v3]
ok: [v2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [dut] => 
  msg: |-
    routing configuration for dut
    =========================================
    policy-options community x-route-permit-mark members large:65535:0:65536;
  
  
  
  
  
  
  
        routing-options {
          static route 172.16.42.42/32 {
            discard;
          }
            rib inet6.0 static route 2001:db8:cafe:42::2a/128 {
              discard;
            }
        }
  
    routing-instances {
      tenant {
  
        routing-options {
          static route 172.16.42.64/32 {
            discard;
          }
            rib tenant.inet6.0 static route 2001:db8:cafe:42::40/128 {
              discard;
            }
        }
  
      }
    }
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.42.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.42.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [v2] => 
  msg: |-
    routing configuration for v2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.42.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [v1] => 
  msg: |-
    routing configuration for v1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [v3] => 
  msg: |-
    routing configuration for v3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.42.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, v1, v2, v3

TASK [junos_config: deploying routing from /home/pipi/net101/tools/netsim/ansible/templates/routing/junos.j2] ***
changed: [dut]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [v1 -> localhost]
changed: [h2 -> localhost]
changed: [v2 -> localhost]
changed: [v3 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [v2 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [v1 -> localhost]
changed: [v3 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Container configuration for routing based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [v1 -> localhost]
changed: [h3 -> localhost]
changed: [v3 -> localhost]
changed: [v2 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-rmardjdk.sh] ***********************
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [v1 -> localhost]
changed: [h1 -> localhost]
changed: [v2 -> localhost]
changed: [v3 -> localhost]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [h1]
ok: [h2]
ok: [dut]
ok: [v1]
ok: [h3]
ok: [v2]
ok: [v3]

TASK [Find configuration template for vrf] *************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
ok: [dut]
skipping: [v3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================

TASK [Deploy vrf configuration] ************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for dut

TASK [junos_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/junos.j2] ***
ok: [dut]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=36   changed=2    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
h1                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
h2                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
h3                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
v1                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
v2                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
v3                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   



Use this topology to test 'discard' IPv4 and IPv6 static routes.
H1 should be able to reach H2 but not H3 (due to a discard static route)

