[WARNING]: Invalid characters were found in group names but not replaced, use
-vvvv to see details
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/vjunos-router-clab.yml for s1, s2

TASK [Wait for SSH server] *****************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/vm-clab-ssh-check.yml for s1, s2

TASK [Check if 'sshpass' is installed] *****************************************
ok: [s1 -> localhost]

TASK [Execute local ssh command to check vjunos-router readiness] **************
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-router readiness (40 retries left).
FAILED - RETRYING: [s2 -> localhost]: Execute local ssh command to check vjunos-router readiness (40 retries left).
FAILED - RETRYING: [s2 -> localhost]: Execute local ssh command to check vjunos-router readiness (39 retries left).
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-router readiness (39 retries left).
ok: [s2 -> localhost]
ok: [s1 -> localhost]

TASK [Confirm s1 SSH server works] *********************************************
ok: [s1] => 
  msg: Node s1 is ready.
ok: [s2] => 
  msg: Node s2 is ready.

TASK [Wait for ge-0/0/0 interface] *********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/vjunos-switch.yml for s1, s2

TASK [Wait for ge-0/0/0 to appear] *********************************************
ok: [s1]
ok: [s2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, s1, s2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.1/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.2/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.3/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.4/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    system {
      host-name s1;
      static-host-mapping {
        h1 inet 172.31.1.1;
        h2 inet 172.31.1.2;
        h3 inet 172.31.1.3;
        h4 inet 172.31.1.4;
        s2 inet 10.0.0.6;
      }
    }
  
  
    interfaces {
  
  
  
  
      ge-0/0/0.0 {
        vlan-id 1;
      }
  
  
  
  
  
  
  
  
  
      ge-0/0/1 {
        flexible-vlan-tagging;
        native-vlan-id 700;
      }
  
      ge-0/0/1.0 {
        vlan-id 700;
      }
  
  
  
  
  
  
  
      ge-0/0/2 {
        flexible-vlan-tagging;
        native-vlan-id 701;
      }
  
      ge-0/0/2.0 {
        vlan-id 701;
      }
  
  
  
  
  
      ge-0/0/0 {
        flexible-vlan-tagging;
      }
  
      ge-0/0/0.701 {
        vlan-id 701;
      }
  
  
  
  
  
  
  
  
      ge-0/0/0 {
        flexible-vlan-tagging;
      }
  
      ge-0/0/0.700 {
        vlan-id 700;
      }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    }
    interfaces {
      ge-0/0/0 {
        mtu 1522;
      }
      ge-0/0/1 {
        mtu 1522;
      }
      ge-0/0/2 {
        mtu 1522;
      }
  
      lo0.0 {
  
          family inet {
            address 10.0.0.5/32;
          }
  
      }
      ge-0/0/0.0 {
        description "s1 -> s2";
  
  
      }
      ge-0/0/1.0 {
        description "[Access VLAN red] s1 -> h1";
  
  
      }
      ge-0/0/2.0 {
        description "[Access VLAN blue] s1 -> h3";
  
  
      }
      ge-0/0/0.701 {
        description "[SubIf VLAN blue] s1 -> s2";
  
  
      }
      ge-0/0/0.700 {
        description "[SubIf VLAN red] s1 -> s2";
  
  
      }
      irb.700 {
        description "VLAN red (700) -> [h1,s2,h2]";
  
  
      }
      irb.701 {
        description "VLAN blue (701) -> [h3,s2,h4]";
  
  
      }
    }
    protocols {
      lldp {
        interface fxp0 {
          disable;
        }
        interface all;
      }
    }
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    system {
      host-name s2;
      static-host-mapping {
        h1 inet 172.31.1.1;
        h2 inet 172.31.1.2;
        h3 inet 172.31.1.3;
        h4 inet 172.31.1.4;
        s1 inet 10.0.0.5;
      }
    }
  
  
    interfaces {
  
  
  
  
      ge-0/0/0.0 {
        vlan-id 1;
      }
  
  
  
  
  
  
  
  
  
      ge-0/0/1 {
        flexible-vlan-tagging;
        native-vlan-id 700;
      }
  
      ge-0/0/1.0 {
        vlan-id 700;
      }
  
  
  
  
  
  
  
      ge-0/0/2 {
        flexible-vlan-tagging;
        native-vlan-id 701;
      }
  
      ge-0/0/2.0 {
        vlan-id 701;
      }
  
  
  
  
  
      ge-0/0/0 {
        flexible-vlan-tagging;
      }
  
      ge-0/0/0.701 {
        vlan-id 701;
      }
  
  
  
  
  
  
  
  
      ge-0/0/0 {
        flexible-vlan-tagging;
      }
  
      ge-0/0/0.700 {
        vlan-id 700;
      }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    }
    interfaces {
      ge-0/0/0 {
        mtu 1522;
      }
      ge-0/0/1 {
        mtu 1522;
      }
      ge-0/0/2 {
        mtu 1522;
      }
  
      lo0.0 {
  
          family inet {
            address 10.0.0.6/32;
          }
  
      }
      ge-0/0/0.0 {
        description "s2 -> s1";
  
  
      }
      ge-0/0/1.0 {
        description "[Access VLAN red] s2 -> h2";
  
  
      }
      ge-0/0/2.0 {
        description "[Access VLAN blue] s2 -> h4";
  
  
      }
      ge-0/0/0.701 {
        description "[SubIf VLAN blue] s2 -> s1";
  
  
      }
      ge-0/0/0.700 {
        description "[SubIf VLAN red] s2 -> s1";
  
  
      }
      irb.700 {
        description "VLAN red (700) -> [h1,s1,h2]";
  
  
      }
      irb.701 {
        description "VLAN blue (701) -> [h3,s1,h4]";
  
  
      }
    }
    protocols {
      lldp {
        interface fxp0 {
          disable;
        }
        interface all;
      }
    }

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h2]
ok: [h1]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for s1, s2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h4 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-96k3mhjg.sh] ***********************
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [junos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/junos.j2] ***
changed: [s1]
changed: [s2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s1]
ok: [s2]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/junos.yml for s1, s2

TASK [junos_config: deploying vlan from] ***************************************
ok: [s2]
ok: [s1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=13   changed=4    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0   
h2                         : ok=13   changed=4    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0   
h3                         : ok=13   changed=4    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0   
h4                         : ok=13   changed=4    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0   
s1                         : ok=23   changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
s2                         : ok=22   changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   



The devices under test are simple bridges with a VLAN trunk between
them. Both VLANs are using the same IP prefix to identify potential
inter-VLAN leaking.

* h1 and h2 should be able to ping each other
* h3 and h4 should be able to ping each other
* h1 should not be able to reach h3

Please note it might take a while for the lab to work due to
STP learning phase

