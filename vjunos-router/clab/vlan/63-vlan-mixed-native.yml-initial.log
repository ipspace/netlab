[WARNING]: Invalid characters were found in group names but not replaced, use
-vvvv to see details
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]

TASK [Find device readiness script] ********************************************
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [s1]

TASK [Wait for device to become ready] *****************************************
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vjunos-router-clab.yml for s1

TASK [Wait for SSH server] *****************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vm-clab-ssh-check.yml for s1

TASK [Check if 'sshpass' is installed] *****************************************
ok: [s1 -> localhost]

TASK [Check for 'timeout' command] *********************************************
ok: [s1 -> localhost]

TASK [Execute local ssh command to check vjunos-router readiness] **************
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-router readiness (60 retries left).
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-router readiness (59 retries left).
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-router readiness (58 retries left).
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-router readiness (57 retries left).
FAILED - RETRYING: [s1 -> localhost]: Execute local ssh command to check vjunos-router readiness (56 retries left).
ok: [s1 -> localhost]

TASK [Confirm s1 SSH server works] *********************************************
ok: [s1] => 
  msg: Node s1 is ready.

TASK [Wait for ge-0/0/0 interface] *********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/vjunos-switch.yml for s1

TASK [Wait for ge-0/0/0 to appear] *********************************************
ok: [s1]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s2, h1, h2, h3, h4, s1

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]

TASK [Find configuration template for normalize] *******************************
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]

TASK [Deploy normalize configuration] ******************************************
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s2, h1, h2, h3, h4, s1

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]

TASK [Find configuration template for initial] *********************************
ok: [s2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s2]
ok: [h1]
ok: [h3]
ok: [h2]
ok: [h4]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.2.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.2.3/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.2.5 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.2.5 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.2.5 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.2.5 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.3.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.3.4/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.3.6 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.3.6 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.3.6 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.3.6 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.6/32
    !
    interface eth1
     no shutdown
     description s2 -> s1
     ip address 10.1.0.2/30
    !
    interface eth2
     no shutdown
     description [Access VLAN red] s2 -> h2
     ! no ip address
    !
    interface eth3
     no shutdown
     description s2 -> h4 [stub]
     ip address 172.16.3.6/24
    !
    interface eth1.700
     no shutdown
     description [SubIf VLAN red] s2 -> s1
     ! no ip address
    !
    interface vlan700
     no shutdown
     description VLAN red (700) -> [h1,s1,h2]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    system {
      host-name s1;
      static-host-mapping {
        s2 inet 10.0.0.6;
        h1 inet 172.16.0.1;
        h2 inet 172.16.0.2;
        h3 inet 172.16.2.3;
        h4 inet 172.16.3.4;
      }
    }
  
  
    interfaces {
  
  
  
  
  
      ge-0/0/0 {
        flexible-vlan-tagging;
        native-vlan-id 701;
      }
  
      ge-0/0/0.0 {
        vlan-id 701;
      }
  
  
  
  
  
  
  
  
  
  
      ge-0/0/1 {
        flexible-vlan-tagging;
        native-vlan-id 700;
      }
  
      ge-0/0/1.0 {
        vlan-id 700;
      }
  
  
  
  
  
  
  
      ge-0/0/2 {
        flexible-vlan-tagging;
        native-vlan-id 1;
      }
  
      ge-0/0/2.0 {
        vlan-id 1;
      }
  
  
  
  
  
  
  
  
      ge-0/0/0 {
        flexible-vlan-tagging;
      }
  
      ge-0/0/0.700 {
        vlan-id 700;
      }
  
  
  
  
  
  
  
  
  
  
  
  
  
    }
    interfaces {
      ge-0/0/0 {
        mtu 1522;
      }
      ge-0/0/1 {
        mtu 1522;
      }
      ge-0/0/2 {
        mtu 1522;
      }
  
      lo0.0 {
  
          family inet {
            address 10.0.0.5/32;
          }
  
      }
      ge-0/0/0.0 {
        description "s1 -> s2";
  
          family inet {
            address 10.1.0.1/30;
          }
  
      }
      ge-0/0/1.0 {
        description "[Access VLAN red] s1 -> h1";
  
  
      }
      ge-0/0/2.0 {
        description "s1 -> h3 [stub]";
  
          family inet {
            address 172.16.2.5/24;
          }
  
      }
      ge-0/0/0.700 {
        description "[SubIf VLAN red] s1 -> s2";
  
  
      }
      irb.700 {
        description "VLAN red (700) -> [h1,s2,h2]";
  
  
      }
    }
    protocols {
      lldp {
        interface fxp0 {
          disable;
        }
        interface all;
      }
    }

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for s2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for s1

TASK [Attempt to load VRF kernel module] ***************************************
changed: [s2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [s2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for s2

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [s2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [s2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-bfo00r60.sh] ***********************
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]

TASK [junos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/junos.j2] ***
changed: [s1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s2]
ok: [s1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=ospf)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s2]
ok: [s1]

TASK [Find configuration template for vlan] ************************************
ok: [s2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s2]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/eth1.700 ]; then
      ip link add link eth1 name eth1.700 type vlan id 700
      ip link set dev eth1.700 up
    fi
    if [ ! -e /sys/devices/virtual/net/vlan700 ]; then
      brctl addbr vlan700
      ip link set dev vlan700 address 52:dc:ca:fd:06:00
  
      ip addr flush dev vlan700
    fi
  
    brctl addif vlan700 eth2
    brctl addif vlan700 eth1.700
  
    ip link set dev vlan700 up
    exit 0
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
  
    interfaces {
  
      ge-0/0/1 {
        encapsulation flexible-ethernet-services;
      }
  
      ge-0/0/1.0 {
        encapsulation vlan-bridge;
      }
  
  
      ge-0/0/0 {
        encapsulation flexible-ethernet-services;
      }
  
      ge-0/0/0.700 {
        encapsulation vlan-bridge;
      }
  
    }
  
  
    bridge-domains {
  
      vlan-700 {
        domain-type bridge;
        vlan-id 700;
        routing-interface irb.700;
  
        interface ge-0/0/1.0;
        interface ge-0/0/0.700;
      }
  
    }

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [junos_config: deploying vlan from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/vjunos-router.j2] ***
changed: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
changed: [s2]

TASK [run vtysh to import vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [s2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [s2]
ok: [s1]

TASK [Find configuration template for ospf] ************************************
ok: [s2]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [s2]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    routing-options {
      router-id 10.0.0.5
    }
    protocols {
      delete: ospf;
    }
  
    protocols {
      ospf {
        area 0.0.0.0 {
          interface lo0.0 {
          }
        }
        area 0.0.0.0 {
          interface ge-0/0/0.0 {
            interface-type p2p;
          }
        }
        area 0.0.0.0 {
          interface ge-0/0/2.0 {
            interface-type p2p;
            passive;
          }
        }
      }
    }
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.6
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! s2 -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth3
    ! s2 -> h4
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
     ip ospf passive
    !
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/junos.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [junos_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/junos.j2] ***
[WARNING]:  statement not found
changed: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [s2]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [s2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h3                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h4                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
s1                         : ok=36   changed=3    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
s2                         : ok=36   changed=7    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   



The VLAN trunk between layer-3 switches has a combination
of bridged and routed VLANs. The routed VLAN is native VLAN.

If this test case does not produce a usable network, remove
the 'vlan.native_routed' device feature flag.

* h1 and h2 should be able to ping each other, but not h3 or h4
* h3 and h4 should be able to ping each other, but not h1 or h2

