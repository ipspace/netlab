/home/pipi/.local/lib/python3.10/site-packages/paramiko/pkey.py:100: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "cipher": algorithms.TripleDES,
/home/pipi/.local/lib/python3.10/site-packages/paramiko/transport.py:259: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "class": algorithms.TripleDES,
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Wait for device to become ready] *****************************************
skipping: [x1]
skipping: [x2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/sros.yml for dut

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [x1]
skipping: [x2]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description x1 -> dut
     ! no ip address
     ipv6 address 2001:db8:3::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x2
    !
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description x2 -> dut
     ! no ip address
     ipv6 address 2001:db8:3:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
  
  
  
  
    updates:
  
    - path: configure/router[router-name=Base]
      val:
       ecmp: 64
  
  
  
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=system]
  
      val:
       admin-state: enable
       description: "System interface"
       ipv6:
        address:
        - ipv6-address: "2001:db8:1:1::1"
          prefix-length: 128
  
  
  
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=eth-1/1/c1]
  
      val:
       admin-state: enable
       description: "dut ~ x1 ()"
       ip-mtu: 1500
       port: "1/1/c1/1"
       ipv6:
        address:
        - ipv6-address: "2001:db8:3::1"
          prefix-length: 64
  
  
  
    - path: configure/router[router-name=Base]
      val:
        ipv6:
          router-advertisement:
            interface:
            - ip-int-name: eth-1/1/c1
              admin-state: enable
              min-advertisement-interval: 3
              max-advertisement-interval: 5
  
  
  
  
    - path: configure/port[port-id=1/1/c2]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c2/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=eth-1/1/c2]
  
      val:
       admin-state: enable
       description: "dut ~ x2 ()"
       ip-mtu: 1500
       port: "1/1/c2/1"
       ipv6:
        address:
        - ipv6-address: "2001:db8:3:1::1"
          prefix-length: 64
  
  
  
    - path: configure/router[router-name=Base]
      val:
        ipv6:
          router-advertisement:
            interface:
            - ip-int-name: eth-1/1/c2
              admin-state: enable
              min-advertisement-interval: 3
              max-advertisement-interval: 5

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for x1, x2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update initial node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/initial/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [x1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [x1]
skipping: [x2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for x1, x2

TASK [template] ****************************************************************
changed: [x2]
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [x2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [x2]
changed: [x1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [x1]
skipping: [x2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2 => (item=isis)

TASK [Figure out whether to deploy the module isis on current device] **********
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Find configuration template for isis] ************************************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]

TASK [Find configuration deployment deploy_script for isis] ********************
ok: [dut]
ok: [x1]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    isis configuration for x1
    =========================================
    !
    !
    ipv6 forwarding
    !
    router isis Gandalf
     log-adjacency-changes
     hostname dynamic
     is-type level-2
     metric-style wide
     lsp-timers gen-interval 1 refresh-interval 900 max-lifetime 1800
     net 49.0042.0000.0000.0002.00
     topology ipv6-unicast
  
    !
    interface lo
    !
     ipv6 router isis Gandalf
    !
    interface eth1
    ! x1 -> dut
     ipv6 router isis Gandalf
     isis network point-to-point
    !
  
    !
    do write
ok: [x2] => 
  msg: |-
    isis configuration for x2
    =========================================
    !
    !
    ipv6 forwarding
    !
    router isis Gandalf
     log-adjacency-changes
     hostname dynamic
     is-type level-1-2
     metric-style wide
     lsp-timers gen-interval 1 refresh-interval 900 max-lifetime 1800
     net 49.0042.0000.0000.0003.00
     topology ipv6-unicast
  
  
    !
    interface lo
    !
     ipv6 router isis Gandalf
    !
    interface eth1
    ! x2 -> dut
     ipv6 router isis Gandalf
     isis network point-to-point
    !
  
    !
    do write
ok: [dut] => 
  msg: |-
    isis configuration for dut
    =========================================
  
  
  
    updates:
  
  
    - path: configure/router[router-name=Base]
  
      val:
        isis:
        - isis-instance: 0
          system-id: "0bad.cafe.0001"
          admin-state: enable
          area-address: ["49.0001"]
          level:
          - level-number: "1"
            wide-metrics-only: True
          - level-number: "2"
            wide-metrics-only: True
          level-capability: "2"
          multi-topology:
            ipv6-unicast: True
          interface:
          - interface-name: system
            interface-type: broadcast
            passive: False
          - interface-name: eth-1/1/c1
            interface-type: point-to-point
            passive: False
          - interface-name: eth-1/1/c2
            interface-type: point-to-point
            passive: False

TASK [Deploy isis configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for x1, x2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update isis node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/isis/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [template] ****************************************************************
changed: [x1]
changed: [x2]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [x2]

TASK [run /tmp/config.sh to deploy isis config from /home/pipi/net101/tools/netsim/ansible/templates/isis/frr.j2] ***
skipping: [x1]
skipping: [x2]

TASK [run vtysh to import isis config from /home/pipi/net101/tools/netsim/ansible/templates/isis/frr.j2] ***
changed: [x1]
changed: [x2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=26   changed=2    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
x1                         : ok=27   changed=5    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
x2                         : ok=26   changed=4    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   



This lab tests level-2 IS-IS with IPv6. The device under test is a level-2-only
router with two LAN interfaces connected to adjacent IS-IS routers.

