[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [x1]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [x1]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [x1]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [x1]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [x1]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description x1 -> dut [external]
     ip address 10.1.0.2/30
     ipv6 address 2001:db8:3::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
  
  
  
    updates:
  
    - path: configure/router[router-name=Base]
      val:
       ecmp: 64
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=system]
  
      val:
       admin-state: enable
       description: "system interface vlan=0"
       ipv4:
        primary:
         address: "10.0.0.1"
         prefix-length: 32
  
  
  
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=i1/1/c1]
  
      val:
       admin-state: enable
       description: "dut ~ x1 (external) vlan=0"
       port: "1/1/c1/1"
       ipv4:
        primary:
         address: "10.1.0.1"
         prefix-length: 30
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:3::1"
          prefix-length: 64

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for x1

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [dut]

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [Set default provisioning model to use OpenConfig (sros_use_openconfig=False)] ***
skipping: [dut]

TASK [Check if OpenConfig can be used as provisioning method/model (config_template=/home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2)] ***
ok: [dut]

TASK [Select provisioning template netsim_action=initial] **********************
ok: [dut]

TASK [Process template /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2] ***
changed: [dut -> localhost]

TASK [Show generated config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2 based on /tmp/ansible.sros.dut.ph98t3x2temp] ***
skipping: [dut]

TASK [Check that prepared config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2 in /tmp/ansible.sros.dut.ph98t3x2temp is valid YAML] ***
skipping: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Enable Open Config YAML modules (retry to give Containerlab a chance to finish configuration)] ***
changed: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  enable_open_config:
    attempts: 1
    changed: true
    failed: false
    output: |-
      {
          "prefix": "configure",
          "response": [
              {
                  "path": "system/management-interface/yang-modules/openconfig-modules",
                  "op": "UPDATE"
              }
          ],
          "timestamp": "2025-05-24T07:56:09.220401"
      }

TASK [Update initial node configuration (using gNMI SET based on YAML template /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  gnmi_set_result:
    attempts: 1
    changed: true
    failed: false
    output: |-
      {
          "response": [
              {
                  "path": "configure/router[router-name=Base]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]/interface[interface-name=system]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c1/1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]/interface[interface-name=i1/1/c1]",
                  "op": "UPDATE"
              }
          ],
          "timestamp": "2025-05-24T07:56:10.071188"
      }

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [x1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [x1]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for x1

TASK [template] ****************************************************************
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [x1]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [x1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1 => (item=bgp)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [x1]

TASK [Find configuration template for bgp] *************************************
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
  
    updates:
  
    - path: configure/policy-options/policy-statement[name=accept_all]
      val:
       default-action:
        action-type: accept
  
    - path: configure/policy-options/policy-statement[name=next-hop-self-ebgp-routes-only]
      val:
       entry:
       - entry-id: 10
         from:
          path-type: ebgp
         action:
          action-type: accept
          next-hop: self
       default-action:
        action-type: accept
  
  
    - path: configure/policy-options/prefix-list[name=default_export]
      val:
       prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=default_export]
      val:
       default-action:
        action-type: reject
       entry:
       - entry-id: 10
         from:
          prefix-list: [ "default_export" ]
         action:
          action-type: accept
       - entry-id: 20
         from:
          protocol:
           name: ["bgp"]
         action:
          action-type: accept
  
    - path: configure/policy-options/prefix-list[name=default_export]
      val:
       prefix:
       - ip-prefix: 10.0.0.1/32
         type: exact
  
  
  
  
  
  
    - path: configure/router[router-name=Base]
      val:
       router-id: "10.0.0.1"
       autonomous-system: 65000
       bgp:
        ebgp-default-reject-policy:
         import: False
         export: False
        vpn-apply-export: True
        vpn-apply-import: True
        multipath:
         ibgp: 64
         ebgp: 64
        min-route-advertisement: 1 # Be aggressive about sending updates
        connect-retry: 5           # Retry frequently, suitable in DC context
        client-reflect: False
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ebgp]
      val:
       admin-state: enable
       family:
        ipv4: True
        ipv6: True
  
       import:
        policy: ["accept_all"]
       export:
        policy: [ "default_export" ]
  
       send-communities:
        extended: False  # True value not allowed, on by default
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
       neighbor:
       - ip-address: "10.1.0.2"
         description: "x1"
         peer-as: 65100
         group: "ebgp"
         family:
          ipv4: True
          ipv6: False
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ebgp]
      val:
       admin-state: enable
       family:
        ipv4: True
        ipv6: True
  
       import:
        policy: ["accept_all"]
       export:
        policy: [ "default_export" ]
  
       send-communities:
        extended: False  # True value not allowed, on by default
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
       neighbor:
       - ip-address: "2001:db8:3::2"
         description: "x1"
         peer-as: 65100
         group: "ebgp"
         family:
          ipv4: False
          ipv6: True
ok: [x1] => 
  msg: |-
    bgp configuration for x1
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor 10.1.0.1 remote-as 65000
      neighbor 10.1.0.1 description dut
    !
      neighbor 2001:db8:3::1 remote-as 65000
      neighbor 2001:db8:3::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.2/32
    !
    !
    !
      neighbor 10.1.0.1 activate
      no neighbor 10.1.0.1 send-community all
      neighbor 10.1.0.1 send-community standard
      neighbor 10.1.0.1 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
    !
    !
      neighbor 2001:db8:3::1 activate
      no neighbor 2001:db8:3::1 send-community all
      neighbor 2001:db8:3::1 send-community standard
      neighbor 2001:db8:3::1 send-community large
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for x1

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
skipping: [dut]

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [Set default provisioning model to use OpenConfig (sros_use_openconfig=False)] ***
skipping: [dut]

TASK [Check if OpenConfig can be used as provisioning method/model (config_template=/home/pipi/netlab_gh/netsim/ansible/templates/bgp/sros.j2)] ***
ok: [dut]

TASK [Select provisioning template netsim_action=bgp] **************************
ok: [dut]

TASK [Process template /home/pipi/netlab_gh/netsim/ansible/templates/bgp/sros.j2] ***
changed: [dut -> localhost]

TASK [Show generated config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/sros.j2 based on /tmp/ansible.sros.dut.xze03ywstemp] ***
skipping: [dut]

TASK [Check that prepared config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/sros.j2 in /tmp/ansible.sros.dut.xze03ywstemp is valid YAML] ***
skipping: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Enable Open Config YAML modules (retry to give Containerlab a chance to finish configuration)] ***
skipping: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  enable_open_config:
    changed: false
    false_condition: enable_open_config is not defined and 'ixr-ec' != clab.type
    skip_reason: Conditional result was False
    skipped: true

TASK [Update bgp node configuration (using gNMI SET based on YAML template /home/pipi/netlab_gh/netsim/ansible/templates/bgp/sros.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  gnmi_set_result:
    attempts: 1
    changed: true
    failed: false
    output: |-
      {
          "response": [
              {
                  "path": "configure/policy-options/policy-statement[name=accept_all]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/policy-options/policy-statement[name=next-hop-self-ebgp-routes-only]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/policy-options/prefix-list[name=default_export]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/policy-options/policy-statement[name=default_export]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/policy-options/prefix-list[name=default_export]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]/bgp/group[group-name=ebgp]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]/bgp",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]/bgp/group[group-name=ebgp]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]/bgp",
                  "op": "UPDATE"
              }
          ],
          "timestamp": "2025-05-24T07:56:12.950457"
      }

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [x1]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [x1]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-custom-config.yml for dut, x1 => (item=bgp.session)

TASK [Find configuration template] *********************************************
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Check is the configuration template is a file] ***************************
ok: [x1 -> localhost]
ok: [dut -> localhost]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Process template /home/pipi/netlab_gh/netsim/extra/bgp.session/sros.j2 for dut] ***
skipping: [x1]
skipping: [dut]

TASK [Find custom configuration deployment script] *****************************
ok: [dut]
ok: [x1]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for x1

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
skipping: [dut]

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [Set default provisioning model to use OpenConfig (sros_use_openconfig=False)] ***
skipping: [dut]

TASK [Check if OpenConfig can be used as provisioning method/model (config_template=/home/pipi/netlab_gh/netsim/extra/bgp.session/sros.j2)] ***
ok: [dut]

TASK [Select provisioning template netsim_action=bgp.session] ******************
ok: [dut]

TASK [Process template /home/pipi/netlab_gh/netsim/extra/bgp.session/sros.j2] ***
changed: [dut -> localhost]

TASK [Show generated config from /home/pipi/netlab_gh/netsim/extra/bgp.session/sros.j2 based on /tmp/ansible.sros.dut.pxmpy1nwtemp] ***
skipping: [dut]

TASK [Check that prepared config from /home/pipi/netlab_gh/netsim/extra/bgp.session/sros.j2 in /tmp/ansible.sros.dut.pxmpy1nwtemp is valid YAML] ***
skipping: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Enable Open Config YAML modules (retry to give Containerlab a chance to finish configuration)] ***
skipping: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  enable_open_config:
    changed: false
    false_condition: enable_open_config is not defined and 'ixr-ec' != clab.type
    skip_reason: Conditional result was False
    skipped: true

TASK [Update bgp.session node configuration (using gNMI SET based on YAML template /home/pipi/netlab_gh/netsim/extra/bgp.session/sros.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  gnmi_set_result:
    attempts: 1
    changed: true
    failed: false
    output: |-
      {
          "response": [
              {
                  "path": "configure/router[router-name=Base]/bgp",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]/bgp",
                  "op": "UPDATE"
              }
          ],
          "timestamp": "2025-05-24T07:56:22.470357"
      }

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [x1]

TASK [set_fact] ****************************************************************
ok: [x1]

TASK [run /tmp/config.sh to deploy bgp.session config from /home/pipi/netlab_gh/netsim/extra/bgp.session/frr.j2] ***
changed: [x1]

TASK [run vtysh to import bgp.session config from /home/pipi/netlab_gh/netsim/extra/bgp.session/frr.j2] ***
skipping: [x1]

PLAY RECAP *********************************************************************
dut                        : ok=53   changed=13   unreachable=0    failed=0    skipped=22   rescued=0    ignored=0   
x1                         : ok=35   changed=7    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   



This lab tests the BGP MD5 password functionality. The EBGP session between the probe and the lab device should be established.
