[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [dut]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, dut

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [dut]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [dut]

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [dut]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2::2/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2::2/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:1::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:1::3/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:2::4/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:2::4/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:3::5/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:3::5/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
  
  
  
    updates:
  
    - path: configure/router[router-name=Base]
      val:
       ecmp: 64
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=system]
  
      val:
       admin-state: enable
       description: "system interface vlan=0"
       ipv4:
        primary:
         address: "10.0.0.1"
         prefix-length: 32
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:1:1::1"
          prefix-length: 128
  
  
  
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=red]
      val:
       service-id: 100
       customer: "1"
       admin-state: enable
       ecmp: 64
  
    - path: configure/service/vprn[service-name=red]/interface[interface-name=i1/1/c1]
  
      val:
       admin-state: enable
       description: "dut ~ h1 (stub) vlan=0"
       sap:
       - sap-id: "1/1/c1/1"
       ipv6:
        address:
        - ipv6-address: "2001:db8:2::1"
          prefix-length: 64
  
  
  
  
  
    - path: configure/port[port-id=1/1/c2]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c2/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=red]
      val:
       service-id: 100
       customer: "1"
       admin-state: enable
       ecmp: 64
  
    - path: configure/service/vprn[service-name=red]/interface[interface-name=i1/1/c2]
  
      val:
       admin-state: enable
       description: "dut ~ h2 (stub) vlan=0"
       sap:
       - sap-id: "1/1/c2/1"
       ipv6:
        address:
        - ipv6-address: "2001:db8:2:1::1"
          prefix-length: 64
  
  
  
  
  
    - path: configure/port[port-id=1/1/c3]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c3/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=blue]
      val:
       service-id: 101
       customer: "1"
       admin-state: enable
       ecmp: 64
  
    - path: configure/service/vprn[service-name=blue]/interface[interface-name=i1/1/c3]
  
      val:
       admin-state: enable
       description: "dut ~ h3 (stub) vlan=0"
       sap:
       - sap-id: "1/1/c3/1"
       ipv6:
        address:
        - ipv6-address: "2001:db8:2:2::1"
          prefix-length: 64
  
  
  
  
  
    - path: configure/port[port-id=1/1/c4]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c4/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=blue]
      val:
       service-id: 101
       customer: "1"
       admin-state: enable
       ecmp: 64
  
    - path: configure/service/vprn[service-name=blue]/interface[interface-name=i1/1/c4]
  
      val:
       admin-state: enable
       description: "dut ~ h4 (stub) vlan=0"
       sap:
       - sap-id: "1/1/c4/1"
       ipv6:
        address:
        - ipv6-address: "2001:db8:2:3::1"
          prefix-length: 64
  
  
  
  
  
  
  
    - path: configure/service/vprn[service-name=red]
      val:
       service-id: 100
       customer: "1"
       admin-state: enable
       ecmp: 64
  
    - path: configure/service/vprn[service-name=red]/interface[interface-name=loopback.1]
  
      val:
       admin-state: enable
       description: "VRF Loopback red () vlan=0"
       loopback: True
       ipv6:
        address:
        - ipv6-address: "2001:db8:c001:cafe::1"
          prefix-length: 64
  
  
  
  
  
  
  
    - path: configure/service/vprn[service-name=blue]
      val:
       service-id: 101
       customer: "1"
       admin-state: enable
       ecmp: 64
  
    - path: configure/service/vprn[service-name=blue]/interface[interface-name=loopback.2]
  
      val:
       admin-state: enable
       description: "VRF Loopback blue () vlan=0"
       loopback: True
       ipv6:
        address:
        - ipv6-address: "2001:db8:c001:cafe::1"
          prefix-length: 64

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-t4q_rl0v.sh] ***********************
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [dut]

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [Set default provisioning model to use OpenConfig (sros_use_openconfig=False)] ***
skipping: [dut]

TASK [Check if OpenConfig can be used as provisioning method/model (config_template=/home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2)] ***
ok: [dut]

TASK [Select provisioning template netsim_action=initial] **********************
ok: [dut]

TASK [Process template /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2] ***
changed: [dut -> localhost]

TASK [Show generated config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2 based on /tmp/ansible.sros.dut.l6_57zzotemp] ***
skipping: [dut]

TASK [Check that prepared config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2 in /tmp/ansible.sros.dut.l6_57zzotemp is valid YAML] ***
skipping: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Enable Open Config YAML modules (retry to give Containerlab a chance to finish configuration)] ***
changed: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  enable_open_config:
    attempts: 1
    changed: true
    failed: false
    output: |-
      {
          "prefix": "configure",
          "response": [
              {
                  "path": "system/management-interface/yang-modules/openconfig-modules",
                  "op": "UPDATE"
              }
          ],
          "timestamp": "2025-05-24T08:50:14.724574"
      }

TASK [Update initial node configuration (using gNMI SET based on YAML template /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  gnmi_set_result:
    attempts: 1
    changed: true
    failed: false
    output: |-
      {
          "response": [
              {
                  "path": "configure/router[router-name=Base]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]/interface[interface-name=system]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c1/1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=red]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=red]/interface[interface-name=i1/1/c1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c2]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c2/1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=red]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=red]/interface[interface-name=i1/1/c2]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c3]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c3/1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=blue]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=blue]/interface[interface-name=i1/1/c3]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c4]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c4/1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=blue]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=blue]/interface[interface-name=i1/1/c4]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=red]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=red]/interface[interface-name=loopback.1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=blue]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=blue]/interface[interface-name=loopback.2]",
                  "op": "UPDATE"
              }
          ],
          "timestamp": "2025-05-24T08:50:15.622478"
      }

TASK [file] ********************************************************************
changed: [dut -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut => (item=vrf)

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [dut]

TASK [Find configuration template for vrf] *************************************
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Find configuration deployment deploy_script for vrf] *********************
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
    updates:
  
    - path: configure/service/vprn[service-name=blue]
      val:
       service-id: 101
       customer: "1"
       autonomous-system: 65000
       router-id: 10.0.0.1
       ecmp: 64
       admin-state: enable
  
  
  
  
  
    - path: configure/service/vprn[service-name=red]
      val:
       service-id: 100
       customer: "1"
       autonomous-system: 65000
       router-id: 10.0.0.1
       ecmp: 64
       admin-state: enable

TASK [Deploy vrf configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
skipping: [dut]

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [Set default provisioning model to use OpenConfig (sros_use_openconfig=False)] ***
skipping: [dut]

TASK [Check if OpenConfig can be used as provisioning method/model (config_template=/home/pipi/netlab_gh/netsim/ansible/templates/vrf/sros.j2)] ***
ok: [dut]

TASK [Select provisioning template netsim_action=vrf] **************************
ok: [dut]

TASK [Process template /home/pipi/netlab_gh/netsim/ansible/templates/vrf/sros.j2] ***
changed: [dut -> localhost]

TASK [Show generated config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/sros.j2 based on /tmp/ansible.sros.dut.a1ei2ag5temp] ***
skipping: [dut]

TASK [Check that prepared config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/sros.j2 in /tmp/ansible.sros.dut.a1ei2ag5temp is valid YAML] ***
skipping: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Enable Open Config YAML modules (retry to give Containerlab a chance to finish configuration)] ***
skipping: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  enable_open_config:
    changed: false
    false_condition: enable_open_config is not defined and 'ixr-ec' != clab.type
    skip_reason: Conditional result was False
    skipped: true

TASK [Update vrf node configuration (using gNMI SET based on YAML template /home/pipi/netlab_gh/netsim/ansible/templates/vrf/sros.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  gnmi_set_result:
    attempts: 1
    changed: true
    failed: false
    output: |-
      {
          "response": [
              {
                  "path": "configure/service/vprn[service-name=blue]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=red]",
                  "op": "UPDATE"
              }
          ],
          "timestamp": "2025-05-24T08:50:17.324370"
      }

TASK [file] ********************************************************************
changed: [dut -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=39   changed=9    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h3                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h4                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   



The device under test has two VRFs with two interfaces in each VRF.
Each VRF has a loopback interface.

* h1 and h2 should be able to ping each other and the VRF loopback interface
* h3 and h4 should be able to ping each other and the VRF loopback interface
* h1 should not be able to reach h3

