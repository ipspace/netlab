[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r4]
ok: [r3]

TASK [Wait for device to become ready] *****************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/sros.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/eos-clab.yml for r1, r2, r3, r4

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [r2]
ok: [r1]
ok: [r3]
ok: [r4]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, r3, r4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r4]
ok: [r3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [r1] => 
  msg: |-
    normalize configuration for r1
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0b01
ok: [r2] => 
  msg: |-
    normalize configuration for r2
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0c01
ok: [r3] => 
  msg: |-
    normalize configuration for r3
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.1701
ok: [r4] => 
  msg: |-
    normalize configuration for r4
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.1801

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for r1, r2, r3, r4

TASK [eos_config: deploying normalize from /home/pipi/netlab_gh/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [r2]
changed: [r1]
changed: [r4]
changed: [r3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, r3, r4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r4]
ok: [r3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
  
  
  
    updates:
  
    - path: configure/router[router-name=Base]
      val:
       ecmp: 64
  
  
  
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=system]
  
      val:
       admin-state: enable
       description: "System interface"
       ipv4:
        primary:
         address: "10.0.0.1"
         prefix-length: 32
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:1:1::1"
          prefix-length: 128
  
  
  
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=red]
      val:
       customer: "1"
       admin-state: enable
       service-id: 100
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=red]/interface[interface-name=eth-1/1/c1]
  
      val:
       admin-state: enable
       description: "dut ~ r1 (external)"
       ip-mtu: 1500
       sap:
       - sap-id: "1/1/c1/1"
       ipv4:
        primary:
         address: "10.1.0.1"
         prefix-length: 30
  
  
  
  
  
    - path: configure/port[port-id=1/1/c2]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c2/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=red]
      val:
       customer: "1"
       admin-state: enable
       service-id: 100
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=red]/interface[interface-name=eth-1/1/c2]
  
      val:
       admin-state: enable
       description: "dut ~ r2 (external)"
       ip-mtu: 1500
       sap:
       - sap-id: "1/1/c2/1"
       ipv4:
        primary:
         address: "10.1.0.5"
         prefix-length: 30
  
  
  
  
  
    - path: configure/port[port-id=1/1/c3]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c3/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=blue]
      val:
       customer: "1"
       admin-state: enable
       service-id: 101
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=blue]/interface[interface-name=eth-1/1/c3]
  
      val:
       admin-state: enable
       description: "dut ~ r3 (external)"
       ip-mtu: 1500
       sap:
       - sap-id: "1/1/c3/1"
       ipv4:
        primary:
         address: "10.1.0.9"
         prefix-length: 30
  
  
  
  
  
    - path: configure/port[port-id=1/1/c4]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c4/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=blue]
      val:
       customer: "1"
       admin-state: enable
       service-id: 101
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=blue]/interface[interface-name=eth-1/1/c4]
  
      val:
       admin-state: enable
       description: "dut ~ r4 (external)"
       ip-mtu: 1500
       sap:
       - sap-id: "1/1/c4/1"
       ipv4:
        primary:
         address: "10.1.0.13"
         prefix-length: 30
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    hostname r1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    ipv6 unicast-routing
    !
    !
    ip host dut 10.0.0.1
    ip host dut-blue 10.1.0.9 10.1.0.13
    ip host dut-red 10.1.0.1 10.1.0.5
    ip host r2 10.0.0.12 10.1.0.6
    ip host r3 10.0.0.23 10.1.0.10
    ip host r4 10.0.0.24 10.1.0.14
    ipv6 host dut 2001:db8:1:1::1
    ipv6 host r2 2001:db8:1:c::1
    ipv6 host r3 2001:db8:1:17::1
    ipv6 host r4 2001:db8:1:18::1
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.11/32
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:1:b::1/64
    !
    interface Ethernet1
     no switchport
     platform tfa phy control-frame disabled
     description r1 -> dut [external]
     ip address 10.1.0.2/30
    !
     mac-address 52dc.cafe.0b01
     no shutdown
    !
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    hostname r2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    ipv6 unicast-routing
    !
    !
    ip host dut 10.0.0.1
    ip host dut-blue 10.1.0.9 10.1.0.13
    ip host dut-red 10.1.0.1 10.1.0.5
    ip host r1 10.0.0.11 10.1.0.2
    ip host r3 10.0.0.23 10.1.0.10
    ip host r4 10.0.0.24 10.1.0.14
    ipv6 host dut 2001:db8:1:1::1
    ipv6 host r1 2001:db8:1:b::1
    ipv6 host r3 2001:db8:1:17::1
    ipv6 host r4 2001:db8:1:18::1
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.12/32
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:1:c::1/64
    !
    interface Ethernet1
     no switchport
     platform tfa phy control-frame disabled
     description r2 -> dut [external]
     ip address 10.1.0.6/30
    !
     mac-address 52dc.cafe.0c01
     no shutdown
    !
ok: [r3] => 
  msg: |-
    initial configuration for r3
    =========================================
    hostname r3
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    ipv6 unicast-routing
    !
    !
    ip host dut 10.0.0.1
    ip host dut-blue 10.1.0.9 10.1.0.13
    ip host dut-red 10.1.0.1 10.1.0.5
    ip host r1 10.0.0.11 10.1.0.2
    ip host r2 10.0.0.12 10.1.0.6
    ip host r4 10.0.0.24 10.1.0.14
    ipv6 host dut 2001:db8:1:1::1
    ipv6 host r1 2001:db8:1:b::1
    ipv6 host r2 2001:db8:1:c::1
    ipv6 host r4 2001:db8:1:18::1
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.23/32
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:1:17::1/64
    !
    interface Ethernet1
     no switchport
     platform tfa phy control-frame disabled
     description r3 -> dut [external]
     ip address 10.1.0.10/30
    !
     mac-address 52dc.cafe.1701
     no shutdown
    !
ok: [r4] => 
  msg: |-
    initial configuration for r4
    =========================================
    hostname r4
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    ipv6 unicast-routing
    !
    !
    ip host dut 10.0.0.1
    ip host dut-blue 10.1.0.9 10.1.0.13
    ip host dut-red 10.1.0.1 10.1.0.5
    ip host r1 10.0.0.11 10.1.0.2
    ip host r2 10.0.0.12 10.1.0.6
    ip host r3 10.0.0.23 10.1.0.10
    ipv6 host dut 2001:db8:1:1::1
    ipv6 host r1 2001:db8:1:b::1
    ipv6 host r2 2001:db8:1:c::1
    ipv6 host r3 2001:db8:1:17::1
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.24/32
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:1:18::1/64
    !
    interface Ethernet1
     no switchport
     platform tfa phy control-frame disabled
     description r4 -> dut [external]
     ip address 10.1.0.14/30
    !
     mac-address 52dc.cafe.1801
     no shutdown
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for r1, r2, r3, r4

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update initial node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [eos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/eos.j2] ***
changed: [r3]
changed: [r1]
changed: [r2]
changed: [r4]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, r3, r4 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, r3, r4 => (item=vrf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [r3]
ok: [r1]
ok: [r4]
ok: [r2]

TASK [Find configuration template for bgp] *************************************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [dut]
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
  
    updates:
  
    - path: configure/policy-options/policy-statement[name=accept_all]
      val:
       default-action:
        action-type: accept
  
    - path: configure/policy-options/policy-statement[name=next-hop-self-ebgp-routes-only]
      val:
       entry:
       - entry-id: 10
         from:
          path-type: ebgp
         action:
          action-type: accept
          next-hop: self
       default-action:
        action-type: next-policy
  
  
    - path: configure/policy-options/prefix-list[name=default_export]
      val:
       prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=default_export]
      val:
        default-action:
          action-type: reject
        entry:
        - entry-id: 10
          from:
            prefix-list: [ "default_export" ]
          action:
            action-type: accept
        - entry-id: 20
          from:
            protocol:
              name: [ bgp ]
          action:
            action-type: accept
  
    - path: configure/policy-options/prefix-list[name=default_export]
      val:
       prefix:
       - ip-prefix: 10.0.0.1/32
         type: exact
  
  
  
    - path: configure/policy-options/prefix-list[name=default_export]
      val:
       prefix:
       - ip-prefix: 2001:db8:1:1::1/128
         type: exact
  
  
  
  
    - path: configure/router[router-name=Base]
      val:
        router-id: "10.0.0.1"
        autonomous-system: 65000
        bgp:
          ebgp-default-reject-policy:
            import: False
            export: False
          vpn-apply-export: True
          vpn-apply-import: True
          multipath:
            ibgp: 64
            ebgp: 64
          min-route-advertisement: 1 # Be aggressive about sending updates
          connect-retry: 5           # Retry frequently, suitable in DC context
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group
ok: [r1] => 
  msg: |-
    bgp configuration for r1
    =========================================
    !
    !
    router bgp 65101
      bgp advertise-inactive
      bgp log-neighbor-changes
      no bgp default ipv4-unicast
      no bgp default ipv6-unicast
      router-id 10.0.0.11
    !
      neighbor 10.1.0.1 remote-as 65000
      neighbor 10.1.0.1 description dut
      neighbor 10.1.0.1 send-community standard large
    !
    !
     address-family ipv4
  
      network 10.0.0.11/32
    !
    !
    !
      neighbor 10.1.0.1 activate
    !
     address-family ipv6
  
      network 2001:db8:1:b::/64
    !
    !
    !
    !
ok: [r2] => 
  msg: |-
    bgp configuration for r2
    =========================================
    !
    !
    router bgp 65102
      bgp advertise-inactive
      bgp log-neighbor-changes
      no bgp default ipv4-unicast
      no bgp default ipv6-unicast
      router-id 10.0.0.12
    !
      neighbor 10.1.0.5 remote-as 65000
      neighbor 10.1.0.5 description dut
      neighbor 10.1.0.5 send-community standard large
    !
    !
     address-family ipv4
  
      network 10.0.0.12/32
    !
    !
    !
      neighbor 10.1.0.5 activate
    !
     address-family ipv6
  
      network 2001:db8:1:c::/64
    !
    !
    !
    !
ok: [r4] => 
  msg: |-
    bgp configuration for r4
    =========================================
    !
    !
    router bgp 65104
      bgp advertise-inactive
      bgp log-neighbor-changes
      no bgp default ipv4-unicast
      no bgp default ipv6-unicast
      router-id 10.0.0.24
    !
      neighbor 10.1.0.13 remote-as 65000
      neighbor 10.1.0.13 description dut
      neighbor 10.1.0.13 send-community standard large
    !
    !
     address-family ipv4
  
      network 10.0.0.24/32
    !
    !
    !
      neighbor 10.1.0.13 activate
    !
     address-family ipv6
  
      network 2001:db8:1:18::/64
    !
    !
    !
    !
ok: [r3] => 
  msg: |-
    bgp configuration for r3
    =========================================
    !
    !
    router bgp 65103
      bgp advertise-inactive
      bgp log-neighbor-changes
      no bgp default ipv4-unicast
      no bgp default ipv6-unicast
      router-id 10.0.0.23
    !
      neighbor 10.1.0.9 remote-as 65000
      neighbor 10.1.0.9 description dut
      neighbor 10.1.0.9 send-community standard large
    !
    !
     address-family ipv4
  
      network 10.0.0.23/32
    !
    !
    !
      neighbor 10.1.0.9 activate
    !
     address-family ipv6
  
      network 2001:db8:1:17::/64
    !
    !
    !
    !

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for r1, r2, r3, r4

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update bgp node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/bgp/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [eos_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/eos.j2] ***
changed: [r2]
changed: [r1]
changed: [r4]
changed: [r3]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [dut]
ok: [r1]
ok: [r3]
ok: [r2]
ok: [r4]

TASK [Find configuration template for vrf] *************************************
skipping: [r1]
skipping: [r2]
ok: [dut]
skipping: [r3]
skipping: [r4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
    updates:
  
    - path: configure/service/vprn[service-name=blue]
      val:
       service-id: 101
       customer: "1"
       autonomous-system: 65000
       router-id: 10.0.0.1
       ecmp: 64
       admin-state: enable
  
  
  
    - path: configure/policy-options/prefix-list[name=blue_export]
      val:
       prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=blue_export]
      val:
        default-action:
          action-type: reject
        entry:
        - entry-id: 10
          from:
            prefix-list: [ "blue_export" ]
          action:
            action-type: accept
        - entry-id: 20
          from:
            protocol:
              name: [ bgp ]
          action:
            action-type: accept
        - entry-id: 30
          from:
            protocol:
              name: [ direct ]
          action:
            action-type: accept
        - entry-id: 40
          from:
            protocol:
              name: [ ospf ]
          action:
            action-type: accept
  
  
  
  
    - path: configure/service/vprn[service-name=blue]
      val:
        router-id: "10.0.0.1"
        autonomous-system: 65000
        bgp:
          ebgp-default-reject-policy:
            import: False
            export: False
          multipath:
            ibgp: 64
            ebgp: 64
          min-route-advertisement: 1 # Be aggressive about sending updates
          connect-retry: 5           # Retry frequently, suitable in DC context
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group
  
  
  
  
    - path: configure/service/vprn[service-name=blue]/bgp/group[group-name=ebgp]
      val:
        admin-state: enable
        family:
          ipv4: True
          ipv6: False
  
        import:
          policy: ["accept_all"]
        export:
          policy:
          - blue_export
        send-communities:
          extended: False  # True value not allowed, on by default
  
  
    - path: configure/service/vprn[service-name=blue]/bgp
      val:
        neighbor:
        - ip-address: "10.1.0.10"
          description: "r3"
          peer-as: 65103
          group: "ebgp"
          family:
            ipv4: True
            ipv6: False
  
  
    - path: configure/service/vprn[service-name=blue]/bgp/group[group-name=ebgp]
      val:
        admin-state: enable
        family:
          ipv4: True
          ipv6: False
  
        import:
          policy: ["accept_all"]
        export:
          policy:
          - blue_export
        send-communities:
          extended: False  # True value not allowed, on by default
  
  
    - path: configure/service/vprn[service-name=blue]/bgp
      val:
        neighbor:
        - ip-address: "10.1.0.14"
          description: "r4"
          peer-as: 65104
          group: "ebgp"
          family:
            ipv4: True
            ipv6: False
  
  
  
  
  
  
  
    - path: configure/service/vprn[service-name=red]
      val:
       service-id: 100
       customer: "1"
       autonomous-system: 65000
       router-id: 10.0.0.1
       ecmp: 64
       admin-state: enable
  
  
  
    - path: configure/policy-options/prefix-list[name=red_export]
      val:
       prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=red_export]
      val:
        default-action:
          action-type: reject
        entry:
        - entry-id: 10
          from:
            prefix-list: [ "red_export" ]
          action:
            action-type: accept
        - entry-id: 20
          from:
            protocol:
              name: [ bgp ]
          action:
            action-type: accept
        - entry-id: 30
          from:
            protocol:
              name: [ direct ]
          action:
            action-type: accept
        - entry-id: 40
          from:
            protocol:
              name: [ ospf ]
          action:
            action-type: accept
  
  
  
  
    - path: configure/service/vprn[service-name=red]
      val:
        router-id: "10.0.0.1"
        autonomous-system: 65000
        bgp:
          ebgp-default-reject-policy:
            import: False
            export: False
          multipath:
            ibgp: 64
            ebgp: 64
          min-route-advertisement: 1 # Be aggressive about sending updates
          connect-retry: 5           # Retry frequently, suitable in DC context
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group
  
  
  
  
    - path: configure/service/vprn[service-name=red]/bgp/group[group-name=ebgp]
      val:
        admin-state: enable
        family:
          ipv4: True
          ipv6: False
  
        import:
          policy: ["accept_all"]
        export:
          policy:
          - red_export
        send-communities:
          extended: False  # True value not allowed, on by default
  
  
    - path: configure/service/vprn[service-name=red]/bgp
      val:
        neighbor:
        - ip-address: "10.1.0.2"
          description: "r1"
          peer-as: 65101
          group: "ebgp"
          family:
            ipv4: True
            ipv6: False
  
  
    - path: configure/service/vprn[service-name=red]/bgp/group[group-name=ebgp]
      val:
        admin-state: enable
        family:
          ipv4: True
          ipv6: False
  
        import:
          policy: ["accept_all"]
        export:
          policy:
          - red_export
        send-communities:
          extended: False  # True value not allowed, on by default
  
  
    - path: configure/service/vprn[service-name=red]/bgp
      val:
        neighbor:
        - ip-address: "10.1.0.6"
          description: "r2"
          peer-as: 65102
          group: "ebgp"
          family:
            ipv4: True
            ipv6: False

TASK [Deploy vrf configuration] ************************************************
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update vrf node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/vrf/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-custom-config.yml for r1, r2, r3, r4 => (item=bgp-xact)

TASK [Find configuration template] *********************************************
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [fail] ********************************************************************
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [Check is the configuration template is a file] ***************************
ok: [r3 -> localhost]
ok: [r1 -> localhost]
ok: [r4 -> localhost]
ok: [r2 -> localhost]

TASK [fail] ********************************************************************
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [Process template /home/pipi/net101/tools/tests/integration/vrf/bgp-xact.j2 for r1] ***
skipping: [r1]
skipping: [r2]
skipping: [r3]
skipping: [r4]

TASK [Find custom configuration deployment script] *****************************
ok: [r1]
ok: [r2]
ok: [r3]
ok: [r4]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for r1, r2, r3, r4

TASK [eos_config: deploying bgp-xact from /home/pipi/net101/tools/tests/integration/vrf/bgp-xact.j2] ***
changed: [r1]
changed: [r2]
changed: [r4]
changed: [r3]

PLAY RECAP *********************************************************************
dut                        : ok=34   changed=3    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
r1                         : ok=34   changed=4    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
r2                         : ok=34   changed=4    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
r3                         : ok=34   changed=4    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
r4                         : ok=34   changed=4    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   



The device under test has two VRFs with two interfaces in each VRF.
Routers are attached to those interfaces and run BGP with device under test.
Assuming the multi-vrf test case succeeded, this one adds BGP routing with
CE routers.

* r1 and r2 should be able to ping each other
* r3 and r4 should be able to ping each other
* r1 should not be able to reach r3

The test also checks whether DUT unnecessarily enables IPv6 AF over IPv4
EBGP sessions

