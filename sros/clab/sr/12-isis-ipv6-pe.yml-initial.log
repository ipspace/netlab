[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [pe2]
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h2]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [pe2]
ok: [p1]
ok: [h1]
ok: [p2]
ok: [h2]

TASK [Wait for device to become ready] *****************************************
skipping: [pe2]
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/sros.yml for dut

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, pe2, p1, p2, h1, h2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [pe2]
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h2]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [pe2]
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [pe2]
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [pe2]
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [pe2]
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, pe2, p1, p2, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [pe2]
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h2]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [pe2]
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [pe2]
ok: [p1]
ok: [h1]
ok: [p2]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:1::2/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:1::2/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2::1/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2::1/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [pe2] => 
  msg: |-
    initial configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname pe2
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
     ipv6 address 2001:db8:1::4/128
    !
    interface eth1
     no shutdown
     description pe2 -> p2
     ! no ip address
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description pe2 -> h2 [stub]
     ! no ip address
     ipv6 address 2001:db8:2:1::4/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p1] => 
  msg: |-
    initial configuration for p1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p1
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.5/32
     ipv6 address 2001:db8:1::5/128
    !
    interface eth1
     no shutdown
     description p1 -> dut
     ! no ip address
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description p1 -> p2
     ! no ip address
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
  
  
  
    updates:
  
    - path: configure/router[router-name=Base]
      val:
       ecmp: 64
  
  
  
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=system]
  
      val:
       admin-state: enable
       description: "System interface"
       ipv4:
        primary:
         address: "10.0.0.3"
         prefix-length: 32
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:1::3"
          prefix-length: 128
  
  
  
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=eth-1/1/c1]
  
      val:
       admin-state: enable
       description: "dut ~ h1 (stub)"
       ip-mtu: 1500
       port: "1/1/c1/1"
       ipv6:
        address:
        - ipv6-address: "2001:db8:2::3"
          prefix-length: 64
  
  
  
    - path: configure/router[router-name=Base]
      val:
        ipv6:
          router-advertisement:
            interface:
            - ip-int-name: eth-1/1/c1
              admin-state: enable
              min-advertisement-interval: 3
              max-advertisement-interval: 5
  
  
  
  
    - path: configure/port[port-id=1/1/c2]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c2/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=eth-1/1/c2]
  
      val:
       admin-state: enable
       description: "dut ~ p1 ()"
       ip-mtu: 1500
       port: "1/1/c2/1"
       ipv6: { }
  
  
    - path: configure/router[router-name=Base]
      val:
        ipv6:
          router-advertisement:
            interface:
            - ip-int-name: eth-1/1/c2
              admin-state: enable
              min-advertisement-interval: 3
              max-advertisement-interval: 5
ok: [p2] => 
  msg: |-
    initial configuration for p2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p2
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.6/32
     ipv6 address 2001:db8:1::6/128
    !
    interface eth1
     no shutdown
     description p2 -> p1
     ! no ip address
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description p2 -> pe2
     ! no ip address
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for pe2, p1, p2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update initial node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/initial/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [pe2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [pe2]
skipping: [p1]
skipping: [p2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for pe2, p1, p2

TASK [template] ****************************************************************
changed: [p1]
changed: [p2]
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe2]
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [pe2]
changed: [p1]
changed: [p2]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [pe2]
skipping: [p1]
skipping: [p2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-4x8n97gl.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, pe2 => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, pe2 => (item=isis)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, pe2 => (item=sr)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for bgp] *************************************
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p1]
skipping: [p2]
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
  
    updates:
  
    - path: configure/policy-options/policy-statement[name=accept_all]
      val:
       default-action:
        action-type: accept
  
    - path: configure/policy-options/policy-statement[name=next-hop-self-ebgp-routes-only]
      val:
       entry:
       - entry-id: 10
         from:
          path-type: ebgp
         action:
          action-type: accept
          next-hop: self
       default-action:
        action-type: accept
  
  
    - path: configure/policy-options/prefix-list[name=default_export]
      val:
       prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=default_export]
      val:
       default-action:
        action-type: reject
       entry:
       - entry-id: 10
         from:
          prefix-list: [ "default_export" ]
         action:
          action-type: accept
       - entry-id: 20
         from:
          protocol:
           name: ["bgp"]
         action:
          action-type: accept
  
  
  
  
    - path: configure/policy-options/prefix-list[name=default_export]
      val:
       prefix:
       - ip-prefix: 2001:db8:2::/64
         type: exact
  
  
  
    - path: configure/router[router-name=Base]
      val:
       router-id: "10.0.0.3"
       autonomous-system: 65001
       bgp:
        ebgp-default-reject-policy:
         import: False
         export: False
        vpn-apply-export: True
        vpn-apply-import: True
        multipath:
         ibgp: 64
         ebgp: 64
        min-route-advertisement: 1 # Be aggressive about sending updates
        connect-retry: 5           # Retry frequently, suitable in DC context
        client-reflect: False
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ibgp-ipv4]
      val:
       admin-state: enable
       family:
        ipv4: True
        ipv6: True
  
       import:
        policy: ["accept_all"]
       export:
        policy: [ "next-hop-self-ebgp-routes-only" ]
  
       local-address: "10.0.0.3"
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
       neighbor:
       - ip-address: "10.0.0.4"
         description: "pe2"
         peer-as: 65001
         group: "ibgp-ipv4"
         family:
          ipv4: True
          ipv6: False
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ibgp-ipv6]
      val:
       admin-state: enable
       family:
        ipv4: True
        ipv6: True
  
       import:
        policy: ["accept_all"]
       export:
        policy: [ "next-hop-self-ebgp-routes-only" ]
  
       local-address: "2001:db8:1::3"
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
       neighbor:
       - ip-address: "2001:db8:1::4"
         description: "pe2"
         peer-as: 65001
         group: "ibgp-ipv6"
         family:
          ipv4: False
          ipv6: True
ok: [pe2] => 
  msg: |-
    bgp configuration for pe2
    =========================================
    !
    router bgp 65001
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.0.0.3 remote-as 65001
      neighbor 10.0.0.3 description dut
      neighbor 10.0.0.3 update-source lo
    !
      neighbor 2001:db8:1::3 remote-as 65001
      neighbor 2001:db8:1::3 description dut
      neighbor 2001:db8:1::3 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
    !
    !
      neighbor 10.0.0.3 activate
      neighbor 10.0.0.3 next-hop-self
      no neighbor 10.0.0.3 send-community all
      neighbor 10.0.0.3 send-community standard
      neighbor 10.0.0.3 send-community large
      neighbor 10.0.0.3 send-community extended
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:2:1::/64
    !
    !
      neighbor 2001:db8:1::3 activate
      neighbor 2001:db8:1::3 next-hop-self
      no neighbor 2001:db8:1::3 send-community all
      neighbor 2001:db8:1::3 send-community standard
      neighbor 2001:db8:1::3 send-community large
      neighbor 2001:db8:1::3 send-community extended
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
skipping: [p1]
skipping: [p2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for pe2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update bgp node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/bgp/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [template] ****************************************************************
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [pe2]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [pe2]

TASK [Figure out whether to deploy the module isis on current device] **********
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for isis] ************************************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for isis] ********************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p1] => 
  msg: |-
    isis configuration for p1
    =========================================
    !
    !
    ipv6 forwarding
    !
    router isis Gandalf
     log-adjacency-changes
     hostname dynamic
     is-type level-2
     metric-style wide
     lsp-timers gen-interval 1 refresh-interval 900 max-lifetime 1800
     net 49.0001.0000.0000.0005.00
     topology ipv6-unicast
  
  
    !
    interface lo
    !
     ip router isis Gandalf
     ipv6 router isis Gandalf
    !
    interface eth1
    ! p1 -> dut
     ipv6 router isis Gandalf
     isis network point-to-point
    !
    interface eth2
    ! p1 -> p2
     ipv6 router isis Gandalf
     isis network point-to-point
    !
  
    !
    do write
ok: [p2] => 
  msg: |-
    isis configuration for p2
    =========================================
    !
    !
    ipv6 forwarding
    !
    router isis Gandalf
     log-adjacency-changes
     hostname dynamic
     is-type level-2
     metric-style wide
     lsp-timers gen-interval 1 refresh-interval 900 max-lifetime 1800
     net 49.0001.0000.0000.0006.00
     topology ipv6-unicast
  
  
    !
    interface lo
    !
     ip router isis Gandalf
     ipv6 router isis Gandalf
    !
    interface eth1
    ! p2 -> p1
     ipv6 router isis Gandalf
     isis network point-to-point
    !
    interface eth2
    ! p2 -> pe2
     ipv6 router isis Gandalf
     isis network point-to-point
    !
  
    !
    do write
ok: [pe2] => 
  msg: |-
    isis configuration for pe2
    =========================================
    !
    !
    ipv6 forwarding
    !
    router isis Gandalf
     log-adjacency-changes
     hostname dynamic
     is-type level-2
     metric-style wide
     lsp-timers gen-interval 1 refresh-interval 900 max-lifetime 1800
     net 49.0001.0000.0000.0004.00
     topology ipv6-unicast
  
  
    !
    interface lo
    !
     ip router isis Gandalf
     ipv6 router isis Gandalf
    !
    interface eth1
    ! pe2 -> p2
     ipv6 router isis Gandalf
     isis network point-to-point
    !
  
    !
    do write
ok: [dut] => 
  msg: |-
    isis configuration for dut
    =========================================
  
  
    updates:
  
  
    - path: configure/router[router-name=Base]
      val:
        isis:
        - isis-instance: 0
          system-id: "0000.0000.0003"
          admin-state: enable
          area-address: ["49.0001"]
          level:
          - level-number: "1"
            wide-metrics-only: True
          - level-number: "2"
            wide-metrics-only: True
          level-capability: "2"
          multi-topology:
            ipv6-unicast: True
          interface:
          - interface-name: system
            interface-type: broadcast
            passive: False
          - interface-name: eth-1/1/c2
            interface-type: point-to-point
            passive: False

TASK [Deploy isis configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for p1, p2, pe2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update isis node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/isis/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [template] ****************************************************************
changed: [p1]
changed: [p2]
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [run /tmp/config.sh to deploy isis config from /home/pipi/net101/tools/netsim/ansible/templates/isis/frr.j2] ***
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [run vtysh to import isis config from /home/pipi/net101/tools/netsim/ansible/templates/isis/frr.j2] ***
changed: [pe2]
changed: [p1]
changed: [p2]

TASK [Figure out whether to deploy the module sr on current device] ************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for sr] **************************************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for sr] **********************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    sr configuration for dut
    =========================================
    # delete:
    # - configure/router[router-name=Base]/interface[interface-name=Loopback0]
  
    updates:
    - path: configure/router[router-name=Base]/mpls-labels
      val:
       static-label-range: 18400 # default, lower bound of dynamic label range
       sr-labels: # SRGB, required for SR-ISIS
        start: 500000 # Minimum value: static-label-range+32
        end: 501000
  
    - path: configure/router[router-name=Base]/isis[isis-instance=0]
      val:
       advertise-router-capability: area
       segment-routing:
        admin-state: enable
        prefix-sid-range:
         global: [null]
        # srlb: reference mpls-labels reserved-label-block
        tunnel-table-pref: 8 # default 11
       interface:
       - interface-name: system
         ipv4-node-sid:
          index: "3"
         ipv6-node-sid:
          index: "103"
  
    - path: configure/router[router-name=Base]/bgp
      val:
       next-hop-resolution:
        shortcut-tunnel:
         family:
         - family-type: ipv4
           resolution: filter
           resolution-filter:
            sr-isis: True
ok: [p1] => 
  msg: |-
    sr configuration for p1
    =========================================
    #!/bin/bash
    #
    set -e
    sysctl -w net.mpls.platform_labels=1048575
    #
    # Enable MPLS data plane on transit interfaces
    #
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
    cat >/tmp/config <<CONFIG
    !
    router isis Gandalf
      segment-routing on
      mpls-te router-address 10.0.0.5
      segment-routing prefix 10.0.0.5/32 index 5
      segment-routing prefix 2001:db8:1::5/128 index 105
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p2] => 
  msg: |-
    sr configuration for p2
    =========================================
    #!/bin/bash
    #
    set -e
    sysctl -w net.mpls.platform_labels=1048575
    #
    # Enable MPLS data plane on transit interfaces
    #
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
    cat >/tmp/config <<CONFIG
    !
    router isis Gandalf
      segment-routing on
      mpls-te router-address 10.0.0.6
      segment-routing prefix 10.0.0.6/32 index 6
      segment-routing prefix 2001:db8:1::6/128 index 106
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [pe2] => 
  msg: |-
    sr configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e
    sysctl -w net.mpls.platform_labels=1048575
    #
    # Enable MPLS data plane on transit interfaces
    #
    sysctl -w net.mpls.conf.eth1.input=1
    cat >/tmp/config <<CONFIG
    !
    router isis Gandalf
      segment-routing on
      mpls-te router-address 10.0.0.4
      segment-routing prefix 10.0.0.4/32 index 4
      segment-routing prefix 2001:db8:1::4/128 index 104
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy sr configuration] *************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for p1, p2, pe2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update sr node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/sr/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [template] ****************************************************************
changed: [p2]
changed: [p1]
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [run /tmp/config.sh to deploy sr config from /home/pipi/net101/tools/netsim/ansible/templates/sr/frr.j2] ***
changed: [p1]
changed: [p2]
changed: [pe2]

TASK [run vtysh to import sr config from /home/pipi/net101/tools/netsim/ansible/templates/sr/frr.j2] ***
skipping: [p1]
skipping: [p2]
skipping: [pe2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=42   changed=4    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
p1                         : ok=37   changed=6    unreachable=0    failed=0    skipped=16   rescued=0    ignored=0   
p2                         : ok=37   changed=6    unreachable=0    failed=0    skipped=16   rescued=0    ignored=0   
pe2                        : ok=45   changed=9    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   



The tested device (DUT) is a PE-router. It runs IS-IS and SR-MPLS in an
IPv6-only network and has an IBGP session with another PE-router. It has to
perform IP-to-MPLS encapsulation to get the traffic across the BGP-free MPLS
core.

The validation test checks end-to-end connectivity across a BGP-free MPLS core
between a set of linux hosts attached to the PE-routers.

