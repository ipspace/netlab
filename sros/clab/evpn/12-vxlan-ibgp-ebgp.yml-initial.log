[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h1]
ok: [h2]

TASK [Find device readiness script] ********************************************
ok: [l1]
ok: [spine]
ok: [l2]
ok: [h1]
ok: [h2]

TASK [Wait for device to become ready] *****************************************
skipping: [l2]
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/sros.yml for l1, spine

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [spine]
ok: [l1]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-l1] ********
ok: [l1 -> localhost]
ok: [spine -> localhost]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for l1, l2, spine, h1, h2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h1]
ok: [h2]

TASK [Find configuration template for normalize] *******************************
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]

TASK [Deploy normalize configuration] ******************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for l1, l2, spine, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [l1]
ok: [spine]
ok: [l2]
ok: [h1]
ok: [h2]

TASK [Find configuration template for initial] *********************************
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [l1]
ok: [l2]
ok: [spine]
ok: [h2]
ok: [h1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.1/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [l2] => 
  msg: |-
    initial configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1600
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname l2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description l2 -> spine [external]
     ip address 10.1.0.5/30
    !
    interface eth2
     no shutdown
     description [Access VLAN red] l2 -> h2
     ! no ip address
    !
    interface vlan1000
     no shutdown
     description VLAN red (1000) -> [h1,l1,h2]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [l1] => 
  msg: |-
    initial configuration for l1
    =========================================
  
  
  
  
    updates:
  
    - path: configure/router[router-name=Base]
      val:
       ecmp: 64
  
  
  
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=system]
  
      val:
       admin-state: enable
       description: "System interface"
       ipv4:
        primary:
         address: "10.0.0.3"
         prefix-length: 32
  
  
  
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1614 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=eth-1/1/c1]
  
      val:
       admin-state: enable
       description: "l1 ~ spine (external)"
       ip-mtu: 1600
       port: "1/1/c1/1"
       ipv4:
        primary:
         address: "10.1.0.1"
         prefix-length: 30
ok: [spine] => 
  msg: |-
    initial configuration for spine
    =========================================
  
  
  
  
    updates:
  
    - path: configure/router[router-name=Base]
      val:
       ecmp: 64
  
  
  
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=system]
  
      val:
       admin-state: enable
       description: "System interface"
       ipv4:
        primary:
         address: "10.0.0.5"
         prefix-length: 32
  
  
  
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1614 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=eth-1/1/c1]
  
      val:
       admin-state: enable
       description: "spine ~ l1 (external)"
       ip-mtu: 1600
       port: "1/1/c1/1"
       ipv4:
        primary:
         address: "10.1.0.2"
         prefix-length: 30
  
  
  
  
  
    - path: configure/port[port-id=1/1/c2]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c2/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1614 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=eth-1/1/c2]
  
      val:
       admin-state: enable
       description: "spine ~ l2 (external)"
       ip-mtu: 1600
       port: "1/1/c2/1"
       ipv4:
        primary:
         address: "10.1.0.6"
         prefix-length: 30

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for l1, spine
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for l2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [l1]
ok: [spine]

TASK [Update initial node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2] ***
changed: [l1]
changed: [spine]

TASK [debug] *******************************************************************
skipping: [l1]
skipping: [spine]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [l2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [l2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for l2

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [l2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [l2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-s720qwu4.sh] ***********************
changed: [h2 -> localhost]
changed: [h1 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [l1]
ok: [h1]
ok: [h2]
ok: [l2]
ok: [spine]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, l2, l1, spine => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, l2, l1, spine => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, l2, l1, spine => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, l2, l1, spine => (item=vxlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, l2, l1, spine => (item=evpn)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h2]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h2]
skipping: [spine]
ok: [l1]
ok: [l2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
skipping: [spine]
ok: [l1]
ok: [l2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [spine]
ok: [l2] => 
  msg: |-
    vlan configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
      ip link add vlan1000 type bridge
      ip link set dev vlan1000 address 52:dc:ca:fd:04:00
  
      ip addr flush dev vlan1000
    fi
  
    ip link set dev eth2 master vlan1000
  
    ip link set dev vlan1000 up
ok: [l1] => 
  msg: |-
    vlan configuration for l1
    =========================================
  
    updates:
  
  
    - path: configure/port[port-id=1/1/c2]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c2/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vpls[service-name=vlan1000]
      val:
       service-id: 11000
       customer: "1"
       description: "[Access VLAN red] l1 -> h1"
       sap:
       - sap-id: 1/1/c2/1
       admin-state: enable
  
  
  
  
  
    - path: configure/service/vpls[service-name=vlan1000]
      val:
       service-id: 11000
       customer: "1"
       description: "VLAN red (1000) -> [h1,h2,l2]"
       admin-state: enable

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [spine]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for l1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [l1]

TASK [Update vlan node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/vlan/sros.j2] ***
changed: [l1]

TASK [debug] *******************************************************************
skipping: [l1]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
changed: [l2]

TASK [run vtysh to import vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [l2]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Find configuration template for routing] *********************************
skipping: [l1]
skipping: [l2]
ok: [h1]
skipping: [spine]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [l1]
skipping: [l2]
skipping: [spine]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [l1]
skipping: [l2]
skipping: [spine]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [l1]
skipping: [l2]
skipping: [spine]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-_iw774qh.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [h1]
ok: [h2]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Find configuration template for bgp] *************************************
skipping: [h1]
skipping: [h2]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [h1]
skipping: [h2]
ok: [l1]
ok: [l2]
ok: [spine]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [l1] => 
  msg: |-
    bgp configuration for l1
    =========================================
  
    updates:
  
    - path: configure/policy-options/policy-statement[name=accept_all]
      val:
       default-action:
        action-type: accept
  
    - path: configure/policy-options/policy-statement[name=next-hop-self-ebgp-routes-only]
      val:
       entry:
       - entry-id: 10
         from:
          path-type: ebgp
         action:
          action-type: accept
          next-hop: self
       default-action:
        action-type: accept
  
  
    - path: configure/policy-options/prefix-list[name=default_export]
      val:
       prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=default_export]
      val:
       default-action:
        action-type: reject
       entry:
       - entry-id: 10
         from:
          prefix-list: [ "default_export" ]
         action:
          action-type: accept
       - entry-id: 20
         from:
          protocol:
           name: ["bgp"]
         action:
          action-type: accept
  
    - path: configure/policy-options/prefix-list[name=default_export]
      val:
       prefix:
       - ip-prefix: 10.0.0.3/32
         type: exact
  
  
  
  
    - path: configure/router[router-name=Base]
      val:
       router-id: "10.0.0.3"
       autonomous-system: 65000
       bgp:
        ebgp-default-reject-policy:
         import: False
         export: False
        vpn-apply-export: True
        vpn-apply-import: True
        multipath:
         ibgp: 64
         ebgp: 64
        min-route-advertisement: 1 # Be aggressive about sending updates
        connect-retry: 5           # Retry frequently, suitable in DC context
        client-reflect: False
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ibgp-ipv4]
      val:
       admin-state: enable
       family:
        ipv4: False
        ipv6: False
        evpn: True # Must have at least 1 address family enabled
  
       import:
        policy: ["accept_all"]
       export:
        policy: [ "next-hop-self-ebgp-routes-only" ]
  
       local-address: "10.0.0.3"
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
       neighbor:
       - ip-address: "10.0.0.5"
         description: "spine"
         peer-as: 65000
         group: "ibgp-ipv4"
         family:
          ipv4: False
          ipv6: False
          evpn: True # Must have at least 1 address family enabled
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ebgp]
      val:
       admin-state: enable
       family:
        ipv4: True
        ipv6: False
  
       import:
        policy: ["accept_all"]
       export:
        policy: [ "default_export" ]
  
       send-communities:
        extended: False  # True value not allowed, on by default
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
       neighbor:
       - ip-address: "10.1.0.2"
         description: "spine"
         peer-as: 65100
         group: "ebgp"
         family:
          ipv4: True
          ipv6: False
  
  
         local-as:
          as-number: 65201
          prepend-global-as: False # Don't include iBGP global AS in eBGP advertisements
ok: [l2] => 
  msg: |-
    bgp configuration for l2
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.0.0.5 remote-as 65000
      neighbor 10.0.0.5 description spine
      neighbor 10.0.0.5 update-source lo
    !
      neighbor 10.1.0.6 remote-as 65100
      neighbor 10.1.0.6 description spine
      neighbor 10.1.0.6 local-as 65202 no-prepend replace-as
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.4/32
    !
    !
    !
      neighbor 10.0.0.5 activate
      neighbor 10.0.0.5 next-hop-self
      no neighbor 10.0.0.5 send-community all
      neighbor 10.0.0.5 send-community standard
      neighbor 10.0.0.5 send-community large
      neighbor 10.0.0.5 send-community extended
    !
      neighbor 10.1.0.6 activate
      no neighbor 10.1.0.6 send-community all
      neighbor 10.1.0.6 send-community standard
      neighbor 10.1.0.6 send-community large
    !
    !
    !
    do write
ok: [spine] => 
  msg: |-
    bgp configuration for spine
    =========================================
  
    updates:
  
    - path: configure/policy-options/policy-statement[name=accept_all]
      val:
       default-action:
        action-type: accept
  
    - path: configure/policy-options/policy-statement[name=next-hop-self-ebgp-routes-only]
      val:
       entry:
       - entry-id: 10
         from:
          path-type: ebgp
         action:
          action-type: accept
          next-hop: self
       default-action:
        action-type: accept
  
  
    - path: configure/policy-options/prefix-list[name=default_export]
      val:
       prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=default_export]
      val:
       default-action:
        action-type: reject
       entry:
       - entry-id: 10
         from:
          prefix-list: [ "default_export" ]
         action:
          action-type: accept
       - entry-id: 20
         from:
          protocol:
           name: ["bgp"]
         action:
          action-type: accept
  
    - path: configure/policy-options/prefix-list[name=default_export]
      val:
       prefix:
       - ip-prefix: 10.0.0.5/32
         type: exact
  
  
  
  
    - path: configure/router[router-name=Base]
      val:
       router-id: "10.0.0.5"
       autonomous-system: 65000
       bgp:
        ebgp-default-reject-policy:
         import: False
         export: False
        vpn-apply-export: True
        vpn-apply-import: True
        multipath:
         ibgp: 64
         ebgp: 64
        min-route-advertisement: 1 # Be aggressive about sending updates
        connect-retry: 5           # Retry frequently, suitable in DC context
        client-reflect: False
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ibgp-ipv4]
      val:
       admin-state: enable
       family:
        ipv4: False
        ipv6: False
        evpn: True # Must have at least 1 address family enabled
  
       import:
        policy: ["accept_all"]
       export:
        policy: [ "next-hop-self-ebgp-routes-only" ]
  
       local-address: "10.0.0.5"
       cluster:
        cluster-id: "10.0.0.5"
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
       neighbor:
       - ip-address: "10.0.0.3"
         description: "l1"
         peer-as: 65000
         group: "ibgp-ipv4"
         family:
          ipv4: False
          ipv6: False
          evpn: True # Must have at least 1 address family enabled
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ibgp-ipv4]
      val:
       admin-state: enable
       family:
        ipv4: False
        ipv6: False
        evpn: True # Must have at least 1 address family enabled
  
       import:
        policy: ["accept_all"]
       export:
        policy: [ "next-hop-self-ebgp-routes-only" ]
  
       local-address: "10.0.0.5"
       cluster:
        cluster-id: "10.0.0.5"
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
       neighbor:
       - ip-address: "10.0.0.4"
         description: "l2"
         peer-as: 65000
         group: "ibgp-ipv4"
         family:
          ipv4: False
          ipv6: False
          evpn: True # Must have at least 1 address family enabled
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ebgp]
      val:
       admin-state: enable
       family:
        ipv4: True
        ipv6: False
  
       import:
        policy: ["accept_all"]
       export:
        policy: [ "default_export" ]
  
       send-communities:
        extended: False  # True value not allowed, on by default
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
       neighbor:
       - ip-address: "10.1.0.1"
         description: "l1"
         peer-as: 65201
         group: "ebgp"
         family:
          ipv4: True
          ipv6: False
  
  
         local-as:
          as-number: 65100
          prepend-global-as: False # Don't include iBGP global AS in eBGP advertisements
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ebgp]
      val:
       admin-state: enable
       family:
        ipv4: True
        ipv6: False
  
       import:
        policy: ["accept_all"]
       export:
        policy: [ "default_export" ]
  
       send-communities:
        extended: False  # True value not allowed, on by default
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
       neighbor:
       - ip-address: "10.1.0.5"
         description: "l2"
         peer-as: 65202
         group: "ebgp"
         family:
          ipv4: True
          ipv6: False
  
  
         local-as:
          as-number: 65100
          prepend-global-as: False # Don't include iBGP global AS in eBGP advertisements

TASK [Deploy bgp configuration] ************************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for l1, spine
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [l1]
ok: [spine]

TASK [Update bgp node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/bgp/sros.j2] ***
changed: [l1]
changed: [spine]

TASK [debug] *******************************************************************
skipping: [l1]
skipping: [spine]

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [l2]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [l2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [h1]
ok: [h2]
ok: [l1]
ok: [spine]
ok: [l2]

TASK [Find configuration template for vxlan] ***********************************
skipping: [h1]
skipping: [h2]
skipping: [spine]
ok: [l1]
ok: [l2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [l1]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for vxlan] *******************
skipping: [h1]
skipping: [h2]
skipping: [spine]
ok: [l1]
ok: [l2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [spine]
ok: [l1] => 
  msg: |-
    vxlan configuration for l1
    =========================================
  
    updates:
    - path: configure/service/vpls[service-name=vlan1000]
      val:
       customer: '1'
       admin-state: enable
       service-id: 11000 # transit VNI for l3, should not overlap
       vxlan:
        instance:
        - vxlan-instance: 1
          vni: 1000
       bgp:
       - bgp-instance: 1
         # route-distinguisher: 10.0.0.3:1000 # Don't configure this, use auto RD
         route-target:
          export: "target:65000:1000"
          import: "target:65000:1000"
       bgp-evpn:
        evi: 1000
        vxlan:
        - vxlan-instance: 1
          bgp-instance: 1
          admin-state: enable
          ecmp: 8
ok: [l2] => 
  msg: |-
    vxlan configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
  
  
    # Create L3 VNIs with bridges and add to correct vrf table
  
    # Create VXLAN L2 interface per vni
    ip link add vxlan1000 type vxlan \
      id 1000 \
      dstport 4789 \
      local 10.0.0.4 nolearning
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
    ip link add vlan1000 type bridge
    ip link set up dev vlan1000
    fi
    ip link set dev vxlan1000 master vlan1000
    ip link set vlan1000 type bridge stp_state 0
  
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan1000
    # Disable dynamic MAC learning for evpn, see https://docs.frrouting.org/en/latest/evpn.html
    bridge link set dev vxlan1000 learning off
    ip link set up dev vxlan1000
  
  
    exit $?

TASK [Deploy vxlan configuration] **********************************************
skipping: [h1]
skipping: [h2]
skipping: [spine]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for l1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for l2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [l1]

TASK [Update vxlan node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/sros.j2] ***
fatal: [l1]: FAILED! => 
  msg: |-
    Traceback (most recent call last):
      File "/home/pipi/.local/lib/python3.10/site-packages/ansible/module_utils/connection.py", line 209, in send
        response = recv_data(sf)
      File "/home/pipi/.local/lib/python3.10/site-packages/ansible/module_utils/connection.py", line 78, in recv_data
        d = s.recv(header_len - len(data))
    ConnectionResetError: [Errno 104] Connection reset by peer
  
    During handling of the above exception, another exception occurred:
  
    Traceback (most recent call last):
      File "/home/pipi/.local/lib/python3.10/site-packages/ansible/cli/scripts/ansible_connection_cli_stub.py", line 312, in main
        conn.set_options(direct=options)
      File "/home/pipi/.local/lib/python3.10/site-packages/ansible/module_utils/connection.py", line 193, in __rpc__
        response = self._exec_jsonrpc(name, *args, **kwargs)
      File "/home/pipi/.local/lib/python3.10/site-packages/ansible/module_utils/connection.py", line 154, in _exec_jsonrpc
        out = self.send(data)
      File "/home/pipi/.local/lib/python3.10/site-packages/ansible/module_utils/connection.py", line 213, in send
        raise ConnectionError(
    ansible.module_utils.connection.ConnectionError: unable to connect to socket /home/pipi/.ansible/pc/74bae8e9f0. See the socket path issue category in Network Debug and Troubleshooting Guide
  
    During handling of the above exception, another exception occurred:
  
    Traceback (most recent call last):
      File "/home/pipi/.local/bin/ansible-connection", line 8, in <module>
        sys.exit(main())
      File "/home/pipi/.local/lib/python3.10/site-packages/ansible/cli/scripts/ansible_connection_cli_stub.py", line 315, in main
        raise ConnectionError('Unable to decode JSON from response set_options. See the debug log for more information.')
    ansible.module_utils.connection.ConnectionError: Unable to decode JSON from response set_options. See the debug log for more information.

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/frr.j2] ***
changed: [l2]

TASK [run vtysh to import vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/frr.j2] ***
skipping: [l2]

TASK [Figure out whether to deploy the module evpn on current device] **********
ok: [h1]
ok: [h2]
ok: [l2]
ok: [spine]

TASK [Find configuration template for evpn] ************************************
skipping: [h1]
skipping: [h2]
ok: [l2]
ok: [spine]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [l2]
skipping: [spine]

TASK [Find configuration deployment deploy_script for evpn] ********************
skipping: [h1]
skipping: [h2]
ok: [l2]
ok: [spine]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [spine] => 
  msg: |-
    evpn configuration for spine
    =========================================
    # Generated by evpn sros.j2 template
    updates:
    - path: configure/router[router-name=Base]
      val:
       bgp:
        group:
        - group-name: ibgp-ipv4
          family:
           evpn: True
          next-hop-unchanged:
           evpn: True
  
        rapid-withdrawal: True
        rapid-update:
         evpn: True
ok: [l2] => 
  msg: |-
    evpn configuration for l2
    =========================================
    #!/bin/bash
    #
    set -e
    cat >/tmp/evpn_config <<CONFIG
    router bgp 65000
     address-family l2vpn evpn
      advertise-all-vni
      advertise-svi-ip
      advertise ipv4 unicast
  
    ! Configure explicit Route Targets and RD per L2 VNI; auto-derived differs
      vni 1000
       rd 10.0.0.4:1000
       route-target import 65000:1000
       route-target export 65000:1000
      exit-vni
  
      neighbor 10.0.0.5 activate
    #  neighbor 10.0.0.5 soft-reconfiguration inbound
  
     exit-address-family
    !
  
    exit
  
    ! L3 VRF EVPN handling
    !
    do write
    CONFIG
    vtysh -f /tmp/evpn_config
    vtysh -c 'clear bgp *'

TASK [Deploy evpn configuration] ***********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for l2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for spine

TASK [template] ****************************************************************
changed: [l2]

TASK [set_fact] ****************************************************************
ok: [l2]

TASK [run /tmp/config.sh to deploy evpn config from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/frr.j2] ***
changed: [l2]

TASK [run vtysh to import evpn config from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/frr.j2] ***
skipping: [l2]

TASK [Generate gNMI YAML configuration] ****************************************
ok: [spine]

TASK [Update evpn node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/evpn/sros.j2] ***
changed: [spine]

TASK [debug] *******************************************************************
skipping: [spine]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
h2                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
l1                         : ok=44   changed=3    unreachable=0    failed=1    skipped=15   rescued=0    ignored=0   
l2                         : ok=56   changed=11   unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
spine                      : ok=40   changed=3    unreachable=0    failed=0    skipped=24   rescued=0    ignored=0   

Fatal error in netlab: Executing Ansible playbook /home/pipi/netlab_gh/netsim/ansible/initial-config.ansible failed
Error executing ansible-playbook /home/pipi/netlab_gh/netsim/ansible/initial-config.ansible:
  Command '['ansible-playbook', '/home/pipi/netlab_gh/netsim/ansible/initial-config.ansible']' returned non-zero exit status 2.
