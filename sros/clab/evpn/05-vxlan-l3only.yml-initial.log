[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]

TASK [Find device readiness script] ********************************************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]

TASK [Wait for device to become ready] *****************************************
skipping: [s2]
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/sros.yml for s1

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [s1]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-s1] ********
ok: [s1 -> localhost]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]

TASK [Find configuration template for normalize] *******************************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]

TASK [Deploy normalize configuration] ******************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]

TASK [Find configuration template for initial] *********************************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1600
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description s2 -> h2 [stub]
     ip address 172.16.1.4/24
    !
    interface eth2
     no shutdown
     description s2 -> s1
     ip address 10.1.0.2/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
  
  
  
  
    updates:
  
    - path: configure/router[router-name=Base]
      val:
       ecmp: 64
  
  
  
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=system]
  
      val:
       admin-state: enable
       description: "System interface"
       ipv4:
        primary:
         address: "10.0.0.3"
         prefix-length: 32
  
  
  
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=customer]
      val:
       customer: "1"
       admin-state: enable
       service-id: 100
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=customer]/interface[interface-name=eth-1/1/c1]
  
      val:
       admin-state: enable
       description: "s1 ~ h1 (stub)"
       ip-mtu: 1500
       sap:
       - sap-id: "1/1/c1/1"
       ipv4:
        primary:
         address: "172.16.0.3"
         prefix-length: 24
  
  
  
  
  
    - path: configure/port[port-id=1/1/c2]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c2/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1614 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=eth-1/1/c2]
  
      val:
       admin-state: enable
       description: "s1 ~ s2 ()"
       ip-mtu: 1600
       port: "1/1/c2/1"
       ipv4:
        primary:
         address: "10.1.0.1"
         prefix-length: 30

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for s2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [s1]

TASK [Update initial node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2] ***
changed: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [s2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [s2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for s2

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [s2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [s2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-s661f20v.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, s1, s2 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, s1, s2 => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, s1, s2 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, s1, s2 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, s1, s2 => (item=vrf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, s1, s2 => (item=vxlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, s1, s2 => (item=evpn)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h2]
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
  
    updates:

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [s1]

TASK [Update vlan node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/vlan/sros.j2] ***
skipping: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
changed: [s2]

TASK [run vtysh to import vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [s2]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [s1]
ok: [s2]

TASK [Find configuration template for routing] *********************************
skipping: [s1]
skipping: [s2]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [s1]
skipping: [s2]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.3 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.4 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [s1]
skipping: [s2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-luelixjt.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [h1]
ok: [h2]
ok: [s1]
ok: [s2]

TASK [Find configuration template for bgp] *************************************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [s1] => 
  msg: |-
    bgp configuration for s1
    =========================================
  
    updates:
  
    - path: configure/policy-options/policy-statement[name=accept_all]
      val:
        default-action:
          action-type: accept
  
    - path: configure/policy-options/policy-statement[name=next-hop-self-ebgp-routes-only]
      val:
        entry:
        - entry-id: 10
          from:
            path-type: ebgp
          action:
            action-type: accept
            next-hop: self
        default-action:
          action-type: next-policy
  
  
    - path: configure/policy-options/prefix-list[name=bgp_default_advertise]
      val:
        prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=bgp_default_export]
      val:
        default-action:
          action-type: reject
        entry:
        - entry-id: 10
          from:
            prefix-list: [ "bgp_default_advertise" ]
          action:
            action-type: accept
        - entry-id: 20
          from:
            protocol:
              name: [ bgp ]
          action:
            action-type: accept
  
  
    - path: configure/policy-options/prefix-list[name=bgp_default_advertise]
      val:
        prefix:
        - ip-prefix: 10.0.0.3/32
          type: exact
  
  
  
  
    - path: configure/router[router-name=Base]
      val:
        router-id: "10.0.0.3"
        autonomous-system: 65000
        bgp:
          ebgp-default-reject-policy:
            import: False
            export: False
          multipath:
            ibgp: 64
            ebgp: 64
          min-route-advertisement: 1 # Be aggressive about sending updates
          connect-retry: 5           # Retry frequently, suitable in DC context
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ibgp-ipv4]
      val:
        admin-state: enable
        family:
          ipv4: True
          ipv6: False
          evpn: True # Must have at least 1 address family enabled
  
        import:
          policy: ["accept_all"]
        export:
          policy:
          - next-hop-self-ebgp-routes-only
          - bgp_default_export
        local-address: "10.0.0.3"
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
        neighbor:
        - ip-address: "10.0.0.4"
          description: "s2"
          peer-as: 65000
          group: "ibgp-ipv4"
          admin-state: enable
          family:
            ipv4: True
            ipv6: False
            evpn: True # Must have at least 1 address family enabled
ok: [s2] => 
  msg: |-
    bgp configuration for s2
    =========================================
    !
    router bgp 65000
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.0.0.3 remote-as 65000
      neighbor 10.0.0.3 description s1
      neighbor 10.0.0.3 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.4/32
    !
    !
    !
      neighbor 10.0.0.3 activate
      neighbor 10.0.0.3 next-hop-self
      no neighbor 10.0.0.3 send-community all
      neighbor 10.0.0.3 send-community standard
      neighbor 10.0.0.3 send-community large
      neighbor 10.0.0.3 send-community extended
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [s1]

TASK [Update bgp node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/bgp/sros.j2] ***
changed: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [s2]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [h1]
ok: [h2]
ok: [s1]
ok: [s2]

TASK [Find configuration template for ospf] ************************************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.4
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth2
    ! s2 -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
  
  
  
    updates:
  
  
  
  
  
    - path: configure/router[router-name=Base]/ospf[ospf-instance=0]
      val:
        admin-state: enable
        router-id: 10.0.0.3
        area:
        - area-id: "0.0.0.0"
          interface:
          - interface-name: "system"
  
  
  
    - path: configure/router[router-name=Base]/ospf[ospf-instance=0]
      val:
        admin-state: enable
        router-id: 10.0.0.3
        area:
        - area-id: "0.0.0.0"
          interface:
          - interface-name: "eth-1/1/c2"
            interface-type: "point-to-point"

TASK [Deploy ospf configuration] ***********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [s1]

TASK [Update ospf node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/ospf/sros.j2] ***
changed: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [s2]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [h1]
ok: [h2]
ok: [s1]
ok: [s2]

TASK [Find configuration template for vrf] *************************************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [s2] => 
  msg: |-
    vrf configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
    # Create VRF tables
    if [ ! -e /sys/devices/virtual/net/customer ]; then
    ip link add customer type vrf table 100
    fi
    ip link set customer up
  
    # Move interfaces and loopbacks to vrfs
    sysctl -qw net.ipv6.conf.eth1.keep_addr_on_down=1
    ip link set eth1 master customer
  
    cat >/tmp/vrf_config <<CONFIG
    vrf customer
     exit-vrf
    !
    router bgp 65000
    !
    !
    router bgp 65000 vrf customer
     no bgp ebgp-requires-policy
     no bgp default ipv4-unicast
     bgp router-id 10.0.0.4
     address-family ipv4 unicast
      redistribute connected
  
      label vpn export auto
      export vpn
      import vpn
      rd vpn export 65000:1
      rt vpn import 65000:1
      rt vpn export 65000:1
     exit-address-family
    !
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?
ok: [s1] => 
  msg: |-
    vrf configuration for s1
    =========================================
  
    updates:
  
    - path: configure/service/vprn[service-name=customer]
      val:
       service-id: 100
       customer: "1"
       autonomous-system: 65000
       router-id: 10.0.0.3
       ecmp: 64
       admin-state: enable
  
  
  
    - path: configure/policy-options/prefix-list[name=bgp_customer_advertise]
      val:
        prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=bgp_customer_export]
      val:
        default-action:
          action-type: reject
        entry:
        - entry-id: 10
          from:
            prefix-list: [ "bgp_customer_advertise" ]
          action:
            action-type: accept
        - entry-id: 20
          from:
            protocol:
              name: [ bgp ]
          action:
            action-type: accept
        - entry-id: 100
          from:
            protocol:
              name: [ direct ]
          action:
            action-type: accept
  
  
  
    - path: configure/policy-options/prefix-list[name=bgp_customer_advertise]
      val:
        prefix:
        - ip-prefix: 172.16.0.0/24
          type: exact
  
  
  
    - path: configure/service/vprn[service-name=customer]
      val:
        router-id: "10.0.0.3"
        autonomous-system: 65000
        bgp:
          ebgp-default-reject-policy:
            import: False
            export: False
          multipath:
            ibgp: 64
            ebgp: 64
          min-route-advertisement: 1 # Be aggressive about sending updates
          connect-retry: 5           # Retry frequently, suitable in DC context
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group

TASK [Deploy vrf configuration] ************************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [s1]

TASK [Update vrf node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/vrf/sros.j2] ***
changed: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
changed: [s2]

TASK [run vtysh to import vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
skipping: [s2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [h1]
ok: [h2]
ok: [s1]
ok: [s2]

TASK [Find configuration template for vxlan] ***********************************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vxlan] *******************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
  
    updates:
  
    - path: configure/service/vpls[service-name=l3vni-customer]
      val:
       customer: '1'
       admin-state: enable
       service-id: 5042 # transit VNI for l3, should not overlap
       vxlan:
        instance:
        - vxlan-instance: 1
          vni: 5042
       bgp:
       - bgp-instance: 1
         # route-distinguisher: 65000:1 # Don't configure this, use auto RD
         route-target:
          export: "target:65000:1"
          import: "target:65000:1"
       bgp-evpn:
        evi: 100
        routes:
         ip-prefix:
          advertise: True # Symmetric IRB using RT5 prefixes
         mac-ip:
          advertise: False
        vxlan:
        - vxlan-instance: 1
          bgp-instance: 1
          admin-state: enable
          ecmp: 8
       routed-vpls:
        vxlan-ipv4-tep-ecmp: True # Enable ECMP for routed VXLAN
  
  
    - path: configure/service/vprn[service-name=customer]
      val:
       interface:
       - interface-name: l3vni-customer
         vpls:
         - vpls-name: l3vni-customer
           evpn-tunnel: { }   # Applicable when there are no hosts connected to this backhaul R-VPLS, avoids requiring IP on interface
       bgp-ipvpn:
        mpls:
         admin-state: enable
         route-distinguisher: 10.0.0.3:100
         vrf-target:
          export-community: target:65000:1
          import-community: target:65000:1
         auto-bind-tunnel:
          resolution: any
          ecmp: 8
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
  
  
    # Create L3 VNIs with bridges and add to correct vrf table
    ip link add vxlan5042 type vxlan \
      id 5042 \
      dstport 4789 \
      local 10.0.0.4 nolearning
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/tvni-100 ]; then
    ip link add tvni-100 type bridge
    ip link set up dev tvni-100
    fi
    ip link set dev vxlan5042 master tvni-100
    ip link set tvni-100 type bridge stp_state 0
  
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan5042
    # Disable dynamic MAC learning for evpn, see https://docs.frrouting.org/en/latest/evpn.html
    bridge link set dev vxlan5042 learning off
    ip link set up dev vxlan5042
    ip link set tvni-100 master customer
  
  
  
    exit $?

TASK [Deploy vxlan configuration] **********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [s1]

TASK [Update vxlan node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/sros.j2] ***
changed: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/frr.j2] ***
changed: [s2]

TASK [run vtysh to import vxlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/frr.j2] ***
skipping: [s2]

TASK [Figure out whether to deploy the module evpn on current device] **********
ok: [h1]
ok: [h2]
ok: [s1]
ok: [s2]

TASK [Find configuration template for evpn] ************************************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for evpn] ********************
skipping: [h1]
skipping: [h2]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [s1] => 
  msg: |-
    evpn configuration for s1
    =========================================
    # Generated by evpn sros.j2 template
    updates:
    - path: configure/router[router-name=Base]
      val:
        bgp:
          rapid-withdrawal: True
          rapid-update:
            evpn: True
          group:
          - group-name: ibgp-ipv4
            family:
              evpn: True
ok: [s2] => 
  msg: |-
    evpn configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e
    cat >/tmp/evpn_config <<CONFIG
    router bgp 65000
     address-family l2vpn evpn
      advertise-all-vni
      advertise-svi-ip
      advertise ipv4 unicast
  
    ! Configure explicit Route Targets and RD per L2 VNI; auto-derived differs
  
      neighbor 10.0.0.3 activate
    #  neighbor 10.0.0.3 soft-reconfiguration inbound
  
     exit-address-family
    !
  
    exit
  
    ! L3 VRF EVPN handling
    vrf customer
     vni 5042
     exit-vrf
  
    router bgp 65000 vrf customer
     address-family l2vpn evpn
      ! This sets the L3 VNI RD/RT for this VRF
      rd 65000:1
      route-target export 65000:1
      route-target import 65000:1
      ! Enable RT5 advertisements
      advertise ipv4 unicast
     exit-address-family
    exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/evpn_config
    vtysh -c 'clear bgp *'

TASK [Deploy evpn configuration] ***********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [s1]

TASK [Update evpn node configuration from gNMI template /home/pipi/netlab_gh/netsim/ansible/templates/evpn/sros.j2] ***
changed: [s1]

TASK [debug] *******************************************************************
skipping: [s1]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy evpn config from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/frr.j2] ***
changed: [s2]

TASK [run vtysh to import evpn config from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/frr.j2] ***
skipping: [s2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=41   changed=8    unreachable=0    failed=0    skipped=40   rescued=0    ignored=0   
h2                         : ok=41   changed=8    unreachable=0    failed=0    skipped=40   rescued=0    ignored=0   
s1                         : ok=67   changed=6    unreachable=0    failed=0    skipped=23   rescued=0    ignored=0   
s2                         : ok=74   changed=15   unreachable=0    failed=0    skipped=24   rescued=0    ignored=0   



The device under test is a VLAN-to-VXLAN layer-3 switch between an access
interface and an EVPN transit VNI.

Hosts should be able to ping each other.

Please note it might take a while for the lab to work due to STP learning
phase.

