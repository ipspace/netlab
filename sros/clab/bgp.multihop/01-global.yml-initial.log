[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [pe2]
ok: [c1]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [pe2]
ok: [c1]

TASK [Wait for device to become ready] *****************************************
skipping: [pe2]
skipping: [c1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/sros.yml for dut

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, pe2, c1

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [pe2]
ok: [c1]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [pe2]
ok: [c1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [c1]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [pe2]
ok: [c1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [pe2]
skipping: [c1]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [pe2]
skipping: [c1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, pe2, c1

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [pe2]
ok: [c1]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [pe2]
ok: [c1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [c1]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [pe2]
ok: [c1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [pe2] => 
  msg: |-
    initial configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname pe2
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description pe2 -> c1
     ip address 10.1.0.6/30
     ipv6 address 2001:db8:3:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [c1] => 
  msg: |-
    initial configuration for c1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.autoconf=0
    sysctl -qw net.ipv6.conf.eth2.accept_ra=0
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname c1
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description c1 -> dut
     ip address 10.1.0.1/30
     ipv6 address 2001:db8:3::1/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface eth2
     no shutdown
     description c1 -> pe2
     ip address 10.1.0.5/30
     ipv6 address 2001:db8:3:1::1/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
  
  
  
    updates:
  
    - path: configure/router[router-name=Base]
      val:
       ecmp: 64
  
  
  
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=system]
  
      val:
       admin-state: enable
       description: "System interface"
       ipv4:
        primary:
         address: "10.0.0.1"
         prefix-length: 32
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:1:1::1"
          prefix-length: 128
  
  
  
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=eth-1/1/c1]
  
      val:
       admin-state: enable
       description: "dut ~ c1 ()"
       ip-mtu: 1500
       port: "1/1/c1/1"
       ipv4:
        primary:
         address: "10.1.0.2"
         prefix-length: 30
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:3::2"
          prefix-length: 64
  
  
  
    - path: configure/router[router-name=Base]
      val:
        ipv6:
          router-advertisement:
            interface:
            - ip-int-name: eth-1/1/c1
              admin-state: enable
              min-advertisement-interval: 3
              max-advertisement-interval: 5
  
  
  
  
    - path: configure/port[port-id=1/1/c2]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c2/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=eth-1/1/c2]
  
      val:
       admin-state: enable
       description: "dut ~ stub (stub)"
       ip-mtu: 1500
       port: "1/1/c2/1"
       ipv4:
        primary:
         address: "192.168.42.1"
         prefix-length: 24
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:42::1"
          prefix-length: 64
  
  
  
    - path: configure/router[router-name=Base]
      val:
        ipv6:
          router-advertisement:
            interface:
            - ip-int-name: eth-1/1/c2
              admin-state: enable
              min-advertisement-interval: 3
              max-advertisement-interval: 5

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for pe2, c1

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update initial node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/initial/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [pe2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [pe2]
skipping: [c1]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for pe2, c1

TASK [template] ****************************************************************
changed: [pe2]
changed: [c1]

TASK [set_fact] ****************************************************************
ok: [pe2]
ok: [c1]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [pe2]
changed: [c1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [pe2]
skipping: [c1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, dut, pe2 => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, dut, pe2 => (item=ospf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [c1]
ok: [dut]
ok: [pe2]

TASK [Find configuration template for bgp] *************************************
skipping: [c1]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [dut]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [c1]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [c1]
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
  
    updates:
  
    - path: configure/policy-options/policy-statement[name=accept_all]
      val:
        default-action:
          action-type: accept
  
    - path: configure/policy-options/policy-statement[name=next-hop-self-ebgp-routes-only]
      val:
        entry:
        - entry-id: 10
          from:
            path-type: ebgp
          action:
            action-type: accept
            next-hop: self
        default-action:
          action-type: next-policy
  
  
    - path: configure/policy-options/prefix-list[name=bgp_default_advertise]
      val:
        prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=bgp_default_export]
      val:
        default-action:
          action-type: reject
        entry:
        - entry-id: 10
          from:
            prefix-list: [ "bgp_default_advertise" ]
          action:
            action-type: accept
        - entry-id: 20
          from:
            protocol:
              name: [ bgp ]
          action:
            action-type: accept
  
  
    - path: configure/policy-options/prefix-list[name=bgp_default_advertise]
      val:
        prefix:
        - ip-prefix: 10.0.0.1/32
          type: exact
  
  
    - path: configure/policy-options/prefix-list[name=bgp_default_advertise]
      val:
        prefix:
        - ip-prefix: 192.168.42.0/24
          type: exact
  
  
    - path: configure/policy-options/prefix-list[name=bgp_default_advertise]
      val:
        prefix:
        - ip-prefix: 2001:db8:1:1::1/128
          type: exact
  
  
    - path: configure/policy-options/prefix-list[name=bgp_default_advertise]
      val:
        prefix:
        - ip-prefix: 2001:db8:42::/64
          type: exact
  
  
  
    - path: configure/router[router-name=Base]
      val:
        router-id: "10.0.0.1"
        autonomous-system: 65000
        bgp:
          ebgp-default-reject-policy:
            import: False
            export: False
          multipath:
            ibgp: 64
            ebgp: 64
          min-route-advertisement: 1 # Be aggressive about sending updates
          connect-retry: 5           # Retry frequently, suitable in DC context
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ebgp]
      val:
        admin-state: enable
        family:
          ipv4: True
          ipv6: True
  
        import:
          policy: ["accept_all"]
        export:
          policy:
          - bgp_default_export
        send-communities:
          extended: False  # True value not allowed, on by default
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
        neighbor:
        - ip-address: "10.0.0.3"
          description: "pe2"
          peer-as: 65101
          group: "ebgp"
          admin-state: enable
          family:
            ipv4: True
            ipv6: False
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ebgp]
      val:
        admin-state: enable
        family:
          ipv4: True
          ipv6: True
  
        import:
          policy: ["accept_all"]
        export:
          policy:
          - bgp_default_export
        send-communities:
          extended: False  # True value not allowed, on by default
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
        neighbor:
        - ip-address: "2001:db8:1:3::1"
          description: "pe2"
          peer-as: 65101
          group: "ebgp"
          admin-state: enable
          family:
            ipv4: False
            ipv6: True
ok: [pe2] => 
  msg: |-
    bgp configuration for pe2
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 10.0.0.1 remote-as 65000
      neighbor 10.0.0.1 description dut
      neighbor 10.0.0.1 update-source lo
    !
      neighbor 2001:db8:1:1::1 remote-as 65000
      neighbor 2001:db8:1:1::1 description dut
      neighbor 2001:db8:1:1::1 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.3/32
    !
    !
    !
      neighbor 10.0.0.1 activate
      no neighbor 10.0.0.1 send-community all
      neighbor 10.0.0.1 send-community standard
      neighbor 10.0.0.1 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:3::/64
    !
    !
    !
      neighbor 2001:db8:1:1::1 activate
      no neighbor 2001:db8:1:1::1 send-community all
      neighbor 2001:db8:1:1::1 send-community standard
      neighbor 2001:db8:1:1::1 send-community large
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
skipping: [c1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for pe2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update bgp node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/bgp/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [template] ****************************************************************
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [pe2]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [pe2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [dut]
ok: [c1]
ok: [pe2]

TASK [Find configuration template for ospf] ************************************
ok: [c1]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [dut]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [c1]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [c1] => 
  msg: |-
    ospf configuration for c1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! c1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! c1 -> pe2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! c1 -> dut
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    interface eth2
    ! c1 -> pe2
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.2
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [pe2] => 
  msg: |-
    ospf configuration for pe2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! pe2 -> c1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! pe2 -> c1
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.3
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
  
  
  
    updates:
  
  
  
  
  
    - path: configure/router[router-name=Base]/ospf[ospf-instance=0]
      val:
        admin-state: enable
        router-id: 10.0.0.1
        area:
        - area-id: "0.0.0.0"
          interface:
          - interface-name: "system"
  
  
  
    - path: configure/router[router-name=Base]/ospf[ospf-instance=0]
      val:
        admin-state: enable
        router-id: 10.0.0.1
        area:
        - area-id: "0.0.0.0"
          interface:
          - interface-name: "eth-1/1/c1"
            interface-type: "point-to-point"
  
  
  
    - path: configure/router[router-name=Base]/ospf[ospf-instance=0]
      val:
        admin-state: enable
        router-id: 10.0.0.1
        area:
        - area-id: "0.0.0.0"
          interface:
          - interface-name: "eth-1/1/c2"
            passive: True
  
  
  
  
  
  
  
    - path: configure/router[router-name=Base]/ospf3[ospf-instance=0]
      val:
        admin-state: enable
        router-id: 10.0.0.1
        area:
        - area-id: "0.0.0.0"
          interface:
          - interface-name: "system"
  
  
  
    - path: configure/router[router-name=Base]/ospf3[ospf-instance=0]
      val:
        admin-state: enable
        router-id: 10.0.0.1
        area:
        - area-id: "0.0.0.0"
          interface:
          - interface-name: "eth-1/1/c1"
            interface-type: "point-to-point"
  
  
  
    - path: configure/router[router-name=Base]/ospf3[ospf-instance=0]
      val:
        admin-state: enable
        router-id: 10.0.0.1
        area:
        - area-id: "0.0.0.0"
          interface:
          - interface-name: "eth-1/1/c2"
            passive: True

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for c1, pe2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut

TASK [template] ****************************************************************
changed: [pe2]
changed: [c1]

TASK [set_fact] ****************************************************************
ok: [c1]
ok: [pe2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [c1]
skipping: [pe2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [pe2]
changed: [c1]

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update ospf node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/ospf/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
skipping: [dut] => (item=bgp.session) 
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-custom-config.yml for dut, pe2 => (item=ebgp.multihop)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-custom-config.yml for pe2 => (item=bgp.session)

TASK [Find configuration template] *********************************************
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]

TASK [Check is the configuration template is a file] ***************************
ok: [dut -> localhost]
ok: [pe2 -> localhost]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]

TASK [Process template /home/pipi/net101/tools/netsim/extra/ebgp.multihop/sros.j2 for dut] ***
skipping: [pe2]
skipping: [dut]

TASK [Find custom configuration deployment script] *****************************
ok: [dut]
ok: [pe2]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for pe2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update ebgp.multihop node configuration from gNMI template /home/pipi/net101/tools/netsim/extra/ebgp.multihop/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [template] ****************************************************************
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe2]

TASK [run /tmp/config.sh to deploy ebgp.multihop config from /home/pipi/net101/tools/netsim/extra/ebgp.multihop/frr.j2] ***
skipping: [pe2]

TASK [run vtysh to import ebgp.multihop config from /home/pipi/net101/tools/netsim/extra/ebgp.multihop/frr.j2] ***
changed: [pe2]

TASK [Find configuration template] *********************************************
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [pe2]

TASK [Check is the configuration template is a file] ***************************
ok: [pe2 -> localhost]

TASK [fail] ********************************************************************
skipping: [pe2]

TASK [Process template /home/pipi/net101/tools/netsim/extra/bgp.session/frr.j2 for pe2] ***
skipping: [pe2]

TASK [Find custom configuration deployment script] *****************************
ok: [pe2]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for pe2

TASK [template] ****************************************************************
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe2]

TASK [run /tmp/config.sh to deploy bgp.session config from /home/pipi/net101/tools/netsim/extra/bgp.session/frr.j2] ***
changed: [pe2]

TASK [run vtysh to import bgp.session config from /home/pipi/net101/tools/netsim/extra/bgp.session/frr.j2] ***
skipping: [pe2]

PLAY RECAP *********************************************************************
c1                         : ok=28   changed=4    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
dut                        : ok=41   changed=4    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
pe2                        : ok=52   changed=11   unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   



Use this topology to test the (global) EBGP multihop implementation

