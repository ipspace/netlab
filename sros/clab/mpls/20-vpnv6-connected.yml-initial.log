[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h2]
ok: [pe2]
ok: [h3]
ok: [h4]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [h2]
ok: [h1]
ok: [h3]
ok: [pe2]
ok: [h4]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/eos-clab.yml for pe2

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [pe2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, pe2, p1, p2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [pe2]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [h2]
ok: [h1]
ok: [pe2]
ok: [h3]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [pe2]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [pe2] => 
  msg: |-
    normalize configuration for pe2
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0601
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0602
    !
    interface Ethernet3
     shutdown
     mac-address 52dc.cafe.0603

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for pe2

TASK [eos_config: deploying normalize from /home/pipi/netlab_gh/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [pe2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, pe2, p1, p2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [p1]
ok: [h1]
ok: [p2]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [pe2]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [p1]
ok: [h1]
ok: [p2]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [p1]
skipping: [p2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [h1]
ok: [h3]
ok: [h2]
ok: [h4]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:42:3::4/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:42:3::4/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:42::1/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:42::1/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:42:1::2/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:42:1::2/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [p1] => 
  msg: |-
    initial configuration for p1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p1
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.7/32
    !
    interface eth1
     no shutdown
     description p1 -> dut
     ip address 10.1.0.2/30
    !
    interface eth2
     no shutdown
     description p1 -> p2
     ip address 10.1.0.5/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:42:2::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:42:2::3/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
  
  
  
    updates:
  
    - path: configure/router[router-name=Base]
      val:
       ecmp: 64
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=system]
  
      val:
       admin-state: enable
       description: "system interface vlan=0"
       ipv4:
        primary:
         address: "10.0.0.5"
         prefix-length: 32
  
  
  
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=i1/1/c1]
  
      val:
       admin-state: enable
       description: "dut ~ p1 () vlan=0"
       port: "1/1/c1/1"
       ipv4:
        primary:
         address: "10.1.0.1"
         prefix-length: 30
  
  
  
  
  
    - path: configure/port[port-id=1/1/c2]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c2/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=t1]
      val:
       service-id: 100
       customer: "1"
       admin-state: enable
       ecmp: 64
  
    - path: configure/service/vprn[service-name=t1]/interface[interface-name=i1/1/c2]
  
      val:
       admin-state: enable
       description: "dut ~ h1 (stub) vlan=0"
       sap:
       - sap-id: "1/1/c2/1"
       ipv6:
        address:
        - ipv6-address: "2001:db8:42::5"
          prefix-length: 64
  
  
  
  
  
    - path: configure/port[port-id=1/1/c3]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c3/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=t2]
      val:
       service-id: 101
       customer: "1"
       admin-state: enable
       ecmp: 64
  
    - path: configure/service/vprn[service-name=t2]/interface[interface-name=i1/1/c3]
  
      val:
       admin-state: enable
       description: "dut ~ h3 (stub) vlan=0"
       sap:
       - sap-id: "1/1/c3/1"
       ipv6:
        address:
        - ipv6-address: "2001:db8:42:2::5"
          prefix-length: 64
ok: [pe2] => 
  msg: |-
    initial configuration for pe2
    =========================================
    hostname pe2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    ipv6 unicast-routing
    !
    vrf instance t1
     rd 65000:1
    !
    ipv6 unicast-routing vrf t1
    !
    vrf instance t2
     rd 65000:2
    !
    ipv6 unicast-routing vrf t2
    !
    !
    ip host dut 10.0.0.5 10.1.0.1
    ip host p1 10.0.0.7 10.1.0.2 10.1.0.5
    ip host p2 10.0.0.8 10.1.0.6 10.1.0.9
    ipv6 host dut-t1 2001:db8:42::5
    ipv6 host dut-t2 2001:db8:42:2::5
    ipv6 host h1 2001:db8:42::1
    ipv6 host h2 2001:db8:42:1::2
    ipv6 host h3 2001:db8:42:2::3
    ipv6 host h4 2001:db8:42:3::4
    ipv6 host pe2-t1 2001:db8:42:1::6
    ipv6 host pe2-t2 2001:db8:42:3::6
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.6/32
    !
    interface Ethernet1
     no switchport
     description pe2 -> p2
     ip address 10.1.0.10/30
    !
     mac-address 52dc.cafe.0601
     no shutdown
    !
    interface Ethernet2
     no switchport
     vrf t1
     description pe2 -> h2 [stub]
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:42:1::6/64
    !
     mac-address 52dc.cafe.0602
     no shutdown
    !
    interface Ethernet3
     no switchport
     vrf t2
     description pe2 -> h4 [stub]
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:42:3::6/64
    !
     mac-address 52dc.cafe.0603
     no shutdown
    !
ok: [p2] => 
  msg: |-
    initial configuration for p2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.8/32
    !
    interface eth1
     no shutdown
     description p2 -> p1
     ip address 10.1.0.6/30
    !
    interface eth2
     no shutdown
     description p2 -> pe2
     ip address 10.1.0.9/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for pe2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for p1, p2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [dut]

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [Set default provisioning model to use OpenConfig (sros_use_openconfig=False)] ***
skipping: [dut]

TASK [Check if OpenConfig can be used as provisioning method/model (config_template=/home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2)] ***
ok: [dut]

TASK [Select provisioning template netsim_action=initial] **********************
ok: [dut]

TASK [Process template /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2] ***
changed: [dut -> localhost]

TASK [Show generated config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2 based on /tmp/ansible.sros.dut.b8bqpfmftemp] ***
skipping: [dut]

TASK [Check that prepared config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2 in /tmp/ansible.sros.dut.b8bqpfmftemp is valid YAML] ***
skipping: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Enable Open Config YAML modules (retry to give Containerlab a chance to finish configuration)] ***
changed: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  enable_open_config:
    attempts: 1
    changed: true
    failed: false
    output: |-
      {
          "prefix": "configure",
          "response": [
              {
                  "path": "system/management-interface/yang-modules/openconfig-modules",
                  "op": "UPDATE"
              }
          ],
          "timestamp": "2025-05-24T09:44:01.875546"
      }

TASK [Update initial node configuration (using gNMI SET based on YAML template /home/pipi/netlab_gh/netsim/ansible/templates/initial/sros.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  gnmi_set_result:
    attempts: 1
    changed: true
    failed: false
    output: |-
      {
          "response": [
              {
                  "path": "configure/router[router-name=Base]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]/interface[interface-name=system]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c1/1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]/interface[interface-name=i1/1/c1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c2]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c2/1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=t1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=t1]/interface[interface-name=i1/1/c2]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c3]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/port[port-id=1/1/c3/1]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=t2]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/service/vprn[service-name=t2]/interface[interface-name=i1/1/c3]",
                  "op": "UPDATE"
              }
          ],
          "timestamp": "2025-05-24T09:44:02.746042"
      }

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [eos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/eos.j2] ***
changed: [pe2]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [p1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [p1]
skipping: [p2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for p1, p2

TASK [template] ****************************************************************
changed: [p1]
changed: [p2]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [p1]
changed: [p2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [p1]
skipping: [p2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-odq8bbzn.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, pe2 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, pe2 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, pe2 => (item=mpls)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, pe2 => (item=vrf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for bgp] *************************************
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p1]
skipping: [p2]
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
  
    updates:
  
    - path: configure/policy-options/policy-statement[name=accept_all]
      val:
       default-action:
        action-type: accept
  
    - path: configure/policy-options/policy-statement[name=next-hop-self-ebgp-routes-only]
      val:
       entry:
       - entry-id: 10
         from:
          path-type: ebgp
         action:
          action-type: accept
          next-hop: self
       default-action:
        action-type: accept
  
  
    - path: configure/policy-options/prefix-list[name=default_export]
      val:
       prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=default_export]
      val:
       default-action:
        action-type: reject
       entry:
       - entry-id: 10
         from:
          prefix-list: [ "default_export" ]
         action:
          action-type: accept
       - entry-id: 20
         from:
          protocol:
           name: ["bgp"]
         action:
          action-type: accept
  
    - path: configure/policy-options/prefix-list[name=default_export]
      val:
       prefix:
       - ip-prefix: 10.0.0.5/32
         type: exact
  
  
  
  
  
  
    - path: configure/router[router-name=Base]
      val:
       router-id: "10.0.0.5"
       autonomous-system: 65001
       bgp:
        ebgp-default-reject-policy:
         import: False
         export: False
        vpn-apply-export: True
        vpn-apply-import: True
        multipath:
         ibgp: 64
         ebgp: 64
        min-route-advertisement: 1 # Be aggressive about sending updates
        connect-retry: 5           # Retry frequently, suitable in DC context
        client-reflect: False
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ibgp-ipv4]
      val:
       admin-state: enable
       family:
        ipv4: True
        ipv6: False
  
       import:
        policy: ["accept_all"]
       export:
        policy: [ "next-hop-self-ebgp-routes-only" ]
  
       local-address: "10.0.0.5"
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
       neighbor:
       - ip-address: "10.0.0.6"
         description: "pe2"
         peer-as: 65001
         group: "ibgp-ipv4"
         family:
          ipv4: True
          ipv6: False
ok: [pe2] => 
  msg: |-
    bgp configuration for pe2
    =========================================
    !
    route-map next-hop-self-ipv4 permit 10
       match route-type external
       set ip next-hop peer-address
    !
    route-map next-hop-self-ipv4 permit 20
    !
    !
    router bgp 65001
      bgp advertise-inactive
      bgp log-neighbor-changes
      no bgp default ipv4-unicast
      no bgp default ipv6-unicast
      router-id 10.0.0.6
    !
      neighbor 10.0.0.5 remote-as 65001
      neighbor 10.0.0.5 description dut
      neighbor 10.0.0.5 update-source Loopback0
      neighbor 10.0.0.5 send-community standard extended large
    !
    !
     address-family ipv4
  
      network 10.0.0.6/32
    !
    !
    !
      neighbor 10.0.0.5 activate
      neighbor 10.0.0.5 route-map next-hop-self-ipv4 out
    !

TASK [Deploy bgp configuration] ************************************************
skipping: [p1]
skipping: [p2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for pe2

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
skipping: [dut]

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [Set default provisioning model to use OpenConfig (sros_use_openconfig=False)] ***
skipping: [dut]

TASK [Check if OpenConfig can be used as provisioning method/model (config_template=/home/pipi/netlab_gh/netsim/ansible/templates/bgp/sros.j2)] ***
ok: [dut]

TASK [Select provisioning template netsim_action=bgp] **************************
ok: [dut]

TASK [Process template /home/pipi/netlab_gh/netsim/ansible/templates/bgp/sros.j2] ***
changed: [dut -> localhost]

TASK [Show generated config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/sros.j2 based on /tmp/ansible.sros.dut.gpm6jbaetemp] ***
skipping: [dut]

TASK [Check that prepared config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/sros.j2 in /tmp/ansible.sros.dut.gpm6jbaetemp is valid YAML] ***
skipping: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Enable Open Config YAML modules (retry to give Containerlab a chance to finish configuration)] ***
skipping: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  enable_open_config:
    changed: false
    false_condition: enable_open_config is not defined and 'ixr-ec' != clab.type
    skip_reason: Conditional result was False
    skipped: true

TASK [Update bgp node configuration (using gNMI SET based on YAML template /home/pipi/netlab_gh/netsim/ansible/templates/bgp/sros.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  gnmi_set_result:
    attempts: 1
    changed: true
    failed: false
    output: |-
      {
          "response": [
              {
                  "path": "configure/policy-options/policy-statement[name=accept_all]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/policy-options/policy-statement[name=next-hop-self-ebgp-routes-only]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/policy-options/prefix-list[name=default_export]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/policy-options/policy-statement[name=default_export]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/policy-options/prefix-list[name=default_export]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]/bgp/group[group-name=ibgp-ipv4]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]/bgp",
                  "op": "UPDATE"
              }
          ],
          "timestamp": "2025-05-24T09:44:16.887552"
      }

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [eos_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/eos.j2] ***
changed: [pe2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for ospf] ************************************
ok: [dut]
ok: [p2]
ok: [p1]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p1] => 
  msg: |-
    ospf configuration for p1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.7
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! p1 -> p2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
  
  
    updates:
  
  
  
  
    - path: configure/router[router-name=Base]/ospf[ospf-instance=0]
      val:
       admin-state: enable
       router-id: 10.0.0.5
       area:
       - area-id: "0.0.0.0"
         interface:
         - interface-name: "i1/1/c1"
           # mtu: 1500 # SRL defaults to 1500, now supporting global mtu settings
           interface-type: "point-to-point"
  
  
  
    - path: configure/router[router-name=Base]/ospf[ospf-instance=0]
      val:
       admin-state: enable
       router-id: 10.0.0.5
       area:
       - area-id: "0.0.0.0"
         interface:
         - interface-name: "system"
           passive: True
           # mtu: 1500 # SRL defaults to 1500, now supporting global mtu settings
ok: [p2] => 
  msg: |-
    ospf configuration for p2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.8
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p2 -> p1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! p2 -> pe2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [pe2] => 
  msg: |-
    ospf configuration for pe2
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.6
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! pe2 -> p2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for p1, p2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for pe2

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
skipping: [dut]

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [Set default provisioning model to use OpenConfig (sros_use_openconfig=False)] ***
skipping: [dut]

TASK [Check if OpenConfig can be used as provisioning method/model (config_template=/home/pipi/netlab_gh/netsim/ansible/templates/ospf/sros.j2)] ***
ok: [dut]

TASK [Select provisioning template netsim_action=ospf] *************************
ok: [dut]

TASK [Process template /home/pipi/netlab_gh/netsim/ansible/templates/ospf/sros.j2] ***
changed: [dut -> localhost]

TASK [Show generated config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/sros.j2 based on /tmp/ansible.sros.dut.nfc5jc3ttemp] ***
skipping: [dut]

TASK [Check that prepared config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/sros.j2 in /tmp/ansible.sros.dut.nfc5jc3ttemp is valid YAML] ***
skipping: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Enable Open Config YAML modules (retry to give Containerlab a chance to finish configuration)] ***
skipping: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  enable_open_config:
    changed: false
    false_condition: enable_open_config is not defined and 'ixr-ec' != clab.type
    skip_reason: Conditional result was False
    skipped: true

TASK [Update ospf node configuration (using gNMI SET based on YAML template /home/pipi/netlab_gh/netsim/ansible/templates/ospf/sros.j2)] ***
changed: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  gnmi_set_result:
    attempts: 1
    changed: true
    failed: false
    output: |-
      {
          "response": [
              {
                  "path": "configure/router[router-name=Base]/ospf[ospf-instance=0]",
                  "op": "UPDATE"
              },
              {
                  "path": "configure/router[router-name=Base]/ospf[ospf-instance=0]",
                  "op": "UPDATE"
              }
          ],
          "timestamp": "2025-05-24T09:44:27.125046"
      }

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [p1]
changed: [p2]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [p1]
skipping: [p2]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [p1]
changed: [p2]

TASK [eos_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/eos.j2] ***
changed: [pe2]

TASK [Figure out whether to deploy the module mpls on current device] **********
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for mpls] ************************************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for mpls] ********************
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p1] => 
  msg: |-
    mpls configuration for p1
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.7
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.7
        interface eth1
        exit
        interface eth2
        exit
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0
ok: [pe2] => 
  msg: |-
    mpls configuration for pe2
    =========================================
    !
    mpls ip
    mpls icmp ttl-exceeded tunneling
    !
    mpls ldp
      router-id 10.0.0.6
      transport-address interface Loopback0
      interface disabled default
      no shutdown
    !
    interface Loopback0
      mpls ldp interface
    !
    interface Ethernet1
      mpls ip
      mpls ldp interface
    !
    !
    router bgp 65001
  
     neighbor 10.0.0.5 send-community add extended
    !
     address-family vpn-ipv6
    !
      neighbor 10.0.0.5 activate
      exit
ok: [p2] => 
  msg: |-
    mpls configuration for p2
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.8
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.8
        interface eth1
        exit
        interface eth2
        exit
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0
ok: [dut] => 
  msg: |-
    mpls configuration for dut
    =========================================
    updates:
    - path: configure/router[router-name=Base]
      val:
       mpls:
        admin-state: enable
        interface:
        - interface-name: system
          admin-state: enable
       rsvp: # RSVP interface must be present along with MPLS interface
        admin-state: disable
        interface:
        - interface-name: system
          admin-state: disable
  
  
    - path: configure/router[router-name=Base]/mpls/interface[interface-name=i1/1/c1]
      val:
       admin-state: enable
  
    # RSVP interface must be present along with MPLS interface
    - path: configure/router[router-name=Base]/rsvp/interface[interface-name=i1/1/c1]
      val:
       admin-state: disable
  
    - path: configure/router[router-name=Base]/ldp
      val:
       admin-state: enable
       implicit-null-label: True
       interface-parameters:
        interface:
        - ip-int-name: "i1/1/c1"
          admin-state: enable
          ipv4:
           admin-state: enable
           transport-address: system
  
  
    - path: configure/router[router-name=Base]/bgp/next-hop-resolution
      val:
       shortcut-tunnel:
        family:
        - family-type: ipv4
          resolution: filter
          resolution-filter:
           ldp: True
  
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/neighbor[ip-address=10.0.0.6]
      val:
       description: "pe2"
       group: "ibgp-ipv6"
       peer-as: 65001
       family:
        vpn-ipv6: True

TASK [Deploy mpls configuration] ***********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for p1, p2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for pe2

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
skipping: [dut]

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [Set default provisioning model to use OpenConfig (sros_use_openconfig=False)] ***
skipping: [dut]

TASK [Check if OpenConfig can be used as provisioning method/model (config_template=/home/pipi/netlab_gh/netsim/ansible/templates/mpls/sros.j2)] ***
ok: [dut]

TASK [Select provisioning template netsim_action=mpls] *************************
ok: [dut]

TASK [Process template /home/pipi/netlab_gh/netsim/ansible/templates/mpls/sros.j2] ***
changed: [dut -> localhost]

TASK [Show generated config from /home/pipi/netlab_gh/netsim/ansible/templates/mpls/sros.j2 based on /tmp/ansible.sros.dut.jkf_m3e7temp] ***
skipping: [dut]

TASK [Check that prepared config from /home/pipi/netlab_gh/netsim/ansible/templates/mpls/sros.j2 in /tmp/ansible.sros.dut.jkf_m3e7temp is valid YAML] ***
skipping: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Enable Open Config YAML modules (retry to give Containerlab a chance to finish configuration)] ***
skipping: [dut]

TASK [debug] *******************************************************************
ok: [dut] => 
  enable_open_config:
    changed: false
    false_condition: enable_open_config is not defined and 'ixr-ec' != clab.type
    skip_reason: Conditional result was False
    skipped: true

TASK [Update mpls node configuration (using gNMI SET based on YAML template /home/pipi/netlab_gh/netsim/ansible/templates/mpls/sros.j2)] ***
FAILED - RETRYING: [dut]: Update mpls node configuration (using gNMI SET based on YAML template /home/pipi/netlab_gh/netsim/ansible/templates/mpls/sros.j2) (2 retries left).
FAILED - RETRYING: [dut]: Update mpls node configuration (using gNMI SET based on YAML template /home/pipi/netlab_gh/netsim/ansible/templates/mpls/sros.j2) (1 retries left).
fatal: [dut]: FAILED! => changed=false 
  attempts: 2
  code: -32603
  msg: |-
    <_InactiveRpcError of RPC that terminated with:
            status = StatusCode.FAILED_PRECONDITION
            details = "MINOR: MGMT_CORE #224: /configure/router[router-name=Base]/bgp/neighbor[ip-address=10.0.0.6]/group - Entry does not exist - /configure/router[router-name=Base]/bgp/group[group-name=ibgp-ipv6] - gRPC: commit operation"
            debug_error_string = "UNKNOWN:Error received from peer  {grpc_message:"MINOR: MGMT_CORE #224: /configure/router[router-name=Base]/bgp/neighbor[ip-address=10.0.0.6]/group - Entry does not exist - /configure/router[router-name=Base]/bgp/group[group-name=ibgp-ipv6] - gRPC: commit operation", grpc_status:9, created_time:"2025-05-24T09:44:50.865649788+00:00"}"
    >

TASK [template] ****************************************************************
changed: [p2]
changed: [p1]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy mpls config from /home/pipi/netlab_gh/netsim/ansible/templates/mpls/frr.j2] ***
changed: [p2]
changed: [p1]

TASK [run vtysh to import mpls config from /home/pipi/netlab_gh/netsim/ansible/templates/mpls/frr.j2] ***
skipping: [p1]
skipping: [p2]

TASK [eos_config: deploying mpls from /home/pipi/netlab_gh/netsim/ansible/templates/mpls/eos.j2] ***
changed: [pe2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for vrf] *************************************
skipping: [p1]
skipping: [p2]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [p1]
skipping: [p2]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p1]
skipping: [p2]
ok: [pe2] => 
  msg: |-
    vrf configuration for pe2
    =========================================
    !
    mpls ip
    !
    router bgp 65001
    !
     vrf t1
      router-id 10.0.0.6
      rd 65000:1
      route-target import vpn-ipv6 65000:1
      route-target export vpn-ipv6 65000:1
    !
      address-family ipv6
        redistribute connected
  
    !
     vrf t2
      router-id 10.0.0.6
      rd 65000:2
      route-target import vpn-ipv6 65000:2
      route-target export vpn-ipv6 65000:2
    !
      address-family ipv6
        redistribute connected

TASK [Deploy vrf configuration] ************************************************
skipping: [p1]
skipping: [p2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for pe2

TASK [eos_config: deploying vrf from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/eos.j2] ***
changed: [pe2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=67   changed=15   unreachable=0    failed=1    skipped=26   rescued=0    ignored=0   
h1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h3                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
h4                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
p1                         : ok=40   changed=7    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0   
p2                         : ok=39   changed=6    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0   
pe2                        : ok=47   changed=6    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   

Fatal error in netlab: Executing Ansible playbook /home/pipi/netlab_gh/netsim/ansible/initial-config.ansible failed
Error executing ansible-playbook /home/pipi/netlab_gh/netsim/ansible/initial-config.ansible:
  Command '['ansible-playbook', '/home/pipi/netlab_gh/netsim/ansible/initial-config.ansible']' returned non-zero exit status 2.
