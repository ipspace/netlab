[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [ce1]
ok: [ce2]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [ce1]
ok: [p1]
ok: [ce2]
ok: [p2]
ok: [pe2]

TASK [Wait for device to become ready] *****************************************
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for pe2

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [pe2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, pe2, ce1, ce2, p1, p2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [ce1]
ok: [ce2]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [ce1]
ok: [p1]
ok: [ce2]
ok: [p2]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [ce1]
ok: [ce2]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
ok: [pe2] => 
  msg: |-
    normalize configuration for pe2
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0401
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0402

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for pe2

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [pe2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, pe2, ce1, ce2, p1, p2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [ce1]
ok: [ce2]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [ce1]
ok: [ce2]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [pe2]
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [ce1]
ok: [ce2]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ce1] => 
  msg: |-
    initial configuration for ce1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname ce1
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.1/32
    !
    interface eth1
     no shutdown
     description ce1 -> dut [external]
     ip address 10.1.0.13/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
  
  
  
    updates:
  
    - path: configure/router[router-name=Base]
      val:
       ecmp: 64
  
  
  
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=system]
  
      val:
       admin-state: enable
       description: "System interface"
       ipv4:
        primary:
         address: "10.0.0.3"
         prefix-length: 32
  
  
  
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=eth-1/1/c1]
  
      val:
       admin-state: enable
       description: "dut ~ p1 ()"
       ip-mtu: 1500
       port: "1/1/c1/1"
       ipv4:
        primary:
         address: "10.1.0.1"
         prefix-length: 30
  
  
  
  
  
    - path: configure/port[port-id=1/1/c2]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c2/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: access
  
  
    - path: configure/service/vprn[service-name=tenant]
      val:
       customer: "1"
       admin-state: enable
       service-id: 100
    #   ecmp: 64
  
    - path: configure/service/vprn[service-name=tenant]/interface[interface-name=eth-1/1/c2]
  
      val:
       admin-state: enable
       description: "dut ~ ce1 (external)"
       ip-mtu: 1500
       sap:
       - sap-id: "1/1/c2/1"
       ipv4:
        primary:
         address: "10.1.0.14"
         prefix-length: 30
ok: [p2] => 
  msg: |-
    initial configuration for p2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.6/32
    !
    interface eth1
     no shutdown
     description p2 -> p1
     ip address 10.1.0.6/30
    !
    interface eth2
     no shutdown
     description p2 -> pe2
     ip address 10.1.0.9/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [pe2] => 
  msg: |-
    initial configuration for pe2
    =========================================
    hostname pe2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    no ipv6 unicast-routing
    !
    vrf instance tenant
     rd 65000:1
    !
    ip routing vrf tenant
    !
    !
    ip host ce1 10.0.0.1 10.1.0.13
    ip host ce2 10.0.0.2 10.1.0.17
    ip host dut 10.0.0.3 10.1.0.1
    ip host dut-tenant 10.1.0.14
    ip host p1 10.0.0.5 10.1.0.2 10.1.0.5
    ip host p2 10.0.0.6 10.1.0.6 10.1.0.9
    ip host pe2-tenant 10.1.0.18
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.4/32
    !
    interface Ethernet1
     no switchport
     description pe2 -> p2
     ip address 10.1.0.10/30
    !
     mac-address 52dc.cafe.0401
     no shutdown
    !
    interface Ethernet2
     no switchport
     vrf tenant
     description pe2 -> ce2 [external]
     ip address 10.1.0.18/30
    !
     mac-address 52dc.cafe.0402
     no shutdown
    !
ok: [ce2] => 
  msg: |-
    initial configuration for ce2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname ce2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description ce2 -> pe2 [external]
     ip address 10.1.0.17/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p1] => 
  msg: |-
    initial configuration for p1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p1
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.5/32
    !
    interface eth1
     no shutdown
     description p1 -> dut
     ip address 10.1.0.2/30
    !
    interface eth2
     no shutdown
     description p1 -> p2
     ip address 10.1.0.5/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for pe2
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for ce1, ce2, p1, p2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update initial node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/initial/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [pe2]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [ce1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for ce1, ce2, p1, p2

TASK [template] ****************************************************************
changed: [p2]
changed: [p1]
changed: [ce1]
changed: [ce2]

TASK [set_fact] ****************************************************************
ok: [ce1]
ok: [ce2]
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [ce1]
changed: [ce2]
changed: [p2]
changed: [p1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ce1, ce2, dut, p1, p2, pe2 => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ce1, ce2, dut, p1, p2, pe2 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ce1, ce2, dut, p1, p2, pe2 => (item=mpls)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ce1, ce2, dut, p1, p2, pe2 => (item=vrf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for bgp] *************************************
ok: [ce1]
skipping: [p1]
ok: [ce2]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [p1]
skipping: [p2]
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p1]
skipping: [p2]
ok: [ce1] => 
  msg: |-
    bgp configuration for ce1
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.1
    !
      neighbor 10.1.0.14 remote-as 65001
      neighbor 10.1.0.14 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.1/32
    !
    !
    !
      neighbor 10.1.0.14 activate
      no neighbor 10.1.0.14 send-community all
      neighbor 10.1.0.14 send-community standard
      neighbor 10.1.0.14 send-community large
    !
    !
    !
    do write
ok: [ce2] => 
  msg: |-
    bgp configuration for ce2
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor 10.1.0.18 remote-as 65001
      neighbor 10.1.0.18 description pe2
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.2/32
    !
    !
    !
      neighbor 10.1.0.18 activate
      no neighbor 10.1.0.18 send-community all
      neighbor 10.1.0.18 send-community standard
      neighbor 10.1.0.18 send-community large
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
  
    updates:
  
    - path: configure/policy-options/policy-statement[name=accept_all]
      val:
        default-action:
          action-type: accept
  
    - path: configure/policy-options/policy-statement[name=next-hop-self-ebgp-routes-only]
      val:
        entry:
        - entry-id: 10
          from:
            path-type: ebgp
          action:
            action-type: accept
            next-hop: self
        default-action:
          action-type: next-policy
  
  
    - path: configure/policy-options/prefix-list[name=bgp_default_advertise]
      val:
        prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=bgp_default_export]
      val:
        default-action:
          action-type: reject
        entry:
        - entry-id: 10
          from:
            prefix-list: [ "bgp_default_advertise" ]
          action:
            action-type: accept
        - entry-id: 20
          from:
            protocol:
              name: [ bgp ]
          action:
            action-type: accept
  
  
    - path: configure/policy-options/prefix-list[name=bgp_default_advertise]
      val:
        prefix:
        - ip-prefix: 10.0.0.3/32
          type: exact
  
  
  
  
    - path: configure/router[router-name=Base]
      val:
        router-id: "10.0.0.3"
        autonomous-system: 65001
        bgp:
          ebgp-default-reject-policy:
            import: False
            export: False
          multipath:
            ibgp: 64
            ebgp: 64
          min-route-advertisement: 1 # Be aggressive about sending updates
          connect-retry: 5           # Retry frequently, suitable in DC context
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/group[group-name=ibgp-ipv4]
      val:
        admin-state: enable
        family:
          ipv4: True
          ipv6: False
  
        import:
          policy: ["accept_all"]
        export:
          policy:
          - next-hop-self-ebgp-routes-only
          - bgp_default_export
        local-address: "10.0.0.3"
  
  
    - path: configure/router[router-name=Base]/bgp
      val:
        neighbor:
        - ip-address: "10.0.0.4"
          description: "pe2"
          peer-as: 65001
          group: "ibgp-ipv4"
          admin-state: enable
          family:
            ipv4: True
            ipv6: False
ok: [pe2] => 
  msg: |-
    bgp configuration for pe2
    =========================================
    !
    route-map next-hop-self-ipv4 permit 10
       match route-type external
       set ip next-hop peer-address
    !
    route-map next-hop-self-ipv4 permit 20
    !
    !
    router bgp 65001
      bgp advertise-inactive
      bgp log-neighbor-changes
      no bgp default ipv4-unicast
      no bgp default ipv6-unicast
      router-id 10.0.0.4
    !
      neighbor 10.0.0.3 remote-as 65001
      neighbor 10.0.0.3 description dut
      neighbor 10.0.0.3 update-source Loopback0
      neighbor 10.0.0.3 send-community standard extended large
    !
    !
     address-family ipv4
  
      network 10.0.0.4/32
    !
    !
    !
      neighbor 10.0.0.3 activate
      neighbor 10.0.0.3 route-map next-hop-self-ipv4 out
    !

TASK [Deploy bgp configuration] ************************************************
skipping: [p1]
skipping: [p2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for ce1, ce2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for pe2

TASK [template] ****************************************************************
changed: [ce2]
changed: [ce1]

TASK [set_fact] ****************************************************************
ok: [ce1]
ok: [ce2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [ce1]
skipping: [ce2]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [ce1]
changed: [ce2]

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update bgp node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/bgp/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [eos_config: deploying bgp from /home/pipi/net101/tools/netsim/ansible/templates/bgp/eos.j2] ***
changed: [pe2]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for ospf] ************************************
skipping: [ce1]
skipping: [ce2]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [ce1]
skipping: [ce2]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ce1]
skipping: [ce2]
ok: [p1] => 
  msg: |-
    ospf configuration for p1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.5
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! p1 -> p2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [p2] => 
  msg: |-
    ospf configuration for p2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.6
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p2 -> p1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! p2 -> pe2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
  
  
  
    updates:
  
  
  
  
  
    - path: configure/router[router-name=Base]/ospf[ospf-instance=0]
      val:
        admin-state: enable
        router-id: 10.0.0.3
        area:
        - area-id: "0.0.0.0"
          interface:
          - interface-name: "system"
  
  
  
    - path: configure/router[router-name=Base]/ospf[ospf-instance=0]
      val:
        admin-state: enable
        router-id: 10.0.0.3
        area:
        - area-id: "0.0.0.0"
          interface:
          - interface-name: "eth-1/1/c1"
            interface-type: "point-to-point"
ok: [pe2] => 
  msg: |-
    ospf configuration for pe2
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.4
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! pe2 -> p2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Deploy ospf configuration] ***********************************************
skipping: [ce1]
skipping: [ce2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for p1, p2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for pe2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update ospf node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/ospf/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [template] ****************************************************************
changed: [p1]
changed: [p2]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [p1]
skipping: [p2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [p1]
changed: [p2]

TASK [eos_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/eos.j2] ***
changed: [pe2]

TASK [Figure out whether to deploy the module mpls on current device] **********
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for mpls] ************************************
skipping: [ce1]
skipping: [ce2]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for mpls] ********************
skipping: [ce1]
skipping: [ce2]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ce1]
skipping: [ce2]
ok: [p1] => 
  msg: |-
    mpls configuration for p1
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.5
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.5
        interface eth1
        exit
        interface eth2
        exit
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0
ok: [pe2] => 
  msg: |-
    mpls configuration for pe2
    =========================================
    !
    mpls ip
    mpls icmp ttl-exceeded tunneling
    !
    mpls ldp
      router-id 10.0.0.4
      transport-address interface Loopback0
      interface disabled default
      no shutdown
    !
    interface Loopback0
      mpls ldp interface
    !
    interface Ethernet1
      mpls ip
      mpls ldp interface
    !
    !
    router bgp 65001
  
     neighbor 10.0.0.3 send-community add extended
    !
     address-family vpn-ipv4
    !
      neighbor 10.0.0.3 activate
      exit
ok: [p2] => 
  msg: |-
    mpls configuration for p2
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.6
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.6
        interface eth1
        exit
        interface eth2
        exit
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0
ok: [dut] => 
  msg: |-
    mpls configuration for dut
    =========================================
    updates:
    - path: configure/router[router-name=Base]
      val:
       mpls:
        admin-state: enable
        interface:
        - interface-name: system
          admin-state: enable
       rsvp: # RSVP interface must be present along with MPLS interface
        admin-state: disable
        interface:
        - interface-name: system
          admin-state: disable
  
  
    - path: configure/router[router-name=Base]/mpls/interface[interface-name=eth-1/1/c1]
      val:
       admin-state: enable
  
    # RSVP interface must be present along with MPLS interface
    - path: configure/router[router-name=Base]/rsvp/interface[interface-name=eth-1/1/c1]
      val:
       admin-state: disable
  
    - path: configure/router[router-name=Base]/ldp
      val:
       admin-state: enable
       implicit-null-label: True
       interface-parameters:
        interface:
        - ip-int-name: "eth-1/1/c1"
          admin-state: enable
          ipv4:
           admin-state: enable
           transport-address: system
  
  
    - path: configure/router[router-name=Base]/bgp/next-hop-resolution
      val:
       shortcut-tunnel:
        family:
        - family-type: ipv4
          resolution: filter
          resolution-filter:
           ldp: True
  
  
  
  
  
    - path: configure/router[router-name=Base]/bgp/neighbor[ip-address=10.0.0.4]
      val:
        family:
          vpn-ipv4: True
    - path: configure/service/vprn[service-name=tenant]
      val:
        bgp-ipvpn:
          mpls:
            admin-state: enable
            route-distinguisher: "65000:1"
            vrf-target:
              export-community: "target:65000:1" # For now a single community, TODO import policy
              import-community: "target:65000:1"
            auto-bind-tunnel:
              resolution: "any"
              ecmp: 32
  
    - path: configure/policy-options/policy-statement[name=bgp_tenant_export]
      val:
        entry:
        - entry-id: 1000
          from:
            protocol:
              name: [ bgp-vpn ]
          action:
            action-type: accept

TASK [Deploy mpls configuration] ***********************************************
skipping: [ce1]
skipping: [ce2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for p1, p2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for pe2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update mpls node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/mpls/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [template] ****************************************************************
changed: [p2]
changed: [p1]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy mpls config from /home/pipi/net101/tools/netsim/ansible/templates/mpls/frr.j2] ***
changed: [p1]
changed: [p2]

TASK [run vtysh to import mpls config from /home/pipi/net101/tools/netsim/ansible/templates/mpls/frr.j2] ***
skipping: [p1]
skipping: [p2]

TASK [eos_config: deploying mpls from /home/pipi/net101/tools/netsim/ansible/templates/mpls/eos.j2] ***
changed: [pe2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [ce1]
ok: [ce2]
ok: [dut]
ok: [p1]
ok: [p2]
ok: [pe2]

TASK [Find configuration template for vrf] *************************************
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
ok: [dut]
skipping: [p2]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [pe2]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
ok: [dut]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
    updates:
    - path: configure/service/vprn[service-name=tenant]
      val:
        service-id: 100
        customer: "1"
        autonomous-system: 65001
        router-id: 10.0.0.3
        ecmp: 64
        admin-state: enable
  
    - path: configure/policy-options/prefix-list[name=bgp_tenant_advertise]
      val:
        prefix: [] # Make sure it exists
  
    - path: configure/policy-options/policy-statement[name=bgp_tenant_export]
      val:
        default-action:
          action-type: reject
        entry:
        - entry-id: 10
          from:
            prefix-list: [ "bgp_tenant_advertise" ]
          action:
            action-type: accept
        - entry-id: 20
          from:
            protocol:
              name: [ bgp ]
          action:
            action-type: accept
        - entry-id: 100
          from:
            protocol:
              name: [ direct ]
          action:
            action-type: accept
  
  
  
  
  
    - path: configure/service/vprn[service-name=tenant]
      val:
        router-id: "10.0.0.3"
        autonomous-system: 65001
        bgp:
          ebgp-default-reject-policy:
            import: False
            export: False
          multipath:
            ibgp: 64
            ebgp: 64
          min-route-advertisement: 1 # Be aggressive about sending updates
          connect-retry: 5           # Retry frequently, suitable in DC context
        # family: cannot disable this
        # ipv4: False # Enabled by default, disable globally and set per group
  
  
  
  
    - path: configure/service/vprn[service-name=tenant]/bgp/group[group-name=ebgp]
      val:
        admin-state: enable
        family:
          ipv4: True
          ipv6: False
  
        import:
          policy: ["accept_all"]
        export:
          policy:
          - bgp_tenant_export
        send-communities:
          extended: False  # True value not allowed, on by default
  
  
    - path: configure/service/vprn[service-name=tenant]/bgp
      val:
        neighbor:
        - ip-address: "10.1.0.13"
          description: "ce1"
          peer-as: 65100
          group: "ebgp"
          admin-state: enable
          family:
            ipv4: True
            ipv6: False
ok: [pe2] => 
  msg: |-
    vrf configuration for pe2
    =========================================
    !
    mpls ip
    !
    router bgp 65001
    !
     vrf tenant
      router-id 10.0.0.4
      rd 65000:1
      route-target import vpn-ipv4 65000:1
      route-target export vpn-ipv4 65000:1
    !
      neighbor 10.1.0.17 remote-as 65101
      neighbor 10.1.0.17 description ce2
      neighbor 10.1.0.17 send-community standard large
    !
      address-family ipv4
        redistribute connected
  
        neighbor 10.1.0.17 activate

TASK [Deploy vrf configuration] ************************************************
skipping: [ce1]
skipping: [ce2]
skipping: [p1]
skipping: [p2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for pe2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update vrf node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/vrf/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [eos_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/eos.j2] ***
changed: [pe2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
ce1                        : ok=33   changed=5    unreachable=0    failed=0    skipped=24   rescued=0    ignored=0   
ce2                        : ok=32   changed=4    unreachable=0    failed=0    skipped=24   rescued=0    ignored=0   
dut                        : ok=50   changed=5    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
p1                         : ok=39   changed=6    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0   
p2                         : ok=39   changed=6    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0   
pe2                        : ok=47   changed=6    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   



The tested device (DUT) is a PE-router running MPLS/VPN with a simple VRF. Two
BGP-speaking CE-routers are attached to the VRF (one per PE-router)

The PE-router has to run OSPF and LDP with a P-router, exchange IPv4 routes
via BGP with the CE-router, convert VRF IPv4 routes into VPNv4 routes, and
pass them to another PE-router.

The validation tests check BGP prefixes on the CE-routers and perform
end-to-end connectivity tests between CE-router loopbacks.

