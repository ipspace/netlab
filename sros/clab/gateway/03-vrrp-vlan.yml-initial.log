[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [r2]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [r2]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/eos-clab.yml for r2
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/sros.yml for dut

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [r2]

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [dut]

TASK [Wait up to 180s for gNMI(TCP 57400) to be ready on clab-ml_17-dut] *******
ok: [dut -> localhost]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for r2, h1, h2, dut

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [dut]
ok: [r2]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [r2]

TASK [fail] ********************************************************************
skipping: [r2]
skipping: [h1]
skipping: [h2]
skipping: [dut]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [r2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [dut]
ok: [r2] => 
  msg: |-
    normalize configuration for r2
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0201
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0202
    !
    interface Ethernet3
     shutdown
     mac-address 52dc.cafe.0203

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
skipping: [dut]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for r2

TASK [eos_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [r2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for r2, h1, h2, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [dut]
ok: [r2]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [r2]

TASK [fail] ********************************************************************
skipping: [r2]
skipping: [h1]
skipping: [h2]
skipping: [dut]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [dut]
ok: [r2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.33.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.33.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:33::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:33::3/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.44.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.44.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:44::4/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:44::4/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
  
  
  
    updates:
  
    - path: configure/router[router-name=Base]
      val:
       ecmp: 64
  
  
  
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=system]
  
      val:
       admin-state: enable
       description: "System interface"
       ipv4:
        primary:
         address: "10.0.0.1"
         prefix-length: 32
  
  
  
  
  
    - path: configure/port[port-id=1/1/c2]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c2/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1514 # max 9800
        mode: network
  
  
  
    - path: configure/router[router-name=Base]/interface[interface-name=eth-1/1/c2]
  
      val:
       admin-state: enable
       description: "dut ~ [r2,h2] ()"
       ip-mtu: 1500
       port: "1/1/c2/1"
       ipv4:
        primary:
         address: "172.16.44.1"
         prefix-length: 24
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:cafe:44::1"
          prefix-length: 64
  
  
  
    - path: configure/router[router-name=Base]
      val:
        ipv6:
          router-advertisement:
            interface:
            - ip-int-name: eth-1/1/c2
              admin-state: enable
              min-advertisement-interval: 3
              max-advertisement-interval: 5
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    hostname r2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    ipv6 unicast-routing
    !
    !
    ip host dut 10.0.0.1 172.16.44.1 172.16.33.1
    ip host h1 172.16.33.3
    ip host h2 172.16.44.4
    ipv6 host dut 2001:db8:cafe:44::1
    ipv6 host h1 2001:db8:cafe:33::3
    ipv6 host h2 2001:db8:cafe:44::4
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.2/32
    !
    interface Ethernet1
     no switchport
     description r2 -> dut
    !
     mac-address 52dc.cafe.0201
     no shutdown
    !
    interface Ethernet2
     no switchport
     description r2 -> [dut,h2]
     ip address 172.16.44.2/24
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:cafe:44::2/64
    !
     mac-address 52dc.cafe.0202
     no shutdown
    !
    interface Ethernet3
     no switchport
     description [Access VLAN access] r2 -> h1
    !
     mac-address 52dc.cafe.0203
     no shutdown
    !
    interface Vlan1000
     description VLAN access (1000) -> [dut,h1]
     ip address 172.16.33.2/24
     ipv6 nd ra interval 5
     ipv6 address 2001:db8:cafe:33::2/64
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for r2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut

TASK [eos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/eos.j2] ***
changed: [r2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-flw_51ca.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update initial node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/initial/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [r2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, r2 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, r2 => (item=gateway)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, r2 => (item=routing)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [dut]
ok: [h1]
ok: [h2]
ok: [r2]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h2]
ok: [dut]
ok: [r2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [r2]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
ok: [dut]
ok: [r2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [r2] => 
  msg: |-
    vlan configuration for r2
    =========================================
    vlan 1000
     name access
    !
  
    !
    interface Ethernet1
     switchport
     switchport mode trunk
     switchport trunk allowed vlan 1000
     switchport trunk native vlan tag
    !
    interface Ethernet3
     switchport
     switchport access vlan 1000
    !
    interface Vlan1000
ok: [dut] => 
  msg: |-
    vlan configuration for dut
    =========================================
  
    updates:
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        mtu: 1518 # max 9800
        mode: access
        encap-type: dot1q
  
  
  
  
  
    - path: configure/port[port-id=1/1/c1]
      val:
       admin-state: enable
       connector:
        breakout: "c1-100g"
    - path: configure/port[port-id=1/1/c1/1]
      val:
       admin-state: enable
       ethernet:
        encap-type: dot1q
  
  
    - path: configure/service/vpls[service-name=vlan1000]
      val:
       service-id: 11000
       customer: "1"
       description: "[SubIf VLAN access] dut -> r2"
       sap:
       - sap-id: 1/1/c1/1:1000
       admin-state: enable
  
  
  
  
  
    - path: configure/service/ies[service-name=default]
      val:
       customer: "1"
       admin-state: enable
       service-id: 1
    #   ecmp: 64
  
    - path: configure/service/ies[service-name=default]/interface[interface-name=svi.1000]
  
      val:
       admin-state: enable
       description: "VLAN access (1000) ~ [r2,h1] ()"
       ip-mtu: 1500
       ipv4:
        primary:
         address: "172.16.33.1"
         prefix-length: 24
  
       ipv6:
        address:
        - ipv6-address: "2001:db8:cafe:33::1"
          prefix-length: 64
  
  
  
    - path: configure/router[router-name=Base]
      val:
        ipv6:
          router-advertisement:
            interface:
            - ip-int-name: svi.1000
              admin-state: enable
              min-advertisement-interval: 3
              max-advertisement-interval: 5
              use-virtual-mac: True
  
  
    - path: configure/service/vpls[service-name=vlan1000]
      val:
       service-id: 11000
       customer: "1"
       description: "VLAN access (1000) -> [r2,h1]"
       admin-state: enable
    - path: configure/service/vpls[service-name=vlan1000]
      val:
       routed-vpls: { }
  
    - path: configure/service/ies[service-name=default]
      val:
       interface:
       - interface-name: svi.1000
         vpls:
         - vpls-name: vlan1000

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for r2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update vlan node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/vlan/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [eos_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/eos.j2] ***
changed: [r2]

TASK [Figure out whether to deploy the module gateway on current device] *******
ok: [dut]
ok: [h1]
ok: [h2]
ok: [r2]

TASK [Find configuration template for gateway] *********************************
skipping: [h1]
skipping: [h2]
ok: [dut]
ok: [r2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [r2]

TASK [Find configuration deployment deploy_script for gateway] *****************
skipping: [h1]
skipping: [h2]
ok: [dut]
ok: [r2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [dut] => 
  msg: |-
    gateway configuration for dut
    =========================================
  
    updates:
  
    - path: configure/service/ies[service-name=default]
      val:
       customer: "1"
       admin-state: enable
       service-id: 1
    #   ecmp: 64
  
    - path: configure/service/ies[service-name=default]/interface[interface-name=svi.1000]
  
      val:
       ipv4:
        vrrp:
        - virtual-router-id: 217
          admin-state: enable
          ping-reply: True
          backup: [ "172.16.33.42" ]
          passive: False
          preempt: True
          priority: 30
       ipv6:
        address:
        - ipv6-address: "2001:db8:cafe:33::1"
          duplicate-address-detection: False
        link-local-address:
          address: "fe80::0001"
          duplicate-address-detection: False
        vrrp:
        - virtual-router-id: 217
          admin-state: enable
          ping-reply: True
          backup: [ "fe80::200:5eff:fe00:02d9", 2001:db8:cafe:33::2a ]
          passive: False
          preempt: True
          priority: 30
ok: [r2] => 
  msg: |-
    gateway configuration for r2
    =========================================
    no ip icmp redirect
    !
    interface Vlan1000
      vrrp 217 ipv4 version 3
      vrrp 217 ipv4 checksum pseudo-header exclude
      vrrp 217 ipv4 172.16.33.42
      vrrp 217 ipv6 2001:db8:cafe:33::2a
      vrrp 217 priority-level 20
      vrrp 217 preempt

TASK [Deploy gateway configuration] ********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sros.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/eos.yml for r2

TASK [Generate gNMI YAML configuration] ****************************************
ok: [dut]

TASK [Update gateway node configuration from gNMI template /home/pipi/net101/tools/netsim/ansible/templates/gateway/sros.j2] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [eos_config: deploying gateway from /home/pipi/net101/tools/netsim/ansible/templates/gateway/eos.j2] ***
changed: [r2]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [dut]
ok: [h1]
ok: [h2]
ok: [r2]

TASK [Find configuration template for routing] *********************************
skipping: [dut]
skipping: [r2]
ok: [h1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [r2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [dut]
skipping: [r2]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [r2]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.44.0/24 2>/dev/null; do
      : ; done
    #
    set +e
    echo Removing existing IPv6 routes
    while ip route del 2001:db8:cafe:44::/64 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.44.0/24 via 172.16.33.42 dev eth1 protocol static
    ip route add 2001:db8:cafe:44::/64 via 2001:db8:cafe:33::2a dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.33.0/24 2>/dev/null; do
      : ; done
    #
    set +e
    echo Removing existing IPv6 routes
    while ip route del 2001:db8:cafe:33::/64 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.33.0/24 via 172.16.44.1 dev eth1 protocol static
    ip route add 2001:db8:cafe:33::/64 via 2001:db8:cafe:44::1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [dut]
skipping: [r2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for routing based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-cvpks0a5.sh] ***********************
changed: [h2 -> localhost]
changed: [h1 -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=36   changed=3    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
h1                         : ok=33   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
h2                         : ok=33   changed=8    unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   
r2                         : ok=35   changed=4    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   



This lab tests IPv4/6 VRRP configuration on an access VLAN. It checks whether
the device-under-test (DUT) forwards traffic sent to the VRRP IP/MAC address,
whether it has correct VRRP priority, and whether the preemption mechanism
works.

