[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [x1]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/eos-clab.yml for x1

TASK [Wait for cEOS SSH daemon to start] ***************************************
ok: [x1]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [x1]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [x1] => 
  msg: |-
    normalize configuration for x1
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0201

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [eos_config: deploying normalize from /home/pipi/netlab_gh/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [x1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [x1]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    set -x
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 10.1.0.1/30 dev eth1 2>/dev/null
    set -e
    ip addr add 10.1.0.1/30 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
  
  
    #
    set -e
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    hostname x1
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    no ipv6 unicast-routing
    !
    !
    ip host dut 10.1.0.1
    !
    interface Management0
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.2/32
    !
    interface Ethernet1
     no switchport
     description x1 -> dut [external]
     ip address 10.1.0.2/30
    !
     mac-address 52dc.cafe.0201
     no shutdown
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [Define script filename and determine whether to execute in netns] ********
ok: [dut]

TASK [Create a temporary file for the rendered script] *************************
changed: [dut -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/bird-clab.j2] ***
changed: [dut -> localhost]

TASK [Copy script into running container at /tmp/config-dut_initial.sh] ********
skipping: [dut]

TASK [Execute /tmp/config-dut_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/bird-clab.j2] ***
skipping: [dut]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/bird-clab.j2 executed in netns] ***
changed: [dut -> localhost]

TASK [Remove temporary file /tmp/dut_initial-v117q73p.sh] **********************
changed: [dut -> localhost]

TASK [eos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/eos.j2] ***
changed: [x1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1 => (item=bfd)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1 => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1 => (item=bgp)

TASK [Figure out whether to deploy the module bfd on current device] ***********
ok: [dut]
ok: [x1]

TASK [Find configuration template for bfd] *************************************
ok: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Find configuration deployment deploy_script for bfd] *********************
ok: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    bfd configuration for dut
    =========================================
    # Bird BFD configuration is in daemon/bird/protocols.j2
ok: [x1] => 
  msg: |-
    bfd configuration for x1
    =========================================
    interface Ethernet1
     bfd interval 500 min_rx 500 multiplier 3
    !

TASK [Deploy bfd configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [Define script filename and determine whether to execute in netns] ********
ok: [dut]

TASK [Create a temporary file for the rendered script] *************************
changed: [dut -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/bfd/bird.j2] ***
changed: [dut -> localhost]

TASK [Copy script into running container at /tmp/config-dut_bfd.sh] ************
changed: [dut -> localhost]

TASK [Execute /tmp/config-dut_bfd.sh to deploy bfd config based on /home/pipi/netlab_gh/netsim/ansible/templates/bfd/bird.j2] ***
changed: [dut]

TASK [Container configuration for bfd based on /home/pipi/netlab_gh/netsim/ansible/templates/bfd/bird.j2 executed in netns] ***
skipping: [dut]

TASK [Remove temporary file /tmp/dut_bfd-mid4tq1w.sh] **************************
changed: [dut -> localhost]

TASK [eos_config: deploying bfd from /home/pipi/netlab_gh/netsim/ansible/templates/bfd/eos.j2] ***
changed: [x1]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [dut]
ok: [x1]

TASK [Find configuration template for routing] *********************************
skipping: [x1]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [x1]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [x1]
ok: [dut] => 
  msg: |-
    routing configuration for dut
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 10.1.0.2 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 10.1.0.2 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 10.1.0.2 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 10.1.0.2 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [x1]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for dut

TASK [Define script filename and determine whether to execute in netns] ********
ok: [dut]

TASK [Create a temporary file for the rendered script] *************************
changed: [dut -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [dut -> localhost]

TASK [Copy script into running container at /tmp/config-dut_routing.sh] ********
skipping: [dut]

TASK [Execute /tmp/config-dut_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [dut]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [dut -> localhost]

TASK [Remove temporary file /tmp/dut_routing-3tt0hxfw.sh] **********************
changed: [dut -> localhost]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [x1]

TASK [Find configuration template for bgp] *************************************
skipping: [dut]
ok: [x1]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [dut]
ok: [x1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [x1] => 
  msg: |-
    bgp configuration for x1
    =========================================
    !
    !
    router bgp 65100
      bgp advertise-inactive
      bgp log-neighbor-changes
      no bgp default ipv4-unicast
      no bgp default ipv6-unicast
      router-id 10.0.0.2
    !
      neighbor 10.1.0.1 remote-as 65000
      neighbor 10.1.0.1 description dut
      neighbor 10.1.0.1 send-community standard large
    !
    !
     address-family ipv4
  
      network 10.0.0.2/32
    !
    !
    !
      neighbor 10.1.0.1 activate
    !

TASK [Deploy bgp configuration] ************************************************
skipping: [dut]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [eos_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/eos.j2] ***
changed: [x1]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
skipping: [dut] => (item=static_bfd) 
skipping: [dut] => (item=bgp.session) 
skipping: [dut]
skipping: [x1] => (item=bgp.session) 
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-custom-config.yml for x1 => (item=static_bfd)

TASK [Find configuration template] *********************************************
ok: [x1]

TASK [fail] ********************************************************************
skipping: [x1]

TASK [Check is the configuration template is a file] ***************************
ok: [x1 -> localhost]

TASK [fail] ********************************************************************
skipping: [x1]

TASK [Process template /home/pipi/net101/tools/tests/integration/bgp.session/static_bfd/eos.j2 for x1] ***
skipping: [x1]

TASK [Find custom configuration deployment script] *****************************
ok: [x1]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for x1

TASK [eos_config: deploying static_bfd from /home/pipi/net101/tools/tests/integration/bgp.session/static_bfd/eos.j2] ***
changed: [x1]

PLAY RECAP *********************************************************************
dut                        : ok=43   changed=13   unreachable=0    failed=0    skipped=18   rescued=0    ignored=0   
x1                         : ok=41   changed=5    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   



This lab tests the BGP BFD functionality. The EBGP session between the probe
and the lab device should trigger a BFD session between them.

