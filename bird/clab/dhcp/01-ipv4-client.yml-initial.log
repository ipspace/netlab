[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [c1]
ok: [c2]
ok: [server]

TASK [Find device readiness script] ********************************************
ok: [c1]
ok: [c2]
ok: [server]

TASK [Wait for device to become ready] *****************************************
skipping: [c1]
skipping: [c2]
skipping: [server]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, c2, server

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [c1]
ok: [c2]
ok: [server]

TASK [Find configuration template for initial] *********************************
ok: [c1]
ok: [c2]
ok: [server]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [c1] => 
  msg: |-
    initial configuration for c1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first usable default gateway
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [c2] => 
  msg: |-
    initial configuration for c2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first usable default gateway
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [server] => 
  msg: |-
    initial configuration for server
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first usable default gateway
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [c1]
ok: [c2]
ok: [server]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/linux/initial-clab.yml for c1, c2, server

TASK [set_fact] ****************************************************************
ok: [c1]
ok: [c2]
ok: [server]

TASK [Create initial container setup from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [c1 -> localhost]
changed: [server -> localhost]
changed: [c2 -> localhost]

TASK [Initial container configuration via /tmp/config-XfmQWPCj-c1.sh] **********
changed: [c2 -> localhost]
changed: [c1 -> localhost]
changed: [server -> localhost]

TASK [file] ********************************************************************
changed: [c2 -> localhost]
changed: [c1 -> localhost]
changed: [server -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [c1]
ok: [c2]
ok: [server]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, c2, server => (item=dhcp)

TASK [Figure out whether to deploy the module dhcp on current device] **********
ok: [c1]
ok: [c2]
ok: [server]

TASK [Find configuration template for dhcp] ************************************
skipping: [server]
ok: [c1]
ok: [c2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [server]
ok: [c1] => 
  msg: |-
    dhcp configuration for c1
    =========================================
    # This is a placeholder file. DHCP is configured during initial configuration
    #
    if [ `grep 'ID=ubuntu' /etc/os-release` ]; then
      echo "DHCP is supported"
    else
      echo "netlab supports DHCP only on Ubuntu" >&2
      exit 1
    fi
ok: [c2] => 
  msg: |-
    dhcp configuration for c2
    =========================================
    # This is a placeholder file. DHCP is configured during initial configuration
    #
    if [ `grep 'ID=ubuntu' /etc/os-release` ]; then
      echo "DHCP is supported"
    else
      echo "netlab supports DHCP only on Ubuntu" >&2
      exit 1
    fi

TASK [Find configuration deployment deploy_script for dhcp] ********************
skipping: [server]
ok: [c1]
ok: [c2]

TASK [Deploy dhcp configuration] ***********************************************
skipping: [server]
included: /home/pipi/net101/tools/netsim/ansible/tasks/linux/dhcp.yml for c1, c2

TASK [Install dnsmasq] *********************************************************
skipping: [c1]
skipping: [c2]

TASK [Install isc-dhcp-relay] **************************************************
skipping: [c1]
skipping: [c2]

TASK [Create DHCP deployment script] *******************************************
fatal: [c1]: FAILED! => 
  msg: |-
    Failed to get information on remote file (/tmp/config.sh): /bin/sh: 1: /usr/bin/python3: not found
fatal: [c2]: FAILED! => 
  msg: |-
    Failed to get information on remote file (/tmp/config.sh): /bin/sh: 1: /usr/bin/python3: not found

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
c1                         : ok=19   changed=3    unreachable=0    failed=1    skipped=3    rescued=0    ignored=0   
c2                         : ok=19   changed=3    unreachable=0    failed=1    skipped=3    rescued=0    ignored=0   
server                     : ok=15   changed=3    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   

Fatal error in netlab: Executing Ansible playbook /home/pipi/net101/tools/netsim/ansible/initial-config.ansible failed
Error executing ansible-playbook /home/pipi/net101/tools/netsim/ansible/initial-config.ansible:
  Command '['ansible-playbook', '/home/pipi/net101/tools/netsim/ansible/initial-config.ansible']' returned non-zero exit status 2.
