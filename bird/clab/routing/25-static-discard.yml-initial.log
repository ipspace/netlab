[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, v1, v2, v3

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Find configuration template for normalize] *******************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3, v1, v2, v3

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    set -x
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    set +e
    ip addr del 10.0.0.1/32 dev lo 2>/dev/null
    set -e
    ip addr add 10.0.0.1/32 dev lo
    sysctl -w net.ipv6.conf.lo.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:1:1::1/64 dev lo 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:1:1::1/64 dev lo
  
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2::1/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2::1/64 dev eth1
    ip link set dev eth1 mtu 1500
  
    ip link set dev eth2 up
    set +e
    ip addr del 172.16.42.1/24 dev eth2 2>/dev/null
    set -e
    ip addr add 172.16.42.1/24 dev eth2
    sysctl -w net.ipv6.conf.eth2.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:42::1/64 dev eth2 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:42::1/64 dev eth2
    ip link set dev eth2 mtu 1500
  
  
    #
    set -e
    ip addr add fe80::1/64 dev lo scope link
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2::2/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2::2/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.42.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.42.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:42::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:42::3/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.42.42/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.42.42/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:42::2a/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:42::2a/64 dev eth1
    ip link set dev eth1 mtu 1500
ok: [v1] => 
  msg: |-
    initial configuration for v1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
ok: [v2] => 
  msg: |-
    initial configuration for v2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
ok: [v3] => 
  msg: |-
    initial configuration for v3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for dut, h1, h2, h3, v1, v2, v3

TASK [Define script filename and determine whether to execute in netns] ********
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [v1]
ok: [v2]
ok: [v3]

TASK [Create a temporary file for the rendered script] *************************
changed: [v1 -> localhost]
changed: [dut -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [v2 -> localhost]
changed: [h3 -> localhost]
changed: [v3 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/bird-clab.j2] ***
changed: [v1 -> localhost]
changed: [v3 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [dut -> localhost]
changed: [h2 -> localhost]
changed: [v2 -> localhost]

TASK [Copy script into running container at /tmp/config-dut_initial.sh] ********
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Execute /tmp/config-dut_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/bird-clab.j2] ***
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [v1]
skipping: [v2]
skipping: [v3]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/bird-clab.j2 executed in netns] ***
changed: [v2 -> localhost]
changed: [v1 -> localhost]
changed: [v3 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [dut -> localhost]

TASK [Remove temporary file /tmp/dut_initial-qam2mfrg.sh] **********************
changed: [dut -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [v2 -> localhost]
changed: [v1 -> localhost]
changed: [v3 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h2, h3 => (item=routing)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Find configuration template for routing] *********************************
skipping: [dut]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [dut]
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.42.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.42.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.42.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [dut]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]

TASK [Create a temporary file for the rendered script] *************************
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]

TASK [Container configuration for routing based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-5ff2agw6.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=20   changed=4    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
h1                         : ok=29   changed=8    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   
h2                         : ok=29   changed=8    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   
h3                         : ok=29   changed=8    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   
v1                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
v2                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
v3                         : ok=17   changed=4    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   



Use this topology to test 'discard' IPv4 and IPv6 static routes.
H1 should be able to reach H2 but not H3 (due to a discard static route)

