[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [s1]
ok: [h2]
ok: [h3]
ok: [s2]
ok: [h4]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [s1]
ok: [h4]
ok: [h3]
ok: [s2]

TASK [Wait for device to become ready] *****************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [h3]
ok: [s1]
ok: [h4]
ok: [s2]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [h4]
ok: [s1]
ok: [h3]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Deploy normalize configuration] ******************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    lldp
    !
  
    vrf tenant
        rd 65000:1
    !
  
        address-family ipv4 unicast
            route-target import 65000:1
            route-target export 65000:1
        exit-address-family
  
  
    !
    vlan 1001
     name blue
    !
    vlan 1002
     name green
    !
    vlan 1000
     name red
    !
  
    !
  
    !
    interface loopback 0
        ip address 10.0.0.1/32
    !
    interface mgmt
        no lldp transmit
        no lldp receive
    !
  
  
  
    interface 1/1/1
        shutdown
        mtu 9198
        ip mtu 1600
        description s1 -> s2
        ip address 10.1.0.1/30
        no shutdown
    !
  
  
    interface 1/1/2
        shutdown
        mtu 9198
        description [Access VLAN red] s1 -> h1
        no shutdown
    !
  
  
    interface 1/1/3
        shutdown
        mtu 9198
        description [Access VLAN green] s1 -> h3
        no shutdown
    !
  
  
    interface vlan1000
        vrf attach tenant
        description VLAN red (1000) -> [h1,s2]
        ip address 172.16.0.1/24
    !
  
  
    interface vlan1002
        vrf attach tenant
        description VLAN green (1002) -> [h3] [stub]
        ip address 172.16.2.1/24
    !
  
  
    interface vlan1001
        vrf attach tenant
        description VLAN blue (1001) -> [h2,s2]
        ip address 172.16.1.1/24
    !
    !
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    hostname s2
    !
    lldp
    !
  
    vrf tenant
        rd 65000:1
    !
  
        address-family ipv4 unicast
            route-target import 65000:1
            route-target export 65000:1
        exit-address-family
  
  
    !
    vlan 1001
     name blue
    !
    vlan 1003
     name purple
    !
    vlan 1000
     name red
    !
  
    !
  
    !
    interface loopback 0
        ip address 10.0.0.2/32
    !
    interface mgmt
        no lldp transmit
        no lldp receive
    !
  
  
  
    interface 1/1/1
        shutdown
        mtu 9198
        ip mtu 1600
        description s2 -> s1
        ip address 10.1.0.2/30
        no shutdown
    !
  
  
    interface 1/1/2
        shutdown
        mtu 9198
        description [Access VLAN blue] s2 -> h2
        no shutdown
    !
  
  
    interface 1/1/3
        shutdown
        mtu 9198
        description [Access VLAN purple] s2 -> h4
        no shutdown
    !
  
  
    interface vlan1001
        vrf attach tenant
        description VLAN blue (1001) -> [s1,h2]
        ip address 172.16.1.2/24
    !
  
  
    interface vlan1003
        vrf attach tenant
        description VLAN purple (1003) -> [h4] [stub]
        ip address 172.16.3.2/24
    !
  
  
    interface vlan1000
        vrf attach tenant
        description VLAN red (1000) -> [h1,s1]
        ip address 172.16.0.2/24
    !
    !
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    hostname h4
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 s1
    10.1.0.1 1-1-1.s1
    172.16.0.1 vlan1000.tenant.s1
    172.16.2.1 vlan1002.tenant.s1
    172.16.1.1 vlan1001.tenant.s1
    10.0.0.2 s2
    10.1.0.2 1-1-1.s2
    172.16.1.2 vlan1001.tenant.s2
    172.16.3.2 vlan1003.tenant.s2
    172.16.0.2 vlan1000.tenant.s2
    172.16.0.3 h1 eth1.h1
    172.16.1.4 h2 eth1.h2
    172.16.2.5 h3 eth1.h3
    172.16.3.6 h4 eth1.h4
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h4
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing and bonds, including any static routes
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.16.3.6/24
          routes:
          - to: 172.16.0.0/16
            via: 172.16.3.2
          - to: 10.0.0.0/24
            via: 172.16.3.2
          - to: 10.1.0.0/16
            via: 172.16.3.2
          - to: 10.2.0.0/24
            via: 172.16.3.2
    SCRIPT
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    hostname h3
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 s1
    10.1.0.1 1-1-1.s1
    172.16.0.1 vlan1000.tenant.s1
    172.16.2.1 vlan1002.tenant.s1
    172.16.1.1 vlan1001.tenant.s1
    10.0.0.2 s2
    10.1.0.2 1-1-1.s2
    172.16.1.2 vlan1001.tenant.s2
    172.16.3.2 vlan1003.tenant.s2
    172.16.0.2 vlan1000.tenant.s2
    172.16.0.3 h1 eth1.h1
    172.16.1.4 h2 eth1.h2
    172.16.2.5 h3 eth1.h3
    172.16.3.6 h4 eth1.h4
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h3
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing and bonds, including any static routes
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.16.2.5/24
          routes:
          - to: 172.16.0.0/16
            via: 172.16.2.1
          - to: 10.0.0.0/24
            via: 172.16.2.1
          - to: 10.1.0.0/16
            via: 172.16.2.1
          - to: 10.2.0.0/24
            via: 172.16.2.1
    SCRIPT
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    hostname h1
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 s1
    10.1.0.1 1-1-1.s1
    172.16.0.1 vlan1000.tenant.s1
    172.16.2.1 vlan1002.tenant.s1
    172.16.1.1 vlan1001.tenant.s1
    10.0.0.2 s2
    10.1.0.2 1-1-1.s2
    172.16.1.2 vlan1001.tenant.s2
    172.16.3.2 vlan1003.tenant.s2
    172.16.0.2 vlan1000.tenant.s2
    172.16.0.3 h1 eth1.h1
    172.16.1.4 h2 eth1.h2
    172.16.2.5 h3 eth1.h3
    172.16.3.6 h4 eth1.h4
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h1
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing and bonds, including any static routes
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.16.0.3/24
          routes:
          - to: 172.16.0.0/16
            via: 172.16.0.1
          - to: 10.0.0.0/24
            via: 172.16.0.1
          - to: 10.1.0.0/16
            via: 172.16.0.1
          - to: 10.2.0.0/24
            via: 172.16.0.1
    SCRIPT
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    hostname h2
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 s1
    10.1.0.1 1-1-1.s1
    172.16.0.1 vlan1000.tenant.s1
    172.16.2.1 vlan1002.tenant.s1
    172.16.1.1 vlan1001.tenant.s1
    10.0.0.2 s2
    10.1.0.2 1-1-1.s2
    172.16.1.2 vlan1001.tenant.s2
    172.16.3.2 vlan1003.tenant.s2
    172.16.0.2 vlan1000.tenant.s2
    172.16.0.3 h1 eth1.h1
    172.16.1.4 h2 eth1.h2
    172.16.2.5 h3 eth1.h3
    172.16.3.6 h4 eth1.h4
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h2
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing and bonds, including any static routes
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.16.1.4/24
          routes:
          - to: 172.16.0.0/16
            via: 172.16.1.2
          - to: 10.0.0.0/24
            via: 172.16.1.2
          - to: 10.1.0.0/16
            via: 172.16.1.2
          - to: 10.2.0.0/24
            via: 172.16.1.2
    SCRIPT
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [s1]
ok: [s2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for s1, s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux.yml for h1, h2, h3, h4

TASK [tempfile] ****************************************************************
changed: [s2 -> localhost]
changed: [s1 -> localhost]

TASK [template] ****************************************************************
changed: [s2 -> localhost]
changed: [s1 -> localhost]

TASK [aoscx_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/arubacx.j2] ***
changed: [s2]
changed: [s1]

TASK [file] ********************************************************************
changed: [s2 -> localhost]
changed: [s1 -> localhost]

TASK [template] ****************************************************************
changed: [h1]
changed: [h3]
changed: [h4]
changed: [h2]

TASK [Execute /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux.j2] ***
changed: [h1]
changed: [h4]
changed: [h3]
changed: [h2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vrf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vxlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=evpn)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    !
    !
    interface 1/1/2
     no routing
     vlan access 1000
    !
    interface 1/1/3
     no routing
     vlan access 1002
    !
    interface vlan1000
    !
    interface vlan1002
    !
    interface vlan1001
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    !
    !
    interface 1/1/2
     no routing
     vlan access 1001
    !
    interface 1/1/3
     no routing
     vlan access 1003
    !
    interface vlan1001
    !
    interface vlan1003
    !
    interface vlan1000

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s1]
ok: [s2]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for s1, s2

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [template] ****************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [aoscx_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/arubacx.j2] ***
changed: [s1]
changed: [s2]

TASK [file] ********************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [s1]
ok: [s2]

TASK [Find configuration template for bgp] *************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    bgp configuration for s1
    =========================================
    !
    !
    router bgp 65000
      bgp log-neighbor-changes
      timers bgp connect-retry 10
      bgp router-id 10.0.0.1
      neighbor 10.0.0.2 remote-as 65000
      neighbor 10.0.0.2 description s2
      neighbor 10.0.0.2 update-source loopback 0
  
    !
      address-family ipv4 unicast
    !
  
        network 10.0.0.1/32
    !
    !
        neighbor 10.0.0.2 activate
        neighbor 10.0.0.2 advertisement-interval 1
        neighbor 10.0.0.2 send-community both
        neighbor 10.0.0.2 next-hop-self
  
    !
ok: [s2] => 
  msg: |-
    bgp configuration for s2
    =========================================
    !
    !
    router bgp 65000
      bgp log-neighbor-changes
      timers bgp connect-retry 10
      bgp router-id 10.0.0.2
      neighbor 10.0.0.1 remote-as 65000
      neighbor 10.0.0.1 description s1
      neighbor 10.0.0.1 update-source loopback 0
  
    !
      address-family ipv4 unicast
    !
  
        network 10.0.0.2/32
    !
    !
        neighbor 10.0.0.1 activate
        neighbor 10.0.0.1 advertisement-interval 1
        neighbor 10.0.0.1 send-community both
        neighbor 10.0.0.1 next-hop-self
  
    !

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [s1]
ok: [s2]

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for s1, s2

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [template] ****************************************************************
changed: [s2 -> localhost]
changed: [s1 -> localhost]

TASK [aoscx_config: deploying bgp from /home/pipi/net101/tools/netsim/ansible/templates/bgp/arubacx.j2] ***
changed: [s2]
changed: [s1]

TASK [file] ********************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for ospf] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    !
    router ospf 1
        router-id 10.0.0.1
  
  
  
  
  
        area 0.0.0.0
        area 0.0.0.0
  
    !
    interface loopback 0
        ip ospf 1 area 0.0.0.0
    !
    interface 1/1/1
    ! s1 -> s2
        ip ospf 1 area 0.0.0.0
        ip ospf network point-to-point
    !
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    !
    router ospf 1
        router-id 10.0.0.2
  
  
  
  
  
        area 0.0.0.0
        area 0.0.0.0
  
    !
    interface loopback 0
        ip ospf 1 area 0.0.0.0
    !
    interface 1/1/1
    ! s2 -> s1
        ip ospf 1 area 0.0.0.0
        ip ospf network point-to-point
    !

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [s1]
ok: [s2]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for s1, s2

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [template] ****************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [aoscx_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/arubacx.j2] ***
changed: [s2]
changed: [s1]

TASK [file] ********************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vrf] *************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vrf configuration for s1
    =========================================
  
    !
    router ospf 2 vrf tenant
        router-id 10.0.0.1
  
  
  
     redistribute bgp
     redistribute connected
  
  
        area 0.0.0.0
        area 0.0.0.0
        area 0.0.0.0
  
    !
    interface vlan1000
    ! VLAN red (1000) -> [h1,s2]
        ip ospf 2 area 0.0.0.0
    !
    interface vlan1002
    ! VLAN green (1002) -> [h3]
        ip ospf 2 area 0.0.0.0
        ip ospf network point-to-point
        ip ospf passive
    !
    interface vlan1001
    ! VLAN blue (1001) -> [h2,s2]
        ip ospf 2 area 0.0.0.0
    !
  
  
  
    !
    router bgp 65000
      vrf tenant
      bgp router-id 10.0.0.1
  
  
     address-family ipv4 unicast
      redistribute local loopback
      redistribute connected
      redistribute ospf
    !
    !
ok: [s2] => 
  msg: |-
    vrf configuration for s2
    =========================================
  
    !
    router ospf 2 vrf tenant
        router-id 10.0.0.2
  
  
  
     redistribute bgp
     redistribute connected
  
  
        area 0.0.0.0
        area 0.0.0.0
        area 0.0.0.0
  
    !
    interface vlan1001
    ! VLAN blue (1001) -> [s1,h2]
        ip ospf 2 area 0.0.0.0
    !
    interface vlan1003
    ! VLAN purple (1003) -> [h4]
        ip ospf 2 area 0.0.0.0
        ip ospf network point-to-point
        ip ospf passive
    !
    interface vlan1000
    ! VLAN red (1000) -> [h1,s1]
        ip ospf 2 area 0.0.0.0
    !
  
  
  
    !
    router bgp 65000
      vrf tenant
      bgp router-id 10.0.0.2
  
  
     address-family ipv4 unicast
      redistribute local loopback
      redistribute connected
      redistribute ospf
    !
    !

TASK [Find configuration deployment deploy_script for vrf] *********************
ok: [s1]
ok: [s2]

TASK [Deploy vrf configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for s1, s2

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [template] ****************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [aoscx_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/arubacx.j2] ***
changed: [s2]
changed: [s1]

TASK [file] ********************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vxlan] ***********************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    !
    interface vxlan 1
      source ip 10.0.0.1
      no shutdown
      vni 21000
        vlan 1000
      vni 21001
        vlan 1001
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    !
    interface vxlan 1
      source ip 10.0.0.2
      no shutdown
      vni 21000
        vlan 1000
      vni 21001
        vlan 1001

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [s1]
ok: [s2]

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for s1, s2

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [template] ****************************************************************
changed: [s2 -> localhost]
changed: [s1 -> localhost]

TASK [aoscx_config: deploying vxlan from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/arubacx.j2] ***
changed: [s1]
changed: [s2]

TASK [file] ********************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [Figure out whether to deploy the module evpn on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for evpn] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    evpn configuration for s1
    =========================================
    !
    router bgp 65000
    !
     address-family l2vpn evpn
      neighbor 10.0.0.2 activate
      neighbor 10.0.0.2 send-community extended
    !
  
    evpn
     arp-suppression
     redistribute local-mac
     redistribute local-svi
     vlan 1001
      rd 10.0.0.1:1001
      route-target import 65000:1001
      route-target export 65000:1001
      route-target both 65000:1001
  
     vlan 1000
      rd 10.0.0.1:1000
      route-target import 65000:1000
      route-target export 65000:1000
      route-target both 65000:1000
  
  
    evpn
    vrf tenant
      route-target import 65000:1 evpn
      route-target export 65000:1 evpn
    interface vxlan 1
ok: [s2] => 
  msg: |-
    evpn configuration for s2
    =========================================
    !
    router bgp 65000
    !
     address-family l2vpn evpn
      neighbor 10.0.0.1 activate
      neighbor 10.0.0.1 send-community extended
    !
  
    evpn
     arp-suppression
     redistribute local-mac
     redistribute local-svi
     vlan 1001
      rd 10.0.0.2:1001
      route-target import 65000:1001
      route-target export 65000:1001
      route-target both 65000:1001
  
     vlan 1000
      rd 10.0.0.2:1000
      route-target import 65000:1000
      route-target export 65000:1000
      route-target both 65000:1000
  
  
    evpn
    vrf tenant
      route-target import 65000:1 evpn
      route-target export 65000:1 evpn
    interface vxlan 1

TASK [Find configuration deployment deploy_script for evpn] ********************
ok: [s1]
ok: [s2]

TASK [Deploy evpn configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for s1, s2

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [template] ****************************************************************
changed: [s2 -> localhost]
changed: [s1 -> localhost]

TASK [aoscx_config: deploying evpn from /home/pipi/net101/tools/netsim/ansible/templates/evpn/arubacx.j2] ***
changed: [s1]
changed: [s2]

TASK [file] ********************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=13   changed=2    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
h2                         : ok=13   changed=2    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
h3                         : ok=13   changed=2    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
h4                         : ok=13   changed=2    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
s1                         : ok=76   changed=28   unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
s2                         : ok=76   changed=28   unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   



The devices under test are VLAN-to-VXLAN routers using asymmetric IRB with
EVPN control plane and running OSPF within the VRF (across VXLAN segments) to
exchange information about non-EVPN subnets.

All hosts should be able to ping each other

