/home/pipi/.local/lib/python3.10/site-packages/paramiko/pkey.py:100: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "cipher": algorithms.TripleDES,
/home/pipi/.local/lib/python3.10/site-packages/paramiko/transport.py:259: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "class": algorithms.TripleDES,
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]
skipping: [s2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, s1, s2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h3]
ok: [h2]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]
ok: [s2] => 
  msg: |-
    normalize configuration for s2
    =========================================
    !
    interface Ethernet1
     shutdown
     mac-address 52dc.cafe.0601
    !
    interface Ethernet2
     shutdown
     mac-address 52dc.cafe.0602
    !
    interface Ethernet3
     shutdown
     mac-address 52dc.cafe.0603

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [eos_config: deploying normalize from /home/pipi/netlab_gh/netsim/ansible/templates/normalize/eos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [s2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, s1, s2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.1/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    lldp
    !
  
    vrf tenant
        rd 65000:1
    !
  
  
  
    !
    vlan 1000
     name red
    !
    vlan 1001
     name blue
    !
  
    !
  
    !
    interface mgmt
        no lldp transmit
        no lldp receive
    !
  
  
    interface loopback 0
        ip address 10.0.0.5/32
    !
  
    interface 1/1/1
        shutdown
        mtu 9198
        ip mtu 1600
        description s1 -> s2
        ip address 10.1.0.1/30
        no shutdown
    !
  
    interface 1/1/2
        shutdown
        mtu 9198
        description [Access VLAN red] s1 -> h1
        no shutdown
    !
  
    interface 1/1/3
        shutdown
        mtu 9198
        description [Access VLAN blue] s1 -> h3
        no shutdown
    !
  
    interface vlan1000
        vrf attach tenant
        description VLAN red (1000) -> [h1,h2,s2]
    !
  
    interface vlan1001
        vrf attach tenant
        description VLAN blue (1001) -> [h3,h4,s2]
    !
    !
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    hostname s2
    !
    logging monitor debugging
    aaa authorization exec default local
    !
    lldp run
    ip routing
    no ipv6 unicast-routing
    !
    vrf instance tenant
     rd 65000:1
    !
    !
    ip host h1 172.31.1.1
    ip host h2 172.31.1.2
    ip host h3 172.31.1.3
    ip host h4 172.31.1.4
    ip host s1 10.0.0.5 10.1.0.1
    !
    interface Management1
     no lldp transmit
     no lldp receive
    !
    interface Loopback0
     ip address 10.0.0.6/32
    !
    interface Ethernet1
     no switchport
     mtu 1600
     description s2 -> s1
     ip address 10.1.0.2/30
    !
     mac-address 52dc.cafe.0601
     no shutdown
    !
    interface Ethernet2
     no switchport
     description [Access VLAN red] s2 -> h2
    !
     mac-address 52dc.cafe.0602
     no shutdown
    !
    interface Ethernet3
     no switchport
     description [Access VLAN blue] s2 -> h4
    !
     mac-address 52dc.cafe.0603
     no shutdown
    !
    interface Vlan1000
     vrf tenant
     description VLAN red (1000) -> [h1,s1,h2]
    !
    interface Vlan1001
     vrf tenant
     description VLAN blue (1001) -> [h3,s1,h4]
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/arubacx.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-6dti1vfp.sh] ***********************
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]

TASK [template] ****************************************************************
changed: [s1 -> localhost]

TASK [aoscx_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/arubacx.j2] ***
changed: [s1]

TASK [file] ********************************************************************
changed: [s1 -> localhost]

TASK [eos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/eos.j2] ***
changed: [s2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h2]
ok: [h1]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, s1, s2 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, s1, s2 => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, s1, s2 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, s1, s2 => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, s1, s2 => (item=vrf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, s1, s2 => (item=vxlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, s1, s2 => (item=evpn)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    !
    !
    interface 1/1/2
     no routing
     vlan access 1000
    !
    interface 1/1/3
     no routing
     vlan access 1001
    !
    interface vlan1000
    !
    interface vlan1001
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    vlan 1000
     name red
    !
    vlan 1001
     name blue
    !
  
    !
    interface Ethernet2
     switchport
     switchport access vlan 1000
    !
    interface Ethernet3
     switchport
     switchport access vlan 1001
    !
    interface Vlan1000
    !
    interface Vlan1001

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/arubacx.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]

TASK [template] ****************************************************************
changed: [s1 -> localhost]

TASK [aoscx_config: deploying vlan from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/arubacx.j2] ***
changed: [s1]

TASK [file] ********************************************************************
changed: [s1 -> localhost]

TASK [eos_config: deploying vlan from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Find configuration template for routing] *********************************
ok: [h1]
ok: [h2]
skipping: [s1]
ok: [h3]
skipping: [s2]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for routing] *****************
ok: [h1]
skipping: [s1]
ok: [h2]
skipping: [s2]
ok: [h4]
ok: [h3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    routing configuration for h4
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    #
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [s1]
skipping: [s2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-x9mlq4nz.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Find configuration template for ospf] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    !
    router ospf 1
        router-id 10.0.0.5
  
  
  
  
  
        area 0.0.0.0
        area 0.0.0.0
  
    !
    interface loopback 0
        ip ospf 1 area 0.0.0.0
    !
    interface 1/1/1
    ! s1 -> s2
        ip ospf 1 area 0.0.0.0
        ip ospf network point-to-point
    !
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    !
    ! OSPFv2 configuration
    !
    router ospf 1
     router-id 10.0.0.6
     interface unnumbered hello mask tx 0.0.0.0
     timers spf delay initial 100 200 500
     timers lsa rx min interval 100
     timers lsa tx delay initial 100 200 500
  
  
    !
    interface Loopback0
    !
     ip ospf area 0.0.0.0
    !
    interface Ethernet1
    ! s2 -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Deploy ospf configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/arubacx.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]

TASK [template] ****************************************************************
changed: [s1 -> localhost]

TASK [aoscx_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/arubacx.j2] ***
changed: [s1]

TASK [file] ********************************************************************
changed: [s1 -> localhost]

TASK [eos_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Find configuration template for bgp] *************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1] => 
  msg: |-
    bgp configuration for s1
    =========================================
    !
    !
    router bgp 65000
      bgp log-neighbor-changes
      timers bgp connect-retry 10
      bgp router-id 10.0.0.5
      neighbor 10.0.0.6 remote-as 65000
      neighbor 10.0.0.6 description s2
      neighbor 10.0.0.6 update-source loopback 0
  
    !
      address-family ipv4 unicast
    !
  
        network 10.0.0.5/32
    !
    !
        neighbor 10.0.0.6 activate
        neighbor 10.0.0.6 advertisement-interval 1
        neighbor 10.0.0.6 send-community both
        neighbor 10.0.0.6 next-hop-self
  
    !
ok: [s2] => 
  msg: |-
    bgp configuration for s2
    =========================================
    !
    route-map next-hop-self-ipv4 permit 10
       match route-type external
       set ip next-hop peer-address
    !
    route-map next-hop-self-ipv4 permit 20
    !
    !
    router bgp 65000
      bgp advertise-inactive
      bgp log-neighbor-changes
      no bgp default ipv4-unicast
      no bgp default ipv6-unicast
      router-id 10.0.0.6
    !
      neighbor 10.0.0.5 remote-as 65000
      neighbor 10.0.0.5 description s1
      neighbor 10.0.0.5 update-source Loopback0
      neighbor 10.0.0.5 send-community standard extended large
    !
    !
     address-family ipv4
  
      network 10.0.0.6/32
    !
    !
    !
      neighbor 10.0.0.5 activate
      neighbor 10.0.0.5 route-map next-hop-self-ipv4 out
    !

TASK [Deploy bgp configuration] ************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/arubacx.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]

TASK [template] ****************************************************************
changed: [s1 -> localhost]

TASK [aoscx_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/arubacx.j2] ***
changed: [s1]

TASK [file] ********************************************************************
changed: [s1 -> localhost]

TASK [eos_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Find configuration template for vrf] *************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1] => 
  msg: |-
    vrf configuration for s1
    =========================================
  
    !
    router bgp 65000
      vrf tenant
      bgp router-id 10.0.0.5
ok: [s2] => 
  msg: |-
    vrf configuration for s2
    =========================================
    !
    mpls ip
    !
    router bgp 65000
    !
     vrf tenant
      router-id 10.0.0.6
      rd 65000:1

TASK [Deploy vrf configuration] ************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/arubacx.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]

TASK [template] ****************************************************************
changed: [s1 -> localhost]

TASK [aoscx_config: deploying vrf from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/arubacx.j2] ***
changed: [s1]

TASK [file] ********************************************************************
changed: [s1 -> localhost]

TASK [eos_config: deploying vrf from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Find configuration template for vxlan] ***********************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vxlan] *******************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s2]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    !
    interface vxlan 1
      source ip 10.0.0.5
      no shutdown
      vni 1000
        vlan 1000
      vni 1001
        vlan 1001
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    interface vxlan 1
      vxlan source-interface Loopback0
      vxlan vlan 1000 vni 1000
      vxlan vlan 1001 vni 1001

TASK [Deploy vxlan configuration] **********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/arubacx.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]

TASK [template] ****************************************************************
changed: [s1 -> localhost]

TASK [aoscx_config: deploying vxlan from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/arubacx.j2] ***
changed: [s1]

TASK [file] ********************************************************************
changed: [s1 -> localhost]

TASK [eos_config: deploying vxlan from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/eos.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module evpn on current device] **********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Find configuration template for evpn] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for evpn] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
ok: [s2] => 
  msg: |-
    evpn configuration for s2
    =========================================
    !
    router bgp 65000
     address-family evpn
    !
      neighbor 10.0.0.5 activate
    !
     vlan-aware-bundle tenant
      rd 65000:1
      route-target import 65000:1
      route-target export 65000:1
      redistribute learned
      vlan 1000,1001
ok: [s1] => 
  msg: |-
    evpn configuration for s1
    =========================================
    !
    router bgp 65000
    !
     address-family l2vpn evpn
      neighbor 10.0.0.6 activate
      neighbor 10.0.0.6 send-community extended
    !
  
    evpn
     arp-suppression
     redistribute local-mac
     redistribute local-svi
    !
     vlan-aware-bundle tenant
      rd 65000:1
      route-target import 65000:1
      route-target export 65000:1
      route-target both 65000:1
      redistribute host-route
      vlan 1000,1001
  
    evpn
    interface vxlan 1

TASK [Deploy evpn configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/arubacx.yml for s1
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/eos.yml for s2

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]

TASK [template] ****************************************************************
changed: [s1 -> localhost]

TASK [aoscx_config: deploying evpn from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/arubacx.j2] ***
changed: [s1]

TASK [file] ********************************************************************
changed: [s1 -> localhost]

TASK [eos_config: deploying evpn from /home/pipi/netlab_gh/netsim/ansible/templates/evpn/eos.j2] ***
changed: [s2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=41   changed=8    unreachable=0    failed=0    skipped=40   rescued=0    ignored=0   
h2                         : ok=41   changed=8    unreachable=0    failed=0    skipped=40   rescued=0    ignored=0   
h3                         : ok=41   changed=8    unreachable=0    failed=0    skipped=40   rescued=0    ignored=0   
h4                         : ok=41   changed=8    unreachable=0    failed=0    skipped=40   rescued=0    ignored=0   
s1                         : ok=79   changed=28   unreachable=0    failed=0    skipped=16   rescued=0    ignored=0   
s2                         : ok=61   changed=8    unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   



The device under test is an EVPN PE-device bridging two VLANs over VXLAN using VLAN-aware Bundle service.
The other EVPN PE-device is an Arista EOS device.

Both VLANs are using the same IP prefix to identify potential inter-VLAN
leaking.

* h1 and h2 should be able to ping each other
* h3 and h4 should be able to ping each other
* h1 should not be able to reach h3 or h4

Please note it might take a while for the lab to work due to STP learning
phase

