[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s2]
ok: [h1]
ok: [dut]
ok: [h1a]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]

TASK [Find device readiness script] ********************************************
ok: [s2]
ok: [h1]
ok: [h1a]
ok: [dut]
ok: [h3]
ok: [h2]
ok: [h3a]
ok: [h4]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [s2]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, s2, h1, h1a, h2, h3, h3a, h4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [s2]
ok: [h1]
ok: [h1a]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]

TASK [Find configuration template for normalize] *******************************
ok: [s2]
ok: [h1]
ok: [dut]
ok: [h1a]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [s2]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [s2]
ok: [h1]
ok: [dut]
ok: [h1a]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [s2]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [s2]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, s2, h1, h1a, h2, h3, h3a, h4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [s2]
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [s2]
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h3a]
ok: [h3]
ok: [dut]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [s2]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s2]
ok: [h1a]
ok: [dut]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h3a]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h1a] => 
  msg: |-
    initial configuration for h1a
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.2.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.2.6/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1600
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
    ip link set eth3 down
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    ip link set dev eth3 mtu 1500
    ip link set eth3 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.8/32
    !
    interface eth1
     no shutdown
     description s2 -> dut
     ip address 10.1.0.2/30
    !
    interface eth2
     no shutdown
     description [Access VLAN red] s2 -> h2
     ! no ip address
    !
    interface eth3
     no shutdown
     description s2 -> h4 [stub]
     ip address 172.16.2.8/24
    !
    interface vlan1000
     no shutdown
     description VLAN red (1000) -> [h1,dut,h1a,h2]
     ip address 172.16.0.8/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h3a] => 
  msg: |-
    initial configuration for h3a
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.5/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    lldp
    !
  
    vrf tenant
        rd 65000:1
    !
  
        address-family ipv4 unicast
            route-target import 65000:1
            route-target export 65000:1
        exit-address-family
  
  
    !
    vlan 1001
     name blue
    !
    vlan 1000
     name red
    !
  
    !
  
    !
    interface mgmt
        no lldp transmit
        no lldp receive
    !
  
  
    interface loopback 0
        ip address 10.0.0.7/32
    !
  
    interface 1/1/1
        shutdown
        mtu 9198
        ip mtu 1600
        description dut -> s2
        ip address 10.1.0.1/30
        no shutdown
    !
  
    interface 1/1/2
        shutdown
        mtu 9198
        description [Access VLAN red] dut -> h1
        no shutdown
    !
  
    interface 1/1/3
        shutdown
        mtu 9198
        description [Access VLAN red] dut -> h1a
        no shutdown
    !
  
    interface 1/1/4
        shutdown
        mtu 9198
        description [Access VLAN blue] dut -> h3
        no shutdown
    !
  
    interface 1/1/5
        shutdown
        mtu 9198
        description [Access VLAN blue] dut -> h3a
        no shutdown
    !
  
    interface vlan1000
        vrf attach tenant
        description VLAN red (1000) -> [h1,h1a,h2,s2]
        ip address 172.16.0.7/24
    !
  
    interface vlan1001
        vrf attach tenant
        description VLAN blue (1001) -> [h3,h3a] [stub]
        ip address 172.16.1.7/24
    !
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h1a, h2, h3, h3a, h4

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [aoscx_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/arubacx.j2] ***
changed: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [s2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [s2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for s2

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [s2]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [s2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h1a -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h3a -> localhost]
changed: [h4 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h3 -> localhost]
changed: [h1a -> localhost]
changed: [h4 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3a -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1a -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h3a -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-skxp6uu4.sh] ***********************
changed: [h1a -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]
changed: [h1 -> localhost]
changed: [h3a -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [h3a]
ok: [h4]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h1a, h2, h3, h3a, h4, s2 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h1a, h2, h3, h3a, h4, s2 => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h1a, h2, h3, h3a, h4, s2 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h1a, h2, h3, h3a, h4, s2 => (item=vrf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, h1, h1a, h2, h3, h3a, h4, s2 => (item=vxlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h1a]
ok: [dut]
ok: [h3]
ok: [h2]
ok: [h3a]
ok: [h4]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut] => 
  msg: |-
    vlan configuration for dut
    =========================================
    !
    !
    interface 1/1/2
     no routing
     vlan access 1000
    !
    interface 1/1/3
     no routing
     vlan access 1000
    !
    interface 1/1/4
     no routing
     vlan access 1001
    !
    interface 1/1/5
     no routing
     vlan access 1001
    !
    interface vlan1000
    !
    interface vlan1001
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
      ip link add vlan1000 type bridge
      ip link set dev vlan1000 address 52:dc:ca:fd:08:00
  
      ip link set dev vlan1000 mtu 1500
      ip addr flush dev vlan1000
      ip addr add 172.16.0.8/24 dev vlan1000
    fi
  
    ip link set dev eth2 master vlan1000
  
    ip link set dev vlan1000 up

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [aoscx_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/arubacx.j2] ***
changed: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
changed: [s2]

TASK [run vtysh to import vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [s2]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [h3a]
ok: [h4]
ok: [s2]

TASK [Find configuration template for routing] *********************************
skipping: [dut]
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h3]
skipping: [s2]
ok: [h3a]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
skipping: [s2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [dut]
ok: [h1]
ok: [h1a]
ok: [h2]
skipping: [s2]
ok: [h3]
ok: [h3a]
ok: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h1a] => 
  msg: |-
    routing configuration for h1a
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
skipping: [s2]
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    routing configuration for h4
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.2.8 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.2.8 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.2.8 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.2.8 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h3a] => 
  msg: |-
    routing configuration for h3a
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.7 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.7 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [dut]
skipping: [s2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h1a, h2, h3, h3a, h4

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h1a -> localhost]
changed: [h2 -> localhost]
changed: [h3a -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h1a -> localhost]
changed: [h2 -> localhost]
changed: [h3a -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]

TASK [Container configuration for routing based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h1a -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h3a -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-bo6_9b88.sh] ***********************
changed: [h1 -> localhost]
changed: [h1a -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h3a -> localhost]
changed: [h4 -> localhost]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [h1]
ok: [h1a]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]
ok: [s2]

TASK [Find configuration template for ospf] ************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
skipping: [s2]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
    !
    router ospf 1
        router-id 10.0.0.7
  
  
  
  
  
        area 0.0.0.0
        area 0.0.0.0
  
    !
    interface loopback 0
        ip ospf 1 area 0.0.0.0
    !
    interface 1/1/1
    ! dut -> s2
        ip ospf 1 area 0.0.0.0
        ip ospf network point-to-point
    !
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.8
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! s2 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [aoscx_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/arubacx.j2] ***
changed: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [s2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [s2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [h1]
ok: [h1a]
ok: [dut]
ok: [h2]
ok: [h3]
ok: [h3a]
ok: [h4]
ok: [s2]

TASK [Find configuration template for vrf] *************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
    !
    router ospf 2 vrf tenant
        router-id 10.0.0.7
  
  
  
     redistribute connected
  
  
        area 0.0.0.0
        area 0.0.0.0
  
    !
    interface vlan1000
    ! VLAN red (1000) -> [h1,h1a,h2,s2]
        ip ospf 2 area 0.0.0.0
        ip ospf cost 5
    !
    interface vlan1001
    ! VLAN blue (1001) -> [h3,h3a]
        ip ospf 2 area 0.0.0.0
        ip ospf cost 10
        ip ospf passive
    !
ok: [s2] => 
  msg: |-
    vrf configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
    # Create VRF tables
    if [ ! -e /sys/devices/virtual/net/tenant ]; then
    ip link add tenant type vrf table 100
    fi
    ip link set tenant up
  
    # Move interfaces and loopbacks to vrfs
    sysctl -qw net.ipv6.conf.eth3.keep_addr_on_down=1
    ip link set eth3 master tenant
    sysctl -qw net.ipv6.conf.vlan1000.keep_addr_on_down=1
    ip link set vlan1000 master tenant
  
    cat >/tmp/vrf_config <<CONFIG
    vrf tenant
     exit-vrf
    !
    router bgp 65000
    !
    !
    !
    ! OSPFv2 FRR configuration
    !
    router ospf vrf tenant
     ospf router-id 10.0.0.8
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
     redistribute connected
  
    exit
    !
    interface eth3
    ! s2 -> h4
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
     ip ospf passive
    !
    interface vlan1000
    ! VLAN red (1000) -> [h1,dut,h1a,h2]
     ip ospf area 0.0.0.0
     ip ospf cost 5
    !
  
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?

TASK [Deploy vrf configuration] ************************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [aoscx_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/arubacx.j2] ***
changed: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy vrf config from /home/pipi/net101/tools/netsim/ansible/templates/vrf/frr.j2] ***
changed: [s2]

TASK [run vtysh to import vrf config from /home/pipi/net101/tools/netsim/ansible/templates/vrf/frr.j2] ***
skipping: [s2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [h1]
ok: [h1a]
ok: [h2]
ok: [dut]
ok: [h3]
ok: [h3a]
ok: [h4]
ok: [s2]

TASK [Find configuration template for vxlan] ***********************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
skipping: [s2]

TASK [Find configuration deployment deploy_script for vxlan] *******************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
ok: [dut] => 
  msg: |-
    vxlan configuration for dut
    =========================================
    !
    interface vxlan 1
      source ip 10.0.0.7
      no shutdown
      vni 5000
        vlan 1000
        vtep-peer 10.0.0.8
      vni 5001
        vlan 1001
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
  
  
    # Create L3 VNIs with bridges and add to correct vrf table
  
    # Create VXLAN L2 interface per vni
    ip link add vxlan5000 type vxlan \
      id 5000 \
      dstport 4789 \
      local 10.0.0.8
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
    ip link add vlan1000 type bridge
    ip link set up dev vlan1000
    fi
    ip link set dev vxlan5000 master vlan1000
    ip link set vlan1000 type bridge stp_state 0
  
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1500 addrgenmode none dev vxlan5000
    ip link set up dev vxlan5000
  
    bridge fdb append 00:00:00:00:00:00 dev vxlan5000 dst 10.0.0.7
  
    exit $?

TASK [Deploy vxlan configuration] **********************************************
skipping: [h1]
skipping: [h1a]
skipping: [h2]
skipping: [h3]
skipping: [h3a]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s2

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [aoscx_config: deploying vxlan from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/arubacx.j2] ***
changed: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [s2]

TASK [set_fact] ****************************************************************
ok: [s2]

TASK [run /tmp/config.sh to deploy vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/frr.j2] ***
changed: [s2]

TASK [run vtysh to import vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/frr.j2] ***
skipping: [s2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=59   changed=20   unreachable=0    failed=0    skipped=14   rescued=0    ignored=0   
h1                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
h1a                        : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
h2                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
h3                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
h3a                        : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
h4                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
s2                         : ok=56   changed=11   unreachable=0    failed=0    skipped=20   rescued=0    ignored=0   



The devices under test are VLAN-to-VXLAN layer-3 switches connecting a VLAN
stretched across VXLAN transport and two edge subnets.

The test case verifies that you can use VXLAN-enabled VLANs in VRFs and that
your device runs OSPF across VXLAN-enabled VLANs.

* All hosts should be able to ping each other.
* Switches should have OSPF adjacencies in the tenant VRF

Notes:

* It might take a while for the lab to work due to STP learning phase.
* The validation tests don't check OSPF adjacencies

