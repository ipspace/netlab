[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [x1]
ok: [x2]
ok: [dut]
ok: [x3]

TASK [Find device readiness script] ********************************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [x1]
ok: [x3]
ok: [dut]
ok: [x2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [x1]
ok: [x2]
ok: [dut]
ok: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.42.0.1/32
     ipv6 address 2001:db8:cafe:1::1/64
    !
    interface eth1
     no shutdown
     description x1 -> dut
     ip address 10.1.0.6/30
     ipv6 address 2001:db8:3:1::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x2
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.42.0.2/32
     ipv6 address 2001:db8:cafe:2::1/64
    !
    interface eth1
     no shutdown
     description x2 -> dut
     ip address 10.1.0.10/30
     ipv6 address 2001:db8:3:2::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x3] => 
  msg: |-
    initial configuration for x3
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x3
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.42.0.3/32
     ipv6 address 2001:db8:cafe:3::1/64
    !
    interface eth1
     no shutdown
     description x3 -> dut
     ip address 10.1.0.2/30
     ipv6 address 2001:db8:3::4/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    lldp
    !
  
    vrf blue
        rd 65000:2
    !
  
        address-family ipv4 unicast
            route-target import 65000:2
            route-target export 65000:2
        exit-address-family
        address-family ipv6 unicast
            route-target import 65000:2
            route-target export 65000:2
        exit-address-family
  
    vrf red
        rd 65000:1
    !
  
        address-family ipv4 unicast
            route-target import 65000:1
            route-target export 65000:1
        exit-address-family
        address-family ipv6 unicast
            route-target import 65000:1
            route-target export 65000:1
        exit-address-family
  
  
  
    interface loopback 0
        ip address 10.0.0.1/32
        ipv6 address 2001:db8:1:1::1/64
    !
    interface mgmt
        no lldp transmit
        no lldp receive
    !
  
  
  
    interface 1/1/1
        shutdown
        mtu 9198
        description dut -> x3
        ip address 10.1.0.1/30
        ipv6 address 2001:db8:3::1/64
        no ipv6 nd suppress-ra
        ipv6 nd ra min-interval 3
        ipv6 nd ra max-interval 4
        no shutdown
    !
  
  
    interface 1/1/2
        shutdown
        mtu 9198
        vrf attach red
        description dut -> x1
        ip address 10.1.0.5/30
        ipv6 address 2001:db8:3:1::1/64
        no ipv6 nd suppress-ra
        ipv6 nd ra min-interval 3
        ipv6 nd ra max-interval 4
        no shutdown
    !
  
  
    interface 1/1/3
        shutdown
        mtu 9198
        vrf attach blue
        description dut -> x2
        ip address 10.1.0.9/30
        ipv6 address 2001:db8:3:2::1/64
        no ipv6 nd suppress-ra
        ipv6 nd ra min-interval 3
        ipv6 nd ra max-interval 4
        no shutdown
    !
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for x1, x2, x3

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [aoscx_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/arubacx.j2] ***
changed: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [x1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for x1, x2, x3

TASK [template] ****************************************************************
changed: [x1]
changed: [x2]
changed: [x3]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [x2]
ok: [x3]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [x1]
changed: [x3]
changed: [x2]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [x1]
skipping: [x2]
skipping: [x3]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3 => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3 => (item=vrf)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Find configuration template for routing] *********************************
ok: [x1]
ok: [x3]
ok: [x2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Find configuration deployment deploy_script for routing] *****************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    routing configuration for x1
    =========================================
    !
    !
    !
    !
    ! Global static routes
    !
    ip route 0.0.0.0/0 10.1.0.5 eth1
    ipv6 route ::/0 2001:db8:3:1::1 eth1
ok: [x2] => 
  msg: |-
    routing configuration for x2
    =========================================
    !
    !
    !
    !
    ! Global static routes
    !
    ip route 0.0.0.0/0 10.1.0.9 eth1
    ipv6 route ::/0 2001:db8:3:2::1 eth1
ok: [x3] => 
  msg: |-
    routing configuration for x3
    =========================================
    !
    !
    !
    !
    ! Global static routes
    !
    ip route 0.0.0.0/0 10.1.0.1 eth1
    ipv6 route ::/0 2001:db8:3::1 eth1
fatal: [dut]: FAILED! => 
  msg: |-
    The task includes an option with an undefined variable.. 'dict object' has no attribute 'intf'
  
    The error appears to be in '/home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml': line 52, column 7, but may
    be elsewhere in the file depending on the exact syntax problem.
  
    The offending line appears to be:
  
        block:
        - name: "Print deployed configuration when running in verbose mode"
          ^ here

TASK [Deploy routing configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for x1, x2, x3

TASK [template] ****************************************************************
changed: [x1]
changed: [x3]
changed: [x2]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [x2]
ok: [x3]

TASK [run /tmp/config.sh to deploy routing config from /home/pipi/net101/tools/netsim/ansible/templates/routing/frr.j2] ***
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [run vtysh to import routing config from /home/pipi/net101/tools/netsim/ansible/templates/routing/frr.j2] ***
changed: [x2]
changed: [x1]
changed: [x3]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Find configuration template for ospf] ************************************
ok: [x1]
ok: [x2]
ok: [x3]

TASK [fail] ********************************************************************
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    ospf configuration for x1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.42.0.1
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! x1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! x1 -> dut
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.42.0.1
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [x2] => 
  msg: |-
    ospf configuration for x2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.42.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! x2 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! x2 -> dut
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.42.0.2
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write
ok: [x3] => 
  msg: |-
    ospf configuration for x3
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.42.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! x3 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! x3 -> dut
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.42.0.3
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
  
    exit
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for x1, x2, x3

TASK [template] ****************************************************************
changed: [x1]
changed: [x3]
changed: [x2]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [x2]
ok: [x3]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [x1]
changed: [x2]
changed: [x3]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Find configuration template for vrf] *************************************
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [fail] ********************************************************************
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Deploy vrf configuration] ************************************************
skipping: [x1]
skipping: [x2]
skipping: [x3]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=23   changed=4    unreachable=0    failed=1    skipped=6    rescued=0    ignored=0   
x1                         : ok=38   changed=7    unreachable=0    failed=0    skipped=16   rescued=0    ignored=0   
x2                         : ok=37   changed=6    unreachable=0    failed=0    skipped=16   rescued=0    ignored=0   
x3                         : ok=37   changed=6    unreachable=0    failed=0    skipped=16   rescued=0    ignored=0   

Fatal error in netlab: Executing Ansible playbook /home/pipi/net101/tools/netsim/ansible/initial-config.ansible failed
Error executing ansible-playbook /home/pipi/net101/tools/netsim/ansible/initial-config.ansible:
  Command '['ansible-playbook', '/home/pipi/net101/tools/netsim/ansible/initial-config.ansible']' returned non-zero exit status 2.
