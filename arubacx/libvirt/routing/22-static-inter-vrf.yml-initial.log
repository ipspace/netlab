[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2::2/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2::2/64 dev eth1
    ip link set dev eth1 mtu 1500
  
    ip link set dev eth2 up
    set +e
    ip addr del 172.16.41.2/24 dev eth2 2>/dev/null
    set -e
    ip addr add 172.16.41.2/24 dev eth2
    sysctl -w net.ipv6.conf.eth2.disable_ipv6=0
    set +e
    ip -6 addr del 3fff:cafe:0:1::2/64 dev eth2 2>/dev/null
    set -e
    ip -6 addr add 3fff:cafe:0:1::2/64 dev eth2
    ip link set dev eth2 mtu 1500
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:1::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:1::3/64 dev eth1
    ip link set dev eth1 mtu 1500
  
    ip link set dev eth2 up
    set +e
    ip addr del 172.16.42.3/24 dev eth2 2>/dev/null
    set -e
    ip addr add 172.16.42.3/24 dev eth2
    sysctl -w net.ipv6.conf.eth2.disable_ipv6=0
    set +e
    ip -6 addr del 3fff:cafe:0:2::3/64 dev eth2 2>/dev/null
    set -e
    ip -6 addr add 3fff:cafe:0:2::3/64 dev eth2
    ip link set dev eth2 mtu 1500
ok: [x3] => 
  msg: |-
    initial configuration for x3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.2.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.2.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:2::4/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:2::4/64 dev eth1
    ip link set dev eth1 mtu 1500
  
    ip link set dev eth2 up
    set +e
    ip addr del 172.16.40.4/24 dev eth2 2>/dev/null
    set -e
    ip addr add 172.16.40.4/24 dev eth2
    sysctl -w net.ipv6.conf.eth2.disable_ipv6=0
    set +e
    ip -6 addr del 3fff:cafe::4/64 dev eth2 2>/dev/null
    set -e
    ip -6 addr add 3fff:cafe::4/64 dev eth2
    ip link set dev eth2 mtu 1500
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    lldp
    !
  
    vrf blue
        rd 65000:2
    !
  
        address-family ipv4 unicast
            route-target import 65000:2
            route-target export 65000:2
        exit-address-family
        address-family ipv6 unicast
            route-target import 65000:2
            route-target export 65000:2
        exit-address-family
  
    vrf red
        rd 65000:1
    !
  
        address-family ipv4 unicast
            route-target import 65000:1
            route-target export 65000:1
        exit-address-family
        address-family ipv6 unicast
            route-target import 65000:1
            route-target export 65000:1
        exit-address-family
  
  
  
    interface mgmt
        no lldp transmit
        no lldp receive
    !
  
  
    interface loopback 0
        ip address 10.0.0.1/32
        ipv6 address 2001:db8:1:1::1/64
        no ipv6 nd suppress-ra
        ipv6 nd ra min-interval 3
        ipv6 nd ra max-interval 4
    !
  
    interface 1/1/1
        shutdown
        mtu 9198
        vrf attach red
        description dut -> x1 [stub]
        ip address 172.16.0.1/24
        ipv6 address 2001:db8:2::1/64
        no ipv6 nd suppress-ra
        ipv6 nd ra min-interval 3
        ipv6 nd ra max-interval 4
        no shutdown
    !
  
    interface 1/1/2
        shutdown
        mtu 9198
        vrf attach blue
        description dut -> x2 [stub]
        ip address 172.16.1.1/24
        ipv6 address 2001:db8:2:1::1/64
        no ipv6 nd suppress-ra
        ipv6 nd ra min-interval 3
        ipv6 nd ra max-interval 4
        no shutdown
    !
  
    interface 1/1/3
        shutdown
        mtu 9198
        description dut -> x3 [stub]
        ip address 172.16.2.1/24
        ipv6 address 2001:db8:2:2::1/64
        no ipv6 nd suppress-ra
        ipv6 nd ra min-interval 3
        ipv6 nd ra max-interval 4
        no shutdown
    !
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/arubacx.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for x1, x2, x3

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [aoscx_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/arubacx.j2] ***
changed: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Create a temporary file for the rendered script] *************************
changed: [x1 -> localhost]
changed: [x2 -> localhost]
changed: [x3 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [x2 -> localhost]
changed: [x1 -> localhost]
changed: [x3 -> localhost]

TASK [Copy script into running container at /tmp/config-x1_initial.sh] *********
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Execute /tmp/config-x1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [x2 -> localhost]
changed: [x1 -> localhost]
changed: [x3 -> localhost]

TASK [Remove temporary file /tmp/x1_initial-y37a2kcj.sh] ***********************
changed: [x1 -> localhost]
changed: [x2 -> localhost]
changed: [x3 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3 => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3 => (item=vrf)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Find configuration template for routing] *********************************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Find configuration deployment deploy_script for routing] *****************
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    routing configuration for x1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [x2] => 
  msg: |-
    routing configuration for x2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [x3] => 
  msg: |-
    routing configuration for x3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.2.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [dut] => 
  msg: |-
    routing configuration for dut
    =========================================
    !
    !
    !
    !
    !
    ! Static routes
    !
    ip route 172.16.41.0 255.255.255.0 1/1/1 172.16.0.2 vrf blue
    ipv6 route 3fff:cafe:0:1::/64 1/1/1 vrf blue
    ip route 172.16.42.0 255.255.255.0 1/1/2 172.16.1.3 vrf red
    ipv6 route 3fff:cafe:0:2::/64 1/1/2 vrf red
    ip route 172.16.42.0 255.255.255.0 1/1/2 172.16.1.3
    ipv6 route 3fff:cafe:0:2::/64 1/1/2
    ip route 172.16.40.0 255.255.255.0 1/1/3 172.16.2.4 vrf blue
    ipv6 route 3fff:cafe::/64 1/1/3 vrf blue

TASK [Deploy routing configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/arubacx.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for x1, x2, x3

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [aoscx_config: deploying routing from /home/pipi/netlab_gh/netsim/ansible/templates/routing/arubacx.j2] ***
changed: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Create a temporary file for the rendered script] *************************
changed: [x1 -> localhost]
changed: [x2 -> localhost]
changed: [x3 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [x2 -> localhost]
changed: [x1 -> localhost]
changed: [x3 -> localhost]

TASK [Copy script into running container at /tmp/config-x1_routing.sh] *********
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Execute /tmp/config-x1_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [x1 -> localhost]
changed: [x2 -> localhost]
changed: [x3 -> localhost]

TASK [Remove temporary file /tmp/x1_routing-_n46wd3m.sh] ***********************
changed: [x1 -> localhost]
changed: [x2 -> localhost]
changed: [x3 -> localhost]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [x1]
ok: [x2]
ok: [x3]
ok: [dut]

TASK [Find configuration template for vrf] *************************************
skipping: [x1]
skipping: [x2]
skipping: [x3]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [x1]
skipping: [x2]
skipping: [x3]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [x1]
skipping: [x2]
skipping: [x3]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================

TASK [Deploy vrf configuration] ************************************************
skipping: [x1]
skipping: [x2]
skipping: [x3]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/arubacx.yml for dut

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [aoscx_config: deploying vrf from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/arubacx.j2] ***
ok: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=37   changed=11   unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
x1                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
x2                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
x3                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   



Use this topology to test inter- VRF IPv4 and IPv6 static routes. DUT has
to have static routes for loopback addresses of X1 and X2.

