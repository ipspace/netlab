[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h2]
ok: [h1]
ok: [r1]
ok: [s1]
ok: [s2]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [r1]
ok: [s1]
ok: [s2]
ok: [h2]

TASK [Wait for device to become ready] *****************************************
skipping: [r1]
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for r1, s1, s2, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [r1]
ok: [s1]
ok: [h2]
ok: [s2]

TASK [Find configuration template for initial] *********************************
ok: [h2]
ok: [r1]
ok: [h1]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    hostname r1
    !
    lldp
    !
  
  
  
    interface loopback 0
        ip address 10.0.0.5/32
    !
    interface mgmt
        no lldp transmit
        no lldp receive
    !
  
  
    interface 1/1/1
        shutdown
        mtu 9198
        description r1 -> [h1,s1,s2]
        ip address 172.16.0.5/24
        no shutdown
    !
  
    interface 1/1/2
        shutdown
        mtu 9198
        description r1 -> [h2,s1,s2]
        ip address 172.16.1.5/24
        no shutdown
    !
    !
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    lldp
    !
  
  
    !
    vlan 701
     name blue
    !
    vlan 700
     name red
    !
  
    !
  
    !
    interface loopback 0
        ip address 10.0.0.3/32
    !
    interface mgmt
        no lldp transmit
        no lldp receive
    !
  
  
    interface 1/1/1
        shutdown
        mtu 9198
        description s1 -> s2
        no shutdown
    !
  
    interface 1/1/2
        shutdown
        mtu 9198
        no shutdown
    !
  
    interface 1/1/3
        shutdown
        mtu 9198
        no shutdown
    !
  
    interface vlan700
        description VLAN red (700) -> [h1,s2,r1]
    !
  
    interface vlan701
        description VLAN blue (701) -> [h2,s2,r1]
    !
    !
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    hostname s2
    !
    lldp
    !
  
  
    !
    vlan 701
     name blue
    !
    vlan 700
     name red
    !
  
    !
  
    !
    interface loopback 0
        ip address 10.0.0.4/32
    !
    interface mgmt
        no lldp transmit
        no lldp receive
    !
  
  
    interface 1/1/1
        shutdown
        mtu 9198
        description s2 -> s1
        no shutdown
    !
  
    interface 1/1/2
        shutdown
        mtu 9198
        no shutdown
    !
  
    interface 1/1/3
        shutdown
        mtu 9198
        no shutdown
    !
  
    interface vlan700
        description VLAN red (700) -> [h1,s1,r1]
    !
  
    interface vlan701
        description VLAN blue (701) -> [h2,s1,r1]
    !
    !
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.2/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    # lan prefix: 172.16.0.0/16 local subnet: 172.16.1.0/24
    set +e
    ip route del 172.16.0.0/16 2>/dev/null
    set -e
    ip route add 172.16.0.0/16 via 172.16.1.5
    # loopback prefix: 10.0.0.0/24 local subnet: 172.16.1.0/24
    set +e
    ip route del 10.0.0.0/24 2>/dev/null
    set -e
    ip route add 10.0.0.0/24 via 172.16.1.5
    # mgmt prefix: 192.168.17.0/24 local subnet: 172.16.1.0/24
    # p2p prefix: 10.1.0.0/16 local subnet: 172.16.1.0/24
    set +e
    ip route del 10.1.0.0/16 2>/dev/null
    set -e
    ip route add 10.1.0.0/16 via 172.16.1.5
    # router_id prefix: 10.0.0.0/24 local subnet: 172.16.1.0/24
    # vrf_loopback prefix: 10.2.0.0/24 local subnet: 172.16.1.0/24
    set +e
    ip route del 10.2.0.0/24 2>/dev/null
    set -e
    ip route add 10.2.0.0/24 via 172.16.1.5
    #
    # Print the final routing table
    ip route
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    # lan prefix: 172.16.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 172.16.0.0/16 2>/dev/null
    set -e
    ip route add 172.16.0.0/16 via 172.16.0.5
    # loopback prefix: 10.0.0.0/24 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.0.0.0/24 2>/dev/null
    set -e
    ip route add 10.0.0.0/24 via 172.16.0.5
    # mgmt prefix: 192.168.17.0/24 local subnet: 172.16.0.0/24
    # p2p prefix: 10.1.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.1.0.0/16 2>/dev/null
    set -e
    ip route add 10.1.0.0/16 via 172.16.0.5
    # router_id prefix: 10.0.0.0/24 local subnet: 172.16.0.0/24
    # vrf_loopback prefix: 10.2.0.0/24 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.2.0.0/24 2>/dev/null
    set -e
    ip route add 10.2.0.0/24 via 172.16.0.5
    #
    # Print the final routing table
    ip route

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [r1]
ok: [s1]
ok: [s2]
ok: [h1]
ok: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for r1, s1, s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/linux/initial-clab.yml for h1, h2

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]
changed: [r1 -> localhost]
changed: [s2 -> localhost]

TASK [template] ****************************************************************
changed: [r1 -> localhost]
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [aoscx_config: set session auto-confirm for initial] **********************
changed: [r1]
changed: [s2]
changed: [s1]

TASK [aoscx_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/arubacx.j2] ***
changed: [r1]
changed: [s1]
changed: [s2]

TASK [file] ********************************************************************
changed: [r1 -> localhost]
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [set_fact] ****************************************************************
ok: [h1]
ok: [h2]

TASK [Create initial container setup from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Initial container configuration via /tmp/config-ZnJkeuDN-h1.sh] **********
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [file] ********************************************************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    !
    !
    interface 1/1/1
     no routing
     vlan trunk allow 700,701
    !
    interface 1/1/2
     no routing
     vlan access 700
    !
    interface 1/1/3
     no routing
     vlan access 701
    !
    interface vlan700
    !
    interface vlan701
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    !
    !
    interface 1/1/1
     no routing
     vlan trunk allow 700,701
    !
    interface 1/1/2
     no routing
     vlan access 700
    !
    interface 1/1/3
     no routing
     vlan access 701
    !
    interface vlan700
    !
    interface vlan701

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s1]
ok: [s2]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for s1, s2

TASK [tempfile] ****************************************************************
changed: [s2 -> localhost]
changed: [s1 -> localhost]

TASK [template] ****************************************************************
changed: [s2 -> localhost]
changed: [s1 -> localhost]

TASK [aoscx_config: set session auto-confirm for vlan] *************************
changed: [s1]
changed: [s2]

TASK [aoscx_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/arubacx.j2] ***
changed: [s2]
changed: [s1]

TASK [file] ********************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h2                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
r1                         : ok=13   changed=5    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
s1                         : ok=25   changed=10   unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
s2                         : ok=25   changed=10   unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   



The devices under test are simple bridges with a VLAN trunk between them.
An external router with two interfaces (one per VLAN) is attached to one of them.

* h1 and h2 should be able to ping each other

Please note it might take a while for the lab to work due to
STP learning phase

