[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [xf]
ok: [p1]
ok: [p2]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [xf]
ok: [p1]
ok: [p2]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [xf]
skipping: [p1]
skipping: [p2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, xf, p1, p2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [xf]
ok: [p1]
ok: [p2]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [xf]
ok: [p1]
ok: [p2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [xf]
skipping: [p1]
skipping: [p2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [xf]
ok: [p1]
ok: [dut]
ok: [p2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [xf]
skipping: [p1]
skipping: [p2]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [xf]
skipping: [p1]
skipping: [p2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, xf, p1, p2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [xf]
ok: [p1]
ok: [p2]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [xf]
ok: [p1]
ok: [p2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [xf]
skipping: [p1]
skipping: [p2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [xf]
ok: [p1]
ok: [p2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [xf] => 
  msg: |-
    initial configuration for xf
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname xf
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description xf -> dut [external]
     ip address 10.1.0.10/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p1] => 
  msg: |-
    initial configuration for p1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p1
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description p1 -> dut
     ip address 10.1.0.2/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p2] => 
  msg: |-
    initial configuration for p2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description p2 -> dut
     ip address 10.1.0.6/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    lldp
    !
  
    vrf d1
        rd 65000:1
    !
  
        address-family ipv4 unicast
            route-target import 65000:1
            route-target export 65000:1
        exit-address-family
  
    vrf d2
        rd 65000:2
    !
  
        address-family ipv4 unicast
            route-target import 65000:2
            route-target export 65000:2
        exit-address-family
  
  
  
    interface loopback 0
        ip address 10.0.0.1/32
    !
    interface mgmt
        no lldp transmit
        no lldp receive
    !
  
  
  
    interface 1/1/1
        shutdown
        mtu 9198
        vrf attach d1
        description dut -> p1
        ip address 10.1.0.1/30
        no shutdown
    !
  
  
    interface 1/1/2
        shutdown
        mtu 9198
        vrf attach d2
        description dut -> p2
        ip address 10.1.0.5/30
        no shutdown
    !
  
  
    interface 1/1/3
        shutdown
        mtu 9198
        vrf attach d2
        description dut -> xf [external]
        ip address 10.1.0.9/30
        no shutdown
    !
  
  
    interface loopback 1
        vrf attach d2
        description VRF Loopback d2
        ip address 192.168.43.1/32
    !
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/arubacx.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for xf, p1, p2

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [aoscx_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/arubacx.j2] ***
changed: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [xf -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [xf]
skipping: [p1]
skipping: [p2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for xf, p1, p2

TASK [template] ****************************************************************
changed: [xf]
changed: [p1]
changed: [p2]

TASK [set_fact] ****************************************************************
ok: [xf]
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [xf]
changed: [p1]
changed: [p2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [xf]
skipping: [p1]
skipping: [p2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [p1]
ok: [p2]
ok: [xf]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, xf => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, xf => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p1, p2, xf => (item=vrf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [p1]
ok: [p2]
ok: [xf]
ok: [dut]

TASK [Find configuration template for bgp] *************************************
skipping: [p1]
skipping: [p2]
ok: [xf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [xf]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [p1]
skipping: [p2]
ok: [xf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p1]
skipping: [p2]
ok: [xf] => 
  msg: |-
    bgp configuration for xf
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.1.0.9 remote-as 65000
      neighbor 10.1.0.9 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.4/32
    !
    !
    !
      neighbor 10.1.0.9 activate
      no neighbor 10.1.0.9 send-community all
      neighbor 10.1.0.9 send-community standard
      neighbor 10.1.0.9 send-community large
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    !
    !
    router bgp 65000
      bgp log-neighbor-changes
      timers bgp connect-retry 10
      bgp router-id 10.0.0.1
    !
      address-family ipv4 unicast
    !
  
        network 10.0.0.1/32
    !
    !
    !

TASK [Deploy bgp configuration] ************************************************
skipping: [p1]
skipping: [p2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/arubacx.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for xf

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [aoscx_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/arubacx.j2] ***
changed: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [xf]

TASK [set_fact] ****************************************************************
ok: [xf]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [xf]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [xf]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [p1]
ok: [p2]
ok: [xf]
ok: [dut]

TASK [Find configuration template for ospf] ************************************
skipping: [xf]
ok: [p1]
ok: [p2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [xf]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [xf]
ok: [p1]
ok: [p2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [xf]
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
ok: [p1] => 
  msg: |-
    ospf configuration for p1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [p2] => 
  msg: |-
    ospf configuration for p2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p2 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
skipping: [xf]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/arubacx.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for p1, p2

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [aoscx_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/arubacx.j2] ***
ok: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [p2]
changed: [p1]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [p1]
skipping: [p2]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [p2]
changed: [p1]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [p1]
ok: [p2]
ok: [xf]
ok: [dut]

TASK [Find configuration template for vrf] *************************************
skipping: [p1]
skipping: [p2]
skipping: [xf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p1]
skipping: [p2]
skipping: [xf]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [p1]
skipping: [p2]
skipping: [xf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p1]
skipping: [p2]
skipping: [xf]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
  
    !
    router ospf 3 vrf d1
        router-id 10.0.0.1
  
     default-information originate always
  
  
     redistribute bgp
     redistribute connected
  
  
        area 0.0.0.0
  
    !
    interface 1/1/1
    ! dut -> p1
        ip ospf 3 area 0.0.0.0
        ip ospf network point-to-point
    !
  
  
  
    !
    router ospf 2 vrf d2
        router-id 10.0.0.1
  
     default-information originate
  
  
     redistribute bgp
     redistribute connected
  
  
        area 0.0.0.0
        area 0.0.0.0
  
    !
    interface 1/1/2
    ! dut -> p2
        ip ospf 2 area 0.0.0.0
        ip ospf network point-to-point
    !
    interface loopback 1
    ! VRF Loopback d2
        ip ospf 2 area 0.0.0.0
    !
  
  
  
    !
    router bgp 65000
      vrf d1
      bgp router-id 10.0.0.1
  
  
     address-family ipv4 unicast
      redistribute local loopback
      redistribute connected
      redistribute ospf
    !
    !
      vrf d2
      bgp router-id 10.0.0.1
  
      neighbor 10.1.0.10 remote-as 65100
      neighbor 10.1.0.10 description xf
  
  
     address-family ipv4 unicast
      redistribute local loopback
      redistribute connected
      redistribute ospf
    !
        network 192.168.43.1/32
    !
        neighbor 10.1.0.10 activate
        neighbor 10.1.0.10 advertisement-interval 1
        neighbor 10.1.0.10 send-community standard

TASK [Deploy vrf configuration] ************************************************
skipping: [p1]
skipping: [p2]
skipping: [xf]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/arubacx.yml for dut

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [aoscx_config: deploying vrf from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/arubacx.j2] ***
changed: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=47   changed=15   unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
p1                         : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
p2                         : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
xf                         : ok=31   changed=5    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   



This lab tests the VRF OSPF default route origination. The device under test
should originate the default route in multiple VRFs, one always, the other one
based on BGP default route.

