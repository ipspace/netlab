[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r2]
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [h5]
ok: [r1]
ok: [r3]

TASK [Find device readiness script] ********************************************
ok: [r2]
ok: [h2]
ok: [h1]
ok: [h3]
ok: [h5]
ok: [h4]
ok: [r1]
ok: [r3]

TASK [Wait for device to become ready] *****************************************
skipping: [r2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/nxos.yml for r1, r3

TASK [Wait for Eth1/1 to appear] ***********************************************
ok: [r3]
ok: [r1]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for r2, h1, h2, h3, h4, h5, r1, r3

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [r2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [r1]
ok: [r3]

TASK [Find configuration template for normalize] *******************************
ok: [r2]
ok: [h2]
ok: [h1]
ok: [h3]
ok: [h5]
ok: [h4]
ok: [r1]
ok: [r3]

TASK [fail] ********************************************************************
skipping: [r2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [r1]
skipping: [r3]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [r2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [r1]
ok: [r3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [r1]
skipping: [r3]

TASK [Deploy normalize configuration] ******************************************
skipping: [r2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [r1]
skipping: [r3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for r2, h1, h2, h3, h4, h5, r1, r3

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [r2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [r1]
ok: [r3]

TASK [Find configuration template for initial] *********************************
ok: [r2]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [r1]
ok: [r3]

TASK [fail] ********************************************************************
skipping: [r2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [r1]
skipping: [r3]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [r2]
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [h5]
ok: [r3]
ok: [r1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.5/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h5] => 
  msg: |-
    initial configuration for h5
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.2.8/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.2.8/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.3.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.3.6/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description r2 -> r1
     ! no ip address
    !
    interface eth2
     no shutdown
     description r2 -> r3
     ! no ip address
    !
    interface eth1.701
     no shutdown
     description r2 -> r1
     ip address 10.1.0.2/30
    !
    interface eth1.700
     no shutdown
     description r2 -> r1
     ip address 10.1.0.6/30
    !
    interface eth2.701
     no shutdown
     description r2 -> r3
     ip address 10.1.0.9/30
    !
    interface eth2.700
     no shutdown
     description r2 -> r3
     ip address 10.1.0.13/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.4.7/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.4.7/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [r3] => 
  msg: |-
    initial configuration for r3
    =========================================
    hostname r3
    !
    no ip domain-lookup
    !
    feature lldp
    !
    username vagrant password vagrant
    !
    ip host h1 172.16.0.4
    ip host h2 172.16.1.5
    ip host h3 172.16.3.6
    ip host h4 172.16.4.7
    ip host h5 172.16.2.8
    ip host r1 10.0.0.1
    ip host r1-blue 172.16.3.1
    ip host r1-red 172.16.0.1
    ip host r2 10.0.0.2
    ip host r2-blue 10.1.0.2
    ip host r2-red 10.1.0.6
    ip host r3-blue 172.16.4.3
    ip host r3-red 172.16.1.3
    !
    feature interface-vlan
    !
    feature bgp
    !
    vrf context blue
      rd 65000:2
      address-family ipv4 unicast
        route-target import 65000:2
        route-target export 65000:2
      exit
    vrf context red
      rd 65000:1
      address-family ipv4 unicast
        route-target import 65000:1
        route-target export 65000:1
      exit
    !
    !
    interface mgmt0
     no lldp transmit
     no lldp receive
    !
    interface loopback0
     no shutdown
     ip address 10.0.0.3/32
    !
    interface Ethernet1/1
     no shutdown
     no switchport
     mac-address 52dc.cafe.0301
     description r3 -> r2
    !
    interface Ethernet1/2
     no shutdown
     no switchport
     mac-address 52dc.cafe.0302
      vrf member red
     description r3 -> h2 [stub]
     ip address 172.16.1.3/24
    !
    interface Ethernet1/3
     no shutdown
     no switchport
     mac-address 52dc.cafe.0303
      vrf member blue
     description r3 -> h4 [stub]
     ip address 172.16.4.3/24
    !
    interface Ethernet1/1.1
     no shutdown
      vrf member blue
     description r3 -> r2
     ip address 10.1.0.10/30
    !
    interface Ethernet1/1.2
     no shutdown
      vrf member red
     description r3 -> r2
     ip address 10.1.0.14/30
    !
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    hostname r1
    !
    no ip domain-lookup
    !
    feature lldp
    !
    username vagrant password vagrant
    !
    ip host h1 172.16.0.4
    ip host h2 172.16.1.5
    ip host h3 172.16.3.6
    ip host h4 172.16.4.7
    ip host h5 172.16.2.8
    ip host r1-blue 172.16.3.1
    ip host r1-red 172.16.0.1
    ip host r2 10.0.0.2
    ip host r2-blue 10.1.0.2
    ip host r2-red 10.1.0.6
    ip host r3 10.0.0.3
    ip host r3-blue 172.16.4.3
    ip host r3-red 172.16.1.3
    !
    feature interface-vlan
    !
    feature bgp
    !
    vrf context blue
      rd 65000:2
      address-family ipv4 unicast
        route-target import 65000:2
        route-target export 65000:2
      exit
    vrf context red
      rd 65000:1
      address-family ipv4 unicast
        route-target import 65000:1
        route-target export 65000:1
      exit
    !
    !
    interface mgmt0
     no lldp transmit
     no lldp receive
    !
    interface loopback0
     no shutdown
     ip address 10.0.0.1/32
    !
    interface Ethernet1/1
     no shutdown
     no switchport
     mac-address 52dc.cafe.0101
     description r1 -> r2
    !
    interface Ethernet1/2
     no shutdown
     no switchport
     mac-address 52dc.cafe.0102
      vrf member red
     description r1 -> h1 [stub]
     ip address 172.16.0.1/24
    !
    interface Ethernet1/3
     no shutdown
     no switchport
     mac-address 52dc.cafe.0103
      vrf member red
     description r1 -> h5 [stub]
     ip address 172.16.2.1/24
    !
    interface Ethernet1/4
     no shutdown
     no switchport
     mac-address 52dc.cafe.0104
      vrf member blue
     description r1 -> h3 [stub]
     ip address 172.16.3.1/24
    !
    interface Ethernet1/1.1
     no shutdown
      vrf member blue
     description r1 -> r2
     ip address 10.1.0.1/30
    !
    interface Ethernet1/1.2
     no shutdown
      vrf member red
     description r1 -> r2
     ip address 10.1.0.5/30
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for r2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4, h5
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/nxos.yml for r1, r3

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [r2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for r2

TASK [template] ****************************************************************
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [r2]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [r2]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]

TASK [Create a temporary file for the rendered script] *************************
changed: [h5 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h5 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h5 -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-wwv2xmao.sh] ***********************
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h5 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]

TASK [nxos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/nxos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [r3]
changed: [r1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [r2]
ok: [r1]
ok: [r3]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, r1, r2, r3 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, r1, r2, r3 => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, r1, r2, r3 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, h5, r1, r2, r3 => (item=vrf)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [r2]
ok: [r1]
ok: [r3]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
ok: [r2]
ok: [r1]
ok: [r3]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [r1]
skipping: [r2]
skipping: [r3]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
ok: [r2]
ok: [r1]
ok: [r3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
ok: [r2] => 
  msg: |-
    vlan configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/eth1.701 ]; then
      ip link add link eth1 name eth1.701 type vlan id 701
      ip link set dev eth1.701 up
    fi
    if [ ! -e /sys/devices/virtual/net/eth1.700 ]; then
      ip link add link eth1 name eth1.700 type vlan id 700
      ip link set dev eth1.700 up
    fi
    if [ ! -e /sys/devices/virtual/net/eth2.701 ]; then
      ip link add link eth2 name eth2.701 type vlan id 701
      ip link set dev eth2.701 up
    fi
    if [ ! -e /sys/devices/virtual/net/eth2.700 ]; then
      ip link add link eth2 name eth2.700 type vlan id 700
      ip link set dev eth2.700 up
    fi
ok: [r1] => 
  msg: |-
    vlan configuration for r1
    =========================================
    vlan 701
     name blue
    !
    vlan 700
     name red
    !
  
    !
    interface Ethernet1/2
    !
    interface Ethernet1/3
    !
    interface Ethernet1/4
    !
    interface Ethernet1/1.1
     encapsulation dot1q 701
    !
    interface Ethernet1/1.2
     encapsulation dot1q 700
ok: [r3] => 
  msg: |-
    vlan configuration for r3
    =========================================
    vlan 701
     name blue
    !
    vlan 700
     name red
    !
  
    !
    interface Ethernet1/2
    !
    interface Ethernet1/3
    !
    interface Ethernet1/1.1
     encapsulation dot1q 701
    !
    interface Ethernet1/1.2
     encapsulation dot1q 700

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/nxos.yml for r1, r3
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for r2

TASK [nxos_config: deploying vlan from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/nxos.j2] ***
changed: [r3]
changed: [r1]

TASK [template] ****************************************************************
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r2]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
changed: [r2]

TASK [run vtysh to import vlan config from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [r2]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [r2]
ok: [r1]
ok: [r3]

TASK [Find configuration template for routing] *********************************
ok: [h1]
ok: [h2]
skipping: [r1]
skipping: [r2]
ok: [h3]
skipping: [r3]
ok: [h4]
ok: [h5]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [r1]
skipping: [r2]
skipping: [r3]

TASK [Find configuration deployment deploy_script for routing] *****************
ok: [h1]
skipping: [r1]
ok: [h2]
skipping: [r2]
ok: [h4]
skipping: [r3]
ok: [h3]
ok: [h5]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
skipping: [r1]
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.3 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.3 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.3 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.3 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    routing configuration for h3
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.3.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.3.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.3.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.3.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
skipping: [r2]
skipping: [r3]
ok: [h5] => 
  msg: |-
    routing configuration for h5
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.2.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    routing configuration for h4
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.4.3 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.4.3 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.4.3 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.4.3 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [r1]
skipping: [r2]
skipping: [r3]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4, h5

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]
changed: [h5 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h5 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h5 -> localhost]
changed: [h4 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-i8vpwl6p.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]
changed: [h5 -> localhost]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [r2]
ok: [r1]
ok: [r3]

TASK [Find configuration template for ospf] ************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
ok: [r2]
ok: [r1]
ok: [r3]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [r1]
skipping: [r2]
skipping: [r3]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
ok: [r2]
ok: [r1]
ok: [r3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
ok: [r1] => 
  msg: |-
    ospf configuration for r1
    =========================================
ok: [r3] => 
  msg: |-
    ospf configuration for r3
    =========================================
ok: [r2] => 
  msg: |-
    ospf configuration for r2
    =========================================
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/nxos.yml for r1, r3
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for r2

TASK [nxos_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/nxos.j2] ***
ok: [r1]
ok: [r3]

TASK [template] ****************************************************************
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [r2]

TASK [run vtysh to import ospf config from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/frr.j2] ***
changed: [r2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [r2]
ok: [r1]
ok: [r3]

TASK [Find configuration template for vrf] *************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
ok: [r2]
ok: [r1]
ok: [r3]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [r1]
skipping: [r2]
skipping: [r3]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
ok: [r2]
ok: [r1]
ok: [r3]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
ok: [r1] => 
  msg: |-
    vrf configuration for r1
    =========================================
    !
    route-map all
    !
    route-map all-int permit 10
      match route-type internal
    !
    route-map all-int permit 20
      match route-type external
    !
    feature ospf
    !
    router ospf 101
     vrf blue
      timers throttle spf 100 200 500
      timers throttle lsa 0 100 500
      router-id 10.0.0.1
    !
      redistribute direct route-map all
    !
    interface Ethernet1/4
    ! r1 -> h3
     ip router ospf 101 area 0.0.0.0
     ip ospf network point-to-point
     ip ospf passive-interface
    !
    interface Ethernet1/1.1
    ! r1 -> r2
     ip router ospf 101 area 0.0.0.0
     ip ospf network point-to-point
    !
    !
    route-map all
    !
    route-map all-int permit 10
      match route-type internal
    !
    route-map all-int permit 20
      match route-type external
    !
    feature ospf
    !
    router ospf 100
     vrf red
      timers throttle spf 100 200 500
      timers throttle lsa 0 100 500
      router-id 10.0.0.1
    !
      redistribute direct route-map all
    !
    interface Ethernet1/2
    ! r1 -> h1
     ip router ospf 100 area 0.0.0.0
     ip ospf network point-to-point
     ip ospf passive-interface
    !
    interface Ethernet1/3
    ! r1 -> h5
     ip router ospf 100 area 0.0.0.0
     ip ospf network point-to-point
     ip ospf passive-interface
    !
    interface Ethernet1/1.2
    ! r1 -> r2
     ip router ospf 100 area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [r3] => 
  msg: |-
    vrf configuration for r3
    =========================================
    !
    route-map all
    !
    route-map all-int permit 10
      match route-type internal
    !
    route-map all-int permit 20
      match route-type external
    !
    feature ospf
    !
    router ospf 101
     vrf blue
      timers throttle spf 100 200 500
      timers throttle lsa 0 100 500
      router-id 10.0.0.3
    !
      redistribute direct route-map all
    !
    interface Ethernet1/3
    ! r3 -> h4
     ip router ospf 101 area 0.0.0.0
     ip ospf network point-to-point
     ip ospf passive-interface
    !
    interface Ethernet1/1.1
    ! r3 -> r2
     ip router ospf 101 area 0.0.0.0
     ip ospf network point-to-point
    !
    !
    route-map all
    !
    route-map all-int permit 10
      match route-type internal
    !
    route-map all-int permit 20
      match route-type external
    !
    feature ospf
    !
    router ospf 100
     vrf red
      timers throttle spf 100 200 500
      timers throttle lsa 0 100 500
      router-id 10.0.0.3
    !
      redistribute direct route-map all
    !
    interface Ethernet1/2
    ! r3 -> h2
     ip router ospf 100 area 0.0.0.0
     ip ospf network point-to-point
     ip ospf passive-interface
    !
    interface Ethernet1/1.2
    ! r3 -> r2
     ip router ospf 100 area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [r2] => 
  msg: |-
    vrf configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
    # Create VRF tables
    if [ ! -e /sys/devices/virtual/net/blue ]; then
    ip link add blue type vrf table 101
    fi
    ip link set blue up
    if [ ! -e /sys/devices/virtual/net/red ]; then
    ip link add red type vrf table 100
    fi
    ip link set red up
  
    # Move interfaces and loopbacks to vrfs
    sysctl -qw net.ipv6.conf.eth1.701.keep_addr_on_down=1
    ip link set eth1.701 master blue
    sysctl -qw net.ipv6.conf.eth1.700.keep_addr_on_down=1
    ip link set eth1.700 master red
    sysctl -qw net.ipv6.conf.eth2.701.keep_addr_on_down=1
    ip link set eth2.701 master blue
    sysctl -qw net.ipv6.conf.eth2.700.keep_addr_on_down=1
    ip link set eth2.700 master red
  
    cat >/tmp/vrf_config <<CONFIG
    vrf blue
     exit-vrf
    vrf red
     exit-vrf
    !
    router bgp 65000
    !
    !
    !
    ! OSPFv2 FRR configuration
    !
    router ospf vrf blue
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
     redistribute connected
  
    exit
    !
    interface eth1.701
    ! r2 -> r1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2.701
    ! r2 -> r3
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    !
    ! OSPFv2 FRR configuration
    !
    router ospf vrf red
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
     redistribute connected
  
    exit
    !
    interface eth1.700
    ! r2 -> r1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2.700
    ! r2 -> r3
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
    !
    CONFIG
    vtysh -f /tmp/vrf_config
    exit $?

TASK [Deploy vrf configuration] ************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/nxos.yml for r1, r3
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for r2

TASK [nxos_config: deploying vrf from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/nxos.j2] ***
changed: [r3]
changed: [r1]

TASK [template] ****************************************************************
changed: [r2]

TASK [set_fact] ****************************************************************
ok: [r2]

TASK [run /tmp/config.sh to deploy vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
changed: [r2]

TASK [run vtysh to import vrf config from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/frr.j2] ***
skipping: [r2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h2                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h3                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h4                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h5                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
r1                         : ok=39   changed=3    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
r2                         : ok=47   changed=9    unreachable=0    failed=0    skipped=18   rescued=0    ignored=0   
r3                         : ok=39   changed=3    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   



VRF lite implementation with VLAN trunks

* h1, h2, and h5 should be able to ping each other
* h3 and h4 should be able to ping each other

Please note it might take a while for the lab to work due to
STP and OSPF setup phase

