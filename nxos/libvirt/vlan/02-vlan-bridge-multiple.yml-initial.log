[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/nxos.yml for s1

TASK [Wait for Eth1/1 to appear] ***********************************************
ok: [s1]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, s1

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, s1

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.1/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.2/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.3/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.4/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    no ip domain-lookup
    !
    feature lldp
    !
    username vagrant password vagrant
    !
    ip host h1 172.31.1.1
    ip host h2 172.31.1.2
    ip host h3 172.31.1.3
    ip host h4 172.31.1.4
    !
    feature interface-vlan
    !
    interface mgmt0
     no lldp transmit
     no lldp receive
    !
    interface loopback0
     no shutdown
     ip address 10.0.0.5/32
    !
    interface Ethernet1/1
     no shutdown
     no switchport
     mac-address 52dc.cafe.0501
     description [Access VLAN red] s1 -> h1
    !
    interface Ethernet1/2
     no shutdown
     no switchport
     mac-address 52dc.cafe.0502
     description [Access VLAN red] s1 -> h2
    !
    interface Ethernet1/3
     no shutdown
     no switchport
     mac-address 52dc.cafe.0503
     description [Access VLAN blue] s1 -> h3
    !
    interface Ethernet1/4
     no shutdown
     no switchport
     mac-address 52dc.cafe.0504
     description [Access VLAN blue] s1 -> h4
    !
    interface vlan700
     no shutdown
     description VLAN red (700) -> [h1,h2] [stub]
    !
    interface vlan701
     no shutdown
     description VLAN blue (701) -> [h3,h4] [stub]
    !

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/nxos.yml for s1

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h4 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h2 -> localhost]
changed: [h3 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-325tpcwr.sh] ***********************
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]
changed: [h2 -> localhost]

TASK [nxos_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/nxos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [s1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1 => (item=vlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s1]

TASK [Find configuration template for vlan] ************************************
ok: [s1]

TASK [fail] ********************************************************************
skipping: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    vlan 701
     name blue
    !
    vlan 700
     name red
    !
  
    !
    interface Ethernet1/1
     switchport
     switchport mode access
     switchport access vlan 700
    !
    interface Ethernet1/2
     switchport
     switchport mode access
     switchport access vlan 700
    !
    interface Ethernet1/3
     switchport
     switchport mode access
     switchport access vlan 701
    !
    interface Ethernet1/4
     switchport
     switchport mode access
     switchport access vlan 701
    !
    interface vlan700
    !
    interface vlan701

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s1]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/nxos.yml for s1

TASK [nxos_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/nxos.j2] ***
changed: [s1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h2                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h3                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h4                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
s1                         : ok=22   changed=2    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   



The device under test is a simple bridge without an IP address in the red
or blue VLAN. Both VLANs are using the same IP prefix to identify potential
inter-VLAN leaking.

* h1 and h2 should be able to ping each other
* h3 and h4 should be able to ping each other
* h1 should not be able to reach h3

