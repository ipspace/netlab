[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/readiness-check/nxos.yml for ros, s1

TASK [Wait for Eth1/1 to appear] ***********************************************
ok: [ros]
ok: [s1]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, ros, s1

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for normalize] *******************************
ok: [h2]
ok: [h1]
ok: [s1]
ok: [ros]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [h2]
ok: [s1]
ok: [ros]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, ros, s1

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [s1]
ok: [ros]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.4/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    no ip domain-lookup
    !
    feature lldp
    !
    username vagrant password vagrant
    !
    ip host h1 172.16.0.3
    ip host h2 172.16.1.4
    ip host ros 10.0.0.2
    ip host ros-tenant 172.16.0.2
    !
    feature interface-vlan
    !
    interface mgmt0
     no lldp transmit
     no lldp receive
    !
    interface loopback0
     no shutdown
     ip address 10.0.0.1/32
    !
    interface Ethernet1/1
     no shutdown
     no switchport
     mac-address 52dc.cafe.0101
     description s1 -> ros
     mtu 1600
     ip address 10.1.0.2/30
    !
    interface Ethernet1/2
     no shutdown
     no switchport
     mac-address 52dc.cafe.0102
     description [Access VLAN red] s1 -> h1
    !
    interface Ethernet1/3
     no shutdown
     no switchport
     mac-address 52dc.cafe.0103
     description [Access VLAN blue] s1 -> h2
    !
    interface vlan1000
     no shutdown
     description VLAN red (1000) -> [h1,ros]
    !
    interface vlan1001
     no shutdown
     description VLAN blue (1001) -> [h2,ros]
    !
ok: [ros] => 
  msg: |-
    initial configuration for ros
    =========================================
    hostname ros
    !
    no ip domain-lookup
    !
    feature lldp
    !
    username vagrant password vagrant
    !
    ip host h1 172.16.0.3
    ip host h2 172.16.1.4
    ip host ros-tenant 172.16.0.2
    ip host s1 10.0.0.1
    !
    feature interface-vlan
    !
    feature bgp
    !
    vrf context tenant
      rd 65000:1
      address-family ipv4 unicast
        route-target import 65000:1
        route-target export 65000:1
      exit
    !
    !
    interface mgmt0
     no lldp transmit
     no lldp receive
    !
    interface loopback0
     no shutdown
     ip address 10.0.0.2/32
    !
    interface Ethernet1/1
     no shutdown
     no switchport
     mac-address 52dc.cafe.0201
     description ros -> s1
     mtu 1600
     ip address 10.1.0.1/30
    !
    interface vlan1000
     no shutdown
      vrf member tenant
     description VLAN red (1000) -> [h1,s1]
     ip address 172.16.0.2/24
    !
    interface vlan1001
     no shutdown
      vrf member tenant
     description VLAN blue (1001) -> [h2,s1]
     ip address 172.16.1.2/24
    !

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/nxos.yml for ros, s1

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-rfdmzkrj.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [nxos_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/nxos.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [ros]
changed: [s1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [s1]
ok: [ros]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, ros, s1 => (item=vlan)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, ros, s1 => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, ros, s1 => (item=ospf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, ros, s1 => (item=vrf)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for h1, h2, ros, s1 => (item=vxlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for vlan] ************************************
skipping: [h1]
skipping: [h2]
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for vlan] ********************
skipping: [h1]
skipping: [h2]
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [ros] => 
  msg: |-
    vlan configuration for ros
    =========================================
    vlan 1001
     name blue
    !
    vlan 1000
     name red
    !
  
    !
    interface vlan1000
    !
    interface vlan1001
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    vlan 1001
     name blue
    !
    vlan 1000
     name red
    !
  
    !
    interface Ethernet1/2
     switchport
     switchport mode access
     switchport access vlan 1000
    !
    interface Ethernet1/3
     switchport
     switchport mode access
     switchport access vlan 1001
    !
    interface vlan1000
    !
    interface vlan1001

TASK [Deploy vlan configuration] ***********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/nxos.yml for ros, s1

TASK [nxos_config: deploying vlan from /home/pipi/netlab_gh/netsim/ansible/templates/vlan/nxos.j2] ***
changed: [ros]
changed: [s1]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for routing] *********************************
skipping: [ros]
ok: [h1]
skipping: [s1]
ok: [h2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [ros]
skipping: [s1]
ok: [h1]
ok: [h2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [ros]
skipping: [s1]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.2 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.2 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.2 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.2 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [ros]
skipping: [s1]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-xj6ncfwl.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for ospf] ************************************
skipping: [h1]
skipping: [h2]
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [h1]
skipping: [h2]
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [ros] => 
  msg: |-
    ospf configuration for ros
    =========================================
    feature ospf
    !
    router ospf 1
     router-id 10.0.0.2
     timers throttle spf 100 200 500
     timers throttle lsa 0 100 500
    !
    interface loopback0
     ip router ospf 1 area 0.0.0.0
    !
    interface Ethernet1/1
    ! ros -> s1
     ip router ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    feature ospf
    !
    router ospf 1
     router-id 10.0.0.1
     timers throttle spf 100 200 500
     timers throttle lsa 0 100 500
    !
    interface loopback0
     ip router ospf 1 area 0.0.0.0
    !
    interface Ethernet1/1
    ! s1 -> ros
     ip router ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Deploy ospf configuration] ***********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/nxos.yml for ros, s1

TASK [nxos_config: deploying ospf from /home/pipi/netlab_gh/netsim/ansible/templates/ospf/nxos.j2] ***
changed: [s1]
changed: [ros]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for vrf] *************************************
skipping: [h1]
skipping: [h2]
skipping: [s1]
ok: [ros]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [h1]
skipping: [h2]
skipping: [s1]
ok: [ros]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [s1]
ok: [ros] => 
  msg: |-
    vrf configuration for ros
    =========================================
    !
    route-map all
    !
    route-map all-int permit 10
      match route-type internal
    !
    route-map all-int permit 20
      match route-type external
    !
    feature ospf
    !
    router ospf 100
     vrf tenant
      timers throttle spf 100 200 500
      timers throttle lsa 0 100 500
      router-id 10.0.0.2
    !
      redistribute direct route-map all
    !
    interface vlan1000
    ! VLAN red (1000) -> [h1,s1]
     ip router ospf 100 area 0.0.0.0
    !
    interface vlan1001
    ! VLAN blue (1001) -> [h2,s1]
     ip router ospf 100 area 0.0.0.0
    !

TASK [Deploy vrf configuration] ************************************************
skipping: [h1]
skipping: [h2]
skipping: [s1]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/nxos.yml for ros

TASK [nxos_config: deploying vrf from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/nxos.j2] ***
changed: [ros]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for vxlan] ***********************************
skipping: [h1]
skipping: [h2]
ok: [ros]
ok: [s1]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Find configuration deployment deploy_script for vxlan] *******************
skipping: [h1]
skipping: [h2]
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [ros] => 
  msg: |-
    vxlan configuration for ros
    =========================================
    feature nv overlay
    feature vn-segment-vlan-based
    !
    vlan 1001
     vn-segment 101001
    !
    vlan 1000
     vn-segment 101000
    !
  
    !
    interface nve 1
     source-interface loopback0
     member vni 101000
      ingress-replication protocol static
       peer-ip 10.0.0.1
     member vni 101001
      ingress-replication protocol static
       peer-ip 10.0.0.1
     no shutdown
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    feature nv overlay
    feature vn-segment-vlan-based
    !
    vlan 1001
     vn-segment 101001
    !
    vlan 1000
     vn-segment 101000
    !
  
    !
    interface nve 1
     source-interface loopback0
     member vni 101000
      ingress-replication protocol static
       peer-ip 10.0.0.2
     member vni 101001
      ingress-replication protocol static
       peer-ip 10.0.0.2
     no shutdown

TASK [Deploy vxlan configuration] **********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/nxos.yml for ros, s1

TASK [nxos_config: deploying vxlan from /home/pipi/netlab_gh/netsim/ansible/templates/vxlan/nxos.j2] ***
changed: [ros]
changed: [s1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
h2                         : ok=37   changed=8    unreachable=0    failed=0    skipped=30   rescued=0    ignored=0   
ros                        : ok=46   changed=5    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
s1                         : ok=41   changed=4    unreachable=0    failed=0    skipped=17   rescued=0    ignored=0   



The devices under test are VLAN-to-VXLAN bridge and VXLAN router-on-a-stick.
Assuming 'vxlan-bridging' test case succeeded, this one tests VXLAN-to-VXLAN
routing

* h1 and h2 should be able to ping each other

