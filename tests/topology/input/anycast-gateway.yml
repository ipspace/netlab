#
# Anycast gateway test case
#

gateway.id: 1

groups:
  _auto_create: True
  switches:
    module: [gateway, vlan, ospf]
    members: [r1, r2, r3]
    device: eos
  hosts:
    members: [h1, h2, h3, h4]
    device: linux

nodes:
  h4:
    id: 13

# Test anycast in a VLAN
# ... also verify that the VLAN data is not overwriting gateway data on SVI interface
vlans:
  red:
    gateway: true

links:
- r1:
  r2:
  h1:
  h2:
  gateway.anycast.unicast: false      # Test removal of unicast IP addresses
  gateway.id: -2                      # And a negative offset
- r1:
  h3:
  vlan.access: red
- r2:
  h4:
  vlan.access: red
#
# Force sequential allocation through low last-in-subnet IP
- r2:
  h4:
  prefix:
    ipv4: 10.42.42.0/28
  gateway.id: -3
#
# Force sequential allocation through low prefix size -- verify gateway IP is skipped
- r2:
  h4:
  prefix:
    ipv4: 10.42.42.0/29
  gateway: true
- r2:
  h4:
  prefix:
    ipv4: 172.31.31.0/24
    ipv6: 2001:db8:cafe:1::/64
  gateway: true

# Add a 3rd router with no gateway configured - verify the module is removed
- r1-r3
- r2-r3

#
# Use these formats to display a summary of transformed topology when debugging the test case
#
# Display anycast information with 'netlab create _file_ -o format:anycast'
#
defaults.outputs.format:
  anycast: |
    {% for n,n_d in nodes.items() if 'gateway' in n_d.module %}
    {{ n }}:
        {{ n_d.gateway }}
    {%   for intf in n_d.interfaces if 'gateway' in intf %}
      {{ intf.ifname }} {{ intf.name }}:
        {{ intf.gateway }}
    {%   endfor %}
    {% endfor %}
