#
# Tons of addressing test cases
#
addressing:
  # Use a standard pool and remove IPv4 attribute
  lan:                      
    ipv4:
    ipv6: 2001:db8:1::/48
  unnumbered:
    unnumbered: True
  v4unnum:
    ipv4: True
  v6only:
    ipv6: 2001:db8:2::/48
  dualstack:
    ipv4: 172.17.0.0/16
    prefix: 25
    ipv6: 2001:db8:3::/48
  l2only:

defaults.extra_attributes.global: [ 'future' ]

defaults.device: iosv

# Create a few nodes with non-default IDs just for fun
nodes:
  r1:
    id: 7
  r2:
    id: 21
  r3:
    id: 42
  r4:

# And now the real work starts
links:
- name: Standard LAN link (happens to be v6only)
  r1:
  r2:
  r3:

- name: IPv4-only unnumbered link with static IPv4 and IPv6 addresses
  role: v4unnum
  r1:
    ipv4: 10.42.42.18/32
  r2:
    ipv6: 2001:db8:42:44::1/64
  r3:

- name: Unnumbered link (using unnumbered attribute)
  r1:
  r2:
  r3:
  role: unnumbered

- name: Ported from ifaddr test case
  type: lan
  prefix:
    ipv4: 1.2.3.0/29
  r1:
    ipv4: 1.2.3.5
  r2:
    ipv4: 1.2.3.4/29
    ipv6: 2001:db8:1:1::1/127
  r3:
    ipv4: 5

- name: v6only link
  r1:
  r2:
  r3:
  role: v6only

- name: Dual-stack link
  r1:
  r2:
  r3:
  role: dualstack

- name: P2P L2only link
  r1:
  r2:
  r3:
  role: l2only

- name: Link with custom node IDs
  r1:
    ipv4: 3
    ipv6: 7
  r2:
    ipv4: 2
    ipv6: 42
  r4:
  role: dualstack

- name: Link with unnumbered nodes
  r1:
    ipv4: True
  r2:
    ipv6: True
  r3:
  role: dualstack

- name: l2only link with a static IP address
  r1:
    ipv4: 10.0.0.1/30
  r2:
  r3:
  role: l2only

- name: l2only LAN link with a host IP address
  r1:
  r2:
    ipv4: 10.42.42.17
  r3:
  prefix: False

- name: Link with static prefix
  r1:
  r2:
  r3:
  prefix: 172.42.42.0/24

- name: Link with static dual-stack prefix
  r1:
  r2:
  r3:
  prefix:
    ipv4: 172.42.32.0/22
    ipv6: 2001:db8:42:42::/64

- name: Link with unnumbered static prefix
  r1:
  r2:
  prefix:
    ipv4: True
    ipv6: 2001:db8:42:43::/64
