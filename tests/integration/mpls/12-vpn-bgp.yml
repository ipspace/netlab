message: |
  The tested device (DUT) is a PE-router running MPLS/VPN with a simple VRF. Two
  BGP-speaking CE-routers are attached to the VRF (one per PE-router)

  The PE-router has to run OSPF and LDP with a P-router, exchange IPv4 routes
  via BGP with the CE-router, convert VRF IPv4 routes into VPNv4 routes, and
  pass them to another PE-router.

  The validation tests check BGP prefixes on the CE-routers and perform
  end-to-end connectivity tests between CE-router loopbacks.

groups:
  _auto_create: True
  ce_probes:
    members: [ ce1, ce2 ]
    device: frr
    provider: clab
    module: [ bgp ]
  pe:
    members: [ dut, pe2 ]
    module: [ ospf, bgp, mpls, vrf ]
    mpls.ldp: True
    mpls.vpn: True
    bgp.as: 65001
  p:
    members: [ p1, p2 ]
    module: [ ospf, mpls ]
    mpls.ldp: True
  p_probes:
    members: [ p1, p2 ]
    device: frr
    provider: clab
  pe_probes:
    members: [ pe2 ]
    device: eos

nodes:
  ce1:
    bgp.as: 65100
  ce2:
    bgp.as: 65101

vrfs:
  tenant:
    links: [ ce1-dut, ce2-pe2 ]

links: [ dut-p1, p1-p2, p2-pe2 ]

defaults.devices.vptx.netlab_validate:
  pe_ibgp.wait: 240
  pfx_ce1.wait: 60
  pfx_ce2.wait: 60

validate:
  pe_ospf:
    description: Check OSPF sessions with DUT (wait up to 30 seconds)
    wait: 30
    wait_msg: Waiting for OSPF adjacency
    nodes: [ p1 ]
    plugin: ospf_neighbor(nodes.dut.ospf.router_id)
    stop_on_error: true
  ldp:
    description: Check LDP session
    wait: 30
    wait_msg: Waiting for LDP to start
    nodes: [ p1 ]
    show:
      frr: mpls ldp neighbor {{ hostvars.dut.ldp.router_id }} json
    valid: |
      neighbors[0].state == 'OPERATIONAL'
  pe_ibgp:
    description: Check IBGP session between PE-routers
    wait: 40
    wait_msg: Waiting for IBGP sessions to start
    nodes: [ pe2 ]
    plugin: bgp_neighbor(node.bgp.neighbors,'dut')
    stop_on_error: true
  pe_vpnv4:
    description: Check VPNv4 AF on IBGP session between PE-routers
    nodes: [ pe2 ]
    plugin: bgp_neighbor(node.bgp.neighbors,'dut',activate='vpnv4')
    stop_on_error: true
  ce_ebgp:
    description: Check PE-CE EBGP session
    wait: 10
    wait_msg: Waiting for EBGP sessions to start
    nodes: [ ce1 ]
    plugin: bgp_neighbor(node.bgp.neighbors,'dut')
    stop_on_error: true
  pfx_ce1:
    description: Check CE2 BGP prefix on CE1
    wait: 10
    wait_msg: Waiting for DUT to propagate CE2 prefix to CE1
    nodes: [ ce1 ]
    plugin: bgp_prefix(nodes.ce2.loopback.ipv4)
  pfx_ce2:
    description: Check CE1 BGP prefix on CE2
    wait: 10
    wait_msg: Waiting for DUT to propagate CE1 prefix to VPNv4 AF
    nodes: [ ce2 ]
    plugin: bgp_prefix(nodes.ce1.loopback.ipv4)
  ping:
    description: Ping-based end-to-end reachability test
    wait_msg: Waiting for end-to-end MPLS path
    wait: 10
    nodes: [ ce1 ]
    plugin: ping('ce2',src=node.loopback.ipv4)
