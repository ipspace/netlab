---
message: |
  The devices under test are an MLAG pair of VLAN-to-VXLAN bridges providing two
  access VLANs and two VXLAN VNIs using static VXLAN tunnels. Both VLANs are
  using the same IP prefix to identify potential inter-VLAN leaking.

  The pair uses the mlag.vtep plugin to provision an anycast MLAG VTEP across
  both, such that both devices are equivalent from the perspective of the 3rd
  VTEP (FRR).

  The network uses BGP EVPN as the control plane for VXLAN

  Each VLAN has four hosts attached to it:

  * xl -- a host using LAG attached to dut_a and dut_b
  * x1 -- an orphan host attached to dut_a
  * x2 -- an orphan host attached to dut_b
  * xr -- a host attached to remote VTEP

  All hosts within a single VLAN should be able to ping each other.

  Please note it might take a while for the lab to work due to STP learning
  phase and/or OSPF peering delays

plugin: [ mlag.vtep ]

bgp.as: 65000

groups:
  _auto_create: True
  lag_hosts:
    members: [ rl, bl ]
    module: [ lag ]
    device: linux
    # provider: clab, use Same provider as MLAG devices for LACP to work

  hosts:
    members: [ r1, r2, rr, b1, b2, br ]
    device: linux
    provider: clab

  switches:
    members: [ dut_a, dut_b ]
    module: [ vlan, vxlan, ospf, lag, bgp, evpn ]

  probes:
    members: [ xs ]
    module: [ vlan, vxlan, ospf, bgp, evpn ]
    device: frr
    provider: clab

vlans:
  red:
    mode: bridge
    prefix:
      ipv4: 172.31.1.0/24
    links: [ xs-rr, dut_a-r1, dut_b-r2 ]      # Single-connected hosts
  blue:
    mode: bridge
    prefix:
      ipv4: 172.31.1.0/24
    links: [ xs-br, dut_a-b1, dut_b-b2 ]      # Single-connected hosts

vxlan.vlans: [ red, blue ]

links:
  mlag:
  - lag:                                      # Peer link DUT_A - DUT_B
      members: [ dut_a-dut_b ]
      mlag.peergroup: True
  edge:
  - lag:                                      # Host in red VLAN dual-attached to DUT_A and DUT_B
      members: [ rl-dut_a, rl-dut_b ]
    vlan.access: red
  - lag:                                      # Host in blue VLAN dual-attached to DUT_A and DUT_B
      members: [ bl-dut_a, bl-dut_b ]
    vlan.access: blue
  core:                                       # Core links
  - xs-dut_a
  - xs-dut_b

validate:
  ospf_a:
    description: Check OSPF adjacency with DUT_A
    wait_msg: Waiting for OSPF adjacency process to complete
    wait: 30
    nodes: [ xs ]
    plugin: ospf_neighbor(nodes.dut_a.ospf.router_id)
  ospf_b:
    description: Check OSPF adjacency with DUT_B
    wait_msg: Waiting for OSPF adjacency process to complete
    wait: 30
    nodes: [ xs ]
    plugin: ospf_neighbor(nodes.dut_b.ospf.router_id)
  ibgp_a:
    description: Check IBGP adjacencies with DUT_A
    wait: 40
    nodes: [ xs ]
    wait_msg: Waiting for IGBP session
    plugin: bgp_neighbor(node.bgp.neighbors,'dut_a')
  ibgp_b:
    description: Check IBGP adjacencies with DUT_B
    wait: 10
    nodes: [ xs ]
    wait_msg: Waiting for IGBP session
    plugin: bgp_neighbor(node.bgp.neighbors,'dut_b')
  ping_red:
    description: Ping-based reachability test in VLAN red
    nodes: [ rl, r1, r2 ]
    plugin: ping('rr')
  ping_blue:
    description: Ping-based reachability test in VLAN blue
    nodes: [ bl, b1, b2 ]
    plugin: ping('br')
  inter_vlan:
    description: Ping-based reachability test between blue and red VLANs
    nodes: [ rl ]
    devices: [ linux ]
    plugin: ping('br',expect='fail')
