---
message: |
  The tested device (DUT) is a PE-router running IS-IS, BGP and SRv6 across an IPv6-only network to interconnect
  two IPv4-only networks. The validation test checks end-to-end IPv4 connectivity across a SRv6 core.
  See https://www.ietf.org/archive/id/draft-mishra-idr-v4-islands-v6-core-4pe-06.html

defaults.sources.extra: [ ../wait_times.yml ]

addressing:
  core:
    ipv4: False               # ipv6-only
    ipv6: 2001:db8:3::/48     # SRv6 requires ipv6 addresses on interfaces

  loopback:
    ipv4: False               # No need for ipv4 loopbacks, this avoids creating ipv4 ibgp sessions too
    ipv6: 5F00::/16           # Using loopbacks within the SRv6 locator range

  lb_ce:
    ipv6: 2001:db8:1::/48
    prefix: 32

  p2p:
    ipv6: 2001:db8:4::/48
    ipv4: False

  lan:
    ipv4: False
    ipv6: 2001:db8:42::/48

srv6.allocate_loopback: True  # Override the ipv6 loopback address and allocate one from the per-node locator range

srv6.bgp:
  ipv4: False                  # Enable IPv4 in the overlay (for IBGP)
  ipv6: True

srv6.vpn: False

bgp.as: 65000                 # single iBGP AS

groups:
  _auto_create: True
  hosts:
    members: [ h1, h2 ]
    device: linux
    provider: clab
  pe:
    members: [ dut, pe2 ]
    module: [ isis, bgp, srv6 ]
    bgp.import: [ connected ]
    bgp.advertise_loopback: False # Using IS-IS for this
  core:
    members: [ p ]
    module: [ isis ]
  ce:
    members: [ ce1, ce2 ]
    module: [ bgp ]
    loopback.pool: lb_ce
  x_switches:
    members: [ pe2 ]
    device: frr
    provider: clab

nodes:
  dut:
  pe2:
  ce1:
    bgp.as: 65101
  ce2:
    bgp.as: 65102

links:
- group: core
  pool: core
  members: [ dut-p, p-pe2 ]
- group: edge
  isis: False
  members: [ h1-dut, h2-pe2 ]
- group: customer
  members: [ ce1-dut, ce2-pe2 ]

validate:
  isis_dut:
    description: Check ISIS sessions with DUT (wait up to 30 seconds)
    wait: 30
    wait_msg: Waiting for ISIS adjacency
    nodes: [ p ]
    plugin: isis_neighbor('dut',level='L2',area='49.0001')
    stop_on_error: true
  isis_pe2:
    description: Check ISIS sessions with PE2 (wait up to 30 seconds)
    wait: 30
    wait_msg: Waiting for ISIS adjacency
    nodes: [ p ]
    plugin: isis_neighbor('pe2',level='L2',area='49.0001')
    stop_on_error: true
  ebgp_dut:
    description: Check EBGP session DUT-CE1
    wait: ebgp_session
    wait_msg: Waiting for EBGP session DUT-CE1
    nodes: [ ce1 ]
    plugin: bgp_neighbor(node.bgp.neighbors,'dut',af='ipv6')
  ebgp_pe2:
    description: Check EBGP session PE2-CE2
    wait: ebgp_session
    wait_msg: Waiting for EBGP session PE2-CE2
    nodes: [ ce2 ]
    plugin: bgp_neighbor(node.bgp.neighbors,'pe2',af='ipv6')
  ibgp:
    description: Check IBGP session with activation of IPv4 over IPv6
    wait: 10
    wait_msg: Waiting for IBGP sessions to start
    nodes: [ pe2 ]
    plugin: bgp_neighbor(node.bgp.neighbors,'dut',af='ipv6')
    stop_on_error: true
  ping_hh:
    description: Ping-based host-to-host reachability test
    wait_msg: We might have to wait a bit longer
    wait: 10
    nodes: [ h1 ]
    plugin: ping('h2',af='ipv6')
  ping_h_ce:
    description: Ping-based host-to-CE reachability test
    wait_msg: We might have to wait a bit longer
    wait: 10
    nodes: [ h1, h2 ]
    plugin: ping('ce1',af='ipv6')
  ping_ce_ce:
    description: Ping-based CE-to-CE reachability test
    wait_msg: We might have to wait a bit longer
    wait: 10
    nodes: [ ce1 ]
    plugin: ping(nodes.ce2.loopback.ipv6,src=nodes.ce1.loopback.ipv6,af='ipv6')
