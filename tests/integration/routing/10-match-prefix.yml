---
message: |
  Use this topology to test route maps with prefix lists for IPv4 and IPv6

plugin: [ bgp.policy, test.vrf_check ]
module: [ bgp ]

defaults.sources.extra: [ defaults-ds.yml, ../wait_times.yml, ../warnings.yml ]

prefix:
  b_orig_1.ipv4: 172.42.42.0/24
  b_orig_2.ipv4: 172.42.43.0/24
  b_orig_3.ipv6: 2001:db8:dead:beef::/64

groups:
  probes:
    device: frr
    provider: clab
    members: [ x1, x2, x3, vx1, vx2, vx3 ]
    bgp.sessions:
      ipv4: [ ebgp ]
      ipv6: [ ebgp ]

routing.prefix:
  orig_1:
  - prefix: b_orig_1
  lb_only:
  - pool: loopback
    min:
      ipv4: 32
      ipv6: 64
    max:
      ipv4: 32
      ipv6: 64

routing.policy:
  in_x1:
  - action: deny
    match.prefix: orig_1
  - action: permit

vrfs:
  tenant:

nodes:
  dut:
    bgp.as: 65000
    module: [ bgp, routing, vrf ]
    id: 1
    routing.policy:
      out_x2:
      - match.prefix: lb_only

  x1:                 # Prefix originator
    bgp.as: 65100
    bgp.originate: [ b_orig_1, b_orig_2 ]
  x2:                 # Probe with a routing policy
    bgp.as: 65101
  x3:                 # Probe without a routing policy
    bgp.as: 65102
  vx1:                # Prefix originator
    bgp.as: 65100
    bgp.originate: [ b_orig_1, b_orig_2 ]
  vx2:                # Probe with a routing policy
    bgp.as: 65101
  vx3:                # Probe without a routing policy
    bgp.as: 65102

links:
- dut:
    bgp.policy.in: in_x1
  x1:
- dut:
    bgp.policy.out: out_x2
  x2:
- dut:
  x3:
- x1:
  prefix: b_orig_3
  bgp.advertise: True
- dut:
    bgp.policy.in: in_x1
  vx1:
  vrf: tenant
- dut:
    bgp.policy.out: out_x2
  vx2:
  vrf: tenant
- dut:
  vx3:
  vrf: tenant
- vx1:
  prefix: b_orig_3
  bgp.advertise: True

validate:
  ebgp_v4:
    description: Check IPv4 EBGP sessions with DUT
    wait: ebgp_session
    nodes: [ x1, x2, x3, vx1, vx2, vx3 ]
    plugin: bgp_neighbor(node.bgp.neighbors,'dut')

  ebgp_v6:
    description: Check IPv6 EBGP sessions with DUT
    wait: ebgp_session
    nodes: [ x1, x2, x3, vx1, vx2, vx3 ]
    plugin: bgp_neighbor(node.bgp.neighbors,'dut',af='ipv6')

  pfx_o2_v4:
    description: Check for b_orig_2 IPv4 prefix on X3
    wait: bgp_scan_long
    nodes: [ x3, vx3 ]
    plugin: bgp_prefix(prefix.b_orig_2.ipv4)

  pfx_o3_v6:
    description: Check for b_orig_3 IPv6 prefix on X3
    wait: bgp_scan_long
    nodes: [ x3 ]
    plugin: bgp_prefix(prefix.b_orig_3.ipv6,af='ipv6')

  pfx_wait:
    description: Wait a bit for BGP to settle
    wait: 3

  pfx_o1_miss:
    description: Check for missing b_orig_1 IPv4 prefix on X3 (inbound in_x1 IPv4 RP)
    wait: bgp_scan_time
    nodes: [ x3 ]
    plugin: bgp_prefix(prefix.b_orig_1.ipv4,state='missing')

  x2_pfx_o3_miss:
    description: Check for missing b_orig_3 IPv6 prefix on X2 (outbound out_x2 IPv6 RP)
    wait: bgp_scan_time
    nodes: [ x2 ]
    plugin: bgp_prefix(prefix.b_orig_3.ipv6,state='missing',af='ipv6')

  x2_lb_v4:
    description: Check for X1 loopback IPv4 prefix on X2
    wait: bgp_scan_time
    nodes: [ x2 ]
    plugin: bgp_prefix(nodes.x1.loopback.ipv4)

  x2_lb_v6:
    description: Check for X1 loopback IPv6 prefix on X2
    wait: bgp_scan_time
    nodes: [ x2 ]
    plugin: bgp_prefix(nodes.x1.loopback.ipv6,af='ipv6')

  vrf_o3_v6:
    description: Check for b_orig_3 IPv6 prefix on VX3
    wait: bgp_scan_time
    nodes: [ vx3 ]
    plugin: bgp_prefix(prefix.b_orig_3.ipv6,af='ipv6')

  vrf_o1_miss:
    description: Check for missing b_orig_1 IPv4 prefix on VX3 (inbound in_x1 IPv4 RP)
    wait: bgp_scan_time
    nodes: [ vx3 ]
    plugin: bgp_prefix(prefix.b_orig_1.ipv4,state='missing')

  vrf_x2_o3_miss:
    description: Check for missing b_orig_3 IPv6 prefix on VX2 (outbound out_x2 IPv6 RP)
    wait: bgp_scan_time
    nodes: [ vx2 ]
    plugin: bgp_prefix(prefix.b_orig_3.ipv6,state='missing',af='ipv6')

  vrf_x2_lb_v4:
    description: Check for VX1 loopback IPv4 prefix on VX2
    wait: bgp_scan_time
    nodes: [ vx2 ]
    plugin: bgp_prefix(nodes.vx1.loopback.ipv4)

  vrf_x2_lb_v6:
    description: Check for VX1 loopback IPv6 prefix on VX2
    wait: bgp_scan_time
    nodes: [ vx2 ]
    plugin: bgp_prefix(nodes.vx1.loopback.ipv6,af='ipv6')
