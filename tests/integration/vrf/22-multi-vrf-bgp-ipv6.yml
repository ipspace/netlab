---
message: |
  The device under test has two VRFs with two interfaces in each VRF.
  Routers are attached to those interfaces and run BGP with device under test
  in a dual-stack (IPv4 + IPv6) environment.

  The routing and connectivity tests focus on IPv6 (another test cases focuses
  on IPv4), the dual-stack addressing is used only to trigger the incorrect
  activation of BGP address families.

  * r1 and r2 should be able to ping each other and rtr VRF loopback
  * r3 and r4 should be able to ping each other and rtr VRF loopback
  * r1 should not be able to reach r3

  The test also checks whether DUT unnecessarily enables IPv4 AF over IPv6
  EBGP sessions

defaults.sources.extra: [ ../wait_times.yml, ../warnings.yml ]

addressing:                         # This creates a dual-stack network to uncover the
  loopback:                         # ... extraneous activations of address families
    ipv6: 2001:db8:1::/48
  lan:
    ipv6: 2001:db8:2::/48
  p2p:
    ipv6: 2001:db8:3::/48

groups:
  ce:
    members: [ r1, r2, r3, r4 ]
    module: [ bgp ]
    device: frr
    provider: clab
    config: [ bgp-xact ]
  pe:
    members: [ dut ]
    module: [ vrf, bgp ]
    bgp.as: 65000

vrfs:
  red:
    links: [ dut-r1, dut-r2 ]
  blue:
    links: [ dut-r3, dut-r4 ]

nodes:
  dut:
    vrfs:
      red.loopback.ipv6: 2001:db8:c001:cafe::/64
      blue.loopback.ipv6: 2001:db8:c001:cafe::/64
  r1:
    bgp.as: 65101
  r2:
    bgp.as: 65102
  r3:
    bgp.as: 65103
  r4:
    bgp.as: 65104

validate:
  session:
    description: Check EBGP sessions with DUT
    wait_msg: Waiting for EBGP sessions to start
    wait: ebgp_session
    nodes: [ r1, r2, r3, r4 ]
    plugin: bgp_neighbor(node.bgp.neighbors,'dut',af='ipv6')
    stop_on_error: true
  pfx_red:
    description: Check IPv6 BGP prefix on R1
    wait_msg: Waiting for BGP convergence
    wait: bgp_scan_long
    nodes: [ r1 ]
    plugin: bgp_prefix(nodes.r2.loopback.ipv6.replace('::1','::'),af='ipv6')
  pfx_blue:
    description: Check IPv6 BGP prefix on R3
    wait_msg: Waiting for BGP convergence
    wait: bgp_scan_long
    nodes: [ r3 ]
    plugin: bgp_prefix(nodes.r4.loopback.ipv6.replace('::1','::'),af='ipv6')
  lb_red:
    description: Check DUT loopback IPv6 BGP prefix in red VRF
    wait: bgp_scan_time
    nodes: [ r1 ]
    plugin: bgp_prefix(nodes.dut.vrfs.red.loopback_address.ipv6.replace('::1','::'),af='ipv6')
  lb_blue:
    description: Check DUT loopback IPv6 BGP prefix in blue VRF
    wait: bgp_scan_time
    nodes: [ r3 ]
    plugin: bgp_prefix(nodes.dut.vrfs.blue.loopback_address.ipv6.replace('::1','::'),af='ipv6')
  ebgp_4o6:
    description: Check for invalid activation of IPv4 AF over IPv6 EBGP sessions on DUT
    nodes: [ r1, r2, r3, r4 ]
    plugin: bgp_neighbor(node.bgp.neighbors,'dut',af='ipv6',activate='ipv4',state='missing')
  ebgp_6o4:
    description: Check for invalid activation of IPv6 AF over IPv4 EBGP sessions on DUT
    nodes: [ r1, r2, r3, r4 ]
    plugin: bgp_neighbor(node.bgp.neighbors,'dut',af='ipv4',activate='ipv6',state='missing')
  red:
    description: Ping-based reachability test in VRF red
    wait: ping
    nodes: [ r1 ]
    plugin: ping('r2',af='ipv6')
  ping:
    description: Ping-based reachability test in VRF blue
    wait: ping
    nodes: [ r3 ]
    plugin: ping('r4',af='ipv6')
  red_lb:
    description: Pinging red VRF loopback
    nodes: [ r1 ]
    plugin: ping('2001:db8:c001:cafe::1',af='ipv6')
  blue_lb:
    description: Pinging blue VRF loopback
    nodes: [ r3 ]
    plugin: ping('2001:db8:c001:cafe::1',af='ipv6')
