---
message: |
  The device under test has two IPv6-only VRFs with two interfaces in each VRF.
  Routers are attached to those interfaces and run OSPF and BGP with device
  under test. Assuming the OSPF and BGP multi-vrf test cases succeeded, this one
  tests OSPF-to-BGP two-way redistribution.

  * r1 and r2 should be able to ping each other
  * r3 and r4 should be able to ping each other
  * r1 should not be able to reach r3

defaults.interfaces.mtu: 1500

defaults.sources.extra: [ defaults-ipv6-only.yml, ../wait_times.yml ]

groups:
  ce_ospf:
    members: [ r1, r3 ]
    module: [ ospf ]
    device: frr
    provider: clab
  ce_bgp:
    members: [ r2, r4 ]
    module: [ bgp ]
    device: frr
    provider: clab
  pe:
    members: [ dut ]
    module: [ vrf, ospf, bgp ]

vrfs:
  red:
    links: [ dut-r1, dut-r2 ]
  blue:
    links:
    - interfaces: [ dut, r3 ]
      pool: p2p_v6only
    - interfaces: [ dut, r4 ]
      pool: p2p_v6only

nodes:
  dut:
    bgp.as: 65000
    vrfs:
      blue:
        loopback.ipv6: 2001:db8:cafe:2001::/64
  r1:
  r2:
    bgp.as: 65100
  r3:
    loopback.pool: vrf_lb_v6only
  r4:
    bgp.as: 65101
    loopback.pool: vrf_lb_v6only

validate:
  red_adj_v2:
    description: Check OSPFv2 adjacencies in red VRF
    wait: ospfv2_adj_p2p
    wait_msg: Waiting for OSPFv2 adjacencies
    nodes: [ r1 ]
    plugin: ospf_neighbor(nodes.dut.vrfs.red.ospf.router_id)
    stop_on_error: true
  red_adj_v3:
    description: Check OSPFv3 adjacencies in red VRF
    wait_msg: Waiting for OSPFv3 adjacencies
    wait: ospfv3_adj_p2p
    nodes: [ r1 ]
    plugin: ospf6_neighbor(nodes.dut.vrfs.red.ospf.router_id)
    stop_on_error: true
  blue_adj_v3:
    description: Check OSPFv3 adjacencies in blue VRF
    wait: ospfv3_adj_p2p
    wait_msg: Waiting for OSPFv3 adjacencies
    nodes: [ r3 ]
    plugin: ospf6_neighbor(nodes.dut.vrfs.blue.ospf.router_id)
  ebgp_v4:
    description: Check EBGP IPv4 adjacencies with DUT
    nodes: [ r2 ]
    plugin: bgp_neighbor(node.bgp.neighbors,'dut',af='ipv4')
    wait: ebgp_session
    wait_msg: Waiting for EBGP sessions to start
    stop_on_error: true
  ebgp_v6:
    description: Check EBGP IPv6 adjacencies with DUT
    nodes: [ r2, r4 ]
    plugin: bgp_neighbor(node.bgp.neighbors,'dut',af='ipv6')
    wait: ebgp_session
    wait_msg: Waiting for EBGP sessions to start
    stop_on_error: true
  red_v4_ospf:
    description: Check OSPFv2 routes in red VRF
    wait: ospfv2_spf
    nodes: [ r1 ]
    plugin: ospf_prefix(nodes.r2.loopback.ipv4)
  red_v6_ospf:
    description: Check OSPFv3 routes in red VRF
    wait: ospfv3_spf
    nodes: [ r1 ]
    plugin: ospf6_prefix(nodes.r2.loopback.ipv6)
  red_v4_bgp:
    description: Check IPv4 BGP routes in red VRF
    wait: bgp_scan_time
    nodes: [ r2 ]
    plugin: bgp_prefix(nodes.r1.loopback.ipv4)
  red_v6_bgp:
    description: Check IPv6 BGP routes in red VRF
    wait: bgp_scan_time
    nodes: [ r2 ]
    plugin: bgp_prefix(nodes.r2.loopback.ipv6,af='ipv6')
  blue_ospf:
    description: Check OSPFv3 routes in blue VRF
    wait: ospfv3_spf
    nodes: [ r3 ]
    plugin: ospf6_prefix(nodes.r4.loopback.ipv6)
  blue_bgp:
    description: Check IPv6 BGP routes in blue VRF
    wait: bgp_scan_time
    nodes: [ r4 ]
    plugin: bgp_prefix(nodes.r3.loopback.ipv6,af='ipv6')
  red_v4_ping:
    description: Loopback-to-loopback IPv4 reachability test in VRF red
    wait: ping
    nodes: [ r1 ]
    plugin: ping('r2',af='ipv4',src=nodes.r1.loopback.ipv4)
  red_v6_ping:
    description: Loopback-to-loopback IPv6 reachability test in VRF red
    wait: ping
    wait_msg: Waiting for BGP and OSPFv3 to start
    nodes: [ r1 ]
    plugin: ping('r2',af='ipv6',src=nodes.r1.loopback.ipv6)
  red_c_ospfv2:
    description: Check for connected routes in OSPFv2
    nodes: [ r2 ]
    plugin: ping('r1',af='ipv4')
  red_c_ospfv3:
    description: Check for connected routes in OSPFv3
    nodes: [ r2 ]
    plugin: ping('r1',af='ipv6')
  red_c_bgp_v4:
    description: Check for IPv4 connected routes in BGP
    nodes: [ r1 ]
    plugin: ping('r2',af='ipv4')
  red_c_bgp_v6:
    description: Check for IPv6 connected routes in BGP
    nodes: [ r1 ]
    plugin: ping('r2',af='ipv6')
  ping_blue:
    description: Ping-based reachability test in VRF blue
    wait: ping
    nodes: [ r4 ]
    plugin: ping('r3',af='ipv6')
  inter_vrf:
    description: Ping-based isolation test between blue and red VRF
    nodes: [ r1 ]
    plugin: ping('r4',src=nodes.r1.loopback.ipv6,af='ipv6',expect='fail')
