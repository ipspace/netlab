#
# VRRP on a physical interface
#

message: |
  This is the simplest VRRP test case -- the switches have VRRP configured on
  the shared LAN. Two LANs are used in the topology to explore the impact of
  using the same VRRP group on multiple LANs.

  Static routes on hosts point to the shared anycast IP address. The switches
  are running OSPF with a third switch to enable network-wide connectivity.

  All hosts should be able to ping the loopback addresses of all switches.

gateway.id: 1
gateway.protocol: vrrp

groups:
  switches:
    module: [ gateway,ospf ]
    members: [ s1,s2,s3 ]
  hosts:
    members: [ h1, h2, h3, h4 ]
    device: linux

nodes: [ s1,s2,s3,h1,h2,h3,h4 ]

links:
- s1:
    gateway.vrrp.priority: 250
    gateway.vrrp.preempt: True
  s2:
  h1:
  h2:
  gateway: True
- s1:
  s2:
  h3:
  h4:
  gateway: True
  prefix:
    ipv4: 192.168.42.0/24
    ipv6: "2001:db8:abba:cafe::/64"
- s1:
  s3:
- s2:
  s3:

#
# The following "line noise" defines a Jinja2 template that you can use to
# find the relevant data structures when creating your template.
#
# Display gateway-related node- and interface data structures with
# with 'netlab create _file_ -o format:vrrp'
#
defaults.outputs.format:
  vrrp: |
    {% for n,n_d in nodes.items() if 'gateway' in n_d.module %}

    {{ n }}:
        {{ n_d.gateway }}
    {%   for intf in n_d.interfaces if 'gateway' in intf %}
      {{ intf.ifname }} {{ intf.name }}:
        {{ intf.gateway }}
    {%   endfor %}
    {% endfor %}
