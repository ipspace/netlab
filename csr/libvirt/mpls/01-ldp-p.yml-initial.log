/home/pipi/.local/lib/python3.10/site-packages/paramiko/pkey.py:100: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "cipher": algorithms.TripleDES,
/home/pipi/.local/lib/python3.10/site-packages/paramiko/transport.py:259: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "class": algorithms.TripleDES,
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [pe1]
skipping: [pe2]
skipping: [dut]
skipping: [p2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, pe1, pe2, dut, p2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [pe1]
ok: [h2]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [pe1]
skipping: [pe2]
skipping: [dut]
skipping: [p2]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [h1]
ok: [h2]
ok: [pe1]
ok: [p2]
ok: [pe2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [pe1]
skipping: [pe2]
skipping: [dut]
skipping: [p2]

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
skipping: [pe1]
skipping: [pe2]
skipping: [dut]
skipping: [p2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, pe1, pe2, dut, p2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [pe1]
ok: [h2]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [pe1]
skipping: [pe2]
skipping: [dut]
skipping: [p2]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [p2] => 
  msg: |-
    initial configuration for p2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.6/32
    !
    interface eth1
     no shutdown
     description p2 -> dut
     ip address 10.1.0.6/30
    !
    interface eth2
     no shutdown
     description p2 -> pe2
     ip address 10.1.0.9/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [pe1] => 
  msg: |-
    initial configuration for pe1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname pe1
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description pe1 -> h1 [stub]
     ip address 172.16.0.3/24
    !
    interface eth2
     no shutdown
     description pe1 -> dut
     ip address 10.1.0.1/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [pe2] => 
  msg: |-
    initial configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
    ip link set eth2 down
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    ip link set dev eth2 mtu 1500
    ip link set eth2 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname pe2
    !
    ip forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description pe2 -> p2
     ip address 10.1.0.10/30
    !
    interface eth2
     no shutdown
     description pe2 -> h2 [stub]
     ip address 172.16.1.4/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host h1 172.16.0.1
    ip host h2 172.16.1.2
    ip host pe1 10.0.0.3 172.16.0.3 10.1.0.1
    ip host pe2 10.0.0.4 10.1.0.10 172.16.1.4
    ip host p2 10.0.0.6 10.1.0.6 10.1.0.9
    !
    ip routing
    !
    no ipv6 unicast-routing
    !
    !
    interface Loopback0
     ip address 10.0.0.5 255.255.255.255
    !
    interface GigabitEthernet1
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet2
     description dut -> pe1
     ip address 10.1.0.2 255.255.255.252
     no shutdown
    !
    interface GigabitEthernet3
     description dut -> p2
     ip address 10.1.0.5 255.255.255.252
     no shutdown
    !
    !
    line vty 0 4
     exec-timeout 0 0
    !
    no banner exec
    no banner login
    no banner incoming

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for pe1, pe2, p2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for dut

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-obekfk0z.sh] ***********************
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [pe1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [pe1]
skipping: [pe2]
skipping: [p2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for pe1, pe2, p2

TASK [template] ****************************************************************
changed: [pe1]
changed: [pe2]
changed: [p2]

TASK [set_fact] ****************************************************************
ok: [pe1]
ok: [pe2]
ok: [p2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [pe2]
changed: [pe1]
changed: [p2]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [pe1]
skipping: [pe2]
skipping: [p2]

TASK [ios_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/ios.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [dut]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, pe1, pe2, dut, p2 => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, pe1, pe2, dut, p2 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, pe1, pe2, dut, p2 => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, pe1, pe2, dut, p2 => (item=mpls)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [h1]
ok: [h2]
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [Find configuration template for routing] *********************************
skipping: [pe1]
ok: [h1]
skipping: [pe2]
ok: [h2]
skipping: [dut]
skipping: [p2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [pe1]
skipping: [pe2]
skipping: [dut]
skipping: [p2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [pe1]
skipping: [pe2]
skipping: [dut]
ok: [h1]
ok: [h2]
skipping: [p2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [pe1]
skipping: [pe2]
ok: [h1] => 
  msg: |-
    routing configuration for h1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.3 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
skipping: [dut]
ok: [h2] => 
  msg: |-
    routing configuration for h2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.4 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
skipping: [p2]

TASK [Deploy routing configuration] ********************************************
skipping: [pe1]
skipping: [pe2]
skipping: [dut]
skipping: [p2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_routing.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_routing.sh to deploy routing config based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for routing based on /home/pipi/net101/tools/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Remove temporary file /tmp/h1_routing-1szf8gu4.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [h1]
ok: [h2]
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [Find configuration template for ospf] ************************************
skipping: [h1]
skipping: [h2]
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [pe1]
skipping: [pe2]
skipping: [dut]
skipping: [p2]

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [h1]
skipping: [h2]
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [pe1] => 
  msg: |-
    ospf configuration for pe1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth2
    ! pe1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [pe2] => 
  msg: |-
    ospf configuration for pe2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.4
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! pe2 -> p2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
    router ospf 1
     router-id 10.0.0.5
  
  
    !
    interface Loopback0
    !
     ip ospf 1 area 0.0.0.0
    !
    interface GigabitEthernet2
    ! dut -> pe1
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
    interface GigabitEthernet3
    ! dut -> p2
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [p2] => 
  msg: |-
    ospf configuration for p2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.6
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p2 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! p2 -> pe2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write

TASK [Deploy ospf configuration] ***********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for pe1, pe2, p2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for dut

TASK [template] ****************************************************************
changed: [pe2]
changed: [pe1]
changed: [p2]

TASK [set_fact] ****************************************************************
ok: [pe1]
ok: [pe2]
ok: [p2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [pe1]
skipping: [pe2]
skipping: [p2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [pe1]
changed: [p2]
changed: [pe2]

TASK [ios_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/ios.j2] ***
changed: [dut]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [h1]
ok: [h2]
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [Find configuration template for bgp] *************************************
skipping: [h1]
skipping: [h2]
skipping: [dut]
ok: [pe1]
skipping: [p2]
ok: [pe2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [pe1]
skipping: [pe2]
skipping: [dut]
skipping: [p2]

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [h1]
skipping: [h2]
skipping: [dut]
skipping: [p2]
ok: [pe1]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
skipping: [dut]
skipping: [p2]
ok: [pe1] => 
  msg: |-
    bgp configuration for pe1
    =========================================
    !
    router bgp 65001
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 10.0.0.4 remote-as 65001
      neighbor 10.0.0.4 description pe2
      neighbor 10.0.0.4 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 172.16.0.0/24
    !
    !
      neighbor 10.0.0.4 activate
      neighbor 10.0.0.4 next-hop-self
      no neighbor 10.0.0.4 send-community all
      neighbor 10.0.0.4 send-community standard
      neighbor 10.0.0.4 send-community large
      neighbor 10.0.0.4 send-community extended
    !
    !
    !
    do write
ok: [pe2] => 
  msg: |-
    bgp configuration for pe2
    =========================================
    !
    router bgp 65001
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 10.0.0.3 remote-as 65001
      neighbor 10.0.0.3 description pe1
      neighbor 10.0.0.3 update-source lo
    !
     address-family ipv4 unicast
    !
  
    !
      network 172.16.1.0/24
    !
    !
      neighbor 10.0.0.3 activate
      neighbor 10.0.0.3 next-hop-self
      no neighbor 10.0.0.3 send-community all
      neighbor 10.0.0.3 send-community standard
      neighbor 10.0.0.3 send-community large
      neighbor 10.0.0.3 send-community extended
    !
    !
    !
    do write

TASK [Deploy bgp configuration] ************************************************
skipping: [h1]
skipping: [h2]
skipping: [dut]
skipping: [p2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for pe1, pe2

TASK [template] ****************************************************************
changed: [pe1]
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe1]
ok: [pe2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [pe1]
skipping: [pe2]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [pe2]
changed: [pe1]

TASK [Figure out whether to deploy the module mpls on current device] **********
ok: [h1]
ok: [h2]
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [Find configuration template for mpls] ************************************
skipping: [h1]
skipping: [h2]
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [pe1]
skipping: [pe2]
skipping: [dut]
skipping: [p2]

TASK [Find configuration deployment deploy_script for mpls] ********************
skipping: [h1]
skipping: [h2]
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [pe1] => 
  msg: |-
    mpls configuration for pe1
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth2.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.3
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.3
        interface eth2
        exit
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0
ok: [dut] => 
  msg: |-
    mpls configuration for dut
    =========================================
    ! {}
    !
    mpls ldp router-id Loopback0
    mpls ldp logging neighbor-changes
    !
    interface GigabitEthernet2
     mpls ip
    interface GigabitEthernet3
     mpls ip
    !
ok: [pe2] => 
  msg: |-
    mpls configuration for pe2
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.4
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.4
        interface eth1
        exit
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0
ok: [p2] => 
  msg: |-
    mpls configuration for p2
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 10.0.0.6
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 10.0.0.6
        interface eth1
        exit
        interface eth2
        exit
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0

TASK [Deploy mpls configuration] ***********************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for pe1, pe2, p2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for dut

TASK [template] ****************************************************************
changed: [pe1]
changed: [p2]
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe1]
ok: [pe2]
ok: [p2]

TASK [run /tmp/config.sh to deploy mpls config from /home/pipi/net101/tools/netsim/ansible/templates/mpls/frr.j2] ***
changed: [pe2]
changed: [pe1]
changed: [p2]

TASK [run vtysh to import mpls config from /home/pipi/net101/tools/netsim/ansible/templates/mpls/frr.j2] ***
skipping: [pe1]
skipping: [pe2]
skipping: [p2]

TASK [ios_config: deploying mpls from /home/pipi/net101/tools/netsim/ansible/templates/mpls/ios.j2] ***
changed: [dut]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=32   changed=3    unreachable=0    failed=0    skipped=17   rescued=0    ignored=0   
h1                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
h2                         : ok=35   changed=8    unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   
p2                         : ok=39   changed=6    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0   
pe1                        : ok=47   changed=9    unreachable=0    failed=0    skipped=18   rescued=0    ignored=0   
pe2                        : ok=46   changed=8    unreachable=0    failed=0    skipped=18   rescued=0    ignored=0   



The tested device (DUT) is a P-router. It runs OSPF and LDP with another
P-router and a PE-router, and performs label switching. The validation test
checks end-to-end connectivity across a BGP-free MPLS core.

