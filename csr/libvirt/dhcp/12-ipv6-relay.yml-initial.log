[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Find device readiness script] ********************************************
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Wait for device to become ready] *****************************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [relay]
skipping: [s1]
skipping: [s2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, c2, c3, c4, relay, s1, s2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Find configuration template for normalize] *******************************
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [relay]
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [relay]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [relay]
skipping: [s1]
skipping: [s2]

TASK [Deploy normalize configuration] ******************************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [relay]
skipping: [s1]
skipping: [s2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, c2, c3, c4, relay, s1, s2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Find configuration template for initial] *********************************
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [relay]
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:3::7/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:3::7/64 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [c1] => 
  msg: |-
    initial configuration for c1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname c1
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.2 c1
    10.0.0.3 c2
    10.0.0.4 c3
    10.0.0.5 c4
    10.0.0.1 relay
    2001:db8:cafe::1 GigabitEthernet2.relay
    2001:db8:cafe:1::1 GigabitEthernet3.relay
    2001:db8:cafe:2::1 GigabitEthernet4.relay
    2001:db8:cafe:3::1 GigabitEthernet5.relay
    2001:db8:cafe:2::6 s1 eth1.s1
    2001:db8:cafe:3::7 s2 eth1.s2
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.2/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['dhcp']
    #
    #
    # Enable FRR daemons
    #
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description c1 -> [c2,relay]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:cafe:2::6/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:cafe:2::6/64 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [c2] => 
  msg: |-
    initial configuration for c2
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname c2
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.2 c1
    10.0.0.3 c2
    10.0.0.4 c3
    10.0.0.5 c4
    10.0.0.1 relay
    2001:db8:cafe::1 GigabitEthernet2.relay
    2001:db8:cafe:1::1 GigabitEthernet3.relay
    2001:db8:cafe:2::1 GigabitEthernet4.relay
    2001:db8:cafe:3::1 GigabitEthernet5.relay
    2001:db8:cafe:2::6 s1 eth1.s1
    2001:db8:cafe:3::7 s2 eth1.s2
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.3/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['dhcp']
    #
    #
    # Enable FRR daemons
    #
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description c2 -> [c1,relay]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [c3] => 
  msg: |-
    initial configuration for c3
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname c3
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.2 c1
    10.0.0.3 c2
    10.0.0.4 c3
    10.0.0.5 c4
    10.0.0.1 relay
    2001:db8:cafe::1 GigabitEthernet2.relay
    2001:db8:cafe:1::1 GigabitEthernet3.relay
    2001:db8:cafe:2::1 GigabitEthernet4.relay
    2001:db8:cafe:3::1 GigabitEthernet5.relay
    2001:db8:cafe:2::6 s1 eth1.s1
    2001:db8:cafe:3::7 s2 eth1.s2
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.4/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['dhcp']
    #
    #
    # Enable FRR daemons
    #
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description c3 -> [c4,relay]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [c4] => 
  msg: |-
    initial configuration for c4
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "INIT: setting hostname"
    hostname c4
    #
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.2 c1
    10.0.0.3 c2
    10.0.0.4 c3
    10.0.0.5 c4
    10.0.0.1 relay
    2001:db8:cafe::1 GigabitEthernet2.relay
    2001:db8:cafe:1::1 GigabitEthernet3.relay
    2001:db8:cafe:2::1 GigabitEthernet4.relay
    2001:db8:cafe:3::1 GigabitEthernet5.relay
    2001:db8:cafe:2::6 s1 eth1.s1
    2001:db8:cafe:3::7 s2 eth1.s2
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable ZTP
    #
    ztp --disable
    #
    #
    echo "INIT: creating loopback interface"
    #
    # Create loopback interface entry
    #
    cat >/etc/network/interfaces.d/10-loopback.intf <<CONFIG
    auto lo
    iface lo inet loopback
      address 10.0.0.5/32
  
    CONFIG
    #
    until ifreload -a; do
      sleep 1
    done
    #
    echo "INIT: creating other interface"
    cat >/etc/network/interfaces.d/11-physical.intf <<CONFIG
    auto swp1
    CONFIG
    #
    echo "INIT: executing ifreload"
    until ifreload -a; do
      sleep 1
    done
    #
    # For whatever crazy reason, I had to enable IPv6 in containers
    #
    #
    # Enable FRR modules for ['dhcp']
    #
    #
    # Enable FRR daemons
    #
  
    systemctl enable frr.service
    systemctl start frr.service
    systemctl reload frr.service
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    ipv6 forwarding
    !
    interface swp1
    ! no shutdown
     description c4 -> [c3,relay]
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    #
    # Enable LLDP
    #
    echo "INIT: enabling LLDP"
    cat <<CONFIG >/etc/lldpd.d/system.conf
    configure lldp tx-interval 30
    configure lldp tx-hold 3
    configure system interface pattern *,!eth0,swp*
    CONFIG
    service lldpd restart
ok: [relay] => 
  msg: |-
    initial configuration for relay
    =========================================
    hostname relay
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host c1 10.0.0.2
    ip host c2 10.0.0.3
    ip host c3 10.0.0.4
    ip host c4 10.0.0.5
    ip host s1 2001:db8:cafe:2::6
    ip host s2 2001:db8:cafe:3::7
    !
    ip routing
    !
    ipv6 unicast-routing
    !
    !
    interface Loopback0
     ip address 10.0.0.1 255.255.255.255
    !
    interface GigabitEthernet1
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet2
     description relay -> [c1,c2]
     ipv6 address 2001:DB8:CAFE::1/64
     no shutdown
    !
    interface GigabitEthernet3
     description relay -> [c3,c4]
     ipv6 address 2001:DB8:CAFE:1::1/64
     no shutdown
    !
    interface GigabitEthernet4
     description relay -> s1
     ipv6 address 2001:DB8:CAFE:2::1/64
     no shutdown
    !
    interface GigabitEthernet5
     description relay -> s2
     ipv6 address 2001:DB8:CAFE:3::1/64
     no shutdown
    !
    !
    line vty 0 4
     exec-timeout 0 0
    !
    no banner exec
    no banner login
    no banner incoming

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s2]
ok: [s1]
ok: [relay]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for c1, c2, c3, c4
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for relay
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for s1, s2

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/initial/cumulus.j2] ***
ok: [c1]
ok: [c2]
ok: [c4]
ok: [c3]

TASK [Create local temporary file] *********************************************
changed: [c1 -> localhost]
changed: [c2 -> localhost]
changed: [c3 -> localhost]
changed: [c4 -> localhost]

TASK [Create initial config script in local temporary file] ********************
changed: [c1 -> localhost]
changed: [c2 -> localhost]
changed: [c3 -> localhost]
changed: [c4 -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [c2]
changed: [c1]
changed: [c3]
changed: [c4]

TASK [Remove temporary file /tmp/ansible.c1.wl_1fdwxtemp] **********************
changed: [c1 -> localhost]
changed: [c3 -> localhost]
changed: [c2 -> localhost]
changed: [c4 -> localhost]

TASK [ios_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/ios.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [relay]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [s1]
ok: [s2]

TASK [Create a temporary file for the rendered script] *************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [s2 -> localhost]
changed: [s1 -> localhost]

TASK [Copy script into running container at /tmp/config-s1_initial.sh] *********
skipping: [s1]
skipping: [s2]

TASK [Execute /tmp/config-s1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [s1]
skipping: [s2]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [s2 -> localhost]
changed: [s1 -> localhost]

TASK [Remove temporary file /tmp/s1_initial-brog7hfz.sh] ***********************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for c1, c2, c3, c4, relay, s1, s2 => (item=dhcp)

TASK [Figure out whether to deploy the module dhcp on current device] **********
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Find configuration template for dhcp] ************************************
ok: [c1]
ok: [c2]
skipping: [s1]
ok: [c4]
ok: [c3]
skipping: [s2]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [relay]
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [c1] => 
  msg: |-
    dhcp configuration for c1
    =========================================
    #!/bin/bash
    #
    # Disable IPv6 RA on DHCPv6 client interfaces
    #
    echo "Disable IPv6 RA"
    cat >/tmp/config <<CONFIG
    interface swp1
      ipv6 nd suppress-ra
      no ipv6 nd ra-interval
    !
    CONFIG
    vtysh -f /tmp/config
    #
    # Configure DHCP clients on interfaces
    #
    set -e
    #
    echo "DHCP: set IP addresses on interfaces"
    cat >/etc/network/interfaces.d/12-dhcp.intf <<CONFIG
    auto swp1
    iface swp1 inet6 dhcp
      mtu 1500
    CONFIG
    #
    echo "DHCP: executing ifup"
    nohup bash -c 'ifreload -a || ifreload -a' &
    sysctl net/ipv6/conf/swp1/forwarding=0
    sysctl net/ipv6/conf/swp1/accept_ra=2
    # sysctl net/ipv6/conf/swp1/accept_ra_from_local=1
skipping: [s1]
ok: [c2] => 
  msg: |-
    dhcp configuration for c2
    =========================================
    #!/bin/bash
    #
    # Disable IPv6 RA on DHCPv6 client interfaces
    #
    echo "Disable IPv6 RA"
    cat >/tmp/config <<CONFIG
    interface swp1
      ipv6 nd suppress-ra
      no ipv6 nd ra-interval
    !
    CONFIG
    vtysh -f /tmp/config
    #
    # Configure DHCP clients on interfaces
    #
    set -e
    #
    echo "DHCP: set IP addresses on interfaces"
    cat >/etc/network/interfaces.d/12-dhcp.intf <<CONFIG
    auto swp1
    iface swp1 inet6 dhcp
      mtu 1500
    CONFIG
    #
    echo "DHCP: executing ifup"
    nohup bash -c 'ifreload -a || ifreload -a' &
    sysctl net/ipv6/conf/swp1/forwarding=0
    sysctl net/ipv6/conf/swp1/accept_ra=2
    # sysctl net/ipv6/conf/swp1/accept_ra_from_local=1
skipping: [s2]
ok: [c3] => 
  msg: |-
    dhcp configuration for c3
    =========================================
    #!/bin/bash
    #
    # Disable IPv6 RA on DHCPv6 client interfaces
    #
    echo "Disable IPv6 RA"
    cat >/tmp/config <<CONFIG
    interface swp1
      ipv6 nd suppress-ra
      no ipv6 nd ra-interval
    !
    CONFIG
    vtysh -f /tmp/config
    #
    # Configure DHCP clients on interfaces
    #
    set -e
    #
    echo "DHCP: set IP addresses on interfaces"
    cat >/etc/network/interfaces.d/12-dhcp.intf <<CONFIG
    auto swp1
    iface swp1 inet6 dhcp
      mtu 1500
    CONFIG
    #
    echo "DHCP: executing ifup"
    nohup bash -c 'ifreload -a || ifreload -a' &
    sysctl net/ipv6/conf/swp1/forwarding=0
    sysctl net/ipv6/conf/swp1/accept_ra=2
    # sysctl net/ipv6/conf/swp1/accept_ra_from_local=1
ok: [c4] => 
  msg: |-
    dhcp configuration for c4
    =========================================
    #!/bin/bash
    #
    # Disable IPv6 RA on DHCPv6 client interfaces
    #
    echo "Disable IPv6 RA"
    cat >/tmp/config <<CONFIG
    interface swp1
      ipv6 nd suppress-ra
      no ipv6 nd ra-interval
    !
    CONFIG
    vtysh -f /tmp/config
    #
    # Configure DHCP clients on interfaces
    #
    set -e
    #
    echo "DHCP: set IP addresses on interfaces"
    cat >/etc/network/interfaces.d/12-dhcp.intf <<CONFIG
    auto swp1
    iface swp1 inet6 dhcp
      mtu 1500
    CONFIG
    #
    echo "DHCP: executing ifup"
    nohup bash -c 'ifreload -a || ifreload -a' &
    sysctl net/ipv6/conf/swp1/forwarding=0
    sysctl net/ipv6/conf/swp1/accept_ra=2
    # sysctl net/ipv6/conf/swp1/accept_ra_from_local=1
ok: [relay] => 
  msg: |-
    dhcp configuration for relay
    =========================================
    interface GigabitEthernet2
      ipv6 dhcp relay destination 2001:db8:cafe:2::6
    interface GigabitEthernet3
      ipv6 dhcp relay destination 2001:db8:cafe:3::7

TASK [Find configuration deployment deploy_script for dhcp] ********************
ok: [c1]
ok: [c2]
skipping: [s1]
skipping: [s2]
ok: [c3]
ok: [c4]
ok: [relay]

TASK [Deploy dhcp configuration] ***********************************************
skipping: [s1]
skipping: [s2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/cumulus.yml for c1, c2, c3, c4
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for relay

TASK [Render device configuration from /home/pipi/net101/tools/netsim/ansible/templates/dhcp/cumulus.j2] ***
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]

TASK [Create local temporary file] *********************************************
changed: [c1 -> localhost]
changed: [c2 -> localhost]
changed: [c3 -> localhost]
changed: [c4 -> localhost]

TASK [Create dhcp config script in local temporary file] ***********************
changed: [c1 -> localhost]
changed: [c3 -> localhost]
changed: [c4 -> localhost]
changed: [c2 -> localhost]

TASK [Execute local config script on Cumulus node] *****************************
changed: [c2]
changed: [c3]
changed: [c1]
changed: [c4]

TASK [Remove temporary file /tmp/ansible.c1.69whe8mrtemp] **********************
changed: [c1 -> localhost]
changed: [c2 -> localhost]
changed: [c4 -> localhost]
changed: [c3 -> localhost]

TASK [ios_config: deploying dhcp from /home/pipi/net101/tools/netsim/ansible/templates/dhcp/ios.j2] ***
changed: [relay]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
c1                         : ok=28   changed=8    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
c2                         : ok=28   changed=8    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
c3                         : ok=28   changed=8    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
c4                         : ok=28   changed=8    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
relay                      : ok=20   changed=2    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
s1                         : ok=19   changed=4    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
s2                         : ok=19   changed=4    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   



Use this topology to test the DHCPv6 relay functionality of your device. Use
'netlab validate' to check whether your device propagated DHCPv6 requests from
DHCP clients to DHCP servers.

