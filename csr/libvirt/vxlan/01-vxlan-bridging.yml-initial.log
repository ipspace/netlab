[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h4]
ok: [h3]
ok: [s2]
ok: [s1]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [s1]
ok: [h3]
ok: [s2]
ok: [h4]

TASK [Wait for device to become ready] *****************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h3]
ok: [h2]
ok: [s1]
ok: [h4]
ok: [s2]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [s1]
ok: [h3]
ok: [s2]
ok: [h4]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Deploy normalize configuration] ******************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, h1, h2, h3, h4

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s1]
ok: [s2]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h3]
ok: [h2]
ok: [s1]
ok: [h4]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.1/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.3/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.2/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.31.1.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.31.1.4/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    #
    #
    # Print the final routing table
    ip route
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host h1 172.31.1.1
    ip host h2 172.31.1.2
    ip host h3 172.31.1.3
    ip host h4 172.31.1.4
    ip host s2 10.0.0.6 10.1.0.2
    !
    ip routing
    !
  
    !
    !
    interface Loopback0
     ip address 10.0.0.5 255.255.255.255
    !
    interface GigabitEthernet1
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet2
     description s1 -> s2
     mtu 1600
     ip address 10.1.0.1 255.255.255.252
     no shutdown
    !
    interface GigabitEthernet3
     description [Access VLAN red] s1 -> h1
     no shutdown
    !
    interface GigabitEthernet4
     description [Access VLAN blue] s1 -> h3
     no shutdown
    !
    interface BDI1000
     description VLAN red (1000) -> [h1,h2,s2]
     no shutdown
    !
    interface BDI1001
     description VLAN blue (1001) -> [h3,h4,s2]
     no shutdown
    !
    !
    line vty 0 4
     exec-timeout 0 0
    !
    no banner exec
    no banner login
    no banner incoming
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    hostname s2
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host h1 172.31.1.1
    ip host h2 172.31.1.2
    ip host h3 172.31.1.3
    ip host h4 172.31.1.4
    ip host s1 10.0.0.5 10.1.0.1
    !
    ip routing
    !
  
    !
    !
    interface Loopback0
     ip address 10.0.0.6 255.255.255.255
    !
    interface GigabitEthernet1
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet2
     description s2 -> s1
     mtu 1600
     ip address 10.1.0.2 255.255.255.252
     no shutdown
    !
    interface GigabitEthernet3
     description [Access VLAN red] s2 -> h2
     no shutdown
    !
    interface GigabitEthernet4
     description [Access VLAN blue] s2 -> h4
     no shutdown
    !
    interface BDI1000
     description VLAN red (1000) -> [h1,s1,h2]
     no shutdown
    !
    interface BDI1001
     description VLAN blue (1001) -> [h3,s1,h4]
     no shutdown
    !
    !
    line vty 0 4
     exec-timeout 0 0
    !
    no banner exec
    no banner login
    no banner incoming

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h4]
ok: [s1]
ok: [h2]
ok: [h3]
ok: [s2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for s1, s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2, h3, h4

TASK [ios_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/ios.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [s2]
changed: [s1]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create a temporary file for the rendered script] *************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h3 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h3 -> localhost]
changed: [h2 -> localhost]
changed: [h1 -> localhost]
changed: [h4 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h1 -> localhost]
changed: [h3 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-dhwdsqxs.sh] ***********************
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2 => (item=vxlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    !
    bridge-domain 1001
     member GigabitEthernet4 service-instance 1001
    !
    bridge-domain 1000
     member GigabitEthernet3 service-instance 1000
    !
    interface GigabitEthernet3
     service instance 1000 ethernet
      encapsulation untagged
    !
    interface GigabitEthernet4
     service instance 1001 ethernet
      encapsulation untagged
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    !
    bridge-domain 1001
     member GigabitEthernet4 service-instance 1001
    !
    bridge-domain 1000
     member GigabitEthernet3 service-instance 1000
    !
    interface GigabitEthernet3
     service instance 1000 ethernet
      encapsulation untagged
    !
    interface GigabitEthernet4
     service instance 1001 ethernet
      encapsulation untagged

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s1]
ok: [s2]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for s1, s2

TASK [ios_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/csr.j2] ***
changed: [s2]
changed: [s1]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [s1]
ok: [s2]

TASK [Find configuration template for ospf] ************************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    router ospf 1
     router-id 10.0.0.5
  
  
    !
    interface Loopback0
    !
     ip ospf 1 area 0.0.0.0
    !
    interface GigabitEthernet2
    ! s1 -> s2
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    router ospf 1
     router-id 10.0.0.6
  
  
    !
    interface Loopback0
    !
     ip ospf 1 area 0.0.0.0
    !
    interface GigabitEthernet2
    ! s2 -> s1
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [s1]
ok: [s2]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for s1, s2

TASK [ios_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/ios.j2] ***
changed: [s1]
changed: [s2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [s1]
ok: [s2]

TASK [Find configuration template for vxlan] ***********************************
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [s1]
skipping: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    interface nve1
     no shutdown
     source-interface Loopback0
     member vni 101000
      ingress-replication 10.0.0.6
     member vni 101001
      ingress-replication 10.0.0.6
    !
    bridge-domain 1000
     member vni 101000
    !
    bridge-domain 1001
     member vni 101001
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    interface nve1
     no shutdown
     source-interface Loopback0
     member vni 101000
      ingress-replication 10.0.0.5
     member vni 101001
      ingress-replication 10.0.0.5
    !
    bridge-domain 1000
     member vni 101000
    !
    bridge-domain 1001
     member vni 101001

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [s1]
ok: [s2]

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for s1, s2

TASK [ios_config: deploying vxlan from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/csr.j2] ***
changed: [s1]
changed: [s2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h2                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h3                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h4                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
s1                         : ok=34   changed=4    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
s2                         : ok=34   changed=4    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   



The devices under test are VLAN-to-VXLAN bridges between two access VLANs
and two VXLAN VNIs. Both VLANs are using the same IP prefix to identify
potential inter-VLAN leaking.

* h1, h2 and h3 should be able to ping each other
* h4 and h5 should be able to ping each other
* h1 should not be able to reach h4 or h5

Please note it might take a while for the lab to work due to
STP learning phase

