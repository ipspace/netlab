[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Find configuration template for normalize] *******************************
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Deploy normalize configuration] ******************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p_global] => 
  msg: |-
    initial configuration for p_global
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p_global
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description p_global -> dut [external]
     ip address 10.1.0.2/30
     ipv6 address 2001:db8:3::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p_vrf] => 
  msg: |-
    initial configuration for p_vrf
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # This is an artifact of unknown provenance that should be removed in a year or two (= 2026/2027)
    #
    # FRR controls these parameters with 'ip forwarding' and 'ipv6 forwarding' commands
    #
    sysctl -w net.ipv4.ip_forward=1
    sysctl -w net.ipv6.conf.all.forwarding=1
    #
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    # Set system defaults
    #
    # Send ARP requests from a sane source IP address
    #
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Create loopbacks, stub and lag/bond devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    ip link set eth1 down
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set dev eth1 mtu 1500
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
  
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p_vrf
    !
    ip forwarding
    ipv6 forwarding
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description p_vrf -> dut [external]
     ip address 10.1.0.6/30
     ipv6 address 2001:db8:3:1::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host dut-customer 10.1.0.5 10.2.0.1 2001:db8:3:1::1 2001:db8:4::1
    ip host p_global 10.0.0.2 10.1.0.2 2001:db8:1:2::1 2001:db8:3::2
    ip host p_vrf 10.0.0.3 10.1.0.6 2001:db8:1:3::1 2001:db8:3:1::3
    !
    ip routing
    !
    ipv6 unicast-routing
    !
    vrf definition customer
     rd 65000:1
     route-target import 65000:1
     route-target export 65000:1
    !
     address-family ipv4
     exit-address-family
    !
     address-family ipv6
     exit-address-family
    !
  
    !
    !
    interface Loopback0
     ip address 10.0.0.42 255.255.255.255
     ipv6 address 2001:DB8:42:1::1/128
    !
    interface GigabitEthernet0/0
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet0/1
     description dut -> p_global [external]
     ip address 10.1.0.1 255.255.255.252
     ipv6 address 2001:DB8:3::1/64
     no shutdown
    !
    interface GigabitEthernet0/2
     vrf forwarding customer
     description dut -> p_vrf [external]
     ip address 10.1.0.5 255.255.255.252
     ipv6 address 2001:DB8:3:1::1/64
     no shutdown
    !
    interface Loopback1
     vrf forwarding customer
     description VRF Loopback customer
     ip address 10.2.0.1 255.255.255.255
     ipv6 address 2001:DB8:4::1/64
     no shutdown
    !
    !
    line vty 0 4
     exec-timeout 0 0
    !
    no banner exec
    no banner login
    no banner incoming

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/ios.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/initial-clab.yml for p_global, p_vrf

TASK [ios_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/ios.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [p_global -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [p_global]
skipping: [p_vrf]

TASK [include_tasks] ***********************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/frr/deploy-config.yml for p_global, p_vrf

TASK [template] ****************************************************************
changed: [p_vrf]
changed: [p_global]

TASK [set_fact] ****************************************************************
ok: [p_global]
ok: [p_vrf]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
changed: [p_vrf]
changed: [p_global]

TASK [run vtysh to import initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/frr.j2] ***
skipping: [p_global]
skipping: [p_vrf]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf => (item=routing)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf => (item=bgp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for dut, p_global, p_vrf => (item=vrf)

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Find configuration template for routing] *********************************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut] => 
  msg: |-
    routing configuration for dut
    =========================================
    !
    !
    route-map med_42-ipv4 permit 10
      set metric 42
    !
    route-map med_42-ipv6 permit 10
      set metric 42
    !
    route-map med_42-vpnv4 permit 10
      set metric 42
    !
    route-map med_42-vpnv6 permit 10
      set metric 42
    !
    route-map med_17-ipv4 permit 10
      set metric 17
    !
    route-map med_17-ipv6 permit 10
      set metric 17
    !
    route-map med_17-vpnv4 permit 10
      set metric 17
    !
    route-map med_17-vpnv6 permit 10
      set metric 17
  
    !
    ! AS-path access lists
    !
    !
    ! Static routes
    !

TASK [Deploy routing configuration] ********************************************
skipping: [p_global]
skipping: [p_vrf]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/ios.yml for dut

TASK [ios_config: deploying routing from /home/pipi/netlab_gh/netsim/ansible/templates/routing/ios.j2] ***
changed: [dut]

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Find configuration template for bgp] *************************************
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p_global] => 
  msg: |-
    bgp configuration for p_global
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor 10.1.0.1 remote-as 65000
      neighbor 10.1.0.1 description dut
    !
      neighbor 2001:db8:3::1 remote-as 65000
      neighbor 2001:db8:3::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.2/32
    !
    !
    !
      neighbor 10.1.0.1 activate
      no neighbor 10.1.0.1 send-community all
      neighbor 10.1.0.1 send-community standard
      neighbor 10.1.0.1 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:2::/64
    !
    !
    !
      neighbor 2001:db8:3::1 activate
      no neighbor 2001:db8:3::1 send-community all
      neighbor 2001:db8:3::1 send-community standard
      neighbor 2001:db8:3::1 send-community large
    !
    !
    !
    do write
ok: [p_vrf] => 
  msg: |-
    bgp configuration for p_vrf
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.3
    !
      neighbor 10.1.0.5 remote-as 65000
      neighbor 10.1.0.5 description dut
    !
      neighbor 2001:db8:3:1::1 remote-as 65000
      neighbor 2001:db8:3:1::1 description dut
    !
     address-family ipv4 unicast
    !
  
    !
      network 10.0.0.3/32
    !
    !
    !
      neighbor 10.1.0.5 activate
      no neighbor 10.1.0.5 send-community all
      neighbor 10.1.0.5 send-community standard
      neighbor 10.1.0.5 send-community large
    !
     address-family ipv6 unicast
    !
  
    !
      network 2001:db8:1:3::/64
    !
    !
    !
      neighbor 2001:db8:3:1::1 activate
      no neighbor 2001:db8:3:1::1 send-community all
      neighbor 2001:db8:3:1::1 send-community standard
      neighbor 2001:db8:3:1::1 send-community large
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    !
    ip bgp-community new-format
    !
    router bgp 65000
     no bgp default ipv4-unicast
     bgp update-delay 5
     bgp nopeerup-delay cold-boot 1
     bgp nopeerup-delay user-initiated 1
     bgp router-id 10.0.0.42
      neighbor 10.1.0.2 remote-as 65100
      neighbor 10.1.0.2 description p_global
  
      neighbor 2001:db8:3::2 remote-as 65100
      neighbor 2001:db8:3::2 description p_global
  
    !
     address-family ipv4
      bgp scan-time 5
  
    !
      network 10.0.0.42 mask 255.255.255.255
  
    !
    !
      neighbor 10.1.0.2 activate
      neighbor 10.1.0.2 advertisement-interval 0
      neighbor 10.1.0.2 send-community standard
  
     address-family ipv6
      bgp scan-time 5
  
    !
      network 2001:db8:42:1::1/128
  
    !
    !
      neighbor 2001:db8:3::2 activate
      neighbor 2001:db8:3::2 advertisement-interval 0
      neighbor 2001:db8:3::2 send-community standard
  
    !

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/ios.yml for dut
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/frr.yml for p_global, p_vrf

TASK [ios_config: deploying bgp from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/ios.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [p_global]
changed: [p_vrf]

TASK [set_fact] ****************************************************************
ok: [p_vrf]
ok: [p_global]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [p_global]
skipping: [p_vrf]

TASK [run vtysh to import bgp config from /home/pipi/netlab_gh/netsim/ansible/templates/bgp/frr.j2] ***
changed: [p_global]
changed: [p_vrf]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [p_global]
ok: [p_vrf]
ok: [dut]

TASK [Find configuration template for vrf] *************************************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]
skipping: [p_global]
skipping: [p_vrf]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p_global]
skipping: [p_vrf]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
    !
    router bgp 65000
     address-family ipv4 vrf customer
      bgp router-id 10.0.0.42
      redistribute connected
  
    !
      network 10.2.0.1 mask 255.255.255.255
  
    !
      neighbor 10.1.0.6 remote-as 65101
      neighbor 10.1.0.6 description p_vrf
  
      neighbor 10.1.0.6 activate
      neighbor 10.1.0.6 advertisement-interval 0
      neighbor 10.1.0.6 send-community standard
  
     address-family ipv6 vrf customer
      bgp router-id 10.0.0.42
      redistribute connected
  
    !
      network 2001:db8:4::/64
  
    !
      neighbor 2001:db8:3:1::3 remote-as 65101
      neighbor 2001:db8:3:1::3 description p_vrf
  
      neighbor 2001:db8:3:1::3 activate
      neighbor 2001:db8:3:1::3 advertisement-interval 0
      neighbor 2001:db8:3:1::3 send-community standard

TASK [Deploy vrf configuration] ************************************************
skipping: [p_global]
skipping: [p_vrf]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/ios.yml for dut

TASK [ios_config: deploying vrf from /home/pipi/netlab_gh/netsim/ansible/templates/vrf/ios.j2] ***
changed: [dut]

PLAY [Deploy custom deployment templates] **************************************

TASK [Run custom configuration deployment scripts] *****************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-custom-config.yml for dut => (item=bgp.policy)

TASK [Find configuration template] *********************************************
ok: [dut]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Check is the configuration template is a file] ***************************
ok: [dut -> localhost]

TASK [fail] ********************************************************************
skipping: [dut]

TASK [Process template /home/pipi/netlab_gh/netsim/extra/bgp.policy/ios.j2 for dut] ***
skipping: [dut]

TASK [Find custom configuration deployment script] *****************************
ok: [dut]

TASK [Run the configuration deployment script] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/ios.yml for dut

TASK [ios_config: deploying bgp.policy from /home/pipi/netlab_gh/netsim/extra/bgp.policy/ios.j2] ***
changed: [dut]

PLAY RECAP *********************************************************************
dut                        : ok=41   changed=5    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
p_global                   : ok=31   changed=5    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   
p_vrf                      : ok=30   changed=4    unreachable=0    failed=0    skipped=19   rescued=0    ignored=0   



Use this topology to test BGP MED on IPv4 and IPv6 prefixes. DUT
has to set MED on outgoing EBGP updates.

