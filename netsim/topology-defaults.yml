#
# Global topology defaults
#
---
provider: libvirt
#
# Default loopback, LAN, and P2P prefixes
addressing:
  loopback:
    ipv4: 10.0.0.0/24
  router_id:
    ipv4: 10.0.0.0/24
    prefix: 32
  lan:
    ipv4: 172.16.0.0/16
  p2p:
    ipv4: 10.1.0.0/16
  mgmt:
    ipv4: 192.168.121.0/24
    start: 100
    mac: 08-4F-A9-00-00-00
  l2only:

# Global, node and link attributes
attributes:
  global: [ addressing,defaults,groups,links,module,name,nodes,plugin,provider ]
  internal: [ input,includes,pools,Provider,Plugin ]
  link: [ bandwidth,bridge,name,prefix,role,type,unnumbered,interfaces,mtu,gateway ]
  link_internal: [ linkindex ]
  link_no_propagate: [ prefix,interfaces,gateway ]
  node: [ role,mtu,runtime,provider,id,loopback,cpu,memory ]  # not enforced yet

# Built-in module defaults
#
bgp:
  supported_on: [ cumulus, cumulus_nvue, eos, frr, csr, iosv, nxos, vsrx, vyos, routeros, srlinux, sros, none ]
  ebgp_role: external
  advertise_roles: [ stub ]
  advertise_loopback: True
  community:
    ibgp: [ standard, extended ]
    ebgp: [ standard ]
  no_propagate: [ ebgp_role, advertise_roles, rr_list, as_list ]
  next_hop_self: true
  attributes:
    global: [ as, next_hop_self, rr_cluster_id, rr_list, ebgp_role, as_list, advertise_loopback, advertise_roles, community, address_families ]
    node: [ as, next_hop_self, rr, rr_cluster_id, originate, advertise_loopback, community, router_id, address_families ]
    link: [ advertise ]

isis:
  supported_on: [ eos, frr, csr, iosv, nxos, vsrx, srlinux, sros, none ]
  area: 49.0001
  type: level-2
  attributes:
    global: [ area, type, bfd ]
    node: [ area, net, type, bfd ]
    link: [ metric, cost, type, bfd, network_type, passive ]

ospf:
  area: 0.0.0.0
  supported_on: [ arcos, cumulus, cumulus_nvue, eos, fortios, frr, csr, iosv, nxos, vsrx, vyos, routeros, srlinux, sros, none ]
  attributes:
    global: [ area, process, reference_bandwidth, bfd ]
    node: [ area, process, reference_bandwidth, bfd, router_id ]
    link: [ cost, area, bfd, network_type, passive ]

eigrp:
  supported_on: [ csr, iosv, nxos ]
  as: 1
  attributes:
    global: [ as ]
    node: [ as ]

bfd: # see RFC5880
  supported_on: [ srlinux, sros, iosv, csr, nxos, eos ]
  min_echo_rx: 0      # Echo function, 0=disabled by default
  multiplier: 3       # Detection time multiplier, number of packets lost before down
  attributes:
    global: [ min_tx,min_rx,min_echo_rx,multiplier ]
    node: [ min_tx,min_rx,min_echo_rx,multiplier ]
    link: [ min_tx,min_rx,min_echo_rx,multiplier ]

sr:
  requires: [ isis ]
  supported_on: [ csr, eos, srlinux, sros, vsrx ]
  attributes:
    global: [ srgb_range_start, srgb_range_size, ipv6_sid_offset ]
    node: [ srgb_range_start, srgb_range_size, ipv6_sid_offset ]

srv6:
  requires: [ isis ]
  supported_on: [ sros ]
  locator: 2001:db8:aaaa # 2001:db8::/32 see RFC 6890 â€“ Documentation Set
  address_families: [ ipv4, ipv6 ]
  # protocols: [ isis ] # Could model like this too
  bgp: False
  isis: True
  attributes:
    global: [ locator, address_families, bgp, isis ]
    node: [ locator, address_families, bgp, isis, transit_only ]

evpn: # Enables the EVPN address family towards BGP peers
  requires: [ bgp ]
  supported_on: [ sros, srlinux, frr ]
  use_ibgp: True # Whether to use iBGP(default) or eBGP for EVPN peering
  attributes:
    global: [ use_ibgp ]

#
# Provider defaults
#
providers:
  libvirt:
    config: Vagrantfile
    start: vagrant up --provider libvirt
    stop: vagrant destroy -f
    probe: [ kvm-ok, virsh net-list, vagrant plugin list ]
  virtualbox:
    config: Vagrantfile
    start: vagrant up --provider virtualbox
    stop: vagrant destroy -f
    probe: [ VBoxManage -h, vagrant plugin list ]
    inventory:
      ansible_host: 127.0.0.1
    inventory_port_map:
      ssh: ansible_port

    forwarded:
      ssh: 2000
      http: 8000
      netconf: 3000

  clab:
    config: clab.yml
    template: clab.j2
    # Preserve env to allow user to configure PATH
    start: sudo -E containerlab deploy -t clab.yml
    stop: sudo -E containerlab destroy --cleanup -t clab.yml
    probe: [ "containerlab version" ]
    bridge_type: bridge # Use 'ovs-bridge' to create Openvswitch bridges

ports:
  ssh: 22
  http: 80
  https: 443
  netconf: 830
  gnmi: 57400

#
# Device defaults
#
# Don't change this section unless you plan to add new devices
#
# Keys in "devices" dictionary are platform names.
#
# Each platform MUST have an interface name template, all other
# parameters are optional
#
# interface_name: Python formatting string used to generate interface names
# mgmt_if:        Name of management interface if it uses a name outside of
#                 interface_name scheme. When missing, "interface_name" and
#                 "ifindex_offset-1" are used to generate mgmt interface name
# ifindex_offset: Number of first data interface (default: 1)
# group_vars:     Ansible group variables
#
devices:
  none:            # Empty device used to test Ansible playbooks
    interface_name: eth%d
    image:
      virtualbox: none
      libvirt: none
    group_vars:
      ansible_connection: paramiko_ssh
      ansible_network_os: none
  iosv:
    interface_name: GigabitEthernet0/%d
    image:
      libvirt: cisco/iosv
      virtualbox: cisco/iosv
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_become_method: enable
      ansible_become_password: vagrant
      ansible_network_os: ios
      ansible_connection: network_cli
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True
          network: True

  csr:
    interface_name: GigabitEthernet%d
    ifindex_offset: 2
    image:
      libvirt: cisco/csr1000v
      virtualbox: cisco/csr1000v
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_become_method: enable
      ansible_become_password: vagrant
      ansible_network_os: ios
      ansible_connection: network_cli
    node:
      min_mtu: 1500
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True
          network: True

  nxos:
    interface_name: Ethernet1/%d
    mgmt_if: mgmt0
    image:
      libvirt: cisco/nexus9300v
      virtualbox: cisco/nexus9300v
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_network_os: nxos
      ansible_connection: network_cli
    bfd:           # NXOS requires lower default timer values
      min_rx: 500
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True
    libvirt:
      create_template: nxos.xml.j2

  eos:
    interface_name: Ethernet%d
    description: Arista vEOS
    mgmt_if: Management1
    image:
      libvirt: arista/veos
      virtualbox: arista/veos
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_network_os: eos
      ansible_connection: network_cli
    features:
      initial:
        system_mtu: True
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True
          network: True
    clab:
      interface:
        name: eth%d
      node:
        kind: ceos
      mgmt_if: Management0
      image: ceos:4.25.1F
      group_vars:
        ansible_user: admin
        ansible_ssh_pass: admin
        ansible_become: yes
        ansible_become_method: enable
    libvirt:
      create: |
        virt-install --connect=qemu:///system --name=vm_box --os-type=linux --arch=x86_64 --cpu host --vcpus=2 --hvm
          --ram=2048 --disk path=vm.qcow2,bus=ide,format=qcow2 --network=network:vagrant-libvirt,model=virtio --graphics none --import

  fortios:
    interface_name: port%d
    mgmt_if: port1
    ifindex_offset: 2
    image:
      libvirt: fortinet/fortios
    group_vars:
      ansible_user: admin
      ansible_password: admin
      ansible_network_os: fortinet.fortios.fortios
      ansible_connection: httpapi
      collections:
        - fortinet.fortios
      vdom: "root"
      ansible_httpapi_use_ssl: no
      ansible_httpapi_validate_certs: no
      ansible_httpapi_port: 80
      netsim_console_connection: ssh

  frr:
    interface_name: eth%d
    mgmt_if: eth0
    image:
      clab: frrouting/frr:v7.5.0
    group_vars:
      ansible_connection: docker
      ansible_network_os: frr
    clab:
      mtu: 1500
      node:
        kind: linux

  linux:
    interface_name: eth%d
    mgmt_if: eth0
    role: host
    image:
      libvirt: generic/ubuntu2004
      virtualbox: generic/ubuntu2004
      clab: python:3.9-alpine
    group_vars:
      ansible_network_os: linux
      ansible_connection: paramiko
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      docker_shell: sh
    clab:
      mtu: 1500
      node:
        kind: linux
      group_vars:
        ansible_connection: docker
        ansible_user: root
        ansible_python_interpreter: /usr/local/bin/python3

  vsrx:
    interface_name: ge-0/0/%d
    ifindex_offset: 0
    mgmt_if: fxp0
    image:
      libvirt: juniper/vsrx3
      virtualbox: juniper/vsrx3
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: Vagrant
      ansible_network_os: junos
      ansible_connection: netconf
      netsim_console_connection: ssh
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True

  arcos:
    interface_name: swp%d
    mgmt_if: ma1
    image:
      libvirt: arcos/arcos4.1.1
    group_vars:
      ansible_user: root
      ansible_ssh_pass: arcos
      ansible_network_os: arcos

  cumulus:
    interface_name: swp%d
    mgmt_if: eth0
    image:
      libvirt: CumulusCommunity/cumulus-vx:4.4.0
      virtualbox: CumulusCommunity/cumulus-vx:4.3.0
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_network_os: cumulus
      ansible_connection: paramiko
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
    clab:
      mtu: 1500
      runtime: docker
      node:
        kind: cvx
      image: networkop/cx:4.3.0
      group_vars:
        ansible_connection: docker
        ansible_user: root

  cumulus_nvue:
    interface_name: swp%d
    mgmt_if: eth0
    image:
      libvirt: CumulusCommunity/cumulus-vx:5.0.1
      virtualbox: CumulusCommunity/cumulus-vx:5.0.1
    group_vars:
      ansible_user: cumulus
      ansible_ssh_pass: cumulus
      ansible_network_os: cumulus_nvue
      ansible_connection: paramiko
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True

  srlinux:
    mgmt_if: mgmt0
    interface_name: ethernet-1/%d
    image:
      clab: ghcr.io/nokia/srlinux
    group_vars:
      ansible_user: admin
      ansible_ssh_pass: admin
      ansible_network_os: srlinux
      ansible_connection: paramiko
      netsim_console_connection: ssh
    sr:
      srgb_range_start: 500000
      srgb_range_size: 1000
      ipv6_sid_offset: 100
    bfd:           # SR Linux supports lower BFD timers than the global default
      min_tx: 100
      min_rx: 100
    clab:
      node:
        kind: srl
        type: ixrd2
      interface:
        name: e1-%d
      group_vars:
        srlinux_grpc_port: 57400
    features:
      initial:
        system_mtu: True
        ipv4:
          unnumbered: False
        ipv6:
          lla: True
      ospf:
        unnumbered: False
      isis:
        unnumbered:
          ipv4: False
          ipv6: True
          network: False

  sros:
    mgmt_if: A/1
    interface_name: 1/1/c%d
    image:
      clab: vrnetlab/vr-sros
    bgp:
      address_families:
        ibgp: [ ipv4, ipv6 ]
        ebgp: [ ipv4, ipv6 ]
    group_vars:
      ansible_user: admin
      ansible_ssh_pass: admin
      ansible_network_os: sros
      ansible_connection: paramiko_ssh
      netsim_console_connection: ssh
      sros_use_openconfig: False # Depends on pending PR for nokia.grpc.gnmi
    sr:
      srgb_range_start: 500000
      srgb_range_size: 1000
      ipv6_sid_offset: 100
    bfd:           # SR OS supports lower BFD timers than the global default
      min_tx: 100
      min_rx: 100
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True
          network: False # SROS treats the interfaces as point-to-point and forms at most 1 adjacency
    clab:
      node:
        kind: vr-sros
        type: sr-1 # By default emulate SR-1
        license: /Projects/SR_OS_VSR-SIM_license.txt
      interface:
        name: eth%d
      group_vars:
        sros_grpc_port: 57400

  vyos:
    interface_name: eth%d
    mgmt_if: eth0
    image:
      libvirt: vyos/vyos
    group_vars:
      ansible_network_os: vyos
      ansible_connection: paramiko
      ansible_user: vagrant
      ansible_ssh_pass: vagrant

  routeros:
    interface_name: ether%d
    mgmt_if: ether1
    ifindex_offset: 2
    image:
      libvirt: mikrotik/chr
    group_vars:
      ansible_network_os: routeros
      ansible_connection: network_cli
      ansible_user: admin
      ansible_ssh_pass: admin

#
# Output settings
#
outputs:
  graph:
    interface_labels: False
    as_clusters: True
    colors:
      as: "#e8e8e8"
      node: "#ff9f01"
      stub: "#d1bfab"
      ibgp: "#613913"
      ebgp: "#b21a1a"
    margins:
      as: 16
