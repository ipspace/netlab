#
# Global topology defaults
#
---
provider: libvirt

# Include core defaults (attributes, addressing) and configuration modules
#
_include:
- defaults/*.yml
- modules/*.yml

#
# Network automation defaults
#
automation:
  ansible:
    cleanup: [ ansible.cfg, hosts.yml, group_vars, host_vars, config ]
#
# Provider defaults
#
providers:
  libvirt:
    config: Vagrantfile
    start: vagrant up --provider libvirt
    stop: vagrant destroy -f
    probe: [ kvm-ok, virsh net-list, vagrant plugin list ]
    cleanup: [ Vagrantfile ]
    clab:
      start: sudo -E containerlab deploy -t clab-augment.yml
      stop: sudo -E containerlab destroy --cleanup -t clab-augment.yml
      filename: clab-augment.yml
      recreate_config: True

  virtualbox:
    config: Vagrantfile
    start: vagrant up --provider virtualbox
    stop: vagrant destroy -f
    probe: [ VBoxManage -h, vagrant plugin list ]
    cleanup: [ Vagrantfile ]
    inventory:
      ansible_host: 127.0.0.1
    inventory_port_map:
      ssh: ansible_port

    forwarded:
      ssh: 2000
      http: 8000
      netconf: 3000

  clab:
    config: clab.yml
    node_config_attributes: [ type, cmd, env, ports ]
    template: clab.j2
    # Preserve env to allow user to configure PATH
    start: sudo -E containerlab deploy -t clab.yml
    stop: sudo -E containerlab destroy --cleanup -t clab.yml
    probe: [ "containerlab version" ]
    cleanup: [ clab.yml,clab_files ]
    bridge_type: bridge # Use 'ovs-bridge' to create Openvswitch bridges
    runtime: docker     # Default runtime, see Containerlab documentation

  external:
    config: external.txt
    template: external.j2
    start: "echo 'Enjoy!'"
    stop: "echo 'What?'"
    probe: [ ]
    cleanup: [ external.txt ]

ports:
  ssh: 22
  http: 80
  https: 443
  netconf: 830
  gnmi: 57400

#
# Device defaults
#
# Don't change this section unless you plan to add new devices
#
# Keys in "devices" dictionary are platform names.
#
# Each platform MUST have an interface name template, all other
# parameters are optional
#
# interface_name: Python formatting string used to generate interface names
# mgmt_if:        Name of management interface if it uses a name outside of
#                 interface_name scheme. When missing, "interface_name" and
#                 "ifindex_offset-1" are used to generate mgmt interface name
# ifindex_offset: Number of first data interface (default: 1)
# group_vars:     Ansible group variables
#
devices:
  # Empty device used to test Ansible playbooks
  none:
    interface_name: eth%d
    virtualbox:
      image: none
    libvirt:
      image: none
    clab:
      image: none
    external:
      image: none
    group_vars:
      ansible_connection: paramiko_ssh
      ansible_network_os: none
    features:
      bgp:
        local_as: True
        vrf_local_as: True
        local_as_ibgp: True
        activate_af: True
        ipv6_lla: True
        rfc8950: True
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True
          network: True
      mpls:
        ldp: True
        bgp: True
        vpn: True
        6pe: True
      evpn:
        irb: True
        asymmetrical_irb: True
        bundle: [ vlan_aware ]
      gateway:
        protocol: [ anycast, vrrp ]
      vlan:
        model: l3-switch
        svi_interface_name: Vlan{vlan}
        subif_name: "{ifname}.{vlan.access_id}"
        mixed_trunk: True
        native_routed: True
      vrf:
        loopback_interface_name: Loopback{vrfidx}

  iosv:
    interface_name: GigabitEthernet0/%d
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_become_method: enable
      ansible_become_password: vagrant
      ansible_network_os: ios
      ansible_connection: network_cli
      netlab_device_type: ios
    libvirt:
      image: cisco/iosv
      create_template: iosv.xml.j2
#      create:
#        virt-install --connect=qemu:///system --name=vm_box --os-type=linux --arch=x86_64 --cpu host --vcpus=1
#          --noacpi --machine=pc-1.0 --virt-type=kvm --watchdog i6300esb,action=reset --ram=512
#          --disk path=vm.qcow2,bus=virtio,format=qcow2,cache=writethrough
#          --network=network:vagrant-libvirt,model=e1000 --graphics none --import
    virtualbox:
      image: cisco/iosv
    features:
      bgp:
        local_as: True
        vrf_local_as: True
        local_as_ibgp: True
        activate_af: True
      initial:
        ipv4:
          unnumbered: False
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True
          network: True
      mpls:
        ldp: True
        bgp: True
        vpn: True
        6pe: True
      vlan:
        model: router
        svi_interface_name: BVI{bvi}
        subif_name: "{ifname}.{subif_index}"
        mixed_trunk: True
        native_routed: True
      vrf:
        loopback_interface_name: Loopback{vrfidx}
      gateway:
        protocol: [ vrrp ]
    external:
      image: none
    graphite.icon: router

  csr:
    interface_name: GigabitEthernet%d
    ifindex_offset: 2
    virtualbox:
      image: cisco/csr1000v
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_become_method: enable
      ansible_become_password: vagrant
      ansible_network_os: ios
      ansible_connection: network_cli
      netlab_device_type: csr
    node:
      min_mtu: 1500
    features:
      bgp:
        local_as: True
        vrf_local_as: True
        local_as_ibgp: True
        activate_af: True
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True
          network: True
      mpls:
        ldp: True
        bgp: True
        vpn: True
        6pe: True
      vrf:
        loopback_interface_name: Loopback{vrfidx}
      vlan:
        model: switch
        svi_interface_name: BDI{vlan}
      gateway:
        protocol: [ vrrp ]
    libvirt:
      image: cisco/csr1000v
      create:
        virt-install --connect=qemu:///system --name=vm_box --os-variant=rhel4.0 --arch=x86_64 --cpu host --vcpus=1 --hvm
          --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2 --network=network:vagrant-libvirt,model=virtio --graphics none --import
    external:
      image: none
    graphite.icon: router

  nxos:
    interface_name: Ethernet1/%d
    mgmt_if: mgmt0
    virtualbox:
      image: cisco/nexus9300v
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_network_os: nxos
      ansible_connection: network_cli
    bfd:           # NXOS requires lower default timer values
      min_rx: 500
    evpn._start_transit_vlan: 3800
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True
      vrf:
        loopback_interface_name: loopback{vrfidx}
      vlan:
        model: l3-switch
        svi_interface_name: vlan{vlan}
        subif_name: "{ifname}.{subif_index}"
        native_routed: True
      evpn:
        irb: True
      gateway:
        protocol: [ vrrp ]
    libvirt:
      create_template: nxos.xml.j2
      image: cisco/nexus9300v
    external:
      image: none
    graphite.icon: nexus5000

  iosxr:
    mgmt_if: MgmtEth0/RP0/CPU0/0
    interface_name: GigabitEthernet0/0/0/%d
    ifindex_offset: 0
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_become_method: enable
      ansible_become_password: vagrant
      ansible_network_os: iosxr
      ansible_connection: network_cli
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True
          network: True
      bgp:
        activate_af: True
    libvirt:
      image: cisco/iosxr
      create:
        virt-install --connect=qemu:///system --network network=vagrant-libvirt,model=e1000 --name=vm_box
          --cpu host --arch=x86_64 --vcpus=2 --ram=8192
          --virt-type=kvm
          --disk path=vm.qcow2,format=qcow2,device=disk,bus=ide
          --graphics none --import
##      create_iso: iosxr
##          --disk path=bootstrap.iso,format=iso,device=cdrom

  asav:
    interface_name: GigabitEthernet0/%d
    ifindex_offset: 0
    mgmt_if: Management0/0
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_become_method: enable
      ansible_become_password: vagrant
      ansible_network_os: asa
      ansible_connection: network_cli
    libvirt:
      image: cisco/asav
      create:
        virt-install --connect=qemu:///system --network network=vagrant-libvirt,model=virtio --name=vm_box
          --cpu host --arch=x86_64 --machine=pc-1.0 --vcpus=1 --ram=2048 --os-type=linux --noacpi
          --virt-type=kvm --watchdog i6300esb,action=reset
          --disk path=vm.qcow2,format=qcow2,device=disk,bus=virtio,cache=writethrough
          --disk path=bootstrap.iso,format=iso,device=cdrom --graphics none --import
      create_iso: asav

  eos:
    interface_name: Ethernet{ifindex}
    description: Arista vEOS
    mgmt_if: Management1
    virtualbox:
      image: arista/veos
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_network_os: eos
      ansible_connection: network_cli
    features:
      bgp:
        local_as: True
        vrf_local_as: True
        local_as_ibgp: True
        activate_af: True
      initial:
        system_mtu: True
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True
          network: True
      mpls:
        ldp: True
        bgp: True
        vpn: True
        6pe: True
      vlan:
        model: l3-switch
        svi_interface_name: Vlan{vlan}
        subif_name: "{ifname}.{subif_index}"
        native_routed: True
      vrf:
        loopback_interface_name: Loopback{vrfidx}
      evpn:
        irb: True
        asymmetrical_irb: True
        bundle: [ vlan_aware ]
      gateway:
        protocol: [ anycast, vrrp ]
    clab:
      interface:
        name: et{ifindex}
      node:
        kind: ceos
        env:
          INTFTYPE: et
      mgmt_if: Management0
      image: ceos:4.26.4M
      group_vars:
        ansible_user: admin
        ansible_ssh_pass: admin
        ansible_become: yes
        ansible_become_method: enable
    libvirt:
      image: arista/veos
      create_template: eos.xml.j2
#      create: |
#        virt-install --connect=qemu:///system --name=vm_box --os-type=linux --arch=x86_64 --cpu host --vcpus=2 --hvm
#          --ram=2048 --disk path=vm.qcow2,bus=ide,format=qcow2 --network=network:vagrant-libvirt,model=virtio --graphics none --import
    external:
      image: none
    graphite.icon: switch

  fortios:
    interface_name: port%d
    mgmt_if: port1
    ifindex_offset: 2
    libvirt:
      image: fortinet/fortios
    group_vars:
      ansible_user: admin
      ansible_password: admin
      ansible_network_os: fortinet.fortios.fortios
      ansible_connection: httpapi
      collections:
        - fortinet.fortios
      vdom: "root"
      ansible_httpapi_use_ssl: no
      ansible_httpapi_validate_certs: no
      ansible_httpapi_port: 80
      netlab_console_connection: ssh
    external:
      image: none
    graphite.icon: firewall

  frr:
    interface_name: eth%d
    mgmt_if: eth0
    group_vars:
      ansible_connection: docker
      ansible_network_os: frr
      ansible_python_interpreter: auto_silent
    clab:
      # image: frrouting/frr:v7.5.0
      image: frrouting/frr:v8.4.0
      mtu: 1500
      node:
        kind: linux
        config_templates:
          daemons: /etc/frr/daemons
    external:
      image: none
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      vlan:
        model: router
        svi_interface_name: "vlan{vlan}"
        subif_name: "{ifname}.{vlan.access_id}"
        mixed_trunk: True
        native_routed: True
      evpn:
        irb: True
      vrf:
        keep_module: True # Don't remove vrf module even if no interfaces are associated with any vrfs
        loopback_interface_name: "lo{vrfidx}"
      bgp:
        activate_af: True
        ipv6_lla: True
        rfc8950: True
        local_as: True
        vrf_local_as: True
      mpls:
        ldp: True
        vpn: True
    graphite.icon: router

  linux:
    interface_name: eth%d
    mgmt_if: eth0
    role: host
    libvirt:
      image: generic/ubuntu2004
      group_vars:
        netlab_linux_distro: ubuntu
    virtualbox:
      image: generic/ubuntu2004
      group_vars:
        netlab_linux_distro: ubuntu
    group_vars:
      ansible_network_os: linux
      ansible_connection: paramiko
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      docker_shell: sh -il
      ansible_python_interpreter: auto_silent
    clab:
      image: python:3.9-alpine
      mtu: 1500
      node:
        kind: linux
        config_templates:
          hosts: /etc/hosts
      group_vars:
        ansible_connection: docker
        ansible_user: root
        netlab_linux_distro: vanilla
    external:
      image: none
    graphite.icon: server

  vsrx:
    interface_name: ge-0/0/%d
    ifindex_offset: 0
    mgmt_if: fxp0
    virtualbox:
      image: juniper/vsrx3
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: Vagrant
      ansible_network_os: junos
      ansible_connection: netconf
      netlab_console_connection: ssh
      netlab_device_type: vsrx
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True
      vrf:
        loopback_interface_name: "lo0.{vrfidx}"
      vlan:
        model: router
        subif_name: "{ifname}.{vlan.access_id}"
        mixed_trunk: False
        native_routed: True
      mpls:
        ldp: True
        vpn: True
    libvirt:
      image: juniper/vsrx3
      create_iso: vsrx
      create:
        virt-install --connect=qemu:///system --name=vm_box --os-variant=freebsd10.0 --arch=x86_64 --cpu host --vcpus=2 --hvm
          --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2 --disk path=bootstrap.iso,device=cdrom,bus=ide
          --boot hd --network=network:vagrant-libvirt,model=virtio --graphics none --import
    external:
      image: none
    graphite.icon: firewall

  vmx:
    interface_name: ge-0/0/{ifindex}
    ifindex_offset: 0
    mgmt_if: fxp0
    group_vars:
      ansible_user: admin
      ansible_ssh_pass: "admin@123"
      ansible_network_os: junos
      ansible_connection: netconf
      netlab_console_connection: ssh
      netlab_device_type: vmx
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True
      vrf:
        loopback_interface_name: "lo0.{vrfidx}"
      vlan:
        model: router
        svi_interface_name: irb.{vlan}
        subif_name: "{ifname}.{vlan.access_id}"
        mixed_trunk: True
        native_routed: True
      mpls:
        ldp: True
        vpn: True
    clab:
      image: vrnetlab/vr-vmx:18.2R1.9
      node:
        kind: vr-vmx
      interface:
        name: eth{ifindex+1}
    external:
      image: none
    graphite.icon: router

  arcos:
    interface_name: swp%d
    mgmt_if: ma1
    libvirt:
      image: arcos/arcos4.1.1
    group_vars:
      ansible_user: root
      ansible_ssh_pass: arcos
      ansible_network_os: arcos
    graphite.icon: router

  cumulus:
    interface_name: swp%d
    mgmt_if: eth0
    libvirt:
      image: CumulusCommunity/cumulus-vx:4.4.0
    virtualbox:
      image: CumulusCommunity/cumulus-vx:4.3.0
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_network_os: cumulus
      ansible_connection: paramiko
    evpn._start_transit_vlan: 3900
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      bgp:
        ipv6_lla: True
        rfc8950: True
        activate_af: True
        local_as: True
        vrf_local_as: True
      vlan:
        model: l3-switch
        svi_interface_name: "vlan{vlan}"
        subif_name: "{ifname}.{vlan.access_id}"
        native_routed: True
      vrf:
        loopback_interface_name: "lo{vrfidx}"
      evpn:
        irb: True
        asymmetrical_irb: True
      gateway:
        protocol: [ anycast, vrrp ]
    clab:
      mtu: 1500
      node:
        kind: cvx
        runtime: docker
      image: networkop/cx:4.4.0
      group_vars:
        ansible_connection: docker
        ansible_user: root
    external:
      image: none
    graphite.icon: switch

  cumulus_nvue:
    interface_name: swp%d
    mgmt_if: eth0
    libvirt:
      image: CumulusCommunity/cumulus-vx:5.2.0
    virtualbox:
      image: CumulusCommunity/cumulus-vx:5.2.0
    group_vars:
      ansible_user: cumulus
      ansible_ssh_pass: cumulus
      ansible_network_os: cumulus_nvue
      ansible_connection: paramiko
      ansible_python_interpreter: auto_silent
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      bgp:
        ipv6_lla: True
        rfc8950: True
        activate_af: True
      ospf:
        unnumbered: True
    clab:
      mtu: 1500
      node:
        kind: cvx
        runtime: docker
      image: networkop/cx:5.0.1
      group_vars:
        ansible_connection: docker
        ansible_user: root
    external:
      image: none
    graphite.icon: switch

  srlinux:
    mgmt_if: mgmt0
    interface_name: ethernet-1/%d
    group_vars:
      ansible_user: admin
      ansible_ssh_pass: NokiaSrl1!
      ansible_network_os: srlinux
      ansible_connection: paramiko
      netlab_console_connection: ssh
    sr:
      srgb_range_start: 500000
      srgb_range_size: 1000
      ipv6_sid_offset: 100
    bfd:           # SR Linux supports lower BFD timers than the global default
      min_tx: 100
      min_rx: 100
    clab:
      image: ghcr.io/nokia/srlinux
      node:
        kind: srl
        type: ixrd2
      interface:
        name: e1-%d
      group_vars:
        srlinux_grpc_port: 57400
    features:
      initial:
        system_mtu: True
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      vlan:
        model: router
        svi_interface_name: "irb0.{vlan}"
        subif_name: "{ifname}.{vlan.access_id}"
        mixed_trunk: True
      bgp:
        local_as: True
        vrf_local_as: True
        local_as_ibgp: True
        activate_af: True
        ipv6_lla: True
        rfc8950: True
      vxlan:
        requires: [ evpn ] # vrf for l3 vxlan
      evpn:
        irb: True
        asymmetrical_irb: True
      ospf:
        unnumbered: False
      isis:
        unnumbered:
          ipv4: False
          ipv6: True
          network: False
      vrf:
        loopback_interface_name: "lo0.{vrfidx}"
        keep_module: True
      gateway:
        protocol: [ anycast ]
    external:
      image: none
    graphite.icon: router

  sros:
    mgmt_if: A/1
    interface_name: 1/1/c%d
    group_vars:
      ansible_user: admin
      ansible_ssh_pass: admin
      ansible_network_os: sros
      ansible_connection: paramiko_ssh
      netlab_console_connection: ssh
      sros_use_openconfig: False
    sr:
      srgb_range_start: 500000
      srgb_range_size: 1000
      ipv6_sid_offset: 100
    bfd:           # SR OS supports lower BFD timers than the global default
      min_tx: 100
      min_rx: 100
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      isis:
        unnumbered:
          ipv4: True
          ipv6: True
          network: False # SROS treats the interfaces as point-to-point and forms at most 1 adjacency
      bgp:
        local_as: True
        vrf_local_as: True
        local_as_ibgp: True
        activate_af: True
        ipv6_lla: True
        rfc8950: False   # Not implemented yet, may be possible
      evpn:
        irb: True
        asymmetrical_irb: True
      mpls:
        ldp: True
        # bgp: True
        # vpn: True
        # 6pe: True
      vxlan:
        requires: [ evpn ] # Current implementation focuses on VXLAN+EVPN, device supports static too
      vrf:
        loopback_interface_name: "loopback.{vrfidx}"
      vlan:
        model: router
        svi_interface_name: "svi.{vlan}"
        subif_name: "{ifname}/1:{vlan.access_id}"
        mixed_trunk: True
        native_routed: True
      gateway:
        protocol: [ anycast, vrrp ]

    clab:
      image: vrnetlab/vr-sros
      mtu: 1500
      node:
        kind: vr-sros
        type: sr-1 # By default emulate SR-1
        license: /Projects/SR_OS_VSR-SIM_license.txt
      interface:
        name: eth%d
      group_vars:
        sros_grpc_port: 57400
    external:
      image: none
    graphite.icon: router

  vyos:
    interface_name: eth%d
    mgmt_if: eth0
    libvirt:
      image: vyos/current
    group_vars:
      ansible_network_os: vyos
      ansible_connection: paramiko
      ansible_user: vyos
      ansible_ssh_pass: vyos
      docker_shell: su - vyos
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      ospf:
        unnumbered: True
      bgp:
        local_as: True
        vrf_local_as: True
        activate_af: True
        ipv6_lla: True
        rfc8950: True
      mpls:
        ldp: True
        vpn: True
      vlan:
        model: l3-switch
        svi_interface_name: "br0.{vlan}"
        subif_name: "{ifname}.{vlan.access_id}"
        native_routed: True
      vrf:
        loopback_interface_name: "dum{vrfidx}"
      evpn:
        irb: True
        asymmetrical_irb: True
      gateway:
        protocol: [ vrrp ]
    clab:
      image: ghcr.io/sysoleg/vyos-container
      mtu: 1500
      node:
        kind: linux
        binds:
          '/lib/modules': '/lib/modules'
      group_vars:
        ansible_connection: docker
        ansible_user: vyos
    external:
      image: none
    graphite.icon: router

  dellos10:
    interface_name: ethernet1/1/%d
    mgmt_if: mgmt1/1/1
    features:
      initial:
        ipv4:
          unnumbered: True
        ipv6:
          lla: True
      bgp:
        local_as: True
        vrf_local_as: True
        activate_af: True
        ipv6_lla: True
        rfc8950: True
      vlan:
        model: switch
        svi_interface_name: virtual-network{vlan}
      vrf:
        loopback_interface_name: loopback{vrfidx}
      evpn:
        irb: True
        asymmetrical_irb: True
      gateway:
        protocol: [ anycast, vrrp ]
    clab:
      image: vrnetlab/vr-ftosv
      node:
        kind: vr-ftosv
      interface:
        name: eth%d
    libvirt:
      image: dell/os10
      create:
        virt-install --connect=qemu:///system --name=vm_box --arch=x86_64 --cpu host --vcpus=2 --hvm
          --ram=2048 --network=network:vagrant-libvirt,model=virtio --graphics none --import
          --disk path=vm.qcow2,format=qcow2,bus=sata
          --disk path=hdb_OS10-installer.qcow2,format=qcow2,bus=virtio
          --disk path=hdc_OS10-platform.qcow2,format=qcow2,bus=virtio
    group_vars:
      ansible_network_os: dellos10
      ansible_connection: network_cli
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
    external:
      image: none
    graphite.icon: switch

  routeros:
    interface_name: ether%d
    mgmt_if: ether1
    ifindex_offset: 2
    libvirt:
      image: mikrotik/chr
    group_vars:
      ansible_network_os: routeros
      ansible_connection: network_cli
      ansible_user: admin
      ansible_ssh_pass: admin
    features:
      mpls:
        ldp: True
        vpn: True
      vlan:
        model: router
        svi_interface_name: bridge{vlan}
        subif_name: "{ifname}-{vlan.access_id}"
        mixed_trunk: True
        native_routed: True
    external:
      image: none
    graphite.icon: router

  routeros7:
    interface_name: ether%d
    mgmt_if: ether1
    ifindex_offset: 2
    libvirt:
      image: mikrotik/chr7
      create:
        virt-install --connect=qemu:///system --name=vm_box --arch=x86_64 --cpu host --vcpus=2 --hvm
          --ram=256 --network=network:vagrant-libvirt,model=virtio --graphics none --import
          --disk path=vm.qcow2,format=qcow2,bus=ide
    group_vars:
      ansible_network_os: routeros
      ansible_connection: network_cli
      ansible_user: admin
      ansible_ssh_pass: admin
      netlab_device_type: routeros7
    features:
      mpls:
        ldp: True
        vpn: True
      vlan:
        model: l3-switch
        svi_interface_name: "vlan{vlan}"
        subif_name: "{ifname}-{vlan.access_id}"
        native_routed: True
      vrf:
        loopback_interface_name: loopback{vrfidx}
    clab:
      image: vrnetlab/vr-routeros:7.6
      node:
        kind: vr-ros
      interface:
        name: eth{ifindex-1}
    external:
      image: none
    graphite.icon: router

#
# Output settings
#
outputs:
  graph:
    interface_labels: False
    node_address_label: True
    as_clusters: True
    colors:
      as: "#e8e8e8"
      node: "#ff9f01"
      stub: "#d1bfab"
      ibgp: "#613913"
      ebgp: "#b21a1a"
    margins:
      as: 16

# Error hints

hints:
  evpn:
    irb_group: |
      All VLANs that are part of a VRF using asymmetric IRB have to be present on all nodes
      using that VRF. The easiest way to achieve that is to create a group with all
      participating nodes and list VLANs in the 'vlans' attribute of that group
    node_bundle: |
      evpn.bundle attribute can be used only in global VRF definition
