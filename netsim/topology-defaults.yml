#
# Global topology defaults
#
---
provider: libvirt
#
# Default loopback, LAN, and P2P prefixes
addressing:
  loopback:
    ipv4: 10.0.0.0/24
  lan:
    ipv4: 172.16.0.0/16
  p2p:
    ipv4: 10.1.0.0/16
  mgmt:
    ipv4: 192.168.121.0/24
    start: 100
    mac: 08-4F-A9-00-00-00

# Global, node and link attributes
attributes:
  global: [ addressing,defaults,groups,links,module,name,nodes,plugin,provider ]
  internal: [ input,includes,nodes_map,pools,Provider,Plugin ]
  link: [ bandwidth,bridge,name,prefix,role,type]
  link_internal: [ linkindex ]
  link_no_propagate: [ prefix ]

# Built-in module defaults
#
bgp:
  supported_on: [ cumulus, eos, frr, csr, iosv, nxos, vsrx, vyos, routeros, srlinux, sros ]
  ebgp_role: external
  advertise_roles: [ stub ]
  advertise_loopback: True
  community:
    ibgp: [ standard, extended ]
    ebgp: [ standard ]
  no_propagate: [ ebgp_role, advertise_roles, rr_list, as_list ]
  next_hop_self: true
  attributes:
    global: [ as, next_hop_self, rr_list, ebgp_role, as_list, advertise_loopback, advertise_roles, community ]
    node: [ as, next_hop_self, rr, originate, advertise_loopback, community ]
    link: [ advertise ]

isis:
  supported_on: [ eos, frr, csr, iosv, nxos, vsrx, srlinux, sros ]
  area: 49.0001
  type: level-2
  attributes:
    global: [ area, type ]
    node: [ area, net, type ]
    link: [ metric, cost, type ]

ospf:
  supported_on: [ arcos, cumulus, eos, fortios, frr, csr, iosv, nxos, vsrx, vyos, routeros, srlinux, sros ]
  attributes:
    global: [ area, process, reference_bandwidth ]
    node: [ area, process, id, reference_bandwidth ]
    link: [ cost, area ]

eigrp:
  supported_on: [ csr, iosv, nxos ]
  as: 1
  attributes:
    global: [ as ]
    node: [ as ]

sr:
  requires: [ isis ]
  supported_on: [ csr, eos, srlinux, sros ]
  srgb_range_start: 500000
  srgb_range_size: 1000
  ipv6_sid_offset: 100
  no_propagate: [ srgb_range_start, srgb_range_size, ipv6_sid_offset ]
  attributes:
    global: [ srgb_range_start, srgb_range_size, ipv6_sid_offset ]

#
# Provider defaults
#
providers:
  libvirt:
    config: Vagrantfile
    start: vagrant up --provider libvirt
    stop: vagrant destroy -f
    probe: [ kvm-ok, virsh net-list, vagrant plugin list ]
  virtualbox:
    config: Vagrantfile
    start: vagrant up --provider virtualbox
    stop: vagrant destroy -f
    probe: [ VBoxManage -h, vagrant plugin list ]
    inventory:
      ansible_host: 127.0.0.1
    inventory_port_map:
      ssh: ansible_port

    forwarded:
      ssh: 2000
      http: 8000
      netconf: 3000

  clab:
    config: clab.yml
    template: clab.j2
    # Preserve env to allow user to configure PATH
    start: sudo -E containerlab deploy -t clab.yml
    stop: sudo -E containerlab destroy --cleanup -t clab.yml
    probe: [ containerlab version ]
    devices:
      eos:
        provider_interface_name: eth%d
        mgmt_if: Management0
        provider_kind: ceos
        image:
          clab: ceos:4.25.1F
        group_vars:
          ansible_user: admin
          ansible_ssh_pass: admin
          ansible_become: yes
          ansible_become_method: enable

      frr:
        provider_kind: linux

      linux:
        provider_kind: linux
        group_vars:
          ansible_connection: docker
          ansible_user: root

      cumulus:
        provider_kind: cvx
        image:
          clab: networkop/cx:4.3.0
        group_vars:
          ansible_connection: docker
          ansible_user: root

      srlinux:
        provider_kind: srl
        provider_interface_name: e1-%d
        provider_type: ixrd2
        image:
          clab: ghcr.io/nokia/srlinux:latest

      sros:
        provider_kind: vr-sros
        provider_interface_name: eth%d
        provider_type: sr-1 # By default emulate SR-1
        image:
          clab: vrnetlab/vr-sros:latest
        group_vars:
          ansible_connection: nokia.grpc.gnmi
          ansible_network_os: sros # Used internally in netsim-tools only
          ansible_gnmi_encoding: JSON
          ansible_port: 57400
          # ansible_user: admin
          # ansible_ssh_pass: admin
          sros_use_openconfig: False # Depends on pending PR for nokia.grpc.gnmi

ports:
  ssh: 22
  http: 80
  https: 443
  netconf: 830
  gnmi: 57400

#
# Device defaults
#
# Don't change this section unless you plan to add new devices
#
# Keys in "devices" dictionary are platform names.
#
# Each platform MUST have an interface name template, all other
# parameters are optional
#
# interface_name: Python formatting string used to generate interface names
# mgmt_if:        Name of management interface if it uses a name outside of
#                 interface_name scheme. When missing, "interface_name" and
#                 "ifindex_offset-1" are used to generate mgmt interface name
# ifindex_offset: Number of first data interface (default: 1)
# group_vars:     Ansible group variables
#
devices:
  iosv:
    interface_name: GigabitEthernet0/%d
    image:
      libvirt: cisco/iosv
      virtualbox: cisco/iosv
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_become_method: enable
      ansible_become_password: vagrant
      ansible_network_os: ios
      ansible_connection: network_cli
  csr:
    interface_name: GigabitEthernet%d
    ifindex_offset: 2
    image:
      libvirt: cisco/csr1000v
      virtualbox: cisco/csr1000v
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_become_method: enable
      ansible_become_password: vagrant
      ansible_network_os: ios
      ansible_connection: network_cli
  nxos:
    interface_name: Ethernet1/%d
    mgmt_if: mgmt0
    image:
      libvirt: cisco/nexus9300v
      virtualbox: cisco/nexus9300v
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_network_os: nxos
      ansible_connection: network_cli

  eos:
    interface_name: Ethernet%d
    mgmt_if: Management1
    image:
      libvirt: arista/veos
      virtualbox: arista/veos
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_network_os: eos
      ansible_connection: network_cli

  fortios:
    interface_name: port%d
    mgmt_if: port1
    ifindex_offset: 2
    image:
      libvirt: fortinet/fortios
    group_vars:
      ansible_user: admin
      ansible_password: admin
      ansible_network_os: fortinet.fortios.fortios
      ansible_connection: httpapi
      collections:
        - fortinet.fortios
      vdom: "root"
      ansible_httpapi_use_ssl: no
      ansible_httpapi_validate_certs: no
      ansible_httpapi_port: 80

  frr:
    interface_name: eth%d
    mgmt_if: eth0
    image:
      clab: frrouting/frr:v7.5.0
    group_vars:
      ansible_connection: docker
      ansible_network_os: frr

  linux:
    interface_name: eth%d
    mgmt_if: eth0
    image:
      libvirt: generic/ubuntu2004
      virtualbox: generic/ubuntu2004
      clab: python:3.9-alpine
    group_vars:
      ansible_network_os: linux
      ansible_connection: paramiko
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      docker_shell: sh

  vsrx:
    interface_name: ge-0/0/%d
    ifindex_offset: 0
    mgmt_if: fxp0
    image:
      libvirt: juniper/vsrx3
      virtualbox: juniper/vsrx3
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: Vagrant
      ansible_network_os: junos
      ansible_connection: netconf

  arcos:
    interface_name: swp%d
    mgmt_if: ma1
    image:
      libvirt: arcos/arcos4.1.1
    group_vars:
      ansible_user: root
      ansible_ssh_pass: arcos
      ansible_network_os: arcos

  cumulus:
    interface_name: swp%d
    mgmt_if: eth0
    image:
      libvirt: CumulusCommunity/cumulus-vx
      virtualbox: CumulusCommunity/cumulus-vx:4.3.0
    group_vars:
      ansible_user: vagrant
      ansible_ssh_pass: vagrant
      ansible_network_os: cumulus
      ansible_connection: paramiko

  srlinux:
    mgmt_if: mgmt0
    interface_name: ethernet-1/%d
    image:
      clab: ghcr.io/nokia/srlinux
    group_vars:
      ansible_network_os: srlinux
      ansible_port: 57400 # Uses gNMI over TLS to this port
      ansible_connection: nokia.grpc.gnmi
      ansible_user: admin
      ansible_password: admin
      ansible_gnmi_encoding: JSON_IETF

  sros:
    mgmt_if: A/1
    interface_name: 1/1/c%d
    image:
      clab: vrnetlab/vr-sros
    group_vars:
      ansible_user: admin
      ansible_ssh_pass: admin
      ansible_network_os: sros
      ansible_connection: paramiko_ssh

  vyos:
    interface_name: eth%d
    mgmt_if: eth0
    image:
      libvirt: vyos/vyos
    group_vars:
      ansible_network_os: vyos
      ansible_connection: paramiko
      ansible_user: vagrant
      ansible_ssh_pass: vagrant

  routeros:
    interface_name: ether%d
    mgmt_if: ether1
    ifindex_offset: 2
    image:
      libvirt: mikrotik/chr
    group_vars:
      ansible_network_os: routeros
      ansible_connection: network_cli
      ansible_user: admin
      ansible_ssh_pass: admin

#
# Output settings
#
outputs:
  graph:
    interface_labels: False
    as_clusters: True
    colors:
      as: "#e8e8e8"
      node: "#ff9f01"
      stub: "#d1bfab"
      ibgp: "#613913"
      ebgp: "#b21a1a"
    margins:
      as: 16
