# Generic routing attributes
#
---
no_propagate:
  policy:
  prefix:
  aspath:
  community:

attributes:
  global:
    policy:
      type: dict
      _keytype: id
      _subtype:
        type: list
        make_list: True
        _subtype: rp_entry
    prefix:
      type: dict
      _keytype: id
      _subtype:
        type: list
        make_list: True
        _subtype: pfx_entry
    aspath:
      type: dict
      _keytype: id
      _subtype:
        type: list
        make_list: True
        _subtype: aspath_entry
    community:
      type: dict
      _keytype: id
      _subtype:
        type: list
        make_list: True
        _subtype: community_entry
  node:
    policy:
      merge: global
      _subtype:
        _alt_types: [ NoneType ]
    prefix:
      merge: global
      _subtype:
        _alt_types: [ NoneType ]
    aspath:
      merge: global
      _subtype:
        _alt_types: [ NoneType ]
    community:
      merge: global
      _subtype:
        _alt_types: [ NoneType ]

  route_map:
    set: [ locpref, med, weight, prepend ]
    match: [ prefix, nexthop, aspath ]

_top:                               # Modification of global defaults
  prefix:
    any:
      ipv4: 0.0.0.0/0
      ipv6: ::/0

  attributes:
    rp_entry:                       # Define routing policy entry
      _description: Routing policy entry
      action:
        type: str
        valid_values: [ permit, deny ]
      sequence:
        type: int
        min_value: 1
        max_value: 32767
      set:
        locpref:
          type: int
          min_value: 0
          max_value: 4294967295
        med:
          type: int
          min_value: 0
          max_value: 32767
        weight:
          type: int
          min_value: 0
          max_value: 65535
        prepend:
          count:
            type: int
            min_value: 1
            max_value: 32
          path: str
        community:
          standard: list
          extended: list
          large: list
          append: bool
          delete: bool
      match:
        prefix: str
        nexthop: str
        aspath: str
        community: str

    pfx_entry:                      # Define prefix list entry
      action:
        type: str
        valid_values: [ permit, deny ]
      sequence:
        type: int
        min_value: 1
        max_value: 32767
      pool:
        type: addr_pool
        _valid_with: [ action, sequence, min, max ]
      prefix:
        type: named_pfx
        _valid_with: [ action, sequence, min, max ]
      min:
        ipv4: { type: int, min_value: 0, max_value: 32 }
        ipv6: { type: int, min_value: 0, max_value: 128 }
        _alt_types: [ int ]
      max:
        ipv4: { type: int, min_value: 0, max_value: 32 }
        ipv6: { type: int, min_value: 0, max_value: 128 }
        _alt_types: [ int ]
      ipv4: { type: ipv4, use: prefix }
      ipv6: { type: ipv6, use: prefix }

    aspath_entry:                   # Define AS-path access list entry
      action:
        type: str
        valid_values: [ permit, deny ]
      sequence:
        type: int
        min_value: 1
        max_value: 32767
      path:
        type: list
        _subtype: asn
        _alt_types: [ str, asn ]

    community_entry:                # Define BGP community entry
      action:
        type: str
        valid_values: [ permit, deny ]
      sequence:
        type: int
        min_value: 1
        max_value: 32767
      path:
        type: list                  # We're using AS-path transformation code, so we might get 'path' attribute
        _valid_with: [ action, sequence ]
      list:
        type: list                  # List is equivalent to path but they can't be used together
        _valid_with: [ action, sequence ]
      regexp:
        type: str                   # Whereas regexp indicates we have to use extended ACL
        _valid_with: [ action, sequence ]

features:
  policy:
    set: Route map SET attributes
    match: Route map MATCH attributes
