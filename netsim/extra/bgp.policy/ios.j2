{% import '_route_map_ios.j2' as routemap with context %}
{% macro ebgp_neighbor(n,af) -%}
{%   if 'weight' in n %}
    neighbor {{ n[af] }} weight {{ n.weight }}
{%   endif %}
{%   if 'bandwidth' in n %}
    neighbor {{ n[af] }} dmzlink-bw
{%   endif %}
{{   routemap.apply_route_map(n,af) }}
{%- endmacro %}
{% macro fix_intf_bw(bgp,interfaces) %}
{%   for n in bgp.neighbors if n.bandwidth.in is defined %}
{%     for intf in interfaces if n.ifindex == intf.ifindex %}
interface {{ intf.ifname }}
 bandwidth {{ n.bandwidth.in * 1000 }}
!
{%     endfor %}
{%   endfor %}
{%- endmacro %}
!
{% call(p_entry) routemap.create_route_maps(bgp,vrfs|default({})) -%}
{{   routemap.common_route_map_entry(p_entry) }}
{%- endcall %} 
!
router bgp {{ bgp.as }}
{% if 'locpref' in bgp %}
  bgp default local-preference {{ bgp.locpref }}
{% endif %}
!
! Global address families
{% for af in ['ipv4','ipv6'] if af in bgp %}
  address-family {{ af }}
{%   for n in bgp.neighbors if n[af] is defined %}
{{     ebgp_neighbor(n,af) }}
{%   endfor %}
{% endfor %}
!
{% if vrfs is defined %}
{%   for vname,vdata in vrfs.items() if vdata.bgp is defined and vdata.bgp.neighbors is defined %}
{%     for af in ['ipv4','ipv6'] if af in vdata.af|default({}) %}
{%       for n in vdata.bgp.neighbors if n[af] is defined %}
{%         if loop.first %}
  address-family {{ af }} vrf {{ vname }}
{%         endif %}
{{         ebgp_neighbor(n,af) }}
{%       endfor %}
{%     endfor %}
{%   endfor %}
{% endif %}
!
{# Apply EBGP bgp.bandwidth to interfaces -- the only way to get it done in Cisco IOS #}
{{ fix_intf_bw(bgp,interfaces) }}
{% if vrfs is defined %}
{%   for vname,vdata in vrfs.items() if vdata.bgp is defined and vdata.bgp.neighbors is defined %}
{{     fix_intf_bw(vdata.bgp,interfaces) }}
{%   endfor %}
{% endif %}
do clear ip bgp * soft
