{% set directions_map = { 'in':'import', 'out':'export' } %}

{#
   Macro for neighbor attributes (for bgp.policy)
#}
{% macro bgp_neighbor(n,bfd,af,k) %}
{%   if 'policy' in n %}
{# export policy needs to consider also ibgp-export/ebgp-export ----- TODO how to handle that?? #}
{%     for direction in [ 'in','out' ] if direction in n.policy %}
  {{ directions_map[direction] }} {{ n.policy[direction] }}-{{ af }};
{%     endfor %}

{%   endif %}
{%- endmacro %}


{# Main BGP Instance #}
protocols {
  bgp {
{% for af in ['ipv4','ipv6'] if bgp[af] is defined and loopback[af] is defined %}
{%   for n in bgp.neighbors if n[af] is defined and n.type == 'ibgp' %}
{%     if loop.first %}
    group ibgp-peers-{{ af }} {
{%     endif %}
      neighbor {{ n[af] }} {
        {# IBGP neighbor within an address family #}
        {{ bgp_neighbor(n,bfd,af,'ibgp') }}
      }
{%     if loop.last %}
    }
{%     endif %}
{%   endfor %}
{% endfor %}
{% for n in bgp.neighbors if n.type == 'ebgp' %}
{%   if loop.first %}
    group ebgp-peers {
{%   endif %}
{%   for af in ['ipv4','ipv6'] if n[af] is defined %}
      neighbor {{ n[af] }} {
        {# EBGP neighbor #}
        {{ bgp_neighbor(n,bfd,af,'ebgp') }}
      }
{%   endfor %}
{%     if loop.last %}
    }
{%     endif %}
{% endfor %}
  }
}

{# VRF -> BGP Instances #}
routing-instances {
{% for vname,vdata in (vrfs|default({})).items() %}

  {{vname}} {
    protocols {
      bgp {
{%   for af in ['ipv4','ipv6'] if vdata.af[af] is defined and vdata.loopback_address[af] is defined %}
{%     for n in vdata.bgp.neighbors|default([]) if n[af] is defined and n.type == 'ibgp' %}
{%       if loop.first %}
        group ibgp-peers-{{ af }} {
{%       endif %}
          neighbor {{ n[af] }} {
            {# THIS HERE IS THE NEIGHBOR (VRF->iBGP) #}
            {{ bgp_neighbor(n,bfd,af,'ibgp') }}
          }
{%       if loop.last %}
        }
{%       endif %}
{%     endfor %}
{%   endfor %}

{%   for n in vdata.bgp.neighbors|default([]) if n.type == 'ebgp' %}
{%     if loop.first %}
        group ebgp-peers {
{%     endif %}
{%     for af in ['ipv4','ipv6'] if n[af] is defined %}
          neighbor {{ n[af] }} {
            {# THIS HERE IS THE NEIGHBOR (VRF->eBGP) #}
            {{ bgp_neighbor(n,bfd,af,'ebgp') }}
          }
{%     endfor %}
{%     if loop.last %}
        }
{%     endif %}
{%   endfor %}
      }
    }
  }

{% endfor %}
}
