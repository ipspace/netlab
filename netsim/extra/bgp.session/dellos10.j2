{% macro ebgp_neighbor(n,af) -%}
{%   set peer = n[af] if n[af] is string else 'interface ' + n.local_if|default('?') %}
  neighbor {{ peer }}
{%   if n.bfd|default(False) %}
   bfd
{% endif %}
{%   if n.remove_private_as|default([]) %}
   remove-private-as
{%   endif %}
{%   if n.timers is defined %}
   timers {{ n.timers.keepalive|default(60) }} {{ n.timers.hold|default(180) }}
{%   endif %}
{%   if n.password is defined %}
   password {{ n.password }}
{%   endif %}
{%   for _af in ['ipv4','ipv6'] if n.activate[_af]|default(False) %}
   address-family {{ _af }} unicast
{%   if n.allowas_in is defined %}
    allowas-in {{ n.allowas_in }}
{%   endif %}
{%   if n.default_originate|default(False) %}
    default-originate
{%   endif %}
   exit
{%   endfor %}
  !
{%   if n.evpn|default(False) %}
   address-family l2vpn evpn
{%   if n.allowas_in is defined %}
    allowas-in {{ n.allowas_in }}
{%   endif %}
   exit
{%   endif %}
  !
{% endmacro %}

router bgp {{ bgp.as }}
{% for af in ['ipv4','ipv6'] %}
{%   for n in bgp.neighbors if n[af] is defined %}
{{     ebgp_neighbor(n,af) -}}
{%   endfor %}
{% endfor %}
!
{% if vrfs is defined %}
{%   for vname,vdata in vrfs.items() if vdata.bgp is defined %}
 vrf {{ vname }}
{%     for af in ['ipv4','ipv6'] %}
{%       for n in vdata.bgp.neighbors if n[af] is defined %}
{{       ebgp_neighbor(n,af) -}}
{%       endfor %}
{%     endfor %}
{%   endfor %}
{% endif %}
!
do clear ip bgp *
