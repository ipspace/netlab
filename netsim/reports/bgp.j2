{# description: BGP autonomous systems and neighbors (needs Ansible)#}
{% import 'bgp-prefix.include.j2' as bcode %}
{% include 'ipaddr.include.j2' %}
{#
   First, figure out if we need RR column
#}
{% set cols = namespace(rr=false,las=false,ipv4=false,ipv6=false) %}
{{- bcode.asn_columns(nodes,cols) -}}
{#
   Set ASN report header variables
#}
{% set asn_fmt = "| {0:15} | {1:>15} | {3:>20} |" %}
{% set asn_divider = "|-----------------|-----------------|----------------------|" %}
{% set asn_legend  = "| Node/ASN        | Router ID       | Advertised prefixes  |" %}
{% if cols.rr %}
{% set asn_fmt = "| {0:15} | {1:>15} | {2:^6} | {3:>20} |" %}
{% set asn_divider = "|-----------------|-----------------|--------|----------------------|" %}
{% set asn_legend  = "| Node/ASN        | Router ID       | BGP RR | Advertised prefixes  |" %}
{% endif %}
{#
   Now we're ready for the ASN report
#}
{% set bnodes = nodes.values()|selectattr('bgp','defined')|selectattr('bgp.as','defined') %}
{% for asn,ndl in bnodes|groupby('bgp.as') if asn %}
{%   if loop.first %}
AS Numbers
=============
{{ asn_divider }}
{{ asn_legend }}
{{ asn_divider }}
{%   endif %}
{%   set asn_len = (asn_legend|length - 4)|string %}
{{   ("| {0:<"+asn_len+"} |").format("AS "+asn|string) }}
{%   for ndata in ndl %}
{%     if loop.first %}
{{ asn_divider }}
{%     endif %}
{#
    Collect prefixes advertised by the router
#}
{%     set pfx = [] %}{{ bcode.build_pfx_list(ndata,pfx) -}}
{#
    Now take the first prefix (if exists) to display in the "router data" line, and leave
    the rest for subsequent lines
#}
{%     set pfirst = "" %}
{%     if pfx %}
{%       set pfirst = pfx[0] %}
{%       set pfx = pfx[1:] %}
{%     endif %}
{%     set rr_flag = 'Yes' if ndata.bgp.rr|default('') else '' %}
{{     asn_fmt.format(ndata.name,ndata.bgp.router_id|default(''),rr_flag,pfirst) }}
{#
    Iterate over the list of remaining prefixes and emit one per line
#}
{%     for p in pfx %}
{{       asn_fmt.format('','','',p) }}
{%     endfor %}
{%   endfor %}
{{ asn_divider }}
{% else %}
No BGP routers in this lab topology
{% endfor %}
{#
   Next: Neighbors report. First, figure out which columns we need
#}
{{ bcode.neigbor_columns(nodes,cols) -}}
{#
   Set BGP Neighbor report header variables
#}
{% set ngb_fmt = "| {0:15} | {1:15} | {2:>11} |" %}
{% set ngb_divider = "|-----------------|-----------------|-------------|" %}
{% set ngb_legend  = "| Node            | Neighbor        | Neighbor AS |" %}
{#
   Add IPv4 column if needed
#}
{% if cols.ipv4 %}
{%   set ngb_fmt = ngb_fmt + " {3:>15} |" %}
{%   set ngb_divider = ngb_divider + "-----------------|" %}
{%   set ngb_legend  = ngb_legend  + "   Neighbor IPv4 |" %}
{% endif %}
{% if cols.ipv6 %}
{%   set ngb_fmt = ngb_fmt + " {4:>39} |" %}
{%   set ngb_divider = ngb_divider + "-----------------------------------------|" %}
{%   set ngb_legend  = ngb_legend  + "                           Neighbor IPv6 |" %}
{% endif %}
{% if cols.las %}
{%   set ngb_fmt     = ngb_fmt     + " {5:>8} |" %}
{%   set ngb_divider = ngb_divider + "----------|" %}
{%   set ngb_legend  = ngb_legend  + " Local AS |" %}
{% endif %}
{#
   Now we're ready for the BGP Neighbors report
#}
{% for n,d in nodes.items() if 'bgp' in d and 'neighbors' in d.bgp %}
{%   if loop.first %}

BGP Neighbors
=============
{{ ngb_divider }}
{{ ngb_legend }}
{{ ngb_divider }}
{%   endif %}
{%   set line_len = (ngb_legend|length - 4)|string %}
{{   ("| {0:<"+line_len+"} |").format("{0} ({1} / AS {2})".format(n,d.bgp.router_id,d.bgp.as)) }}
{%   for ngb in d.bgp.neighbors %}
{%     if loop.first %}
{{ ngb_divider }}
{%     endif %}
{{     ngb_fmt.format('',ngb.name,ngb.as,ngb.ipv4|default(''),ngb.ipv6|default(''),ngb.local_as|default('')) }}
{%   endfor %}
{{ ngb_divider }}
{% endfor %}
