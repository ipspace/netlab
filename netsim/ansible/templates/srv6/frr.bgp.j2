router bgp {{ bgp.as }}
 segment-routing srv6
  locator {{ inventory_hostname }}
 exit

{#
  The core bgp module only provisions neighbors for which the transport matches the address family, i.e. IPv4 over v4
  and IPv6 over v6. This template modifies IPv6 neighbors, adding VPNv4/6 AF over IPv6 transport and setting various
  next hop handling flags
#}
{% macro bgp_neighbor(n,peer,af) %}
  neighbor {{ peer }} activate
  neighbor {{ peer }} send-community both
{%   if n.next_hop_unchanged is defined %}
  neighbor {{ peer }} attribute-unchanged next-hop
{%   endif %}
{%   if n.type=='ibgp' and bgp.next_hop_self|default(True) %}
  neighbor {{ peer }} next-hop-self
{%   endif %}
{% endmacro -%}

{% if srv6.vpn is defined %}
{%   for n in bgp.neighbors|default([]) if n.ipv6 is defined %}
{%     set peer = n.ipv6 %}
 neighbor {{ peer }} remote-as {{ n.as }}
 neighbor {{ peer }} description {{ n.name }} (SRv6)
{%     if n.extended_nexthop is defined %}
 neighbor {{ peer }} capability extended-nexthop
{%     endif %}

{%-    for af in ['ipv4','ipv6'] %}
{%       if n.type in srv6.vpn.get(af,[]) %}
 address-family {{ af }} vpn
!
{{         bgp_neighbor(n,peer,af) -}}
{%       endif %}
{%     endfor %}
{%   endfor %}
!
{%   if vrfs is defined %}
{%     for vname,vdata in vrfs.items() %}
router bgp {{ vdata.as|default(bgp.as) }} vrf {{ vname }}
 sid vpn per-vrf export auto
 no bgp network import-check

{%       for af in ['ipv4','ipv6'] if 'ebgp' in srv6.vpn.get(af,[]) %}
 address-family {{ af }} unicast
  nexthop vpn export {{ loopback.ipv6|ipaddr('address') }}
{%       endfor %}
!
{%     endfor %}
{%   endif %}
{% endif %}
