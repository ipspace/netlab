{#

This Jinja2 template defines macros that can be used to configure devices
that use "industry standard" CLI (IOS, IOS-XE, FRR, Cumulus, Arista)

#}
{% macro prepend_set(s_param,asn) -%}
{%   if s_param.path|default('') %}
  set as-path prepend {{ s_param.path }}
{%   elif s_param.count|default(0) %}
  set as-path prepend {{ (asn + " ") * s_param.count }}
{%   endif %}
{%- endmacro %}
{#
   Include OS-specific route map macros
#}
!
{#
   This macro generates the elements of route-map entries common across all "industry standard CLI" devices
#}
{% macro common_route_map_entry(p_entry,match_af) -%}
{%   if 'set' in p_entry %}
{%     if 'locpref' in p_entry.set %}
  set local-preference {{ p_entry.set.locpref }}
{%     endif %}
{%     if 'med' in p_entry.set %}
  set metric {{ p_entry.set.med }}
{%     endif %}
{%     if 'weight' in p_entry.set %}
  set weight {{ p_entry.set.weight }}
{%     endif %}
{%     if 'prepend' in p_entry.set %}
{{       prepend_set(p_entry.set.prepend,bgp.as|string) }}
{%     endif %}
{%     if 'community' in p_entry.set %}
{%       set cset = p_entry.set.community %}
{%       set ckw = { 'standard': 'community', 'extended': 'extcommunity', 'large': 'large-community' } %}
{%         for kw in ('standard','extended','large') if kw in cset %}
  set {{ ckw[kw] }} {{ cset[kw]|join(' ') if cset[kw] is not string else cset[kw] }}{{ 
    ' additive' if cset.append|default(False) }}{{
    ' delete' if cset.delete|default(False) }}
{%         endfor %}
{%     endif %}
{%   endif %}
{%   if 'match' in p_entry %}
{%     set ipkwd = 'ip' if match_af == 'ipv4' else 'ipv6' %}
{%     if 'prefix' in p_entry.match %}
  match {{ ipkwd }} address prefix-list {{ p_entry.match.prefix }}-{{ match_af }}
{%     endif %}
{%     if 'aspath' in p_entry.match %}
{%       set acl_num = p_entry.match.aspath
           if ansible_network_os != 'ios'
           else routing._numobj.aspath[p_entry.match.aspath] %}
{# Different vendors following similar syntax may differ for some specific keyword.
    Defining here a default one for 'as-path', and then specific overrides #}
{% set aspath_kw = 'as-path' %}
{% set aspath_kw = 'aspath-list' if netlab_device_type == 'arubacx' else aspath_kw %}
  match {{ aspath_kw }} {{ acl_num }}
{%     endif %}
{%     if 'nexthop' in p_entry.match %}
  match {{ ipkwd }} next-hop prefix-list {{ p_entry.match.nexthop }}
{%     endif %}
{%     if 'community' in p_entry.match %}
  match community {{ p_entry.match.community }}
{%     endif %}
{%   endif %}
{%- endmacro %}
{#
   This macro builds a single route map and uses the callback to define a route map entry.
#}
{% macro build_route_map(rp_name,rp_list,match_af) -%}
{% set seq = 'seq ' if netlab_device_type == 'arubacx' else '' %}
{%   for p_entry in rp_list %}
!
route-map {{ rp_name }} {{ p_entry.action|default('permit') }} {{ seq }}{{ p_entry.sequence|default(loop.index * 10) }}
{{       caller(p_entry,match_af) }}
{%-  endfor %}
{%- endmacro %}
!
{#
   This macro creates route maps from the routing.policy dictionary

   The callback defines a route map entry.
#}
{% macro create_route_maps(rp_dict) -%}
{%   set cb = caller %}
{%   for rp_name,rp_list in rp_dict.items() %}
{%     for rm_af in af %}
{%       call(p_entry,match_af) build_route_map('%s-%s'|format(rp_name,rm_af),rp_list,rm_af) -%}
{{         cb(p_entry,match_af) }}
{%-      endcall %}
{%-    endfor %}
{%   endfor %}
{%- endmacro %}
!
