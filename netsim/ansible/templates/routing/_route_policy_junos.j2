{% macro prepend_set(s_param,asn) -%}
{%   if s_param.path|default('') %}
      then as-path-prepend "{{ s_param.path }}";
{%   elif s_param.count|default(0) %}
      then as-path-prepend "{{ ([asn] * s_param.count)|join(" ") }}";
{%   endif %}
{%- endmacro %}

{% macro community_set(comm,c_append,c_delete) -%}
{% if c_delete %}
      then community delete x_comm_del_{{ comm|replace(':', '_')|replace('.', '_') }};
{% elif c_append %}
      then community add x_comm_add_{{ comm|replace(':', '_')|replace('.', '_') }};
{% else %}
      then community set x_comm_set_{{ comm|replace(':', '_')|replace('.', '_') }};
{% endif %}
{%- endmacro %}

{#
   This macro generates the elements of route-map entries
#}
{% macro common_route_map_entry(p_entry,match_af) -%}
{# - SET entries #}
{%   if 'set' in p_entry %}
{%     if 'locpref' in p_entry.set %}
      then local-preference {{ p_entry.set.locpref }};
{%     endif %}
{%     if 'med' in p_entry.set %}
      then metric {{ p_entry.set.med }};
{%     endif %}
{%     if 'community' in p_entry.set %}
{%       set cset = p_entry.set.community %}
{%         for kw in ('standard','extended','large') if kw in cset %}
{%           if cset[kw] is not string %}
{%             for cur_com in cset[kw] %}
{{               community_set(cur_com, cset.append|default(False), cset.delete|default(False)) }}
{%             endfor %}
{%           else %}
{{             community_set(cset[kw], cset.append|default(False), cset.delete|default(False)) }}
{%           endif %}
{%         endfor %}
{%     endif %}

{%     if 'prepend' in p_entry.set %}
{{       prepend_set(p_entry.set.prepend,bgp.as|string) }}
{%     endif %}
{%   endif %}
{# - MATCH entries #}
{%   if 'match' in p_entry %}
{%     set ipkwd = 'ip' if match_af == 'ipv4' else 'ipv6' %}
{%     if 'prefix' in p_entry.match %}
      from route-filter-list {{ p_entry.match.prefix }}-{{ match_af }};
{%     endif %}
{%     if 'aspath' in p_entry.match %}
      from policy x_aspath_match_{{ p_entry.match.aspath }};
{%     endif %}
{%     if 'community' in p_entry.match %}
{# will call policy subrouting for allowing community permit/deny kind of match #}
      from policy x_comm_match_{{ p_entry.match.community }};
{%     endif %}
{%   endif %}
{%- endmacro %}

{#
   This macro builds a single route map and uses the callback to define a route map entry.
#}
{% macro build_route_map(rp_name,rp_list,match_af) -%}

{# delete a previously defined route map with the same name #}
policy-options {
  delete: policy-statement {{ rp_name }};
}

{# policy entries #}
policy-options {
  policy-statement {{ rp_name }} {
{%   for p_entry in rp_list %}
{%     set seq = p_entry.sequence|default(loop.index * 10) %}
{# define basic action #}
    term seq{{seq}} {
      then {
{%     if p_entry.action|default('permit') == 'permit' %}
        community add x-route-permit-mark;
        next policy;
{%     else %}
        reject;
{%     endif %}
      }
    }
{# define real entry #}
    term seq{{seq}} {
{{     common_route_map_entry(p_entry,match_af) }}
    }
{%   endfor %}

{# last-resort reject #}
    term default-reject {
      then {
        reject;
      }
    }

  }
}

{%- endmacro %}

{#
   This macro creates route maps from the routing.policy dictionary

   The callback defines a route map entry.
#}
{% macro create_route_maps(rp_dict) -%}
{%   for rp_name,rp_list in rp_dict.items() %}
{%     for rm_af in af %}
{{       build_route_map('%s-%s'|format(rp_name,rm_af),rp_list,rm_af) }}
{%     endfor %}
{%   endfor %}
{%- endmacro %}
