{# EVPN config using mac-vrf & co #}

{# Enable BGP EVPN for specific neighbors #}
protocols {
  bgp {
{% for af in ['ipv4','ipv6'] if bgp[af] is defined and loopback[af] is defined %}
    group ibgp-peers-{{ af }} {
{%   for n in bgp.neighbors if n[af] is defined and n.type == 'ibgp' and n.evpn|default(false) %}
      neighbor {{ n[af] }} {
        delete: shutdown;
        family evpn {
          signaling;
        }
      }
{%   endfor %}
    }
{% endfor %}
    group ebgp-peers {
{% for n in bgp.neighbors if n.type == 'ebgp' and n.evpn|default(false) %}
{%   for af in ['ipv4','ipv6'] if n[af] is defined %}
      neighbor {{ n[af] }} {
        accept-remote-nexthop;
        multihop no-nexthop-change;
        delete: shutdown;
        family evpn {
          signaling;
        }
      }
{%   endfor %}
{% endfor %}
    }
  }
}

{% if vlans is defined and vxlan is defined %}
routing-instances {
{%   for vname,v in vlans.items() if v.evpn.evi is defined and v.evpn.bundle is not defined %}
  vlan_{{ vname }} {
    instance-type mac-vrf;
    service-type vlan-based;
    vtep-source-interface {{ vxlan.vtep_interface }};
    route-distinguisher {{ v.evpn.rd }};
    vrf-target import {% for t in v.evpn.import %}target:{{ t }} {% endfor -%};
    vrf-target export {% for t in v.evpn.export %}target:{{ t }} {% endfor -%};
{%   for intf in interfaces if intf.vlan.access|default('') == vname %}
    interface {{ intf.ifname }};
{%   endfor %}
    vlans {
      {{ vname }} {
        vlan-id {{ v.id }};
        vxlan {
          vni {{ v.vni }};
        }
      }
    }
    protocols {
      evpn {
        encapsulation vxlan;
        default-gateway no-gateway-community;
        extended-vni-list all;     
      }
    }
  }
{%   endfor %}
}
{% endif %}

{# define L3VNI on vrf routing-instance #}
{% if vrfs is defined %}
routing-instances {

{%   for n,v in vrfs.items() if v.af is defined and v.evpn is defined %}
    {{ n }} {
        protocols {
            evpn {
                irb-symmetric-routing {
                    vni {{ v.evpn.transit_vni }};
                }
                ip-prefix-routes {
                    advertise direct-nexthop;
                    encapsulation vxlan;
                    vni {{ v.evpn.transit_vni }};
                    export vrf-{{n}}-ebgp-export;
                }
            }
        }
        route-distinguisher {{ v.evpn.rd }};
    }
{%   endfor %}

}

{# update ospf, ibgp and ebgp export policy options for VRFs #}
policy-options {
{%   for n,v in vrfs.items() if v.af is defined and v.evpn is defined %}
    policy-statement vrf-{{n}}-ospf-export {
        term redis_evpn {
            from protocol evpn;
            then accept;
        }
    }
    policy-statement vrf-{{n}}-ibgp-export {
        term redis_evpn {
            from protocol evpn;
            then accept;
        }
    }
    policy-statement vrf-{{n}}-ebgp-export {
        term redis_evpn {
            from protocol evpn;
            then accept;
        }
        term redis_bgp {
            from protocol bgp;
            then accept;
        }
    }
{%   endfor %}
}

{# according to JunOS doc, in case NO ANYCAST GATEWAY is configured, enable 'proxy-macip-advertisement' on central IRB interfaces #}
interfaces {
{%   for vname in vxlan.vlans|default([]) if vlans[vname].vni is defined and vlans[vname].mode|default('') == 'irb' and vlans[vname].vrf is defined %}
{%     set vlan = vlans[vname] %}
{%     if not vlan.gateway|default(false) %}
    irb.{{ vlan.id }} {
        proxy-macip-advertisement;
    }
{%     endif %}
{%   endfor %}
}

{% endif %}
