{# EVPN config using mac-vrf & co #}

{# Enable BGP EVPN for specific neighbors #}
protocols {
  bgp {
{% for af in ['ipv4','ipv6'] if bgp[af] is defined and loopback[af] is defined %}
    group ibgp-peers-{{ af }} {
{%   for n in bgp.neighbors if n[af] is defined and n.type == 'ibgp' and n.evpn|default(false) %}
      neighbor {{ n[af] }} {
        delete: shutdown;
        family evpn {
          signaling;
        }
      }
{%   endfor %}
    }
{% endfor %}
    group ebgp-peers {
{% for n in bgp.neighbors if n.type == 'ebgp' and n.evpn|default(false) %}
{%   for af in ['ipv4','ipv6'] if n[af] is defined %}
      neighbor {{ n[af] }} {
        accept-remote-nexthop;
        multihop no-nexthop-change;
        delete: shutdown;
        family evpn {
          signaling;
        }
      }
{%   endfor %}
{% endfor %}
    }
  }
}

{% if vlans is defined %}
policy-options {
{%   for vname,vdata in vlans.items() %}
{%     if vdata.evpn.export|default([])|length > 1 %}
  delete: policy-statement evpn-vlan-{{ vname }}-export;
  community evpn-vlan-{{ vname }}-export members [ target:{{ " target:".join(vdata.evpn.export) }} ];
  policy-statement evpn-vlan-{{ vname }}-export {
    then {
      community add evpn-vlan-{{ vname }}-export;
      accept;
    }
  }
{%     endif %}
{%     if vdata.evpn.import|default([])|length > 1 %}
  delete: policy-statement evpn-vlan-{{ vname }}-import;
{%       set cmnt_list = [] %}
{%       for cmnt in vdata.evpn.import %}
{%         set cmnt_name = "evpn-vlan-" + vname + "-import-" + loop.index|string %}
{%         set _ = cmnt_list.append(cmnt_name) %}
  community {{ cmnt_name }} members [ target:{{ cmnt }} ];
{%       endfor %}
  policy-statement evpn-vlan-{{ vname }}-import {
{%       for cmnt in vdata.evpn.import %}
    term import-{{ loop.index }} {
{%         set cmnt_name = "evpn-vlan-" + vname + "-import-" + loop.index|string %}
      from community {{ cmnt_name }};
      then accept;
    }
{%       endfor %}
  }
{%     endif %}
{%   endfor %}
}
{% endif %}
{% if vxlan is defined and evpn._junos_default_macvrf|default(False) %}
protocols {
  evpn {
    encapsulation vxlan;
    default-gateway no-gateway-community;
    extended-vni-list all;
{% if vxlan.vlans is defined %}
    vni-options {
{%   for vname in vxlan.vlans if vlans[vname].vni is defined %}
{%     set vlan = vlans[vname] %}
        vni {{ vlan.vni }} {
            vrf-target target:{{ vlan.evpn.import[0] }};
        }
{%   endfor %}
    }
{% endif %}
  }
}
{% endif %}

{% if vlans is defined and vxlan is defined and not evpn._junos_default_macvrf|default(False) %}
vlans {
{%   for vname,v in vlans.items() if v.evpn.evi is defined and v.evpn.bundle is not defined %}
  delete: {{ vname }};
{%   endfor %}
}

routing-instances {
{%   for vname,v in vlans.items() if v.evpn.evi is defined and v.evpn.bundle is not defined %}
  vlan_{{ vname }} {
    instance-type mac-vrf;
    service-type vlan-based;
    vtep-source-interface {{ vxlan.vtep_interface }};
    route-distinguisher {{ v.evpn.rd }};
{%     for dir in ['import', 'export'] %}
{%       set tlist_len = v.evpn[dir]|default([])|length %}
{%       if tlist_len == 1 %}
    vrf-target {{ dir }} target:{{ v.evpn[dir][0] }};
{%       elif tlist_len > 1 %}
    vrf-{{ dir }} evpn-vlan-{{ vname }}-{{ dir }};
{%       endif %}
{%     endfor %}
{%   for intf in interfaces if intf.vlan.access|default('') == vname %}
    interface {{ intf.ifname }};
{%   endfor %}
    vlans {
      {{ vname }} {
        vlan-id {{ v.id }};
{%   if v.mode == 'irb' %}
        l3-interface irb.{{ v.id }};
{%   endif %}
        vxlan {
          vni {{ v.vni }};
        }
      }
    }
    protocols {
      evpn {
        encapsulation vxlan;
        default-gateway no-gateway-community;
        extended-vni-list all;
      }
    }
  }
{%   endfor %}
}
{% endif %}

{# define L3VNI on vrf routing-instance #}
{% if vrfs is defined %}
routing-instances {

{%   for n,v in vrfs.items() if v.af is defined and v.evpn is defined %}
    {{ n }} {
        protocols {
            evpn {
                irb-symmetric-routing {
                    vni {{ v.evpn.transit_vni }};
                }
                ip-prefix-routes {
                    advertise direct-nexthop;
                    encapsulation vxlan;
                    vni {{ v.evpn.transit_vni }};
                    export [ vrf-{{n}}-bgp-export bgp-final ];
                }
            }
        }
        route-distinguisher {{ v.evpn.rd }};
    }
{%   endfor %}

}

{# update ospf, ibgp and ebgp export policy options for VRFs #}
policy-options {
{%   for n,v in vrfs.items() if v.af is defined and v.evpn is defined %}
    policy-statement vrf-{{n}}-ospf-export {
        term redis_evpn {
            from protocol evpn;
            then {
                accept;
            }
        }
    }
    policy-statement vrf-{{n}}-bgp-export {
        term redis_evpn {
            from protocol evpn;
            then {
                community add x-route-permit-mark;
                next policy;
            }
        }
    }
{%   endfor %}
}

{# according to JunOS doc, in case NO ANYCAST GATEWAY is configured, enable 'proxy-macip-advertisement' on central IRB interfaces #}
interfaces {
{%   for vname in vxlan.vlans|default([]) if vlans[vname].vni is defined and vlans[vname].mode|default('') == 'irb' and vlans[vname].vrf is defined %}
{%     set vlan = vlans[vname] %}
{%     if not vlan.gateway|default(false) %}
    irb.{{ vlan.id }} {
        proxy-macip-advertisement;
    }
{%     endif %}
{%   endfor %}
}

{% endif %}
