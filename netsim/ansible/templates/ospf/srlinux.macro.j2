{% macro format_area(a) -%}
{{ '0.0.0.0' if not a else a | ipv4 }}
{%- endmacro %}

{% macro ospf_config(pid,af,vrf,ospf,vrf_interfaces,evpn_active=False) %}
{#
   Just to make it more fun, while one might be 'redistributing' or 'importing' routes into a routing
   protocol, SR Linux 'exports' them in the same routing protocol, so we have an 'export-policy'
#}
{% if ospf.import|default([]) %}
- path: /routing-policy/policy[name={{vrf}}_export_ospf]
  value:
    default-action:
      policy-result: reject
    statement:
{%   for s_proto in ospf.import %}
{%     for srl_proto in netlab_match_protomap[s_proto] if srl_proto != 'bgp-evpn' or evpn_active %}
    - name: export_{{ srl_proto }}
      match:
        protocol: {{ srl_proto }}
      action:
        policy-result: accept
{%     endfor %}
{%   endfor %}
{% endif %}

- path: /network-instance[name={{ vrf|default('default') }}]
  value:
    router-id: {{ ospf.router_id }}
    protocols:
      ospf:
        instance:
        - name: "{{ pid }}"
          version: {{ 'ospf-v2' if af=='ipv4' else 'ospf-v3' }}
{%     if af!='ipv4' %}
          address-family: ipv6-unicast
{%     endif %}
          admin-state: enable
          max-ecmp-paths: 64
{% if ldp is defined and ldp.igp_sync|default(True) %}
          ldp-synchronization: { }
{% endif %}
{%     if ospf.reference_bandwidth is defined %}
          reference-bandwidth: {{ ospf.reference_bandwidth * 1000 }} # in kbps
{%     endif %}
{%     if ospf.import|default([]) %}
          asbr: {}
          export-policy: "{{vrf}}_export_ospf"
{%     endif %}
          area:
{%     if vrf=='default' %}
          - area-id: {{ format_area(ospf.area) }}
            interface:
            - interface-name: system0.0
              passive: True
{%     endif %}
{%     for l in vrf_interfaces if (l.vlan is not defined or l.vlan.mode|default('irb')!='bridge') and l.subif_index is not defined %}
{%      if 'ospf' not in l %}
       # OSPF not configured on external interface {{ l.ifname }}
{%      else %}
          - area-id: {{ format_area(l.ospf.area) }}
            interface:
            - interface-name: {{ l.ifname }}{{ '.0' if '.' not in l.ifname else '' }}
{%         if l.ospf.passive | default(False) %}
              passive: True
{%         endif %}
{%         if l.ospf.network_type|default("") in ["broadcast","point-to-point"] %}
              interface-type: "{{ l.ospf.network_type }}"
{%         endif %}
              failure-detection:
                enable-bfd: {{ l.ospf.bfd|default(False) }}
{%         if l.ospf.cost is defined %}
              metric: {{ l.ospf.cost }}
{%         endif %}
{%     endif %}
{%     endfor %}
{% endmacro %}
