{% if 'ebgp' in mpls.vpn %}
- path: configure/router[router-name=Base]
  val:
   bgp:
    inter-as-vpn: True
    split-horizon: True  # Prevent routes to be reflected back to best-route peer
    # next-hop-resolution defaults to LDP for VPN routes, could enable RSVP and others
{% endif %}

{% for af in ['ipv4','ipv6'] if mpls.vpn[af] is defined %}
{%   set vpnaf = 'vpn' + af.replace('ip','') %}
{%   for n in bgp.neighbors if n[vpnaf] is defined and n.type in mpls.vpn[af] %}
{#
   The neighbor should have been configured by the BGP module, we just need to
   enable the VPN address family
#}
- path: configure/router[router-name=Base]/bgp/neighbor[ip-address={{ n[vpnaf] }}]
  val:
    family:
      vpn-{{ af }}: True
{%   endfor %}
{% endfor %}
{% for vname,vdata in (vrfs|default({})).items() %}
{%   if vdata.bgp.neighbors|default([]) %}
- path: configure/policy-options/policy-statement[name={{ vname }}_export]
  val:
    entry:
    - entry-id: 1000
      from:
        protocol:
          name: [ bgp-vpn ]
      action:
        action-type: accept
{%   endif %}
{%   if vdata.ospf is defined %}
- path: configure/policy-options/policy-statement[name=ospf_{{ vname }}_export]
  val:
    entry:
    - entry-id: 1000
      from:
        protocol:
          name: [ bgp-vpn ]
      action:
        action-type: accept
{%   endif %}
{% endfor %}
