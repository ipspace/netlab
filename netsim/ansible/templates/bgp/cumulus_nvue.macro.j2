{% import "templates/routing/_redistribute.cumulus_nvue.j2" as redistribute with context %}
{% macro advertise_communities(comms) %}
                    community-advertise:
{%   for c in ['standard', 'extended', 'large'] %}
                      {{ c.replace("standard","regular") }}: {{ 'on' if c in comms else 'off' }}
{%   endfor %}
{% endmacro %}
{% macro bgp_in_vrf(vrf_name,vrf) %}
{%   set vrf_bgp = vrf.bgp %}
- set:
    vrf:
      {{ vrf_name }}:
        router:
          bgp:
            enable: on
            autonomous-system: {{ bgp.as }}
            router-id: {{ vrf_bgp.router_id|default(bgp.router_id) }}
{%   if vrf.rd is defined %}
            rd: {{ vrf.rd }}
{%   endif %}
{%   if vrf_bgp.rr|default(False) %}
            route-reflection:
              enable: on
{%     if vrf_bgp.rr_cluster_id is defined %}
              cluster-id: {{ vrf_bgp.rr_cluster_id }}
{%     endif %}
{%   endif %}
{%   for af in ['ipv4','ipv6'] if vrf.af[af] is defined %}
{%     if loop.first %}
            address-family:
{%     endif %}
              {{ af }}-unicast:
                enable: on
{{              redistribute.config(vrf_bgp,af=af)|indent(16,first=True) }}
{%     set _loopback = [ vrf.loopback[af] ] if vrf.loopback[af] is defined and bgp.advertise_loopback|default(True) else [] %}
{%     set data = namespace(networks=_loopback) %}
{%     for l in interfaces|default([]) if l.bgp.advertise|default("") and l[af] is defined and l.vrf|default('default')==vrf_name %}
{%       set data.networks = data.networks + [ l[af] ] %}
{%     endfor %}
{%     for pfx in vrf_bgp.originate|default([]) if af == 'ipv4' %}
{%       set data.networks = data.networks + [ pfx ] %}
{%     endfor %}
{%     if data.networks!=[] %}
                network:
{%       for pfx in data.networks %}
                  {{ pfx|ipaddr('0') }}: {}
{%       endfor %}
{%     endif %}
{%   endfor %}
{%   for n in vrf_bgp.neighbors|default([]) %}
{%     if loop.first %}
            neighbor:
{%     endif %}
{%     if n.local_if is defined %}
              {{ n.local_if }}:
                type: unnumbered
                remote-as: {{ n.as }}
{%       if n.ipv4_rfc8950|default(False) %}
                capabilities:
                  extended-nexthop: on
{%       endif %}
                address-family:
                  ipv4-unicast:
                    enable: {{ 'on' if n.ipv4_rfc8950|default(False) else 'off' }}
                    community-advertise:
                      extended: on
                  ipv6-unicast:
                    enable: {{ 'on' if n.ipv6|default(False) and ('activate' not in n or n.activate.ipv6|default(False)) else 'off' }}
                    community-advertise:
                      extended: on
{%     endif %}
{%     for af in ('ipv4','ipv6') if af in n and n[af] is string %}
              {{ n[af] }}:
                description: "{{ n.name }}"
{%       if af=='ipv6' and n.ipv4_rfc8950|default(False) %}
                capabilities:
                  extended-nexthop: on
{%       endif %}
{%       if n._source_ifname is defined %}
                update-source: {{ n._source_ifname }}
{%       endif %}
                remote-as: {{ 'internal' if n.as==bgp.as else n.as }}
{%       if n.local_as is defined %}
                local-as:
                  asn: {{ n.local_as }}
                  enable: on
{%         if n.replace_global_as|default(True) %}
                  replace: on
                  prepend: off
{%         endif %}
{%       endif %}
                address-family:
{#     NVUE cannot turn off default IPv4 activation, so we have to implement a fix for IPv6 #}
{%       if af == 'ipv6' %}
                  ipv4-unicast:
                    enable: {{ 'on' if n.ipv4_rfc8950|default(False) else 'off' }}
{%       endif %}
                  {{ af }}-unicast:
                    enable: {{ 'on' if 'activate' not in n or n.activate[af]|default(False) else 'off' }}
{%       if 'ibgp' in n.type %}
{%         if vrf_bgp.next_hop_self|default(False) %}
                    nexthop-setting: self
{%         endif %}
{%         if vrf_bgp.rr|default('') and not n.rr|default('') %}
                    route-reflector-client: on
{%         endif %}
{%       endif %}
{%       if n.type in vrf_bgp.community|default({}) %}
{{         advertise_communities( vrf_bgp.community[n.type] ) }}
{%       endif %}
{%     endfor %}
{%   endfor %}
{%   if vrf_bgp.originate is defined %}
          static:
{%     for pfx in vrf_bgp.originate|default([]) %}
            {{ pfx|ipaddr('0') }}:
              address-family: ipv4-unicast
              via:
                blackhole:
                  type: blackhole
{%     endfor %}
{%   endif %}
{% endmacro %}
