{% macro bgp_policy(vrf,is_import,communities) %}
{% set name = vrf + "_" + ('import' if is_import else 'export') %}
- path: routing-policy/community-set[name={{name}}]
  val:
   member:
{% for c in communities %}
   - "target:{{c}}"
{% endfor -%}

- path: routing-policy/policy[name={{name}}]
  val:
   statement:
   - sequence-id: 10
{%   if is_import %}
     match:
      bgp:
       community-set: "{{ name }}"
{%   endif %}
     action:
{%    if is_import %}
      accept: { }
{%    else %}
      accept:
       bgp:
        communities:
         add: "{{ name }}"
{%    endif %}
{% endmacro %}

{% macro bgp_config(vrf,_as,router_id,vrf_bgp,vrf_context) %}

{% if 'import' in vrf_context %}
{% set import_policy = vrf + "_import" %}
{{ bgp_policy(vrf,1,vrf_context.import) }}
{% else %}
{% set import_policy = "accept_all" %}
{% endif -%}

{% if 'export' in vrf_context %}
{% set export_policy = vrf + "_export" %}
{{ bgp_policy(vrf,0,vrf_context.export) }}
{% else %}
{% set export_policy = "accept_all" %}
{% endif -%}

- path: network-instance[name={{vrf}}]/protocols/bgp
  val:
   admin-state: enable
   autonomous-system: {{ _as }}
   router-id: {{ router_id }}
   ebgp-default-policy:
    export-reject-all: False
    import-reject-all: False

{# Configure BGP address families globally #}
{% for af in ['ipv4','ipv6'] if vrf_bgp[af]|default(0) %}
   {{ af }}-unicast:
    admin-state: enable
    multipath:
     max-paths-level-1: 64
     max-paths-level-2: 64 # indirect nexthops
{%   if loopback[af] is defined and bgp.advertise_loopback %}
{# {{     bgp_network(af,loopback[af]) }} #}
{%   endif %}

{% for l in interfaces|default([]) if l.bgp.advertise|default("") and l[af] is defined and not 'vrf' in l %}
{# {{     bgp_network(af,l[af]) }} #}
{%   endfor %}
{%   for pfx in bgp.originate|default([]) if af == 'ipv4' %}
{# {{     bgp_network(af,pfx) }} #}
{%   endfor %}

{% endfor %}

{% macro bgp_peer_group(name,type,neighbor,transport_ip) %}
- path: network-instance[name={{vrf}}]/protocols/bgp/group[group-name={{name}}]
  val:
   admin-state: enable
   ipv4-unicast:
    admin-state: {{ 'enable' if 'ipv4' in neighbor.activate and neighbor.activate['ipv4'] 
                             or 'ipv6' in neighbor.activate and not neighbor.activate['ipv6'] 
                    else 'disable' }}
   ipv6-unicast:
    admin-state: {{ 'enable' if 'ipv6' in neighbor.activate and neighbor.activate['ipv6'] else 'disable' }}
{% if 'evpn' in neighbor and neighbor.evpn %}
   evpn:
    admin-state: enable # Must have at least 1 address family enabled
{% endif %}
   import-policy: {{ import_policy if 'ebgp' in type else 'accept_all' }}
   export-policy: {{ export_policy if 'ebgp' in type else 'accept_all' }}
   timers:
    connect-retry: 10
    _annotate_connect-retry: "Reduce default 120s to 10s"
    minimum-advertisement-interval: 1
{% if vrf_bgp.community[ type ]|default([]) %}
{% set list = vrf_bgp.community[ type ] %}
   send-community:
    standard: {{ 'standard' in list }}
    large: {{ 'extended' in list }}
{% endif %}
{% if transport_ip %}
   transport:
    local-address: {{ transport_ip }}
{% endif %}
{% if 'ibgp' in type %}
   next-hop-self: {{ vrf_bgp.next_hop_self|default(False) }}
   peer-as: {{ neighbor.as }}
{%  if vrf_bgp.rr|default(0) %}
   route-reflector:
    cluster-id: {{ vrf_bgp.rr_cluster_id|default(False) or router_id }}
    client: True
{%  endif %}
{% endif %}
{% endmacro %}

{#
  Define IPv4 and IPv6 BGP neighbors
#}
{% for n in vrf_bgp.neighbors %}
{% for af in ['ipv4','ipv6'] if n[af] is defined %}

{% if n[af] is string %}
{# (Re)create peer group #}
{% set peer_group = 'ebgp' if n.type=='ebgp' else 'ibgp-local-as' if n.type=='localas_ibgp' else ('ibgp-'+af) %}
{% set transport_ip = loopback[af]|ipaddr('address') if af in loopback and n.type=='ibgp' else None %}
{{ bgp_peer_group(peer_group,'ibgp' if 'ibgp' in n.type else 'ebgp',n,transport_ip) }}

- path: network-instance[name={{vrf}}]/protocols/bgp/neighbor[peer-address={{n[af]}}]
  val:
   description: {{ n.name }}
   peer-group: {{ peer_group }}
{% if 'ebgp' in n.type %}
   peer-as: {{ n.as }}
{% elif vrf_bgp.rr|default(False) and n.rr|default(False) %}
   route-reflector:
    client: False # Don't reflect routes between ibgp route reflectors
{% endif %}
{% if n.local_as is defined %}
   local-as:
   - as-number: {{ n.local_as }}
     prepend-global-as: {{ not n.replace_global_as|default(True) }} # Don't include iBGP global AS in eBGP advertisements
{% endif %}

{% elif n[af]==True and af=='ipv6' and n.type == 'ebgp' %}
{# BGP unnumbered for IPv6 LLA, only supported for EBGP peers #}
{% set peer_group = "ebgp-unnumbered" + (('-' + n.local_as|string()) if n.local_as is defined else '') %}
{{ bgp_peer_group(peer_group,'ebgp',n,None) }}
{% if n.local_as is defined %}
   local-as:
   - as-number: {{ n.local_as }}
     prepend-global-as: {{ not n.replace_global_as|default(True) }} # Don't include iBGP AS in eBGP advertisements
{% endif %}
{% if n.ipv4_rfc8950|default(False) %}
   ipv4-unicast:
     advertise-ipv6-next-hops: true
     receive-ipv6-next-hops: true

- path: network-instance[name={{vrf}}]/ip-forwarding
  val:
   receive-ipv4-check: false
   _annotate_receive-ipv4-check: "Allow IPv4 on IPv6 unnumbered interfaces"
{% endif %}

{% for i in interfaces|default([]) if i.ifindex == n.ifindex %}
{% set if_name_index = i.ifname.split('.') %}
{% set if_name = if_name_index[0] %}
{% set if_index = if_name_index[1] if if_name_index|length > 1 else '0' %}
- path: network-instance[name={{vrf}}]/protocols/bgp/dynamic-neighbors/interface[interface-name={{if_name}}.{{if_index}}]
  val:
   peer-group: "{{ peer_group }}"
   allowed-peer-as: [ {{ n.as }}..{{ n.as }} ]

{% endfor %}
{% endif %}
{% endfor %}
{% endfor %}

{#
  Add extra IPv4 prefixes using static blackhole routes, add to export
#}
- path: network-instance[name={{vrf}}]/next-hop-groups/group[name=blackhole]
  val:
   blackhole:
     generate-icmp: True

{% for pfx in vrf_bgp.originate|default([]) %}
- path: network-instance[name={{vrf}}]/static-routes/route[prefix={{pfx}}]
  val:
   next-hop-group: blackhole
- path: routing-policy/prefix-set[name=external_routes]
  val:
   prefix:
   - ip-prefix: {{ pfx }}
     mask-length-range: exact
{% endfor %}

{% if 'sr' in module|default([]) %}
{# Configure BGP shortcuts via SR-ISIS #}
- path: network-instance[name={{vrf}}]/protocols/bgp/ipv4-unicast/next-hop-resolution
  val:
   ipv4-next-hops:
    tunnel-resolution:
     mode: prefer
     _annotate_mode: "tunnel-table lookup over FIB"
     allowed-tunnel-types: [ sr-isis ]
{% endif %}
{% endmacro %}
