{% import "eos.macro.j2" as bgpcfg %}
!
{% set opts = namespace(nhs_ipv4=false,nhs_ipv6=false,intf=false) %}
{% for n in bgp.neighbors if n.type == 'ibgp' and bgp.next_hop_self|default(False) %}
{%   if 'ipv4' in n %}
{%     set opts.nhs_ipv4 = true %}
{%   endif %}
{%   if 'ipv6' in n %}
{%     set opts.nhs_ipv6 = true %}
{%   endif %}
{% endfor %}
{% if opts.nhs_ipv4 %}
route-map next-hop-self-ipv4 permit 10
   match route-type external
   set ip next-hop peer-address
!
route-map next-hop-self-ipv4 permit 20
!
{% endif %}
{% if opts.nhs_ipv6 %}
route-map next-hop-self-ipv6 permit 10
   match route-type external
   set ipv6 next-hop peer-address
!
route-map next-hop-self-ipv6 permit 20
!
{% endif %}
{% for n in bgp.neighbors if 'local_if' in n %}
{%   set opts.intf = true %}
{%   if loop.first %}
ipv6 unicast-routing
ip routing ipv6 interfaces
!
{%   endif %}
interface {{ n.local_if }}
  ipv6 enable
!
{% endfor %}
!
router bgp {{ bgp.as }}
  bgp advertise-inactive
  bgp log-neighbor-changes
  no bgp default ipv4-unicast
  no bgp default ipv6-unicast
{% if bgp.router_id|ipv4 %}
  router-id {{ bgp.router_id }}
{% endif %}
{% if bgp.rr|default(False) and bgp.rr_cluster_id|default(False) %}
  bgp cluster-id {{ bgp.rr_cluster_id }}
{% endif %}
{% for n in bgp.neighbors %}
{%   for af in ['ipv4','ipv6'] if n[af] is defined %}
{{     bgpcfg.neighbor(n,af,bgp) }}
{%   endfor %}
{% endfor %}
!
{# Activate address families #}
{% for af in ['ipv4','ipv6'] %}
{%   if bgp[af] is defined %}
!
 address-family {{ af }}
!
{%     if loopback[af] is defined and bgp.advertise_loopback %}
  network {{ loopback[af]|ipaddr('0') }}
{%     endif %}
!
{%     for l in interfaces|default([]) if l.bgp.advertise|default("") and l[af] is defined and not 'vrf' in l %}
  network {{ l[af]|ipaddr('0') }}
{%     endfor %}
!
{%     for pfx in bgp.originate|default([]) if af == 'ipv4' %}
  network {{ pfx|ipaddr('0') }}
{%     endfor %}
!
{%     for n in bgp.neighbors if n[af] is defined and n.activate[af] is defined and n.activate[af] %}
{%       set peer = 'ebgp_intf_' + n.local_if if n.local_if is defined else n[af] %}
  neighbor {{ peer }} activate
{%       if n.type == 'ibgp' and bgp.next_hop_self|default(False) %}
  neighbor {{ peer }} route-map next-hop-self-{{ af }} out
{%       endif %}
{%       if n.local_if is defined and af == 'ipv4' %}
  neighbor {{ peer }} next-hop address-family ipv6 originate
{%       endif %}
{%     endfor %}
{%   endif %}
{% endfor %}
!
{% for pfx in bgp.originate|default([]) %}
ip route {{ pfx|ipaddr('0') }} Null0
{% endfor %}
