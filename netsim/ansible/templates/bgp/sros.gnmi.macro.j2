{% from 'templates/routing/_redistribute.sros.j2' import import_protocols with context %}

{% macro bgp_export_prefix(vrf,prefix) %}
- path: configure/policy-options/prefix-list[name=bgp_{{vrf}}_advertise]
  val:
    prefix:
    - ip-prefix: {{ prefix }}
      type: exact
{% endmacro %}

{% macro bgp_config(vrf,vrf_bgp,vrf_context) %}

{# Create route export policies #}
- path: configure/policy-options/prefix-list[name=bgp_{{vrf}}_advertise]
  val:
    prefix: [] # Make sure it exists

- path: configure/policy-options/policy-statement[name=bgp_{{vrf}}_export]
  val:
    default-action:
      action-type: reject
    entry:
    - entry-id: 10
      from:
        prefix-list: [ "bgp_{{vrf}}_advertise" ]
      action:
        action-type: accept
    - entry-id: 20
      from:
        protocol:
          name: [ bgp ]
      action:
        action-type: accept
{{  import_protocols(vrf_bgp.import|default([])) | indent(4,first=True) }}

{% for af in ['ipv4','ipv6'] if af in vrf_context.af and vrf_context.af[af] %}
{% if loopback[af] is defined and vrf=="default" and bgp.advertise_loopback %}
{{ bgp_export_prefix(vrf,loopback[af]|ipaddr('address')|ipaddr('host')) }}
{% endif %}

{% for l in interfaces|default([]) if l.bgp.advertise|default(0) and l[af]|default(False) is string and l.vrf|default("default")==vrf %}
{{ bgp_export_prefix(vrf,l[af]|ipaddr('subnet')) }}
{% endfor %}

{% for pfx in vrf_bgp.originate|default([]) if af == 'ipv4' %}
{{ bgp_export_prefix(vrf,pfx) }}
{% endfor %}
{% endfor %}

{% set path = "router[router-name=Base]" if vrf=="default" else "service/vprn[service-name="+vrf+"]" %}
- path: configure/{{ path }}
  val:
    router-id: "{{ vrf_bgp.router_id|default(bgp.router_id) }}"
    autonomous-system: {{ bgp.as }}
    bgp:
      ebgp-default-reject-policy:
        import: False
        export: False
{% if vrf_bgp.rr|default(False) %}
      client-reflect: True
{% endif %}
      multipath:
        ibgp: {{ 16 if 'ixr' in clab.type else 64 }}
        ebgp: {{ 16 if 'ixr' in clab.type else 64 }}
      min-route-advertisement: 1 # Be aggressive about sending updates
      connect-retry: 5           # Retry frequently, suitable in DC context
    # family: cannot disable this
    # ipv4: False # Enabled by default, disable globally and set per group

{% macro bgp_families(neighbor,ipv4=True,ipv6=True) %}
{% set activate = neighbor.activate|default( {'ipv4': True,'ipv6': True } ) %}
    family:
      ipv4: {{ activate.ipv4|default(False) and ipv4 }}
      ipv6: {{ activate.ipv6|default(False) and ipv6 }}
{%  if 'evpn' in neighbor and neighbor.evpn %}
      evpn: True # Must have at least 1 address family enabled
{%  endif %}
{% endmacro %}

{% macro bgp_peer_group(name,type,neighbor,transport_ip) %}
- path: configure/{{ path }}/bgp/group[group-name={{name}}]
  val:
    admin-state: enable
{{ bgp_families(neighbor) }}
    import:
      policy: ["accept_all"]
    export:
      policy:
{%   if 'ibgp' in type and bgp.next_hop_self|default(False) %}
      - next-hop-self-ebgp-routes-only
{%   endif %}
      - bgp_{{ vrf }}_export
{%   if bgp.community[ type ]|default([])|length < 2 %}
    send-communities:
{%     for c,vals in {'standard': ['standard','large'],'extended':['extended'] }.items() %}
{%       if c not in bgp.community[ type ] %}
{%         for knob in vals %}
      {{ knob }}: False  # True value not allowed, on by default
{%         endfor %}
{%       endif %}
{%     endfor %}
{%   endif %}
{%   if transport_ip %}
    local-address: "{{ transport_ip }}"
{%   endif %}
{%   if bgp.rr|default(False) and 'ibgp' in name %}
    cluster:
      cluster-id: "{{ bgp.rr_cluster_id|default(vrf_bgp.router_id|default(bgp.router_id)) }}"
{%   endif %}
{% endmacro %}

{% for n in vrf_bgp.neighbors|default([]) %}
{%  for af in ['ipv4','ipv6'] if n[af] is defined %}

{%     if n[af] is string %}
{# (Re)create peer group #}
{%    set peer_group = 'ebgp' if n.type=='ebgp' else 'ibgp-local-as' if n.type=='localas_ibgp' else ('ibgp-'+af) %}
{%    set transport_ip = loopback[af]|ipaddr('address') if af in loopback and n.type=='ibgp' else None %}
{{    bgp_peer_group(peer_group,'ibgp' if 'ibgp' in n.type else 'ebgp',n,transport_ip) }}

- path: configure/{{ path }}/bgp
  val:
    neighbor:
    - ip-address: "{{ n[af] }}"
      description: "{{ n.name }}"
      peer-as: {{ n.as }}
      group: "{{ peer_group }}"
{%       if n.activate[af]|default(False) or 'evpn' in n %}
      admin-state: enable
  {{ bgp_families(n,ipv4=(af=='ipv4' or 'ipv4' not in n),ipv6=(af=='ipv6')) | indent(2) }}
{%       else %}
      admin-state: disable
{%       endif %}
{%       if n.type == 'ibgp' and n.rr|default(False) %}
      client-reflect: False
{%       endif %}
{%       if n.local_as is defined %}
      local-as:
        as-number: {{ n.local_as }}
        prepend-global-as: {{ not n.replace_global_as|default(True) }} # Don't include iBGP global AS in eBGP advertisements
{%       endif %}
{%     else %}
{# TODO BGP unnumbered #}
{%     endif %}
{%   endfor %}
{% endfor %}

{% for pfx in vrf_bgp.originate|default([]) %}
{%  if loop.first %}
- path: configure/{{ path }}/static-routes
  val:
   route:
{%  endif %}
   - ip-prefix: {{ pfx }}
     route-type: "unicast"
     blackhole:
      admin-state: "enable"
{% endfor %}

{% endmacro %}
