{% macro bgp_config(vrf_bgp,vrf=None) %}
{% set path = "router[router-name=Base]" if not vrf else "service/vprn[service-name="+vrf+"]" %}
- path: configure/{{ path }}
  val:
   router-id: "{{ vrf_bgp.router_id|default(bgp.router_id) }}"
   autonomous-system: {{ bgp.as }}
   bgp:
    ebgp-default-reject-policy:
     import: False
     export: False
    multipath:
     ibgp: {{ 16 if 'ixr' in clab.type else 64 }}
     ebgp: {{ 16 if 'ixr' in clab.type else 64 }}
    min-route-advertisement: 1 # Be aggressive about sending updates
    connect-retry: 5           # Retry frequently, suitable in DC context
    client-reflect: {{ bgp.rr|default('')|bool }}
    # family: cannot disable this
    # ipv4: False # Enabled by default, disable globally and set per group

{% macro bgp_peer_group(name,type,neighbor,transport_ip) %}
- path: configure/{{ path }}/bgp/group[group-name={{name}}]
  val:
   admin-state: enable
   family:
{% set activate = neighbor.activate|default( {'ipv4': True,'ipv6': True } ) %}
    ipv4: {{ activate.ipv4|default(False) }}
    ipv6: {{ activate.ipv6|default(False) }}
{% if 'evpn' in neighbor and neighbor.evpn %}
    evpn: True # Must have at least 1 address family enabled
{% endif %}
   import:
    policy: ["accept_all"]
   export:
    policy: ["accept_all"]

{% if bgp.community[ type ]|default([]) %}
   send-communities:
{%  for c in ['standard','extended'] %}
{%   if not c in bgp.community[ type ] %}
    {{ c }}: False  # True value not allowed, on by default
{%   endif %}
{%  endfor %}
    large: {{ 'large' in bgp.community[ type ] }}
{% endif %}

{% if transport_ip %}
   local-address: "{{ transport_ip }}"
{%  if bgp.rr|default('')|bool %}
   cluster:
    cluster-id: "{{ bgp.rr_cluster_id|default(False) or vrf_bgp.router_id|default(bgp.router_id) }}"
{%  elif bgp.next_hop_self|default(false) %}
   next-hop-self: True
{%  endif %}
{% endif %}
{% endmacro %}

{% for n in vrf_bgp.neighbors %}
{%  for af in ['ipv4','ipv6'] if n[af] is defined %}

{%   if n[af] is string %}
{# (Re)create peer group #}
{%    set peer_group = 'ebgp' if n.type=='ebgp' else 'ibgp-local-as' if n.type=='localas_ibgp' else ('ibgp-'+af) %}
{%    set transport_ip = loopback[af]|ipaddr('address') if af in loopback and n.type=='ibgp' else None %}
{{    bgp_peer_group(peer_group,'ibgp' if 'ibgp' in n.type else 'ebgp',n,transport_ip) }}

- path: configure/{{ path }}/bgp/neighbor[ip-address={{ n[af] }}]
  val:
   description: "{{ n.name }}"
   peer-as: {{ n.as }}
   group: "{{ peer_group }}"
{%    if n.local_as is defined %}
   local-as:
    as-number: {{ n.local_as }}
{%    endif %}

{%   else %}
{# TODO BGP unnumbered #}
{%   endif %}
{%  endfor %}
{% endfor %}

{% endmacro %}