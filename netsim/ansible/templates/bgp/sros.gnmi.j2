# Generated by sros.gnmi.j2 template
updates:
- path: configure/router[router-name=Base]
  val:
   router-id: "{{ loopback['ipv4']|ipaddr('address') }}"
   autonomous-system: {{ bgp.as }}
   bgp:
    ebgp-default-reject-policy:
     import: False
     export: False
    multipath:
     ibgp: 64
     ebgp: 64
    client-reflect: {{ 'True' if bgp.rr|default('') else 'False' }}
    group:
{%  for c in ['ebgp','ibgp'] %}
    - group-name: "{{c}}"
      admin-state: enable
      import:
       policy: ["accept_all"]
      export:
       policy: ["accept_all"]
      next-hop-self: {{ bgp.next_hop_self|default(false)|lower }}
{%    if bgp.community[c]|default([]) %}
      send-communities:
       standard: {{ 'True' if ('standard' in bgp.community[c] or 'both' in bgp.community[c]) else 'False' }}
       extended: {{ 'True' if ('extended' in bgp.community[c] or 'both' in bgp.community[c]) else 'False' }}
       large: {{ 'True' if ('large' in bgp.community[c]) else 'False' }}
{%    endif %}
{%    if c=='ibgp' and bgp.rr|default('')|bool %}
      cluster:
        cluster-id: "{{ loopback['ipv4']|ipaddr('address') }}"
{%    endif %}

{%  endfor %}
    neighbor:
{%  for n in bgp.neighbors %}
{%  for af in ['ipv4','ipv6'] if n[af] is defined %}
    - ip-address: "{{ n[af] }}"
      description: "{{ n.name }}"
      peer-as: {{ n.as }}
      peer-group: "{{ n.type }}"
{%    if n.type=='ibgp' %}
      local-address: "{{ loopback[af]|ipaddr('address') }}"
{%    endif %}
{%  endfor %}
{%  endfor %}

- path: configure/policy-options/policy-statement[name=accept_all]
  val:
   default-action:
    action-type: accept
