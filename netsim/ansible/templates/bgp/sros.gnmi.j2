# Generated by sros.gnmi.j2 template
updates:
- path: configure/router[router-name=Base]
  val:
   router-id: "{{ loopback['ipv4']|ipaddr('address') }}"
   autonomous-system: {{ bgp.as }}
   bgp:
    ebgp-default-reject-policy:
     import: False
     export: False
    multipath:
     ibgp: 64
     ebgp: 64
    min-route-advertisement: 1 # Be aggressive about sending updates
    connect-retry: 5           # Retry frequently, suitable in DC context
    client-reflect: {{ 'True' if bgp.rr|default('') else 'False' }}
    # family: cannot disable this
    # ipv4: False # Enabled by default, disable globally and set per group
    group:
{%  for c in ['ebgp','ibgp'] %}
    - group-name: "{{c}}"
      admin-state: enable
      family:
       ipv4: {{ 'True' if bgp['ipv4'] is defined else 'False' }}
       ipv6: {{ 'True' if bgp['ipv6'] is defined else 'False' }}
      import:
       policy: ["accept_all"]
      export:
       policy: ["accept_all"]
{%    if bgp.community[c]|default([]) %}
      send-communities:
{%     if not ('standard' in bgp.community[c] or 'both' in bgp.community[c]) %}
       standard: False
{%     endif %}
{%     if not ('extended' in bgp.community[c] or 'both' in bgp.community[c]) %}
       extended: False
{%     endif %}
{%     if not ('large' in bgp.community[c]) %}
       large: False
{%     endif %}
{%    endif %}
{%    if c=='ibgp' %}
{%    if bgp.rr|default('')|bool %}
      cluster:
        cluster-id: "{{ loopback['ipv4']|ipaddr('address') }}"
{%    elif bgp.next_hop_self|default(false) %}
      next-hop-self: True
{%    endif %}
{%    endif %}

{%  endfor %}
    neighbor:
{%  for n in bgp.neighbors %}
{%  for af in ['ipv4','ipv6'] if n[af] is defined %}
    - ip-address: "{{ n[af] }}"
      description: "{{ n.name }}"
      peer-as: {{ n.as }}
      group: "{{ n.type }}"
{%    if n.type=='ibgp' %}
      local-address: "{{ loopback[af]|ipaddr('address') }}"
{%    endif %}
{%  endfor %}
{%  endfor %}

- path: configure/policy-options/policy-statement[name=accept_all]
  val:
   default-action:
    action-type: accept

{% if 'sr' in module %}
{# Configure BGP shortcuts via SR-ISIS #}
- path: configure/router[router-name=Base]/bgp
  val:
   next-hop-resolution:
    shortcut-tunnel:
     family:
     - family-type: "ipv4"
       resolution: "filter"
       resolution-filter:
        sr-isis: True
{% endif %}
