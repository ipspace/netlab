!
router bgp {{ vdata.as|default(bgp.as) }} vrf {{ vname }}
 no bgp ebgp-requires-policy
 no bgp default ipv4-unicast
{% for n in vdata.bgp.neighbors|default([]) %}
{%   for af in ['ipv4','ipv6'] if n[af] is defined %}
{%     set peer = n[af] if n[af] is string else n.local_if|default('?') %}
{%     if n[af] is string %}
 neighbor {{ peer }} remote-as {{ n.as }}
{%     else %}
 neighbor {{ peer }} interface remote-as {{ n.as }}
{%     endif %}
 neighbor {{ peer }} description {{ n.name }}
{%     if n.local_as is defined %}
  neighbor {{ peer }} local-as {{ n.local_as }} {{ 'no-prepend replace-as' if n.replace_global_as|default(True) else '' }}
{%     endif %}
{%   endfor %}
{% endfor %}
{% for af in ['ipv4','ipv6'] if vdata.af[af]|default(False) %}
 address-family {{ af }} unicast
  redistribute connected
  label vpn export auto
  export vpn
  import vpn
  rd vpn export {{ vdata.rd }}
  rt vpn import {{ vdata.import|join(" ") }}
  rt vpn export {{ vdata.export|join(" ") }}
{%   if af == 'ipv4' and 'ospf' in vdata %}
  redistribute ospf
{%   endif %}
{%   for n in vdata.networks|default([]) if af in n %}
  network {{ n[af]|ipaddr('0') }}
{%   endfor %}
{%   for n in vdata.bgp.neighbors|default([]) if n[af] is defined %}
{%     set peer = n[af] if n[af] is string else n.local_if|default('?') %}
  neighbor {{ peer }} activate
{%     if n.type in bgp.community|default({}) %}
{%       for c_type in bgp.community[n.type] %}
  neighbor {{ peer }} send-community {{ c_type }}
{%       endfor %}
{%     endif %}
{%   endfor %}
 exit-address-family
{% endfor %}
!
