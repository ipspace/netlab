{% import "dellos10.bgp-macro.j2" as bgpcfg %}
!
router bgp {{ bgp.as }}
{% for vname,vdata in vrfs.items() %}
!
 vrf {{ vname }}
  router-id {{ bgp.router_id }}
! need to define unnumbered template also at vrf-level
  template unnumbered_ebgp
    link-local-only-nexthop
    exit


{%   for n in vdata.bgp.neighbors|default([]) %}
{%     for af in ['ipv4','ipv6'] if n[af] is defined %}
{{       bgpcfg.neighbor(n,n[af],bgp,af) }}
{%     endfor %}
{%   endfor %}

{%   for af in ['ipv4','ipv6'] if af in vdata.af|default({}) %}
!
 address-family {{ af }} unicast
   redistribute connected
{%     if 'ospf' in vdata %}
   redistribute ospf {{ vdata.vrfidx }}
{%     endif %}
{%     for n in vdata.networks|default([]) if af in n %}
   network {{ n[af]|ipaddr('0') }}
{%     endfor %}
{%   endfor %}

{# additional tweaking for VRF BGP AF activation - activate only the current AF, deactivate the other one #}
{%   for n in vdata.bgp.neighbors|default([]) %}
{%     for af in ['ipv4','ipv6'] if n[af] is defined and n[af] is string %}
{%       set other_af = (['ipv4','ipv6'] | difference([af])) | first %}
!
  neighbor {{ n[af] }}
     address-family {{ af }} unicast
       soft-reconfiguration inbound
       activate
     address-family {{ other_af }} unicast
       no activate
{%     endfor %}
{%   endfor %}

{% endfor %}
