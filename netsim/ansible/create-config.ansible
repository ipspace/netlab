#!/usr/bin/env ansible-playbook
---
- name: Create initial device configurations
  hosts: all
  gather_facts: false
  vars:
    config_dir: "{{ lookup('env','PWD') }}/config"
  tasks:
  - block:
    - name: Set variables that cannot be set with VARS
      set_fact:
        netlab_device_type: "{{ netlab_device_type|default(ansible_network_os) }}"

    - name: Create config directory in {{ config_dir }}
      file:
        path: "{{ config_dir }}"
        state: directory
      run_once: true

    delegate_to: localhost

  - name: Create initial device configuration
    include_tasks: "tasks/create-config.yml"
    args:
      apply:
        vars:
          config_item: initial
          paths: "{{ paths_templates.dirs }}"

- name: Create module-specific configurations
  hosts: modules
  tasks:
  - name: Set variables that cannot be set with VARS
    set_fact:
      modlist: "{{ modlist.split(',') if modlist is defined else netlab_module }}"

  - name: Create device configurations for {{ netlab_module|intersect(modlist) }}
    include_tasks: "tasks/create-config.yml"
    loop: "{{ netlab_module|intersect(modlist) }}"
    loop_control:
      loop_var: config_item
    when: config_item in module|default([])
    args:
      apply:
        vars:
          paths: "{{ paths_templates.dirs }}"

- name: Create custom deployment templates
  hosts: custom_configs
  tasks:
  - name: Create {{ custom_config }}Â custom device configuration
    include_tasks: "tasks/create-custom-config.yml"
    when: custom_config in config
    loop: "{{ netlab_custom_config }}"
    loop_control:
      loop_var: custom_config
    args:
      apply:
        vars:
          paths: "{{ paths_custom.dirs }}"

- name: Create daemon configuration files
  hosts: daemons
  serial: 1
  vars:
    extra_config: >
      {{ _daemon_config|default({})
            |list
            |difference(modules|default([]))
            |difference(config|default([])) }}
  tasks:
  - name: Create daemon configurations
    include_tasks: "tasks/create-config.yml"
    loop: "{{ extra_config }}"
    when: "'@' not in config_item"
    loop_control:
      loop_var: config_item
    args:
      apply:
        vars:
          paths: "{{ paths_templates.dirs }}"
