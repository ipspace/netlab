#
# Deploy module-specific configuration (specified in "config_module") to a device
#
# WARNING:
# ========
# To work around Ansible "optimization" attempts, the deploy-module is called for
# all modules specified in global netlab_module list.
#
# The module might not be applicable to the current device, that's why the whole
# task list is wrapped into a "block/when" construct.
#
# OTHER TRICKS
# ============
# The code is executed only when the 'module' tag is set, but once we decide to
# include the configuration task list for the device, it MUST be executed, so
# we apply the 'always' tag to all tasks in the included task list.
#

- block:
  - set_fact:
      config_template: "{{ lookup('first_found',params,errors='ignore') }}"
    vars:
      params:
        paths: "{{ paths }}"
        files:
        - "{{ config_module }}/{{netlab_device_type}}-{{provider|default(netlab_provider)}}.j2"
        - "{{ config_module }}/{{netlab_device_type}}.j2"
        - "{{ config_module }}/{{ansible_network_os}}-{{provider|default(netlab_provider)}}.j2"
        - "{{ config_module }}/{{ansible_network_os}}.j2"

  - debug:
      msg: |
        {{ config_module }} configuration for {{ inventory_hostname }}
        =========================================
        {{ lookup('template',config_template or paths[0]+'/missing.j2') }}
      verbosity: 1  
  
  - include_tasks: "{{ item }}"
    with_first_found:
    - "{{netlab_device_type}}/{{ config_module }}-{{ provider|default(netlab_provider) }}.yml"
    - "{{netlab_device_type}}/{{ config_module }}.yml"
    - "deploy-config/{{netlab_device_type}}-{{ provider|default(netlab_provider) }}.yml"
    - "deploy-config/{{netlab_device_type}}.yml"
    - "{{ansible_network_os}}/{{ config_module }}-{{ provider|default(netlab_provider) }}.yml"
    - "{{ansible_network_os}}/{{ config_module }}.yml"
    - "deploy-config/{{ansible_network_os}}-{{ provider|default(netlab_provider) }}.yml"
    - "deploy-config/{{ansible_network_os}}.yml"
    - "../missing.yml"
    args:
      apply:
        vars:
          config_template: "{{ config_template }}"
          netsim_action: "{{ config_module }}"
        tags: [ always ]

  when: config_module in module|default([]) or config_module == 'initial'
