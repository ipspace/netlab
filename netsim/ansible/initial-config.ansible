#!/usr/bin/env ansible-playbook
---
- name: Deploy initial device configuration
  hosts: all:!unprovisioned
  strategy: "{{ netlab_strategy|default('linear') }}"
  gather_facts: false
  tasks:
  - set_fact:
      netlab_device_type: "{{ netlab_device_type|default(ansible_network_os) }}"
      search_path: [ "{{ lookup('env','PWD') }}/templates","~/.netlab/templates","../templates" ]
    tags: [ always ]

#
# Initial device readiness check
#

  - block:
    - set_fact:
        ready_script: "{{ lookup('first_found',params,errors='ignore') }}"
      vars:
        params:
          paths:
          - "tasks/readiness-check"
          files:
          - "{{netlab_device_type}}-{{provider|default(netlab_provider)}}.yml"
          - "{{netlab_device_type}}.yml"
          - "{{ansible_network_os}}-{{provider|default(netlab_provider)}}.yml"
          - "{{ansible_network_os}}.yml"

    - name: Waiting for device to become ready
      include_tasks: "{{ ready_script }}"
      when: ready_script|default('')
      args:
        apply:
          tags: [ always ]

    tags: [ always ]
  
#
# Deploy initial configuration
#
# Uses 'deploy module' task list but sets the module to 'initial'
#

  - name: Deploy initial configuration
    include_tasks: "tasks/deploy-module.yml"
    args:
      apply:
        vars:
          config_module: initial
          paths: "{{ search_path }}"
        tags: [ always ]
    tags: [ initial ]

#
# Deploy module-specific configurations
#
# Input parameters:
#
# * The "modules" group contains all nodes with "module" attribute
# * The global list of modules sorted in proper config order is defined in netlab_module
#   variable in "modules" group.
# * Optional "modlist" variable defines the modules to be configured (set with -e flag)
#
# Hints to understand the spaghetti code the follows:
#
# * We need to configure modules defined in "netlab_module" limited by the list specified
#   in "modlist" -- an intersection of the two lists. "modlist" might not be defined, in that
#   case we take "netlab_module" as default value, and the intersection will be the whole
#   "netlab_module" list
#
- name: Deploy module-specific configurations
  hosts: modules:!unprovisioned
  strategy: "{{ netlab_strategy|default('linear') }}"
  tags: [ module,test ]
  tasks:
  - set_fact:
      modlist: "{{ modlist.split(',') if modlist is defined else netlab_module }}"
  - include_tasks: "tasks/deploy-module.yml"
    args:
      apply:
        vars:
          paths: "{{ search_path }}"
        tags: [ always ]
    loop: "{{ netlab_module|intersect(modlist) }}"
    loop_control:
      loop_var: config_module

#
# Deploy custom configuration templates
#
# Input parameters:
#
# * The "custom_configs" group contains all nodes with "config" attribute
# * The "netlab_custom_config" variable in "custom_config" group contains ordered list
#   of all custom configs used by lab devices
#
# See the "deploy modules" comments to understand the weird code that follows
#
- name: Deploy custom deployment templates
  hosts: custom_configs:!unprovisioned
  strategy: "{{ netlab_strategy|default('linear') }}"
  tags: [ custom,test ]
  tasks:
  - include_tasks: "tasks/deploy-custom-config.yml"
    args:
      apply:
        tags: [ always ]
    when: custom_config in config
    loop: "{{ netlab_custom_config }}"
    loop_control:
      loop_var: custom_config
