{% if 'router_id' in bgp %}
router id {{ bgp.router_id }};
{% endif %}

{% for pfx in bgp.originate|default([]) %}
{%   if loop.first %}
protocol static bgp_ipv4 {
  ipv4;
{%   endif %}
  route {{ pfx }} unreachable;
{%   if loop.last %}
}
{%   endif %}
{% endfor %}

function bgp_prefixes() {
  if source ~ [ RTS_STATIC, RTS_BGP ]
    then accept "Static or BGP route:", net;

{% if bgp.advertise_loopback|default(False) %}
  if source ~ [ RTS_DEVICE ] && ifname = "lo"
    then accept "advertise loopback:", net;
{% endif %}
{% for intf in interfaces if 'bgp' in intf and intf.bgp.advertise|default(False) %}
  if source ~ [ RTS_DEVICE ] && ifname = "{{ intf.ifname }}"
    then accept "bgp.advertise:", net;
{% endfor %}
  reject "not accepted:", net, " source=", source, " preference=", preference;
}

{#
 Build a BGP export filter per neighbor type, to filter communities
#}
{% for ntype in [ 'ebgp', 'ibgp', 'localas_ibgp' ] %}
filter bgp_export_{{ ntype }} {
{%   set list = bgp.community[ntype]|default([]) %}
{%   if 'standard' not in list %}
  bgp_community.empty;
{%   endif %}
{%   if 'large' not in list %}
  bgp_large_community.empty;
{%   endif %}
{%   if 'extended' not in list %}
  bgp_ext_community.empty;
{%   endif %}

  bgp_prefixes();
}
{% endfor %}

{% for n in bgp.neighbors %}
{%   for af in [ 'ipv4','ipv6' ] if af in n and n[af] is string %}
protocol bgp bgp_{{ n.name }}_{{ af }} {
{%     set loopback = loopback|default({}) %}
{%     set local_ip = loopback[af]|default('') %}
  local {{ local_ip.split('/')[0] if n.type == 'ibgp' else '' }} as {{ n.local_as|default(bgp.as) }};
  neighbor {{ n[af] }} as {{ n['as'] }};
{% if n.local_if is defined %}
  interface "{{ n.local_if }}";
{% endif %}
{%     if n.password is defined %}
  password "{{ n.password }}";
{%     endif %}
{%     if n.rs|default(False) %}
  rs client;
{%     endif %}
{%     if n.rs_client|default(False) %}
  enforce first as off;
{%     endif %}
{%     if bgp.rr|default('') and ((not n.rr|default('') and n.type == 'ibgp') or n.type == 'localas_ibgp') %}
  rr client;
{%       if bgp.rr|default(False) and bgp.rr_cluster_id|default(False) %}
  rr cluster id {{ bgp.rr_cluster_id }};
{%       endif %}
{%     endif %}
{%     for _af in [ 'ipv4','ipv6' ] if _af==af or af=='ipv6' and n.ipv4_rfc8950|default(False) %}
{%      if _af in n.activate and n.activate[_af] %}
  {{ _af }} {
    import all;
    export filter bgp_export_{{ n.type }};
{%       if 'next_hop_self' in bgp and bgp.next_hop_self and 'ibgp' in n.type %}
    next hop self {{ 'on' if n.type == 'localas_ibgp' else 'ebgp' }};
{%       endif %}
{%       if _af=='ipv4' and n.ipv4_rfc8950|default(False) %}
    extended next hop on;
    # require extended next hop on;
{%       endif %}
  };
{%      endif %}
{%     endfor %}
}
{%   endfor %}
{% endfor %}
