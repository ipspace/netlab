/home/pipi/.local/lib/python3.10/site-packages/paramiko/pkey.py:100: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "cipher": algorithms.TripleDES,
/home/pipi/.local/lib/python3.10/site-packages/paramiko/transport.py:259: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.
  "class": algorithms.TripleDES,
[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [Find device readiness script] ********************************************
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [Wait for device to become ready] *****************************************
skipping: [relay]
skipping: [c1]
skipping: [c2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/iol-clab.yml for server

TASK [Check if 'sshpass' is installed] *****************************************
ok: [server -> localhost]

TASK [Check for 'timeout' command] *********************************************
ok: [server -> localhost]

TASK [Execute local ssh command to check iol readiness] ************************
FAILED - RETRYING: [server -> localhost]: Execute local ssh command to check iol readiness (20 retries left).
FAILED - RETRYING: [server -> localhost]: Execute local ssh command to check iol readiness (19 retries left).
ok: [server -> localhost]

TASK [Confirm server SSH server works] *****************************************
ok: [server] => 
  msg: Node server is ready.

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for relay, c1, c2, server

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [Find configuration template for normalize] *******************************
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [fail] ********************************************************************
skipping: [relay]
skipping: [c1]
skipping: [c2]
skipping: [server]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [c1]
skipping: [c2]
skipping: [server]
ok: [relay] => 
  msg: |-
    normalize configuration for relay
    =========================================
    !
    interface GigabitEthernet0/1
     shutdown
     mac-address 52dc.cafe.0101
    !
    interface GigabitEthernet0/2
     shutdown
     mac-address 52dc.cafe.0102

TASK [Deploy normalize configuration] ******************************************
skipping: [c1]
skipping: [c2]
skipping: [server]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for relay

TASK [ios_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/iosvl2.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [relay]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for relay, c1, c2, server

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [Find configuration template for initial] *********************************
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [fail] ********************************************************************
skipping: [relay]
skipping: [c1]
skipping: [c2]
skipping: [server]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [c1] => 
  msg: |-
    initial configuration for c1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    hostname c1
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 relay
    172.16.0.1 GigabitEthernet0-1.c_vrf.relay
    172.16.1.1 GigabitEthernet0-2.relay
    172.16.1.4 server Ethernet0-1.server
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname c1
  
    NEED_APT_UPDATE=YES
  
    # Loopback addressing
  
    # Interface addressing and bonds, including any static routes
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          dhcp4: true
    SCRIPT
  
    # Disable auto-negotiation on Ethernet interfaces, needed to make LACP work correctly
    cat <<SCRIPT > /etc/systemd/network/98-eth.link
  
    [Match]
    OriginalName=eth*
  
    [Link]
    BitsPerSecond=1G
    AutoNegotiation=no
    Duplex=full
    SCRIPT
  
    chmod 400 /etc/netplan/*
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    netplan apply
  
    #
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    # Do this after 'netplan apply', e.g. bond devices won't exist before that
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.conf.all.arp_announce=2
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
    net.ipv6.conf.eth1.disable_ipv6=1
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
ok: [c2] => 
  msg: |-
    initial configuration for c2
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    hostname c2
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    10.0.0.1 relay
    172.16.0.1 GigabitEthernet0-1.c_vrf.relay
    172.16.1.1 GigabitEthernet0-2.relay
    172.16.1.4 server Ethernet0-1.server
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname c2
  
    NEED_APT_UPDATE=YES
  
    # Loopback addressing
  
    # Interface addressing and bonds, including any static routes
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          dhcp4: true
    SCRIPT
  
    # Disable auto-negotiation on Ethernet interfaces, needed to make LACP work correctly
    cat <<SCRIPT > /etc/systemd/network/98-eth.link
  
    [Match]
    OriginalName=eth*
  
    [Link]
    BitsPerSecond=1G
    AutoNegotiation=no
    Duplex=full
    SCRIPT
  
    chmod 400 /etc/netplan/*
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    netplan apply
  
    #
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    # Do this after 'netplan apply', e.g. bond devices won't exist before that
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.conf.all.arp_announce=2
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
    net.ipv6.conf.eth1.disable_ipv6=1
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
ok: [relay] => 
  msg: |-
    initial configuration for relay
    =========================================
    hostname relay
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host relay-c_vrf 172.16.0.1
    ip host server 172.16.1.4
    !
    ip routing
    !
    no ipv6 unicast-routing
    !
    vrf definition c_vrf
     rd 65000:1
     route-target import 65000:1
     route-target export 65000:1
    !
     address-family ipv4
     exit-address-family
    !
  
    !
    !
    interface Loopback0
     ip address 10.0.0.1 255.255.255.255
    !
    interface GigabitEthernet0/0
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet0/1
     no switchport
     vrf forwarding c_vrf
     description relay -> [c1,c2] [stub]
     ip address 172.16.0.1 255.255.255.0
     no shutdown
    !
    interface GigabitEthernet0/2
     no switchport
     description relay -> server [stub]
     ip address 172.16.1.1 255.255.255.0
     no shutdown
    !
    !
    line vty 0 4
     exec-timeout 0 0
    !
    no banner exec
    no banner login
    no banner incoming
ok: [server] => 
  msg: |-
    initial configuration for server
    =========================================
    hostname server
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host relay 10.0.0.1 172.16.1.1
    ip host relay-c_vrf 172.16.0.1
    !
    ip routing
    !
    no ipv6 unicast-routing
    !
    !
    !
    interface Ethernet0/0
     no lldp transmit
     no lldp receive
    !
    interface Ethernet0/1
     description server -> relay [stub]
     ip address 172.16.1.4 255.255.255.0
     no shutdown
    !
    !
    line vty 0 4
     exec-timeout 0 0
    !
    no banner exec
    no banner login
    no banner incoming

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for relay, server
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux.yml for c1, c2

TASK [ios_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/ios.j2] ***
changed: [server]
changed: [relay]

TASK [template] ****************************************************************
changed: [c1]
changed: [c2]

TASK [Execute /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux.j2] ***
changed: [c1]
changed: [c2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for relay, c1, c2, server => (item=vrf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for relay, c1, c2, server => (item=routing)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for relay, c1, c2, server => (item=dhcp)

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [Find configuration template for vrf] *************************************
skipping: [c1]
skipping: [c2]
skipping: [server]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [relay]
skipping: [c1]
skipping: [c2]
skipping: [server]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [c1]
skipping: [c2]
skipping: [server]
ok: [relay]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [c1]
skipping: [c2]
skipping: [server]
ok: [relay] => 
  msg: |-
    vrf configuration for relay
    =========================================

TASK [Deploy vrf configuration] ************************************************
skipping: [c1]
skipping: [c2]
skipping: [server]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for relay

TASK [ios_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/ios.j2] ***
ok: [relay]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [Find configuration template for routing] *********************************
skipping: [relay]
skipping: [c1]
skipping: [c2]
ok: [server]

TASK [fail] ********************************************************************
skipping: [relay]
skipping: [c1]
skipping: [c2]
skipping: [server]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [relay]
skipping: [c1]
skipping: [c2]
ok: [server]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [relay]
skipping: [c1]
skipping: [c2]
ok: [server] => 
  msg: |-
    routing configuration for server
    =========================================
    !
    !
    ! AS-path access lists
    !
    !
    ! Static routes
    !
    ip route 0.0.0.0 0.0.0.0 Ethernet0/1 172.16.1.1

TASK [Deploy routing configuration] ********************************************
skipping: [relay]
skipping: [c1]
skipping: [c2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for server

TASK [ios_config: deploying routing from /home/pipi/net101/tools/netsim/ansible/templates/routing/ios.j2] ***
changed: [server]

TASK [Figure out whether to deploy the module dhcp on current device] **********
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [Find configuration template for dhcp] ************************************
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [fail] ********************************************************************
skipping: [relay]
skipping: [c1]
skipping: [c2]
skipping: [server]

TASK [Find configuration deployment deploy_script for dhcp] ********************
ok: [c1]
ok: [c2]
ok: [relay]
ok: [server]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [c1] => 
  msg: |-
    dhcp configuration for c1
    =========================================
    # This is a placeholder file. DHCP is configured during initial configuration
    #
    if [ `grep 'ID=ubuntu' /etc/os-release` ]; then
      echo "DHCP is supported"
    else
      echo "netlab supports DHCP only on Ubuntu" >&2
      exit 1
    fi
ok: [c2] => 
  msg: |-
    dhcp configuration for c2
    =========================================
    # This is a placeholder file. DHCP is configured during initial configuration
    #
    if [ `grep 'ID=ubuntu' /etc/os-release` ]; then
      echo "DHCP is supported"
    else
      echo "netlab supports DHCP only on Ubuntu" >&2
      exit 1
    fi
ok: [relay] => 
  msg: |-
    dhcp configuration for relay
    =========================================
    ip dhcp relay information option vpn
    !
    interface GigabitEthernet0/1
      ip helper-address global 172.16.1.4
ok: [server] => 
  msg: |-
    dhcp configuration for server
    =========================================
    ip dhcp excluded-address vrf c_vrf 172.16.0.1
    !
    ip dhcp pool links_1_
     vrf c_vrf
     network 172.16.0.0 255.255.255.0
    !
    ip dhcp relay information option vpn
    !

TASK [Deploy dhcp configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for relay, server
included: /home/pipi/net101/tools/netsim/ansible/tasks/linux/dhcp.yml for c1, c2

TASK [ios_config: deploying dhcp from /home/pipi/net101/tools/netsim/ansible/templates/dhcp/ios.j2] ***
changed: [relay]
changed: [server]

TASK [Install dnsmasq] *********************************************************
skipping: [c1]
skipping: [c2]

TASK [Install isc-dhcp-relay] **************************************************
skipping: [c1]
skipping: [c2]

TASK [Create DHCP deployment script] *******************************************
changed: [c1]
changed: [c2]

TASK [Execute /tmp/config.sh to deploy dhcp config from /home/pipi/net101/tools/netsim/ansible/templates/dhcp/linux.j2] ***
changed: [c1]
changed: [c2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
c1                         : ok=27   changed=4    unreachable=0    failed=0    skipped=18   rescued=0    ignored=0   
c2                         : ok=27   changed=4    unreachable=0    failed=0    skipped=18   rescued=0    ignored=0   
relay                      : ok=33   changed=3    unreachable=0    failed=0    skipped=10   rescued=0    ignored=0   
server                     : ok=35   changed=3    unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   



Use this topology to test the inter-VRF DHCPv4 relay functionality of your
device. Use 'netlab validate' to check whether your device propagated DHCPv4
requests from DHCP clients (Linux VMs) in VRF c_vrf to DHCP servers in global
routing table.

