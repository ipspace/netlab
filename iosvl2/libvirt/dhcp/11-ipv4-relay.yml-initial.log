[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned
[WARNING]: Found variable using reserved name: hosts

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Find device readiness script] ********************************************
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Wait for device to become ready] *****************************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [s1]
skipping: [s2]
skipping: [relay]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for c1, c2, c3, c4, s1, s2, relay

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Find configuration template for normalize] *******************************
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [s1]
skipping: [s2]
skipping: [relay]

TASK [Find configuration deployment deploy_script for normalize] ***************
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [s1]
skipping: [s2]
ok: [relay] => 
  msg: |-
    normalize configuration for relay
    =========================================
    !
    interface GigabitEthernet0/1
     shutdown
     mac-address 52dc.cafe.0101
    !
    interface GigabitEthernet0/2
     shutdown
     mac-address 52dc.cafe.0102
    !
    interface GigabitEthernet0/3
     shutdown
     mac-address 52dc.cafe.0103
    !
    interface GigabitEthernet1/0
     shutdown
     mac-address 52dc.cafe.0104

TASK [Deploy normalize configuration] ******************************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [s1]
skipping: [s2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/ios.yml for relay

TASK [ios_config: deploying normalize from /home/pipi/netlab_gh/netsim/ansible/templates/normalize/iosvl2.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [relay]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for c1, c2, c3, c4, s1, s2, relay

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Find configuration template for initial] *********************************
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [s1]
skipping: [s2]
skipping: [relay]

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.2.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.2.6/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Send ARP requests from a sane source IP address
    sysctl -w net.ipv4.conf.all.arp_announce=2
  
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
  
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.3.7/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.3.7/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=1
    ip link set dev eth1 mtu 1500
ok: [c1] => 
  msg: |-
    initial configuration for c1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    hostname c1
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.16.2.6 s1 eth1.s1
    172.16.3.7 s2 eth1.s2
    10.0.0.1 relay
    172.16.0.1 GigabitEthernet0-1.relay
    172.16.1.1 GigabitEthernet0-2.relay
    172.16.2.1 GigabitEthernet0-3.relay
    172.16.3.1 GigabitEthernet1-0.relay
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname c1
  
    NEED_APT_UPDATE=YES
  
    # Loopback addressing
  
    # Interface addressing and bonds, including any static routes
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          dhcp4: true
    SCRIPT
  
    # Disable auto-negotiation on Ethernet interfaces, needed to make LACP work correctly
    cat <<SCRIPT > /etc/systemd/network/98-eth.link
  
    [Match]
    OriginalName=eth*
  
    [Link]
    BitsPerSecond=1G
    AutoNegotiation=no
    Duplex=full
    SCRIPT
  
    chmod 400 /etc/netplan/*
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    netplan apply
  
    #
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    # Do this after 'netplan apply', e.g. bond devices won't exist before that
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.conf.all.arp_announce=2
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
    net.ipv6.conf.eth1.disable_ipv6=1
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
ok: [c2] => 
  msg: |-
    initial configuration for c2
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    hostname c2
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.16.2.6 s1 eth1.s1
    172.16.3.7 s2 eth1.s2
    10.0.0.1 relay
    172.16.0.1 GigabitEthernet0-1.relay
    172.16.1.1 GigabitEthernet0-2.relay
    172.16.2.1 GigabitEthernet0-3.relay
    172.16.3.1 GigabitEthernet1-0.relay
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname c2
  
    NEED_APT_UPDATE=YES
  
    # Loopback addressing
  
    # Interface addressing and bonds, including any static routes
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          dhcp4: true
    SCRIPT
  
    # Disable auto-negotiation on Ethernet interfaces, needed to make LACP work correctly
    cat <<SCRIPT > /etc/systemd/network/98-eth.link
  
    [Match]
    OriginalName=eth*
  
    [Link]
    BitsPerSecond=1G
    AutoNegotiation=no
    Duplex=full
    SCRIPT
  
    chmod 400 /etc/netplan/*
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    netplan apply
  
    #
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    # Do this after 'netplan apply', e.g. bond devices won't exist before that
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.conf.all.arp_announce=2
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
    net.ipv6.conf.eth1.disable_ipv6=1
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
ok: [c3] => 
  msg: |-
    initial configuration for c3
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    hostname c3
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.16.2.6 s1 eth1.s1
    172.16.3.7 s2 eth1.s2
    10.0.0.1 relay
    172.16.0.1 GigabitEthernet0-1.relay
    172.16.1.1 GigabitEthernet0-2.relay
    172.16.2.1 GigabitEthernet0-3.relay
    172.16.3.1 GigabitEthernet1-0.relay
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname c3
  
    NEED_APT_UPDATE=YES
  
    # Loopback addressing
  
    # Interface addressing and bonds, including any static routes
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          dhcp4: true
    SCRIPT
  
    # Disable auto-negotiation on Ethernet interfaces, needed to make LACP work correctly
    cat <<SCRIPT > /etc/systemd/network/98-eth.link
  
    [Match]
    OriginalName=eth*
  
    [Link]
    BitsPerSecond=1G
    AutoNegotiation=no
    Duplex=full
    SCRIPT
  
    chmod 400 /etc/netplan/*
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    netplan apply
  
    #
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    # Do this after 'netplan apply', e.g. bond devices won't exist before that
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.conf.all.arp_announce=2
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
    net.ipv6.conf.eth1.disable_ipv6=1
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
ok: [c4] => 
  msg: |-
    initial configuration for c4
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    hostname c4
    #
    # Build hosts file
    #
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.16.2.6 s1 eth1.s1
    172.16.3.7 s2 eth1.s2
    10.0.0.1 relay
    172.16.0.1 GigabitEthernet0-1.relay
    172.16.1.1 GigabitEthernet0-2.relay
    172.16.2.1 GigabitEthernet0-3.relay
    172.16.3.1 GigabitEthernet1-0.relay
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname c4
  
    NEED_APT_UPDATE=YES
  
    # Loopback addressing
  
    # Interface addressing and bonds, including any static routes
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          dhcp4: true
    SCRIPT
  
    # Disable auto-negotiation on Ethernet interfaces, needed to make LACP work correctly
    cat <<SCRIPT > /etc/systemd/network/98-eth.link
  
    [Match]
    OriginalName=eth*
  
    [Link]
    BitsPerSecond=1G
    AutoNegotiation=no
    Duplex=full
    SCRIPT
  
    chmod 400 /etc/netplan/*
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    netplan apply
  
    #
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    # Do this after 'netplan apply', e.g. bond devices won't exist before that
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.conf.all.arp_announce=2
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
    net.ipv6.conf.eth1.disable_ipv6=1
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
ok: [relay] => 
  msg: |-
    initial configuration for relay
    =========================================
    hostname relay
    !
    no ip domain lookup
    logging buffered 256000
  
    !
    lldp run
    !
    ip host s1 172.16.2.6
    ip host s2 172.16.3.7
    !
    ip routing
    !
    no ipv6 unicast-routing
    !
    !
    interface Loopback0
     ip address 10.0.0.1 255.255.255.255
    !
    interface GigabitEthernet0/0
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet0/1
     no switchport
     description relay -> [c1,c2] [stub]
     ip address 172.16.0.1 255.255.255.0
     no shutdown
    !
    interface GigabitEthernet0/2
     no switchport
     description relay -> [c3,c4] [stub]
     ip address 172.16.1.1 255.255.255.0
     no shutdown
    !
    interface GigabitEthernet0/3
     no switchport
     description relay -> s1
     ip address 172.16.2.1 255.255.255.0
     no shutdown
    !
    interface GigabitEthernet1/0
     no switchport
     description relay -> s2
     ip address 172.16.3.1 255.255.255.0
     no shutdown
    !
    !
    line vty 0 4
     exec-timeout 0 0
    !
    no banner exec
    no banner login
    no banner incoming

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux.yml for c1, c2, c3, c4
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for s1, s2
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/ios.yml for relay

TASK [template] ****************************************************************
changed: [c4]
changed: [c3]
changed: [c2]
changed: [c1]

TASK [Execute /tmp/config.sh to deploy initial config from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux.j2] ***
changed: [c1]
changed: [c2]
changed: [c4]
changed: [c3]

TASK [Define script filename and determine whether to execute in netns] ********
ok: [s1]
ok: [s2]

TASK [Create a temporary file for the rendered script] *************************
changed: [s2 -> localhost]
changed: [s1 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [Copy script into running container at /tmp/config-s1_initial.sh] *********
skipping: [s1]
skipping: [s2]

TASK [Execute /tmp/config-s1_initial.sh to deploy initial config based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [s1]
skipping: [s2]

TASK [Container configuration for initial based on /home/pipi/netlab_gh/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [Remove temporary file /tmp/s1_initial-nyxwf032.sh] ***********************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [ios_config: deploying initial from /home/pipi/netlab_gh/netsim/ansible/templates/initial/ios.j2] ***
changed: [relay]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for c1, c2, c3, c4, relay, s1, s2 => (item=dhcp)
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-module.yml for c1, c2, c3, c4, relay, s1, s2 => (item=routing)

TASK [Figure out whether to deploy the module dhcp on current device] **********
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Find configuration template for dhcp] ************************************
ok: [c1]
ok: [c2]
ok: [c3]
skipping: [s1]
ok: [c4]
skipping: [s2]
ok: [relay]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [relay]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for dhcp] ********************
ok: [c1]
skipping: [s1]
ok: [c2]
ok: [c3]
skipping: [s2]
ok: [c4]
ok: [relay]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [c1] => 
  msg: |-
    dhcp configuration for c1
    =========================================
    # This is a placeholder file. DHCP is configured during initial configuration
    #
    if [ `grep 'ID=ubuntu' /etc/os-release` ]; then
      echo "DHCP is supported, it should work after another plea to netplan"
      netplan apply
    else
      echo "netlab supports DHCP only on Ubuntu" >&2
      exit 1
    fi
ok: [c2] => 
  msg: |-
    dhcp configuration for c2
    =========================================
    # This is a placeholder file. DHCP is configured during initial configuration
    #
    if [ `grep 'ID=ubuntu' /etc/os-release` ]; then
      echo "DHCP is supported, it should work after another plea to netplan"
      netplan apply
    else
      echo "netlab supports DHCP only on Ubuntu" >&2
      exit 1
    fi
ok: [c3] => 
  msg: |-
    dhcp configuration for c3
    =========================================
    # This is a placeholder file. DHCP is configured during initial configuration
    #
    if [ `grep 'ID=ubuntu' /etc/os-release` ]; then
      echo "DHCP is supported, it should work after another plea to netplan"
      netplan apply
    else
      echo "netlab supports DHCP only on Ubuntu" >&2
      exit 1
    fi
skipping: [s1]
ok: [c4] => 
  msg: |-
    dhcp configuration for c4
    =========================================
    # This is a placeholder file. DHCP is configured during initial configuration
    #
    if [ `grep 'ID=ubuntu' /etc/os-release` ]; then
      echo "DHCP is supported, it should work after another plea to netplan"
      netplan apply
    else
      echo "netlab supports DHCP only on Ubuntu" >&2
      exit 1
    fi
skipping: [s2]
ok: [relay] => 
  msg: |-
    dhcp configuration for relay
    =========================================
    interface GigabitEthernet0/1
      ip helper-address 172.16.2.6
    interface GigabitEthernet0/2
      ip helper-address 172.16.3.7

TASK [Deploy dhcp configuration] ***********************************************
skipping: [s1]
skipping: [s2]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/linux/dhcp.yml for c1, c2, c3, c4
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/ios.yml for relay

TASK [Install dnsmasq] *********************************************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]

TASK [Install isc-dhcp-relay] **************************************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]

TASK [Create DHCP deployment script] *******************************************
changed: [c1]
changed: [c4]
changed: [c2]
changed: [c3]

TASK [Execute /tmp/config.sh to deploy dhcp config from /home/pipi/netlab_gh/netsim/ansible/templates/dhcp/linux.j2] ***
changed: [c1]
changed: [c3]
changed: [c2]
changed: [c4]

TASK [ios_config: deploying dhcp from /home/pipi/netlab_gh/netsim/ansible/templates/dhcp/ios.j2] ***
changed: [relay]

TASK [Figure out whether to deploy the module routing on current device] *******
ok: [c1]
ok: [c2]
ok: [c3]
ok: [c4]
ok: [s1]
ok: [s2]
ok: [relay]

TASK [Find configuration template for routing] *********************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [relay]
ok: [s1]
ok: [s2]

TASK [fail] ********************************************************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [relay]
skipping: [s1]
skipping: [s2]

TASK [Find configuration deployment deploy_script for routing] *****************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [relay]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [relay]
ok: [s1] => 
  msg: |-
    routing configuration for s1
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.2.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.2.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [s2] => 
  msg: |-
    routing configuration for s2
    =========================================
    #!/bin/bash
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.3.1 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.3.1 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.3.1 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.3.1 dev eth1 protocol static
    #
    # Print the final routing table
    ip route

TASK [Deploy routing configuration] ********************************************
skipping: [c1]
skipping: [c2]
skipping: [c3]
skipping: [c4]
skipping: [relay]
included: /home/pipi/netlab_gh/netsim/ansible/tasks/deploy-config/linux-clab.yml for s1, s2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [s1]
ok: [s2]

TASK [Create a temporary file for the rendered script] *************************
changed: [s2 -> localhost]
changed: [s1 -> localhost]

TASK [Create container setup script from /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [Copy script into running container at /tmp/config-s1_routing.sh] *********
skipping: [s1]
skipping: [s2]

TASK [Execute /tmp/config-s1_routing.sh to deploy routing config based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2] ***
skipping: [s1]
skipping: [s2]

TASK [Container configuration for routing based on /home/pipi/netlab_gh/netsim/ansible/templates/routing/linux-clab.j2 executed in netns] ***
changed: [s1 -> localhost]
changed: [s2 -> localhost]

TASK [Remove temporary file /tmp/s1_routing-v2akt1l8.sh] ***********************
changed: [s1 -> localhost]
changed: [s2 -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
c1                         : ok=25   changed=4    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
c2                         : ok=25   changed=4    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
c3                         : ok=25   changed=4    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
c4                         : ok=25   changed=4    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   
relay                      : ok=26   changed=3    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
s1                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   
s2                         : ok=31   changed=8    unreachable=0    failed=0    skipped=15   rescued=0    ignored=0   



Use this topology to test the DHCPv4 relay functionality of your device. Use
'netlab validate' to check whether your device propagated DHCPv4 requests from
DHCP clients (Linux VMs) to DHCP servers.

