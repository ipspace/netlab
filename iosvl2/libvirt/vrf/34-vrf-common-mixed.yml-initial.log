[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [srv]
skipping: [r1]
skipping: [r2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, srv, r1, r2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [srv] => 
  msg: |-
    initial configuration for srv
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "# Created by netlab initial" >>/tmp/hosts
    echo "10.0.0.1 dut" >>/tmp/hosts
    echo "172.16.1.1 dut-blue" >>/tmp/hosts
    echo "172.16.2.1 dut-common" >>/tmp/hosts
    echo "172.16.0.1 dut-red" >>/tmp/hosts
    echo "10.0.0.2 172.16.0.2 r1" >>/tmp/hosts
    echo "10.0.0.3 172.16.1.3 r2" >>/tmp/hosts
    echo "10.0.0.4 172.16.2.4 srv" >>/tmp/hosts
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts|sort >>/etc/hosts
  
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname srv
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.4/32
    !
    interface eth1
     no shutdown
     description srv -> dut [external]
     ip address 172.16.2.4/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "# Created by netlab initial" >>/tmp/hosts
    echo "10.0.0.1 dut" >>/tmp/hosts
    echo "172.16.1.1 dut-blue" >>/tmp/hosts
    echo "172.16.2.1 dut-common" >>/tmp/hosts
    echo "172.16.0.1 dut-red" >>/tmp/hosts
    echo "10.0.0.2 172.16.0.2 r1" >>/tmp/hosts
    echo "10.0.0.3 172.16.1.3 r2" >>/tmp/hosts
    echo "10.0.0.4 172.16.2.4 srv" >>/tmp/hosts
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts|sort >>/etc/hosts
  
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description r1 -> dut
     ip address 172.16.0.2/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "# Created by netlab initial" >>/tmp/hosts
    echo "10.0.0.1 dut" >>/tmp/hosts
    echo "172.16.1.1 dut-blue" >>/tmp/hosts
    echo "172.16.2.1 dut-common" >>/tmp/hosts
    echo "172.16.0.1 dut-red" >>/tmp/hosts
    echo "10.0.0.2 172.16.0.2 r1" >>/tmp/hosts
    echo "10.0.0.3 172.16.1.3 r2" >>/tmp/hosts
    echo "10.0.0.4 172.16.2.4 srv" >>/tmp/hosts
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts|sort >>/etc/hosts
  
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname r2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.3/32
    !
    interface eth1
     no shutdown
     description r2 -> dut
     ip address 172.16.1.3/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host dut-blue 172.16.1.1
    ip host dut-common 172.16.2.1
    ip host dut-red 172.16.0.1
    ip host r1 10.0.0.2 172.16.0.2
    ip host r2 10.0.0.3 172.16.1.3
    ip host srv 10.0.0.4 172.16.2.4
    !
    ip routing
    !
    vrf definition blue
     rd 65000:2
     route-target import 65000:2
     route-target import 65000:3
     route-target export 65000:2
    !
     address-family ipv4
     exit-address-family
    !
    vrf definition common
     rd 65000:3
     route-target import 65000:1
     route-target import 65000:2
     route-target import 65000:3
     route-target export 65000:3
    !
     address-family ipv4
     exit-address-family
    !
    vrf definition red
     rd 65000:1
     route-target import 65000:1
     route-target import 65000:3
     route-target export 65000:1
    !
     address-family ipv4
     exit-address-family
    !
  
    !
    !
    interface Loopback0
     ip address 10.0.0.1 255.255.255.255
    !
    interface GigabitEthernet0/0
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet0/1
     no shutdown
     no switchport
     vrf forwarding red
     description dut -> r1
     mtu 1500
     ip address 172.16.0.1 255.255.255.0
    !
    interface GigabitEthernet0/2
     no shutdown
     no switchport
     vrf forwarding blue
     description dut -> r2
     mtu 1500
     ip address 172.16.1.1 255.255.255.0
    !
    interface GigabitEthernet0/3
     no shutdown
     no switchport
     vrf forwarding common
     description dut -> srv [external]
     mtu 1500
     ip address 172.16.2.1 255.255.255.0
    !
    no banner exec
    no banner login
    no banner incoming

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for srv, r1, r2

TASK [ios_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/ios.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [dut]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [r1 -> localhost]
changed: [r2 -> localhost]
changed: [srv -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [srv]
skipping: [r1]
skipping: [r2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for srv, r1, r2

TASK [template] ****************************************************************
changed: [srv]
changed: [r2]
changed: [r1]

TASK [set_fact] ****************************************************************
ok: [srv]
ok: [r1]
ok: [r2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [r2]
changed: [srv]
changed: [r1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [srv]
skipping: [r1]
skipping: [r2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, srv => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, srv => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, r1, r2, srv => (item=vrf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for bgp] *************************************
skipping: [r1]
skipping: [r2]
ok: [srv]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r1]
skipping: [r2]
ok: [srv] => 
  msg: |-
    bgp configuration for srv
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 172.16.2.1 remote-as 65000
      neighbor 172.16.2.1 description dut
    !
     address-family ipv4 unicast
    !
      network 10.0.0.4/32
    !
    !
    !
      neighbor 172.16.2.1 activate
      no neighbor 172.16.2.1 send-community all
      neighbor 172.16.2.1 send-community standard
      neighbor 172.16.2.1 send-community large
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    !
    ip bgp-community new-format
    !
    router bgp 65000
      no bgp default ipv4-unicast
      bgp update-delay 5
      bgp nopeerup-delay cold-boot 1
      bgp nopeerup-delay user-initiated 1
      bgp router-id 10.0.0.1
    !
     address-family ipv4
      bgp scan-time 5
    !
      network 10.0.0.1 mask 255.255.255.255
  
    !
    !
    !

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [r1]
skipping: [r2]
ok: [srv]
ok: [dut]

TASK [Deploy bgp configuration] ************************************************
skipping: [r1]
skipping: [r2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for srv

TASK [ios_config: deploying bgp from /home/pipi/net101/tools/netsim/ansible/templates/bgp/ios.j2] ***
changed: [dut]

TASK [template] ****************************************************************
changed: [srv]

TASK [set_fact] ****************************************************************
ok: [srv]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [srv]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [srv]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for ospf] ************************************
skipping: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [srv]
ok: [r1] => 
  msg: |-
    ospf configuration for r1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.2
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [r2] => 
  msg: |-
    ospf configuration for r2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! r2 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [srv]
ok: [r1]
ok: [r2]
ok: [dut]

TASK [Deploy ospf configuration] ***********************************************
skipping: [srv]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for r1, r2

TASK [ios_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/ios.j2] ***
ok: [dut]

TASK [template] ****************************************************************
changed: [r2]
changed: [r1]

TASK [set_fact] ****************************************************************
ok: [r1]
ok: [r2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [r1]
skipping: [r2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [r1]
changed: [r2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [r1]
ok: [r2]
ok: [srv]
ok: [dut]

TASK [Find configuration template for vrf] *************************************
skipping: [r1]
skipping: [r2]
skipping: [srv]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [r1]
skipping: [r2]
skipping: [srv]
ok: [dut] => 
  msg: |-
    vrf configuration for dut
    =========================================
    !
    router bgp 65000
     address-family ipv4 vrf blue
      bgp router-id 10.0.0.1
    !
      redistribute connected
      redistribute ospf 101 match internal external
    !
    !
     address-family ipv4 vrf common
      bgp router-id 10.0.0.1
    !
      redistribute connected
    !
    !
      neighbor 172.16.2.4 remote-as 65100
      neighbor 172.16.2.4 description srv
  
      neighbor 172.16.2.4 activate
      neighbor 172.16.2.4 advertisement-interval 0
      neighbor 172.16.2.4 send-community standard
  
     address-family ipv4 vrf red
      bgp router-id 10.0.0.1
    !
      redistribute connected
      redistribute ospf 100 match internal external
    !
    !
    router ospf 101 vrf blue
     router-id 10.100.0.101
  
     redistribute bgp 65000 subnets
     redistribute connected subnets
    !
    interface GigabitEthernet0/2
    ! dut -> r2
     ip ospf 101 area 0.0.0.0
     ip ospf network point-to-point
    !
  
    router ospf 100 vrf red
     router-id 10.100.0.100
  
     redistribute bgp 65000 subnets
     redistribute connected subnets
    !
    interface GigabitEthernet0/1
    ! dut -> r1
     ip ospf 100 area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [r1]
skipping: [r2]
skipping: [srv]
ok: [dut]

TASK [Deploy vrf configuration] ************************************************
skipping: [r1]
skipping: [r2]
skipping: [srv]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for dut

TASK [ios_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/ios.j2] ***
changed: [dut]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=31   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
r1                         : ok=27   changed=5    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
r2                         : ok=27   changed=5    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
srv                        : ok=27   changed=5    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   



The device under test has two user VRFs and a common services VRF.
Routers are attached to those interfaces and run OSPF or BGP with device under test.

* r1 and r2 should be able to ping srv but not each other

