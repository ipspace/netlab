[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [r1]
ok: [r2]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [r1]
ok: [r2]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [r1]
skipping: [r2]

TASK [Normalize config on bridge-like devices] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, r1, r2

TASK [Figure out whether to deploy the module normalize on current device] *****
ok: [h1]
ok: [h2]
ok: [r1]
ok: [r2]

TASK [Find configuration template for normalize] *******************************
ok: [h1]
ok: [h2]
ok: [r1]
ok: [r2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [r1]
skipping: [r2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [h1]
skipping: [h2]
ok: [r1] => 
  msg: |-
    normalize configuration for r1
    =========================================
    !
    interface GigabitEthernet0/1
     no switchport
     mac-address 52dc.cafe.0301
    !
    interface GigabitEthernet0/2
     no switchport
     mac-address 52dc.cafe.0302
ok: [r2] => 
  msg: |-
    normalize configuration for r2
    =========================================
    !
    interface GigabitEthernet0/1
     no switchport
     mac-address 52dc.cafe.0401
    !
    interface GigabitEthernet0/2
     no switchport
     mac-address 52dc.cafe.0402

TASK [Find configuration deployment deploy_script for normalize] ***************
skipping: [h1]
skipping: [h2]
ok: [r1]
ok: [r2]

TASK [Deploy normalize configuration] ******************************************
skipping: [h1]
skipping: [h2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for r1, r2

TASK [ios_config: deploying normalize from /home/pipi/net101/tools/netsim/ansible/templates/normalize/iosvl2.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [r1]
changed: [r2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, r1, r2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [r1]
ok: [r2]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [r1]
ok: [r2]

TASK [fail] ********************************************************************
skipping: [h1]
skipping: [h2]
skipping: [r1]
skipping: [r2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.0.3 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.0.3 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
  
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing, create any bond devices
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.2/24 dev eth1
    ip link set dev eth1 mtu 1500
    #
    # Add static routes (usually IPv4 routes pointing to the first usable gateway)
    #
    echo Removing existing IPv4 routes
    while ip route del 172.16.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.0.0.0/24 2>/dev/null; do
      : ; done
    while ip route del 10.1.0.0/16 2>/dev/null; do
      : ; done
    while ip route del 10.2.0.0/24 2>/dev/null; do
      : ; done
    #
    #
    echo Adding direct static routes
    ip route add 172.16.0.0/16 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.0.0.0/24 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.1.0.0/16 via 172.16.1.4 dev eth1 protocol static
    ip route add 10.2.0.0/24 via 172.16.1.4 dev eth1 protocol static
    #
    # Print the final routing table
    ip route
ok: [r1] => 
  msg: |-
    initial configuration for r1
    =========================================
    hostname r1
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host h1 172.16.0.1
    ip host h2 172.16.1.2
    ip host r2 10.0.0.4 10.1.0.2 172.16.1.4
    !
    ip routing
    !
    !
    interface Loopback0
     ip address 10.0.0.3 255.255.255.255
    !
    interface GigabitEthernet0/0
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet0/1
     no switchport
     description r1 -> h1 [stub]
     ip address 172.16.0.3 255.255.255.0
     no shutdown
    !
    interface GigabitEthernet0/2
     no switchport
     description r1 -> r2
     ip address 10.1.0.1 255.255.255.252
     no shutdown
    !
    !
    line vty 0 4
     exec-timeout 0 0
    !
    no banner exec
    no banner login
    no banner incoming
ok: [r2] => 
  msg: |-
    initial configuration for r2
    =========================================
    hostname r2
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host h1 172.16.0.1
    ip host h2 172.16.1.2
    ip host r1 10.0.0.3 172.16.0.3 10.1.0.1
    !
    ip routing
    !
    !
    interface Loopback0
     ip address 10.0.0.4 255.255.255.255
    !
    interface GigabitEthernet0/0
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet0/1
     no switchport
     description r2 -> r1
     ip address 10.1.0.2 255.255.255.252
     no shutdown
    !
    interface GigabitEthernet0/2
     no switchport
     description r2 -> h2 [stub]
     ip address 172.16.1.4 255.255.255.0
     no shutdown
    !
    !
    line vty 0 4
     exec-timeout 0 0
    !
    no banner exec
    no banner login
    no banner incoming

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [r1]
ok: [r2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux-clab.yml for h1, h2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for r1, r2

TASK [Define script filename and determine whether to execute in netns] ********
ok: [h1]
ok: [h2]

TASK [Create a temporary file for the rendered script] *************************
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Create container setup script from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Copy script into running container at /tmp/config-h1_initial.sh] *********
skipping: [h1]
skipping: [h2]

TASK [Execute /tmp/config-h1_initial.sh to deploy initial config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
skipping: [h1]
skipping: [h2]

TASK [Container configuration for initial based on /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2 executed in netns] ***
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [Remove temporary file /tmp/h1_initial-ht5aa3dl.sh] ***********************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [ios_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/ios.j2] ***
changed: [r1]
changed: [r2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [r1]
ok: [r2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for r1, r2 => (item=eigrp)

TASK [Figure out whether to deploy the module eigrp on current device] *********
ok: [r1]
ok: [r2]

TASK [Find configuration template for eigrp] ***********************************
ok: [r1]
ok: [r2]

TASK [fail] ********************************************************************
skipping: [r1]
skipping: [r2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [r1] => 
  msg: |-
    eigrp configuration for r1
    =========================================
    router eigrp 2
     eigrp router-id 10.0.0.3
     network 10.0.0.3 0.0.0.0
     network 172.16.0.3 0.0.0.0
     network 10.1.0.1 0.0.0.0
     passive-interface GigabitEthernet0/1
     passive-interface GigabitEthernet0/0
    !
ok: [r2] => 
  msg: |-
    eigrp configuration for r2
    =========================================
    router eigrp 2
     eigrp router-id 10.0.0.4
     network 10.0.0.4 0.0.0.0
     network 10.1.0.2 0.0.0.0
     network 172.16.1.4 0.0.0.0
     passive-interface GigabitEthernet0/2
     passive-interface GigabitEthernet0/0
    !

TASK [Find configuration deployment deploy_script for eigrp] *******************
ok: [r1]
ok: [r2]

TASK [Deploy eigrp configuration] **********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for r1, r2

TASK [ios_config: deploying eigrp from /home/pipi/net101/tools/netsim/ansible/templates/eigrp/ios.j2] ***
changed: [r1]
changed: [r2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
h2                         : ok=16   changed=4    unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   
r1                         : ok=24   changed=3    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
r2                         : ok=24   changed=3    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   

